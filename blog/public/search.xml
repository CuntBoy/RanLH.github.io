<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021年终总结</title>
    <url>/2022/01/16/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="我起伏的2021年">我起伏的2021年:</h3>
<ul>
<li>2021年鸡毛蒜皮</li>
</ul>
<p>....</p>
<h3 id="我的关于2021年的大事件">我的关于2021年的大事件：</h3>
<h4 id="换了工作">1、换了工作</h4>
<h4 id="离开了那个度过了五年的城市">2、离开了那个度过了五年的城市</h4>
<h4 id="换了工作的城市">3、 换了工作的城市</h4>
<h4 id="告别了好友">4、告别了好友</h4>
<h4 id="见了阔怕已久的朋友">5、见了阔怕已久的朋友</h4>
<h4 id="又一次决定换工作">6、又一次决定换工作</h4>
<ul>
<li>面试了一个环境可能更好的工作</li>
</ul>
<h3 id="一我换工作这件事">一、我换工作这件事</h3>
<p>
先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。
</p>
<p>  离开我的上一个岗位的原因颇多,当然究其原因，我觉得<code>马老板</code>说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。
  新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。</p>
<h3 id="二离开济南">二、离开济南</h3>
<p>  我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。
  若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......
  我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以<code>成都</code>应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....
  然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。
  然后我来了<code>北京</code>.....,只能说，造化弄人。</p>
<h3 id="三告别好友">三、告别好友</h3>
<p>  我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的<code>二哥</code>还有<code>杨哥</code>,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。
  从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。</p>
<h3 id="四见了好久不见的朋友">四、见了好久不见的朋友</h3>
<p>  2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。
  有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。
  同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。</p>
<h3 id="五又一次决定换工作">五、又一次决定换工作</h3>
<p>  决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。
  又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！</p>
]]></content>
      <categories>
        <category>bun</category>
        <category>life</category>
      </categories>
      <tags>
        <tag>mylife</tag>
      </tags>
  </entry>
  <entry>
    <title>Bit manipulation</title>
    <url>/2022/07/29/Bit-manipulation/</url>
    <content><![CDATA[<h3 id="将二进制数某一位置0置1取反">将二进制数某一位置0，置1，取反</h3>
<ul>
<li><h2
id="用位运算可以解决我们的问题所以下面部分的代码就是一些位运算的简单应用">用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用</h2></li>
<li>函数实现</li>
</ul>
<h4 id="将不同进制数转为二进制非必须---我们只是为了显示结果">1.
将不同进制数转为二进制(非必须) - 我们只是为了显示结果</h4>
<ul>
<li>模拟人的计算过程 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showBinary</span><span class="params">(<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储具体对应的位的值 0 / 1</span></span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">int</span>, 32&gt; num;</span><br><span class="line">    num.fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>; <span class="comment">// 当前转换的Bit位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (d &amp; flag)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            num[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        flag = flag &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找第一个不是零的数 </span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> 1 </span></span><br><span class="line">    <span class="comment">// 此过程可以省略 做了个显示上的优化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; num.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (num[i] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                i == <span class="number">0</span> ? index = i : index = i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出转换结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = index; i &lt; num.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="某一位置为-0">某一位置为 0</h4>
<ul>
<li><code>&amp;</code>运算的应用 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 某一位设置为 0</span></span><br><span class="line"><span class="comment">/// d 你要修改的数 </span></span><br><span class="line"><span class="comment">/// bits 你要修改的位置</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">setBit2Zero</span><span class="params">(T d, <span class="keyword">int</span> bits)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BitManipulate::showBinary(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d));</span><br><span class="line">    <span class="comment">// 取反是一个只和取反位数以及之后所有位数相关的操作</span></span><br><span class="line">    <span class="comment">// 二进制的位数从0开始计算 所以需要 bits - 1 </span></span><br><span class="line">    <span class="comment">// 1 &lt;&lt; (bits(3) - 1) = 4 = 0100 </span></span><br><span class="line">    <span class="comment">// ~4 = 1011</span></span><br><span class="line">    <span class="comment">// &amp; 同为 1 则为 1 =&gt; 1011 &amp; (任意数字) 第三位等于 0</span></span><br><span class="line">    d = d &amp; (~(<span class="number">1</span> &lt;&lt; (bits - <span class="number">1</span>)));</span><br><span class="line">    BitManipulate::showBinary(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d));</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="某一位置为-1">某一位置为 1</h4>
<ul>
<li><code>|</code> 运算的应用, 只要有一个是1 结果都是1
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 某一位设置为 1</span></span><br><span class="line"><span class="comment">/// d 你要修改的数 </span></span><br><span class="line"><span class="comment">/// bits 你要修改的位置</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">setBit2One</span><span class="params">(T d, <span class="keyword">int</span> bits)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BitManipulate::showBinary(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d));</span><br><span class="line">    <span class="comment">// d(16) = 10000 bits = 3</span></span><br><span class="line">    <span class="comment">// 1 &lt;&lt; bits - 1 == 4 = 0100</span></span><br><span class="line">    <span class="comment">// d | 0100 = 10000 | 0100  = 10100 </span></span><br><span class="line">    d = d | (<span class="number">1</span> &lt;&lt; (bits - <span class="number">1</span>));</span><br><span class="line">    BitManipulate::showBinary(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d));</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="某一位置取反">某一位置取反</h4>
<ul>
<li><code>^</code> 异或运算的运用
<ul>
<li><code>^</code> 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1 其余的情况都是
0</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 某一位取反</span></span><br><span class="line"><span class="comment">/// d 你要修改的数 </span></span><br><span class="line"><span class="comment">/// bits 你要修改的位置</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">setBit2Negate</span><span class="params">(T d, <span class="keyword">int</span> bits)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BitManipulate::showBinary(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d));</span><br><span class="line">    <span class="comment">// 转换过程</span></span><br><span class="line">    <span class="comment">// ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 </span></span><br><span class="line">    <span class="comment">// d(15) == 1111 bits = 3</span></span><br><span class="line">    <span class="comment">// 1 &lt;&lt; bits - 1 == 0100</span></span><br><span class="line">    <span class="comment">// 1111</span></span><br><span class="line">    <span class="comment">// 0100 ^</span></span><br><span class="line">    <span class="comment">// 1011 </span></span><br><span class="line">    d = d ^ (<span class="number">1</span> &lt;&lt; (bits - <span class="number">1</span>));</span><br><span class="line">    BitManipulate::showBinary(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d));</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li>[1] <a
href="https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation"
title="Github">Github</a></li>
</ul>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Bucket Sort and Cardinality sort</title>
    <url>/2021/11/07/Bucket-Sort/</url>
    <content><![CDATA[<h3 id="桶排序">桶排序</h3>
<ul>
<li><code>T(N,M) = O(M+N)</code>,M 个桶的情况
<ul>
<li>N &gt;&gt; M的时候是相对教优秀的算法</li>
<li>M &gt;&gt; N ???</li>
</ul></li>
<li>假设我们有N = 10个整数，N ∈ [0,999],(此时 M =
1000)；我们便不能在线性时间下完成排序。</li>
</ul>
<h3
id="基数排序按照数字的进制排序10">基数排序：按照数字的进制排序（10）</h3>
<ul>
<li>example:</li>
<li>input: 64 8 216 512 27 729 0 1 343 125
<ul>
<li>使用次位优先(Least Significant Digit)</li>
<li>先按照个位数将元素放到对应的桶Pass1</li>
<li>按照十位放到对应的桶中</li>
</ul></li>
</ul>
<table>
<colgroup>
<col style="width: 2%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 10%" />
<col style="width: 9%" />
<col style="width: 10%" />
<col style="width: 10%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 10%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Bucket</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">2</th>
<th style="text-align: center;">3</th>
<th style="text-align: center;">4</th>
<th style="text-align: center;">5</th>
<th>6</th>
<th style="text-align: center;">7</th>
<th style="text-align: center;">8</th>
<th style="text-align: center;">9</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Pass 1(个位)</td>
<td style="text-align: center;"><font color=red>0</font></td>
<td style="text-align: center;"><font color=red>1</font></td>
<td style="text-align: center;">51<font color=red>2</font></td>
<td style="text-align: center;">34<font color=red>3</font></td>
<td style="text-align: center;">6<font color=red>4</font></td>
<td style="text-align: center;">12<font color=red>5</font></td>
<td>21<font color=red>6</font></td>
<td style="text-align: center;">2<font color=red>7</font></td>
<td style="text-align: center;"><font color=red>8</font></td>
<td style="text-align: center;">72<font color=red>9</font></td>
</tr>
<tr class="even">
<td style="text-align: center;">Pass 2(十位)</td>
<td style="text-align: center;">0<br>1<br>8</td>
<td style="text-align: center;">512<br>216</td>
<td style="text-align: center;">125<br>27<br>729</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">343</td>
<td style="text-align: center;"></td>
<td>64<br></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">Pass 3 (百位)</td>
<td style="text-align: center;">0<br/>1<br/>8<br/>27<br/>64</td>
<td style="text-align: center;">125</td>
<td style="text-align: center;">216</td>
<td style="text-align: center;">343</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">512</td>
<td></td>
<td style="text-align: center;">729</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<ul>
<li>最终的顺序，分别从每个桶中顺序读取即可。</li>
</ul>
<h4 id="时间复杂度-t-opnb">时间复杂度： <code>T= O(P(N+B))</code></h4>
<ul>
<li>较好情况：取决于基数-多少个桶 (B &lt;&lt;
N时差不多是一个线性复杂度的算法)</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Bug奇遇记-uint16_t</title>
    <url>/2021/03/19/Bug%E5%A5%87%E9%81%87%E8%AE%B0-uint16-t/</url>
    <content><![CDATA[<h3 id="uint16_t">uint16_t</h3>
<ul>
<li>标准定义中：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>  <span class="keyword">uint16_t</span>; <span class="comment">// max == _UI16_MAX 0xffffu </span></span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png"
title="uint16" alt="uint16_t" />
<figcaption aria-hidden="true">uint16_t</figcaption>
</figure>
<h4 id="问题">问题：</h4>
<ul>
<li><font color=red>这是一个粗心的问题</font></li>
</ul>
<p>在我正在实现的功能中有一个数据遍历的部分，我使用了<code>uint16_t</code>类型作为索引的类型，但是<code>uint16_t</code>数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！</p>
<hr />
<h3 id="正确的结果展示">正确的结果展示：</h3>
<figure>
<img
src="https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png"
title="result" alt="lum_2" />
<figcaption aria-hidden="true">lum_2</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png"
title="Result" alt="right result" />
<figcaption aria-hidden="true">right result</figcaption>
</figure>
]]></content>
      <categories>
        <category>works</category>
        <category>GF</category>
        <category>data type</category>
        <category>bugs</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>osg</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamic drawing of osg vertex buffer objects</title>
    <url>/2021/11/07/Dynamic-drawing-of-osg-vertex-buffer-objects/</url>
    <content><![CDATA[<h3
id="dynamic-drawing-of-osg-vertex-buffer-objects"><code>Dynamic drawing of osg vertex buffer objects</code></h3>
<ul>
<li><p>使用<code>显示列表</code>绘制图形在速度上并没有<code>vertex buffer object</code>那么快，所以在更高的<code>osg</code>的版本中，推荐使用<code>vertex buffer object</code></p></li>
<li><p>在使用<code>vertex buffer object</code>的情况下，动态更新绘制的数据</p></li>
<li><p>代码实现： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先- 创建完成 osg::Geometry</span></span><br><span class="line">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class="keyword">new</span> osg::Geometry;</span><br><span class="line"><span class="comment">// 关闭显示列表 并使用vbo(vertex buffer object)</span></span><br><span class="line">geom-&gt;setUseDisplayLists(<span class="literal">false</span>);</span><br><span class="line">geom-&gt;setUseVertexBufferObject(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 修改几何体的绘制数据的类型 </span></span><br><span class="line">geom-&gt;setDataVariance(osg::Object::DataVariance::DYNAMIC);</span><br><span class="line"><span class="comment">//================================================================</span></span><br><span class="line"><span class="comment">// 更新操作 </span></span><br><span class="line"><span class="comment">// 先获取顶点数组 </span></span><br><span class="line"><span class="keyword">auto</span> varray = <span class="keyword">dynamic_cast</span>&lt;osg::Vec3Array&gt;(geom-&gt;getVertexArray());</span><br><span class="line"><span class="comment">// 需改顶点数据</span></span><br><span class="line"><span class="comment">// ---------------------你可以想数组中插入顶点-----------------------------------</span></span><br><span class="line"><span class="comment">// 调用 dirty函数，告诉osg::Geometry你修改了顶点</span></span><br><span class="line">varray-&gt;dirty();</span><br><span class="line"><span class="comment">// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))</span></span><br><span class="line"><span class="comment">// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) </span></span><br><span class="line"><span class="keyword">auto</span> pri_set = geom-&gt;getPrimitiveSet(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// void  setNumInstances (int n) </span></span><br><span class="line">pri_set-&gt;setNumInstances(修改后的顶点个数)；</span><br><span class="line">pri_set-&gt;dirty();</span><br><span class="line"><span class="comment">// 更新几何体</span></span><br><span class="line">geom-&gt;dirty();</span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>works</category>
        <category>HJ</category>
        <category>OSG</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>osg</tag>
      </tags>
  </entry>
  <entry>
    <title>Games202-ShadowMap</title>
    <url>/2021/12/13/Games202-ShadowMap/</url>
    <content><![CDATA[<h2 id="shadow-map">Shadow Map</h2>
<ul>
<li>记录一下关于<code>Games202</code>的学习</li>
</ul>
<h4 id="shadow-map-1">shadow map</h4>
<ul>
<li><p>实现：通过比较当前的<code>point</code>,在光源空间的的深度与深度图中记录的深度的大小，决定当前的<code>point</code>是否在阴影中</p></li>
<li><p>如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：</p>
<p><img
src="https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png" /></p></li>
</ul>
<p>上图来自<code>Games202</code>的课件：</p>
<ul>
<li><p>阴影图<code>shadow map</code>记录了相机在光照位置下的最近最近深度。</p></li>
<li><p>关于计算当前vertex point
是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-<code>lightPVM</code>)，用于将顶点转换到光空间。</p></li>
<li><p>在<code>Games202</code>的作业1中，我们需要使用提供的matrix的接口处理矩阵。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mat.translate() <span class="comment">// 设置矩阵的移动 </span></span><br><span class="line">mat4.scale      <span class="comment">// 设置矩阵的缩放</span></span><br><span class="line"></span><br><span class="line">mat4.lookAt(); <span class="comment">// 生成的视图矩阵</span></span><br><span class="line">mat4.ortho();  <span class="comment">// 平行投影</span></span><br><span class="line"></span><br><span class="line">mat4.multiply(); <span class="comment">// 矩阵的乘法</span></span><br></pre></td></tr></table></figure>
<p><a
href="https://www.icode9.com/content-4-956693.html">gl-matrix文档</a></p></li>
<li><p>深度比较：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">sampler2D</span> shadowMap;   <span class="comment">// 你的深度图</span></span><br><span class="line"><span class="type">mat4</span> lightPVM;         <span class="comment">// 光空间的变换矩阵</span></span><br><span class="line"><span class="type">vec4</span> vertexPosition;   <span class="comment">// 渲染的顶点坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1： 将顶点变换到光空间 </span></span><br><span class="line"><span class="type">vec4</span> vertex_light = lightPVM * vertexPosition;</span><br><span class="line"><span class="comment">// 2: 透视除法将顶点变换到NDC坐标</span></span><br><span class="line"><span class="type">vec3</span> ndc_pos = vertex_light.xyz / vertex_light.w;</span><br><span class="line"><span class="comment">// 3: 将深度变到 0-1</span></span><br><span class="line">ndc_pos = ndc_pos * <span class="number">0.5</span> + <span class="number">0.5</span>；</span><br><span class="line"><span class="comment">// 4：获取深度图中记录的深度</span></span><br><span class="line"><span class="comment">// 5: 获取当前点在光空间下的实际深度</span></span><br><span class="line"><span class="comment">// 6: 比较两个深度的大小    </span></span><br><span class="line"><span class="comment">// 7：返回当前点是否在阴影中    </span></span><br></pre></td></tr></table></figure></li>
<li><p>最终效果</p></li>
</ul>
<p><img
src="https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png" /></p>
]]></content>
      <categories>
        <category>Computer Graph</category>
      </categories>
      <tags>
        <tag>Games202</tag>
        <tag>Shadow</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令(上)</title>
    <url>/2022/07/24/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E4%B8%8A/</url>
    <content><![CDATA[<h1 id="git常用命令">Git常用命令</h1>
<h3 id="install-git"><code>install Git</code></h3>
<ul>
<li>Git -- <a href="https://git-scm.com/">官方网站</a></li>
</ul>
<h3 id="常用命令">常用命令</h3>
<ul>
<li><p>安装完成Git之后的操作 - 指定UserName &amp; Email</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name  &quot;Your Git UserName&quot;</span><br><span class="line">git config --global user.email &quot;Your Email Address&quot;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>一般时候在你安装完成之后需要做一下这个的配置。</li>
</ul></li>
<li><p>生成密钥</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen.exe -t rsa</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>命令提示 <img
src="https://raw.githubusercontent.com/Ranbun/images/main/blog/git/ssh-genkey.png"
alt="Image" /></p></li>
<li><p>然后将你的公钥添加为你所使用的远程管理平台对应SSH Key</p></li>
</ul></li>
<li><p>创建本地版本库</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir repositoryDir  &#x2F;&#x2F; 创建本地文件夹</span><br><span class="line">cd    repositoryDir  &#x2F;&#x2F; 进入到文件夹</span><br><span class="line">git   init           &#x2F;&#x2F; 初始化为本地仓库 创建.git目录</span><br></pre></td></tr></table></figure></p></li>
<li><p>添加文件到本地暂存区&amp;提交文件到本地</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add &quot;fileName&quot;       &#x2F;&#x2F; 提交具体的文件 </span><br><span class="line">git add .                &#x2F;&#x2F; 提交所有修改文件</span><br><span class="line">git commit -m  &quot;备注信息&quot; &#x2F;&#x2F; 提交暂存区文件到本地</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>git commit</code> 命令详解 <img
src="https://raw.githubusercontent.com/Ranbun/images/main/blog/git/git-commit.png"
alt="git commit" /></li>
</ul></li>
<li><p>版本控制</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log                      &#x2F;&#x2F;查看提交历史记录，从最近到最远，可以看到3次</span><br><span class="line">git log --pretty&#x3D;oneline     &#x2F;&#x2F;加参数，简洁查看</span><br><span class="line">git reflog                   &#x2F;&#x2F;查看每一次修改历史</span><br><span class="line">cat &quot;fileName&quot;                &#x2F;&#x2F;查看文件内容 -- linux 命令</span><br><span class="line">git status                   &#x2F;&#x2F;查看工作区中文件当前状态</span><br><span class="line">git reset --hard HEAD^(HEAD~100)(commit_id)  &#x2F;&#x2F;回退版本</span><br><span class="line">git checkout -- &quot;fileName&quot;         &#x2F;&#x2F;丢弃工作区的修改，即撤销修改</span><br><span class="line">git reset HEAD &quot;fileName&quot;          &#x2F;&#x2F;丢弃暂存区的修改（若已提交，则回退）</span><br></pre></td></tr></table></figure></p></li>
<li><p>删除文件</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm &quot;filename&quot;   &#x2F;&#x2F; 删除单个文件 </span><br><span class="line">rm -rf *.*      &#x2F;&#x2F; 强制递归删除所有文件</span><br><span class="line">git rm &quot;filename&quot;  &#x2F;&#x2F; 直接删除</span><br><span class="line">&#x2F;&#x2F; 恢复删除的文件</span><br><span class="line">git checkout -- &quot;filename&quot;</span><br></pre></td></tr></table></figure></p></li>
<li><p>推送到远程的相关命令</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;前面设置的Email&quot;     &#x2F;&#x2F;创建SSH Key 也可以不指定-C与邮件地址</span><br><span class="line">git remote add origin &quot;git的远程仓库地址&quot;  &#x2F;&#x2F;关联远程仓库-源</span><br><span class="line">git push -u origin main                  &#x2F;&#x2F;将本地内容推送到远程-第一次强制推送</span><br><span class="line">git push origin main                     &#x2F;&#x2F;将本地内容推送到远程</span><br><span class="line">git remote -v                            &#x2F;&#x2F;查看远程源信息</span><br><span class="line">git remote rm origin                     &#x2F;&#x2F;删除远程源</span><br><span class="line">git clone &quot;远程仓库地址可以是https的也可以是SSH(此时需要配置密钥)&quot;  &#x2F;&#x2F;克隆远程仓库</span><br><span class="line">git remote                               &#x2F;&#x2F;查看远程库的信息</span><br><span class="line">git remote -v                            &#x2F;&#x2F;查看远程库的详细信</span><br></pre></td></tr></table></figure></p></li>
<li><p>分支管理</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 老版本的 git命令 </span><br><span class="line">git checkout -b main        &#x2F;&#x2F;创建并切换到分支dev</span><br><span class="line">&#x3D;&#x3D; 如下操作</span><br><span class="line">git branch   feature        &#x2F;&#x2F;创建分支main</span><br><span class="line">git checkout feature        &#x2F;&#x2F;切换到分支feature</span><br><span class="line">git checkout origin&#x2F;main    &#x2F;&#x2F;拉取远程分支并切换</span><br><span class="line">&#x2F;&#x2F; 版本比较新一定的分支管理命令 </span><br><span class="line">git switch -c feature       &#x2F;&#x2F;创建分支feature并切换</span><br><span class="line">git switch main             &#x2F;&#x2F;直接切换到分支main</span><br><span class="line">&#x2F;&#x2F; -----------------------------------------------------------------------</span><br><span class="line">git branch                  &#x2F;&#x2F;查看当前分支</span><br><span class="line">git merge  feature          &#x2F;&#x2F; 合并分支feature到当前分支(记得合并前拉取一下)</span><br><span class="line">git branch -d dev           &#x2F;&#x2F; 删除dev分支 -d 强制删除</span><br></pre></td></tr></table></figure></p></li>
<li><p>推送到远程</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin main                               &#x2F;&#x2F;推送分支到远程</span><br><span class="line">git checkout -b feature origin&#x2F;feature                     &#x2F;&#x2F;创建远程origin的dev分支到本地</span><br><span class="line">git pull                                           &#x2F;&#x2F;拉取远程分支内容</span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;main main        &#x2F;&#x2F;指定本地与远程dev的链接</span><br><span class="line">&#x2F;&#x2F; 另一种合并操作，相比merge不会产生一次额外的提交</span><br><span class="line">git rebase                                         &#x2F;&#x2F;把本地未push的分叉提交历史整理成直线</span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>works</category>
        <category>SCU</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Heap</title>
    <url>/2021/10/24/Heap/</url>
    <content><![CDATA[<h2 id="堆">堆</h2>
<h4
id="优先队列pripority-queue">优先队列(<code>Pripority Queue</code>)</h4>
<ul>
<li>特殊的
"队列",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。</li>
<li>使用数组构建：
<ul>
<li>插入：      总是插入数组的尾部<code>T = O(1)</code></li>
<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>
     从数组中删除元素，需要将元素移动位置：<code>T=O(N)</code></li>
</ul></li>
<li>链表构建：
<ul>
<li>插入：      总是插入链表的头部<code>T = O(1)</code></li>
<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>
     删除元素：<code>T=O(1)</code></li>
</ul></li>
<li>有序数组：
<ul>
<li>插入：     找到合适的位置:<code>T = O(N) or O(log2(N))</code>
    移动元素并插入<code>T=O(N)</code></li>
<li>删除：     删除最后一个元素：<code>T=O(1)</code></li>
</ul></li>
<li>有序链表：
<ul>
<li>插入：     找到合适的位置:<code>T = O(N)</code>
    插入<code>T=O(1)</code></li>
<li>删除：     删除最后一个元素(或者首元素)：<code>T=O(1)</code></li>
</ul></li>
</ul>
<h4 id="最大堆---完全二叉树大顶堆">最大堆 - 完全二叉树（大顶堆）</h4>
<ul>
<li>根元素是当前树中最大的</li>
</ul>
<h5 id="堆的创建----创建空堆">1、堆的创建 -- 创建空堆</h5>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> strut HeapStruct * MaxHeap;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HeadStruct</span>&#123;</span></span><br><span class="line">    ElementType * Elements;   <span class="comment">// 存储元素的数组 </span></span><br><span class="line">    <span class="keyword">int</span> Size;                 <span class="comment">// 当前元素个数</span></span><br><span class="line">    <span class="keyword">int</span> Capacity;             <span class="comment">// 堆的最大容量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建堆</span></span><br><span class="line"><span class="function">MaxHeap <span class="title">create</span><span class="params">(<span class="keyword">int</span> MaxSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MaxHeap H = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct HeapStruct));</span><br><span class="line">    H-&gt;Elements = <span class="built_in">malloc</span>((MaxSize+<span class="number">1</span>) * <span class="keyword">sizeof</span>(ElementType));</span><br><span class="line">    H-&gt;size = <span class="number">0</span>;</span><br><span class="line">    H-&gt;Capactity = MaxSize;</span><br><span class="line">    H-&gt;Elements[<span class="number">0</span>] = MaxData;  <span class="comment">// O号位置存储的是哨兵 不是个元素 </span></span><br><span class="line">	<span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="堆的插入">2，堆的插入</h5>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(MaxHeap H,ElementType item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(isFull(H))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;最大堆已经满了&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i = ++H-&gt;Size;  <span class="comment">// i等于 插入元素后的堆中的最后一个元素的下标</span></span><br><span class="line">    <span class="comment">// 交换节点的位置 </span></span><br><span class="line">    <span class="keyword">for</span>(;H-&gt;Elements[i/<span class="number">2</span>] &lt; item; i = i/<span class="number">2</span>) <span class="comment">// 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值</span></span><br><span class="line">    &#123;</span><br><span class="line">        H-&gt;Elements[i] = H-&gt;Elements[i/<span class="number">2</span>];  <span class="comment">// 覆盖结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    H-&gt;Elements[i] = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="堆的删除">3、堆的删除</h5>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取出根节点</span></span><br><span class="line"><span class="comment">// 将最后一个元素放到根节点(保留树的特性)</span></span><br><span class="line"><span class="comment">// 修改使其具有最大（最小）堆的特性</span></span><br><span class="line"></span><br><span class="line"><span class="function">EleementType <span class="title">deleteMax</span><span class="params">(MaxHeap H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> parent,child;</span><br><span class="line">    ElementType MaxChild,temp;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(H))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;堆为空&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    MaxItem = H-&gt;Elements[<span class="number">1</span>]; <span class="comment">// 取出根的最大值 </span></span><br><span class="line">    <span class="comment">// 取出堆中最后一个元素， 并将Size - 1</span></span><br><span class="line">    temp = H-&gt;Elements[H-&gt;Size --];</span><br><span class="line">    <span class="comment">// 调整数据的大小关系 </span></span><br><span class="line">    <span class="keyword">for</span>(parent = <span class="number">1</span>; parent*<span class="number">2</span> &lt; H-&gt;Size;parent = child)  <span class="comment">// 是不是存在左孩子 </span></span><br><span class="line">    &#123;</span><br><span class="line">        child = parent * <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 比较左右孩子的大小</span></span><br><span class="line">        <span class="keyword">if</span>((child != H-&gt;Size)) &amp;&amp; (H-&gt;Elements[child] &lt; H-&gt;Elements[child+<span class="number">1</span>]))  <span class="comment">// 当前child不是最后一个元素 </span></span><br><span class="line">        &#123;</span><br><span class="line">            child++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不满足交换条件 - 结束循环</span></span><br><span class="line">        <span class="keyword">if</span>(temp &gt; H-&gt;Elements[child])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 交换元素 </span></span><br><span class="line">            H-&gt;Elements[parent] = H-&gt;Elements[child];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可</span></span><br><span class="line">    H-&gt;Elements[parent] = temp;</span><br><span class="line">    <span class="keyword">return</span> MaxItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="最大堆的建立">4、最大堆的建立</h5>
<p>  建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中</p>
<p>  1、通过插入操作，将N个元素一个一个的插入到空堆中去：<code>T = O(NlogN)</code></p>
<p>  2、线性时间复杂度下建立最大堆</p>
<p>​   1、将元素安顺序输入，先构建完全二叉树（下标为1开始）</p>
<p>   2、调整元素位置，使其满足最大堆</p>
<p><a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style="color:red">Heap
C++ 实现  </a></p>
<h4 id="最小堆--完全二叉树小顶堆">最小堆- 完全二叉树（小顶堆）</h4>
<ul>
<li>可以参照最大堆写</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi KeyWord Sort</title>
    <url>/2021/11/07/Multi-KeyWord-Sort/</url>
    <content><![CDATA[<h3 id="多关键字排序">多关键字排序</h3>
<ul>
<li><p>扑克牌的例子</p></li>
<li><p>一副扑克牌是按照两种顺序排的：</p>
<ul>
<li>K0,花色：梅花 &lt; 方块 &lt; 红桃 &lt; 黑桃</li>
<li>k1，面值: 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10
&lt; J &lt; Q &lt; K &lt; A</li>
</ul></li>
<li><p>主位优先：（Most Significant Digit）</p>
<ul>
<li>先用四个花色建桶，然后使用面值建桶</li>
</ul></li>
</ul>
<h4 id="一个更好的方法">一个更好的方法：</h4>
<ul>
<li><p>依旧使用次位优先：</p>
<ul>
<li><p>先使用面值建桶</p></li>
<li><p>然后按照大小将结果合并，使用花色建桶。</p></li>
<li><p>最终的输出结果便是有序的</p></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG-HUD</title>
    <url>/2021/07/26/OSG-HUD/</url>
    <content><![CDATA[<h1 id="osg-hud">OSG-HUD</h1>
<ul>
<li><p>
"HUD"在渲染的场景中算是比较常见的存在:
游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...
</p></li>
</ul>
<p><b style="color:red">如何创建HUD ？</b></p>
<p>
本质上说，HUD就是一个相机(
在<code>OSG</code>中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行
</p>
<p><b style="color:red">实现要点，如下：</b></p>
<ul>
<li>关闭节点的光照，保证整个视口显示的场景的亮度是一样的。</li>
<li>关闭深度测试</li>
<li>调整渲染的顺序为最后渲染，让<code>HUD</code>显示在整个场景的最前方</li>
<li>设置参考帧为绝对参考帧</li>
<li>设置变换矩阵,不受父节点的影响</li>
<li>设置投影矩阵(平行投影或者透视),设置视口的大小。</li>
</ul>
<h2 id="create-hud">Create HUD</h2>
<h3 id="创建相机节点">1、创建相机节点</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">osg::ref_ptr&lt;osg::Camera&gt; hud_camera = <span class="keyword">new</span> osg::Camera;   <span class="comment">// 创建相机的节点</span></span><br><span class="line">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class="keyword">new</span> osg::Geometry;      <span class="comment">// 创建绘制的节点(也可以是文字)</span></span><br></pre></td></tr></table></figure>
<h3 id="设置投影矩阵">2、设置投影矩阵</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hud_camera-&gt;setProjectionMatrixAsOrtho2D(<span class="number">-3</span>, <span class="number">4</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1.0</span>, <span class="number">100</span>);  <span class="comment">// 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小</span></span><br></pre></td></tr></table></figure>
<h3 id="设置视口大小viewport">3、设置视口大小(ViewPort)</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// void setViewport(osg::Viewport* viewport);</span></span><br><span class="line"><span class="comment">// void setViewport(int x,int y,int width,int height);</span></span><br><span class="line">hud_camera-&gt;setviewport();  <span class="comment">// 两种方式都是可以的 </span></span><br></pre></td></tr></table></figure>
<h3 id="设置渲染的顺序">4、设置渲染的顺序</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hud_camera-&gt;setRenderOrder(osg::Camera::POST_RENDER);</span><br></pre></td></tr></table></figure>
<h3 id="设置参考帧">5、设置参考帧</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hud_camera-&gt;setReferenceFrame(osg::Transform::ABSOLUTE_RF);</span><br></pre></td></tr></table></figure>
<h3 id="设置不受父节点的影响">6、设置不受父节点的影响</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hud_camera-&gt;setViewMatrix(osg::Matrix::identity());</span><br></pre></td></tr></table></figure>
<h3 id="设置不获取焦点">7、设置不获取焦点</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hud_camera-&gt;setAllowEventFocus(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="设置节点的更新回调">8、设置节点的更新回调</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// void setUpdateCallback(Callback* nc);</span></span><br><span class="line"><span class="comment">// 需要重写一个节点的更新回调 修改节点的视图矩阵 </span></span><br><span class="line"><span class="comment">// 设置相机的三个参数  </span></span><br><span class="line"><span class="comment">// 视点 相机的位置 相机的向上方向</span></span><br><span class="line">hud_camera-&gt;setUpdateCallback();</span><br></pre></td></tr></table></figure>
<h2 id="挂载节点">挂载节点</h2>
<h3 id="将前面创建的几何节点挂载到-相机上">1、将前面创建的几何节点挂载到
相机上</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">osg::ref_ptr&lt;osg::Geode&gt; node = <span class="keyword">new</span> osg::Geode;</span><br><span class="line">node-&gt;addChild(geom.get());</span><br><span class="line">hud_camera-&gt;addChild(node.get());</span><br></pre></td></tr></table></figure>
<h3 id="设置节点的属性">2、设置节点的属性</h3>
<ul>
<li>关闭光照 深度测试 &amp; 打开混溶</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> states = node-&gt;getOrCreateStateSet();</span><br><span class="line">states-&gt;setMode(GL_LIGHTING, osg::StateAttribute::ON);   <span class="comment">//关闭灯光</span></span><br><span class="line">states-&gt;setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);<span class="comment">//关闭深度测试</span></span><br><span class="line">states-&gt;setMode(GL_BLEND, osg::StateAttribute::ON);  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>works</category>
        <category>GF</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>osg</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG踩坑记-模型共享&amp;模型颜色修改</title>
    <url>/2021/03/20/OSG%E8%B8%A9%E5%9D%91%E8%AE%B0-%E6%A8%A1%E5%9E%8B%E5%85%B1%E4%BA%AB-%E6%A8%A1%E5%9E%8B%E9%A2%9C%E8%89%B2%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h3 id="简单概述">简单概述</h3>
<p>在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。</p>
<h3 id="伪代码">伪代码：</h3>
<h4 id="读入模型">1、读入模型</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。</span></span><br><span class="line"><span class="comment">// 使用osg自带读取模型的函数读取模型</span></span><br><span class="line"><span class="comment">// 推荐使用 osg 的智能指针</span></span><br><span class="line"><span class="comment">// 此处使用一个 内嵌的几何体 代替模型 </span></span><br><span class="line"></span><br><span class="line">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class="keyword">new</span> osg::Geometry; </span><br><span class="line"><span class="comment">// osg 的智能指针采用引用计数的方式决定当前对象是否释放</span></span><br></pre></td></tr></table></figure>
<h4
id="计算对模型的旋转缩放平移的操作矩阵">2、计算对模型的旋转、缩放、平移的操作矩阵</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// osg 有专门用户模型操作的类  osg::MatrixTransform </span></span><br><span class="line"><span class="comment">// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 </span></span><br><span class="line">osg::ref_ptr&lt;osg::MatrixTransform&gt; trans = <span class="keyword">new</span> osg::MatrixTransform;</span><br><span class="line"><span class="comment">// 对于模型的操作，有PVM矩阵的意思 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建旋转矩阵 </span></span><br><span class="line">osg::Matrix matrix_rotate;</span><br><span class="line"><span class="comment">// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  </span></span><br><span class="line">matrix_rotate.makeRotate(osg::vec3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>),osg::vec3(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>));  <span class="comment">// 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向</span></span><br><span class="line"><span class="comment">// 你也可以直接选择使用</span></span><br><span class="line">osg::Matrix::rotate(osg::Vec3(),osg::Vec3()); <span class="comment">// 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ==============================================================================================</span></span><br><span class="line"><span class="comment">// 也可以直接 设置最终的变换矩阵 </span></span><br><span class="line">trans-&gt;setMatrix(matrix_rotate * osg::Martix::scale(<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>) * osg::translate(osg::Vec3()));</span><br><span class="line"><span class="comment">// trans 已经存储了 我们对于模型的操作 </span></span><br></pre></td></tr></table></figure>
<h4 id="对trans节点设置材料等属性">3、对trans节点设置材料等属性</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建材质对象</span></span><br><span class="line">osg::Material* mat = <span class="keyword">new</span> osg::Material();</span><br><span class="line">mat-&gt;setColorMode(osg::Material::ColorMode::DIFFUSE);   <span class="comment">// 设置绘制颜色的模式 </span></span><br><span class="line">mat-&gt;setDiffuse(osg::Material::FRONT, osg::Vec4());      <span class="comment">// 设置此种模式下的颜色 </span></span><br><span class="line"></span><br><span class="line">trans-&gt;getOrCreateStateSet()-&gt;setAttribute(mat);        <span class="comment">// 将材质设置给 节点 </span></span><br></pre></td></tr></table></figure>
<h4 id="将对象作为节点添加">4、将对象作为节点添加</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">trans.addchild(geom.get());</span><br></pre></td></tr></table></figure>
<h4
id="将操作节点添加到绘制的根节点或者是其他的叶节点">5、将操作节点添加到绘制的根节点或者是其他的叶节点</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>works</category>
        <category>GF</category>
        <category>OSG</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>osg</tag>
      </tags>
  </entry>
  <entry>
    <title>OSG踩坑记-默认光源</title>
    <url>/2021/04/04/OSG%E8%B8%A9%E5%9D%91%E8%AE%B0-%E9%BB%98%E8%AE%A4%E5%85%89%E6%BA%90/</url>
    <content><![CDATA[<h3 id="osg-viewer默认光源">OSG-Viewer默认光源</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    <span class="comment">// 法线随着模型大小变化而变化。</span></span><br><span class="line">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); <span class="comment">// 关闭节点光源 并遵从父节点的光照设置</span></span><br></pre></td></tr></table></figure>
<hr />
<h5
id="不指定法向----仍然可以看到-光照效果-但是无法看到明暗变化"><code>不指定法向</code>
-- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化
</font></h5>
<h3 id="viewer-默认光源的使用">Viewer 默认光源的使用</h3>
<h4 id="设置光照的相关的信息">1、设置光照的相关的信息</h4>
<ul>
<li><p><code>osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配</code></p></li>
<li><p>你需要设置的信息包括:
ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。</p></li>
</ul>
<blockquote>
<p>设置光照 -- <font color=Green>衰减公式</font> <span
class="math display">\[
F = \frac{1}{(k_c + k_l*d + k_q*d^2)}
\]</span></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取缺省的光照</span></span><br><span class="line">osg::Light *light = viewer-&gt;getLight(); <span class="comment">// 从当前的查看器 获取光照设置 </span></span><br><span class="line">light-&gt;setAmbient(osg::Vec4(<span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">1.0</span>));   <span class="comment">// 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);</span></span><br><span class="line">light-&gt;setDiffuse(osg::Vec4(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.0</span>));   <span class="comment">// 漫反射   直接来源于光源</span></span><br><span class="line">light-&gt;setSpecular(osg::Vec4(<span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">1.0</span>));  <span class="comment">// specular   高光 此处给的很低  </span></span><br><span class="line"><span class="comment">// 由于此处我们使用的是平行光</span></span><br><span class="line"><span class="function">osg::Vec4 <span class="title">lightpos</span><span class="params">(x, y, z, <span class="number">0.0f</span>)</span></span>;   <span class="comment">// 记住: 平行光的位置的最后一个分量必须是 0 </span></span><br><span class="line">light-&gt;setPosition(lightpos);        <span class="comment">// 设置光照位置 </span></span><br><span class="line"><span class="comment">// 光照方向设置</span></span><br><span class="line"><span class="comment">// 需要用到高度角和方位角 -- 计算一个你需要方向 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减</span></span><br><span class="line">light-&gt;setConstantAttenuation(<span class="number">1.0f</span>);</span><br><span class="line">light-&gt;setLinearAttenuation(<span class="number">0.0f</span>);</span><br><span class="line">light-&gt;setQuadraticAttenuation(<span class="number">0.f</span>);</span><br></pre></td></tr></table></figure>
<p><font color=red> 产生平行光，位置分量的第四分量必须是0 </font></p>
<h4 id="对节点设置好材料属性">2、对节点设置好材料属性</h4>
<ul>
<li>材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。</li>
</ul>
]]></content>
      <categories>
        <category>works</category>
        <category>GF</category>
        <category>OSG</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>osg</tag>
      </tags>
  </entry>
  <entry>
    <title>Physical Sort</title>
    <url>/2021/11/07/Physical-Sort/</url>
    <content><![CDATA[<h3 id="物理排序">物理排序</h3>
<ul>
<li>我们从上一节的知识开始
<a href="/2021/11/07/Table-Sort/" title="表排序">表排序</a>，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求</li>
<li>排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成</li>
</ul>
<table style="width:100%;">
<colgroup>
<col style="width: 1%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 10%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">A</th>
<th style="text-align: center;">A[0]</th>
<th style="text-align: center;">A[1]</th>
<th style="text-align: center;">A[2]</th>
<th style="text-align: center;">A[3]</th>
<th style="text-align: center;">A[4]</th>
<th style="text-align: center;">A[5]</th>
<th style="text-align: center;">A[6]</th>
<th style="text-align: center;">A[7]</th>
<th style="text-align: center;">A[8]</th>
<th style="text-align: center;">A[9]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Key</td>
<td style="text-align: center;">f</td>
<td style="text-align: center;">d</td>
<td style="text-align: center;">c</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">g</td>
<td style="text-align: center;">b</td>
<td style="text-align: center;">h</td>
<td style="text-align: center;">e</td>
<td style="text-align: center;">i</td>
<td style="text-align: center;">u</td>
</tr>
<tr class="even">
<td style="text-align: center;">table</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;">环</td>
<td style="text-align: center;"><font color=red>3</font></td>
<td style="text-align: center;"><font color=red>5</font></td>
<td style="text-align: center;"><font color=yellow>2</font></td>
<td style="text-align: center;"><font color=red>1</font></td>
<td style="text-align: center;"><font color=blue>7</font></td>
<td style="text-align: center;"><font color=red>0</font></td>
<td style="text-align: center;"><font color=blue>4</font></td>
<td style="text-align: center;"><font color=blue>6</font></td>
<td style="text-align: center;"><font color=pink>8</font></td>
<td style="text-align: center;"><font color="#32FF00">9</font></td>
</tr>
</tbody>
</table>
<ul>
<li><p>我们从<code>table[0]= 3</code>
开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// table[0] -&gt; table[3] -&gt; table[1] -&gt; table[0]</span></span><br><span class="line"><span class="comment">// 上述序列构成了一个环</span></span><br></pre></td></tr></table></figure></li>
<li><p>排序，按环处理：</p>
<ul>
<li><p>首先，取一个临时变量<code>temp</code>随机存储，环中的任意一个元素，以A[0]为例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">temp  = f;  <span class="comment">// 此时A[0] 为空 </span></span><br></pre></td></tr></table></figure></li>
<li><p>将table中的元素放到<code>A[0],A[0] = A[table[0]];</code></p></li>
<li><table style="width:100%;">
<colgroup>
<col style="width: 5%" />
<col style="width: 18%" />
<col style="width: 18%" />
<col style="width: 3%" />
<col style="width: 18%" />
<col style="width: 3%" />
<col style="width: 18%" />
<col style="width: 3%" />
<col style="width: 3%" />
<col style="width: 3%" />
<col style="width: 3%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">A</th>
<th style="text-align: center;">A[0]</th>
<th style="text-align: center;">A[1]</th>
<th style="text-align: center;">A[2]</th>
<th style="text-align: center;">A[3]</th>
<th style="text-align: center;">A[4]</th>
<th style="text-align: center;">A[5]</th>
<th style="text-align: center;">A[6]</th>
<th style="text-align: center;">A[7]</th>
<th style="text-align: center;">A[8]</th>
<th style="text-align: center;">A[9]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Key</td>
<td style="text-align: center;">f</td>
<td style="text-align: center;">d</td>
<td style="text-align: center;">c</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">g</td>
<td style="text-align: center;">b</td>
<td style="text-align: center;">h</td>
<td style="text-align: center;">e</td>
<td style="text-align: center;">i</td>
<td style="text-align: center;">u</td>
</tr>
<tr class="even">
<td style="text-align: center;">table</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;">环</td>
<td style="text-align: center;"><font color=red>3</font></td>
<td style="text-align: center;"><font color=red>5</font></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><font color=red>1</font></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"><font color=red>0</font></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">new key</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">null</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">table</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">new key</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">null</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">d</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">table</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">new key</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">b</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">d</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">null</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">table</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">0</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">new key</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">b</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">d</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">f</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">table</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">5</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table></li>
<li><p>判断环结束：</p>
<ul>
<li><code>table[i] == i</code>，此时环结束</li>
</ul></li>
</ul></li>
<li><p>复杂度分析：</p>
<ul>
<li>最好： 初始的时候都有序</li>
<li>最坏：两本书(a,b)发生交换，需要三个步骤：
<ul>
<li>两本书发生交换：
<ul>
<li>取出一本(a)，temp</li>
<li>a = b;</li>
<li>b = temp;</li>
</ul></li>
<li>存在[N/2]个环，每个环两个元素，需要[3N/2]此移动</li>
</ul></li>
<li><code>T = O(mN)</code>,m是每个元素A的复制时间</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Connect</title>
    <url>/2022/07/29/Qt-Signals-And-Slots/</url>
    <content><![CDATA[<h1 id="qt"><code>Qt</code></h1>
<ul>
<li>是非常好的用于开发软件界面的库, 当然我这样说有些狭隘,
<code>Qt</code>能做的事情远不止如此</li>
<li>但本文我只是说一下<code>Qt</code>的信号槽机制</li>
</ul>
<h2 id="qt超级经典的信号与槽机制--signal-slot">1.
<code>Qt</code>超级经典的信号与槽机制- <code>signal</code> &amp;
<code>slot</code></h2>
<ul>
<li><p>示例 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Use_SignalAndSlot</span>:</span><span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">useSignalsAndSlots</span><span class="params">()</span></span>;</span><br><span class="line">slots: <span class="comment">// (槽函数可以不是slots下的函数)，可以是public or private or protected 下的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnuseSignalsAndSlots</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>class</code> 必须是继承自 <code>QObject</code></p></li>
<li><p>要使用<code>Qt</code>的这个机制需要在<code>Class</code>的定义处添加<code>Q_OBJECT</code>的宏定义x</p></li>
<li><p>定义信号是必须加上- <code>signals:</code> 前缀,
且信号不需要实现只需要定义，<code>Qt</code>有自己的解析机制</p></li>
</ul>
<h3 id="信号槽的不同写法---官方介绍">1. 信号槽的不同写法 - 官方介绍</h3>
<h4 id="qt4"><code>Qt4</code></h4>
来自官方的文档 - 使用宏包裹 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QMetaObject::Connection <span class="title">QObject::connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> <span class="keyword">char</span> *signal, <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *method, Qt::ConnectionType type = Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure>
<p>
  Creates a connection of the given type from the signal in the sender
object to the method in the receiver object. Returns a handle to the
connection that can be used to disconnect it later.<br>   You must use
the <code> SIGNAL() </code> and <code>SLOT()</code> macros when
specifying the signal and the method, for example:
</p>
<ul>
<li><p>上面函数创建一个链接，并将这个链接作为返回值,这个返回值可以用于调用
<code>disconnect</code> 断开链接</p></li>
<li><p>example: <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">QLabel *label = <span class="keyword">new</span> QLabel;</span><br><span class="line">QScrollBar *scrollBar = <span class="keyword">new</span> QScrollBar;</span><br><span class="line">QObject::connect(scrollBar, SIGNAL(valueChanged(<span class="keyword">int</span>)),label,  SLOT(setNum(<span class="keyword">int</span>)));</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li>
<li><p><font color=red id="danger">友情提示：请记住这种写法，必须使用<code>SIGNAL</code>&amp;<code>SLOT</code>将对应的信号和槽函数包裹起来，并且这种方法无法检测对应的信号和槽函数是否存在</font></p></li>
<li><p>在创建链接的时候，对应的信号中我们只需要给出参数的类型，不需要写出具体的参数名称:</p>
<p>
<p>  This example ensures that the label always displays the current
scroll bar value. Note that the signal and slots parameters must not
contain any variable names, only the type. E.g. the following would not
work and return false:</p>
</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WRONG</span></span><br><span class="line">QObject::connect(scrollBar, SIGNAL(valueChanged(<span class="keyword">int</span> value)),label, SLOT(setNum(<span class="keyword">int</span> value)));</span><br></pre></td></tr></table></figure></p></li>
<li><p>overloads - 1</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QMetaObject::Connection <span class="title">QObject::connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> QMetaMethod &amp;signal, <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> QMetaMethod &amp;method, Qt::ConnectionType type = Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure></p>
<p>
<p>  Creates a connection of the given type from the signal in the
sender object to the method in the receiver object. Returns a handle to
the connection that can be used to disconnect it later.<br>   The
Connection handle will be invalid if it cannot create the connection,
for example, the parameters were invalid. You can check if the
<code>QMetaObject::Connection</code> is valid by casting it to a
bool.<br>   This function works in the same way as <code>connect(const
QObject <em>sender, const char </em>signal, const QObject <em>receiver,
const char </em>method, Qt::ConnectionType type)</code> but it uses
<code>QMetaMethod</code> to specify signal and method.<br> This function
was introduced in Qt 4.8.</p>
</p></li>
<li><p>overloads - 2</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QMetaObject::Connection <span class="title">QObject::connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> <span class="keyword">char</span> *signal, <span class="keyword">const</span> <span class="keyword">char</span> *method, Qt::ConnectionType type = Qt::AutoConnection)</span> <span class="keyword">const</span></span></span><br></pre></td></tr></table></figure></p>
<p>
<p>  This function overloads <code>connect()</code>.<br>   Connects
signal from the sender object to this object's method.<br>   Equivalent
to <code>connect(sender, signal, <font color=red>this</font>, method,
type)</code>.<br>   Every connection you make emits a signal, so
duplicate connections emit two signals. You can break a connection using
<code>disconnect()</code>.<br>   Note: This function is
<font color=#00ff00>thread-safe</font>. <br>
<font color=red>  友情提示： 默认指定this作为接收者</font></p>
</p></li>
</ul>
<h4 id="qt5之后"><code>Qt5</code>之后</h4>
<ul>
<li><p>新的写法 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PointerToMemberFunction&gt; <span class="function">QMetaObject::Connection <span class="title">QObject::connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, PointerToMemberFunction signal, <span class="keyword">const</span> QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type =  Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure></p></li>
<li><p><code>example</code> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QLabel *label = <span class="keyword">new</span> QLabel;</span><br><span class="line">QLineEdit *lineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">QObject::connect(lineEdit, &amp;QLineEdit::textChanged,label,  &amp;QLabel::setText);</span><br></pre></td></tr></table></figure></p></li>
<li><p>请注意信号和槽函数的参数必须是匹配的</p></li>
<li><p>overloads - 1</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PointerToMemberFunction, <span class="keyword">typename</span> Functor&gt; </span><br><span class="line"><span class="function">QMetaObject::Connection <span class="title">QObject::connect</span><span class="params">(<span class="keyword">const</span> QObject *sender,PointerToMemberFunction signal, Functor functor)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 这是个重载的函数</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>Example</li>
</ul>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void someFunction();</span><br><span class="line">QPushButton *button &#x3D; new QPushButton;</span><br><span class="line">QObject::connect(button, &amp;QPushButton::clicked, someFunction);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Lambda expressions can also be used:</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QByteArray page = ...;</span><br><span class="line">QTcpSocket *socket = <span class="keyword">new</span> QTcpSocket;</span><br><span class="line">socket-&gt;connectToHost(<span class="string">&quot;qt-project.org&quot;</span>, <span class="number">80</span>);</span><br><span class="line">QObject::connect(socket, &amp;QTcpSocket::connected, [=] () &#123;</span><br><span class="line">        socket-&gt;write(<span class="string">&quot;GET &quot;</span> + page + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>
<p>  The connection will automatically disconnect if the sender is
destroyed. However, you should take care that any objects used within
the functor are still alive when the signal is emitted.<br>   Overloaded
functions can be resolved with help of qOverload.<br>  &amp;enspNote:
This function is thread-safe.<br></p>
</p></li>
<li><p>overloads - 2</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> PointerToMemberFunction, <span class="keyword">typename</span> Functor&gt; QMetaObject::Connection </span><br><span class="line">QObject::connect(<span class="keyword">const</span> QObject *sender, PointerToMemberFunction signal, <span class="keyword">const</span> QObject *context, </span><br><span class="line">                Functor functor, Qt::ConnectionType type = Qt::AutoConnection)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>
<p>  This function overloads connect().<br>   Creates a connection of a
given type from signal in sender object to functor to be placed in a
specific event loop of context, and returns a handle to the
connection.<br>   Note: <code>Qt::UniqueConnections</code> do not work
for lambdas, non-member functions and functors; they only apply to
connecting to member functions.<br>   The signal must be a function
declared as a signal in the header. The slot function can be any
function or functor that can be connected to the signal. A function can
be connected to a given signal if the signal has at least as many
argument as the slot. A functor can be connected to a signal if they
have exactly the same number of arguments. There must exist implicit
conversion between the types of the corresponding arguments in the
signal and the slot.</p>
</p>
<ul>
<li>Example:</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">someFunction</span><span class="params">()</span></span>;</span><br><span class="line">QPushButton *button = <span class="keyword">new</span> QPushButton;</span><br><span class="line">QObject::connect(button, &amp;QPushButton::clicked, <span class="keyword">this</span>, someFunction, Qt::QueuedConnection);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Lambda expressions can also be used:</li>
</ul>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QByteArray page = ...;</span><br><span class="line">QTcpSocket *socket = <span class="keyword">new</span> QTcpSocket;</span><br><span class="line">socket-&gt;connectToHost(<span class="string">&quot;qt-project.org&quot;</span>, <span class="number">80</span>);</span><br><span class="line">QObject::connect(socket, &amp;QTcpSocket::connected, <span class="keyword">this</span>, [=] () &#123;</span><br><span class="line">        socket-&gt;write(<span class="string">&quot;GET &quot;</span> + page + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;, Qt::AutoConnection);</span><br></pre></td></tr></table></figure></p>
<p>
<p>  The connection will automatically disconnect if the sender or the
context is destroyed. However, you should take care that any objects
used within the functor are still alive when the signal is emitted.<br>
  Overloaded functions can be resolved with help of qOverload.<br>
  Note: This function is thread-safe.<br>   This function was introduced
in Qt 5.2.</p>
</p></li>
</ul>
<h3 id="信号槽的不同写法---几种一般写法">2. 信号槽的不同写法 -
几种一般写法</h3>
<h5
id="connect的最后一个参数我们暂时使用他的默认认为"><code>connect</code>的最后一个参数，我们暂时使用他的默认认为</h5>
<h4 id="qt4的写法"><code>Qt4的写法</code></h4>
<ul>
<li>宏包裹 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QPushButton *btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">connect(btn, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(close()));</span><br></pre></td></tr></table></figure></li>
<li><a href="#danger">注意事项</a></li>
</ul>
<h4 id="qt5后的写法"><code>Qt5</code>后的写法</h4>
<ul>
<li><p>模板匹配</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QPushButton *btn = <span class="keyword">new</span> QPushButton; </span><br><span class="line">connect(btn, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MainWindow::close);</span><br></pre></td></tr></table></figure></p>
<p>
<p>Qt5后的官方推荐写法，编译的时候信号或槽不存在是无法编译通过的，槽的可以直接写在<code>public
or protected or private</code>下</p>
</p></li>
<li><p>lambda</p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">connect</span><span class="op">(</span>btn<span class="op">,</span> <span class="op">&amp;</span><span class="ex">QPushButton::</span>clicked<span class="op">,</span> <span class="op">[&amp;]()</span> <span class="op">&#123;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">this</span><span class="op">-&gt;</span>close<span class="op">();</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;);</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="fu">connect</span><span class="op">(</span>btn<span class="op">,</span> <span class="op">&amp;</span><span class="ex">QPushButton::</span>clicked<span class="op">,</span> <span class="kw">this</span><span class="op">,</span> <span class="op">[&amp;]()</span> <span class="op">&#123;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">this</span><span class="op">-&gt;</span>close<span class="op">();</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;);</span></span></code></pre></div>
<ul>
<li>两种写法本质上是一样的，只是说第一种默认指定接收者为<code>this</code></li>
<li>请保证<code>lambda</code>函数中使用成员都是活跃的，不然将是很糟糕的行为</li>
</ul></li>
</ul>
<h3 id="connect-最后一个参数">3. connect 最后一个参数</h3>
<ul>
<li><p><code>Qt::AutoConnection</code></p>
<ul>
<li>默认使用的参数
<div>
<p>
(Default) If the receiver lives in the thread that emits the signal,
Qt::DirectConnection is used. Otherwise, Qt::QueuedConnection is used.
The connection type is determined when the signal is emitted.
</p>
<p>
如果接收器位于发出信号的线程中，则使用 Qt::DirectConnection。 否则，使用
Qt::QueuedConnection。 连接类型在信号发出时确定
</p>
</div></li>
</ul></li>
<li><p><code>Qt::DirectConnection</code></p>
<div>
<p>
The slot is invoked immediately when the signal is emitted. The slot is
executed in the signalling thread.
</p>
<p>
发出信号时立即调用插槽。 该槽函数在发送者线程中执行。
</p>
</div></li>
<li><p><code>Qt::QueuedConnection</code></p>
<div>
<p>
The slot is invoked when control returns to the event loop of the
receiver's thread. The slot is executed in the receiver's thread.
</p>
<p>
当控制返回到接收者线程的事件循环时调用该槽,会等待当前函数执行结束，重新回到事件循环。
槽函数在接收者的线程中执行.
</p>
</div></li>
<li><p><code>Qt::BlockingQueuedConnection</code></p>
<div>
<p>
Same as Qt::QueuedConnection, except that the signalling thread blocks
until the slot returns. This connection must not be used if the receiver
lives in the signalling thread, or else the application will deadlock.
</p>
<p>
与 Qt::QueuedConnection 相同，只是信号线程阻塞直到槽返回。
如果接收者与发送者在一个线程中，则不得使用此连接，否则应用程序将死锁
</p>
</div></li>
<li><p><code>Qt::UniqueConnection</code></p>
<div>
<p>
This is a flag that can be combined with any one of the above connection
types, using a bitwise OR. When Qt::UniqueConnection is set,
QObject::connect() will fail if the connection already exists (i.e. if
the same signal is already connected to the same slot for the same pair
of objects). This flag was introduced in Qt 4.6.
</p>
<p>
这是一个可以与上述任何一种连接类型结合使用的标志，使用按位或。 当设置了
Qt::UniqueConnection
时，如果连接已经存在（即，如果相同的信号已经连接到同一对对象的同一槽函数），则
QObject::connect() 将失败。 这个标志是在 Qt 4.6 中引入的。
</p>
</div></li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>QuickSort</title>
    <url>/2021/10/28/QuickSort/</url>
    <content><![CDATA[<h2 id="quick-sort">Quick Sort</h2>
<h4 id="快速排序概述">1、快速排序概述</h4>
<ul>
<li><p>快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。</p></li>
<li><p>伪码实现</p></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(ElementType A[],<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(N &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ; <span class="comment">//数据有序 不需要排序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算主元 -- 将数据分组</span></span><br><span class="line">    pivot = &#123;A|A中的一个元素&#125;</span><br><span class="line">    将A（S）分成两个独立的子集&#123;A[] \ pivot&#125;；</span><br><span class="line">    A1 = &#123;a∈S|a &lt; pivot&#125;;</span><br><span class="line">    A2 = &#123;a∈S|a &gt; pivot&#125;;</span><br><span class="line">    <span class="comment">// 递归调用QuickSort</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="选主元">2、选主元</h4>
<ul>
<li><p>选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。</p></li>
<li><p>下面介绍一种主元的选取方法：</p>
<ul>
<li><p>取头，中，尾的中位数</p></li>
<li><p>伪码描述： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ElementType <span class="title">Media3</span><span class="params">(ElementType A[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果坐标的比中间的大</span></span><br><span class="line">    <span class="keyword">if</span>(A[left] &gt; A[center])</span><br><span class="line">    &#123;</span><br><span class="line">        Swap(&amp;A[left],&amp;A[center]);  <span class="comment">// 交换 左中的值 </span></span><br><span class="line">        <span class="comment">//此后 A[center] &gt; A[left]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 交换后的左 依旧大于右边</span></span><br><span class="line">    <span class="keyword">if</span>(A[left] &gt; A[right])</span><br><span class="line">    &#123;</span><br><span class="line">         Swap(&amp;A[left],&amp;A[right]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(A[center] &gt; A[right])</span><br><span class="line">    &#123;</span><br><span class="line">         Swap(&amp;A[center],&amp;A[right]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// A[right] &gt; A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素</span></span><br><span class="line">    swap(&amp;A[center],&amp;A[right - <span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> A[rigjt <span class="number">-1</span> ];  <span class="comment">// 返回我们得到的主元 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul></li>
</ul>
<h4 id="子集划分">3、子集划分</h4>
<ul>
<li>每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。</li>
</ul>
<h4 id="算法实现">4、算法实现</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(ElementType A[], <span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Cutoff &lt;= right - left)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 主元</span></span><br><span class="line">        poivt = Media3(A,left,right);</span><br><span class="line">        <span class="keyword">int</span> i = left;        <span class="comment">// i 当前指向第一个元素的位置 </span></span><br><span class="line">        <span class="keyword">int</span> j = right - <span class="number">1</span>;   <span class="comment">// J 指向主元的位置 </span></span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(A[++i] &lt; poivt)&#123;&#125;</span><br><span class="line">            <span class="keyword">while</span>(A[--j] &gt; poivt)&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;A[i],A[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(&amp;A[i],&amp;A[right - <span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 递归 </span></span><br><span class="line">        QuickSort(A,left,i<span class="number">-1</span>);</span><br><span class="line">        QuickSort(A,i,right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Insert_selection(A+left,right - left + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Selection_sort</title>
    <url>/2021/10/25/Selection-sort/</url>
    <content><![CDATA[<h2 id="选择排序">选择排序</h2>
<ul>
<li><p>选择排序，每次从无序的数据中选择一个<code>最大的</code>或者是<code>最小的</code>,放到合适的位置。</p></li>
<li><p>代码实现：</p>
<p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里为了使用最大堆-我们倒着排序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Selection_Sort</span><span class="params">(ElementType A[], <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i = N<span class="number">-1</span>;i &gt;= <span class="number">0</span>；i--)</span><br><span class="line">    &#123;</span><br><span class="line">    	  max_postion = scanForMax(A,<span class="number">0</span>,i); <span class="comment">//获取最大元素的下标 </span></span><br><span class="line">          swap(&amp;A[i],&amp;A[max_position]);    <span class="comment">// 交换元素    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>scanForMax</code></p>
<ul>
<li>查找当前无序元素中最大的元素，并返回元素的下标
<ul>
<li>常规下，直接对数组元素进行扫描，时间复杂度<code>O(N)</code>,整个算法的时间复杂度<code>T=O(N^2)</code></li>
<li>优化方案：如何快速找到最大值 -- 最大堆or最小堆。</li>
</ul></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell-Sort</title>
    <url>/2021/10/26/Shell-Sort/</url>
    <content><![CDATA[<h3 id="希尔排序">希尔排序</h3>
<ul>
<li>希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序
<ul>
<li><code>DK[i-1]</code>有序后，执行<code>DK[i]</code>的排序后，<code>DK[i-1]</code>依旧是有序的</li>
</ul></li>
</ul>
<h4 id="原始的希尔排序">1、原始的希尔排序</h4>
<ul>
<li><code>DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shell_sort</span><span class="params">(ElementTypes A[], <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> D;  <span class="comment">// 当前次序的间隔</span></span><br><span class="line">    <span class="keyword">int</span> P,i;</span><br><span class="line">    ElementType temp;</span><br><span class="line">    <span class="keyword">for</span>(P=N/<span class="number">2</span>;D&gt;<span class="number">0</span>;D/=<span class="number">2</span>) <span class="comment">// 间隔的变换</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 插入排序 </span></span><br><span class="line">        <span class="keyword">for</span>(P = D; P&lt;N; P++)</span><br><span class="line">        &#123;</span><br><span class="line">        	temp = A[P];  <span class="comment">// 当前要插入的元素 </span></span><br><span class="line">            <span class="keyword">for</span>(i = P; i &gt;= D &amp;&amp; A[i-D] &gt; temp;i -= D)  <span class="comment">// 和已经有序的元素进行比较</span></span><br><span class="line">            <span class="comment">// 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动</span></span><br><span class="line">            &#123;</span><br><span class="line">                A[i] = A[i-D];</span><br><span class="line">            &#125;</span><br><span class="line">            A[i] = temp;  <span class="comment">// temp 放到正确位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>复杂度分析：
当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到<code>O(N^2)</code>。</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Table-Sort</title>
    <url>/2021/11/07/Table-Sort/</url>
    <content><![CDATA[<h3 id="表排序">表排序</h3>
<ul>
<li>某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。
<ul>
<li>定义一个指针数组作为"表"（table）</li>
</ul></li>
<li>概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。
<ul>
<li>我们定义一个新的部分<code>table</code>记录数组中每个元素的下标</li>
</ul></li>
</ul>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">A</th>
<th style="text-align: center;">A[0]</th>
<th style="text-align: center;">A[1]</th>
<th style="text-align: center;">A[2]</th>
<th style="text-align: center;">A[3]</th>
<th style="text-align: center;">A[4]</th>
<th style="text-align: center;">A[5]</th>
<th style="text-align: center;">A[6]</th>
<th style="text-align: center;">A[7]</th>
<th style="text-align: center;">A[8]</th>
<th style="text-align: center;">A[9]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Key</td>
<td style="text-align: center;">f</td>
<td style="text-align: center;">d</td>
<td style="text-align: center;">c</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">g</td>
<td style="text-align: center;">b</td>
<td style="text-align: center;">h</td>
<td style="text-align: center;">e</td>
<td style="text-align: center;">i</td>
<td style="text-align: center;">u</td>
</tr>
<tr class="even">
<td style="text-align: center;">table</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
</tbody>
</table>
<ul>
<li><ul>
<li>初始状态下，<code>table[index]</code> 等于A
的<code>index</code></li>
<li>然后我们同通过任意一种排序比较<code>A[table]</code>对应的关键字的大小，从而交换<code>table</code>中的值——排序</li>
</ul></li>
<li><p>排序结果 -- 使用插入排序</p>
<table style="width:100%;">
<colgroup>
<col style="width: 20%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">A</th>
<th style="text-align: center;">A[0]</th>
<th style="text-align: center;">A[1]</th>
<th style="text-align: center;">A[2]</th>
<th style="text-align: center;">A[3]</th>
<th style="text-align: center;">A[4]</th>
<th style="text-align: center;">A[5]</th>
<th style="text-align: center;">A[6]</th>
<th style="text-align: center;">A[7]</th>
<th style="text-align: center;">A[8]</th>
<th style="text-align: center;">A[9]</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Key</td>
<td style="text-align: center;">f</td>
<td style="text-align: center;">d</td>
<td style="text-align: center;">c</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">g</td>
<td style="text-align: center;">b</td>
<td style="text-align: center;">h</td>
<td style="text-align: center;">e</td>
<td style="text-align: center;">i</td>
<td style="text-align: center;">u</td>
</tr>
<tr class="even">
<td style="text-align: center;">table</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;">第零次插入</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">第一次插入</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">第二次插入</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">第三次插入</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">第四次插入</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">第五次插入</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">第六次插入</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">第七次插入</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">第八次插入</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">第九次插入</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;">table</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
</tbody>
</table></li>
<li><p>到此，上述表变得有序：</p></li>
<li><p>正确的输出结果是:</p>
<ul>
<li><code>A[table[0]],A[table[0]]........</code></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Boy</title>
    <url>/2021/03/16/baozi/</url>
    <content><![CDATA[<h4 id="about-this-blog">About this Blog</h4>
<ul>
<li>个人博客，分享我的日常与一些工作内容</li>
</ul>
]]></content>
      <categories>
        <category>bun</category>
        <category>life</category>
      </categories>
      <tags>
        <tag>intraduce</tag>
      </tags>
  </entry>
  <entry>
    <title>简单排序-冒泡&amp;插入</title>
    <url>/2021/10/19/sort-bubble-insertion/</url>
    <content><![CDATA[<h2 id="简单排序">简单排序:</h2>
<ul>
<li>冒泡排序</li>
<li>插入排序</li>
</ul>
<p>上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。</p>
<p>在常规的排序算法中：我们默认的顺序是从小到大</p>
<h4 id="冒泡排序">1、冒泡排序</h4>
<p>  原理：
冒泡排序是一个两重的<code>for</code>循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。</p>
<ul>
<li>C++实现 -- 初始版本</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">void swap(int * a,int * b)；</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_Sort</span><span class="params">(ElementTYpe A[],<span class="keyword">int</span> N)</span>  <span class="comment">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>,i = <span class="number">0</span>;</span><br><span class="line">  	<span class="keyword">for</span>(p = N - <span class="number">1</span>;p&gt;=<span class="number">0</span>;p--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; p;i++) <span class="comment">// 从无序的数据中抛出最大的</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &gt; A[i+<span class="number">1</span>])  <span class="comment">// 比较元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                swap(A+i,(A+(i+<span class="number">1</span>))); <span class="comment">// 交换元素 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> * a,<span class="keyword">int</span> * b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *a ^= *b;</span><br><span class="line">    *b ^= *a;</span><br><span class="line">    *a ^= *b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>优化版本</li>
</ul>
<p>如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_Sort</span><span class="params">(ElementTYpe A[],<span class="keyword">int</span> N)</span>  <span class="comment">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>,i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;       <span class="comment">// 标识数组是否有序</span></span><br><span class="line">  	<span class="keyword">for</span>(p = N - <span class="number">1</span>;p&gt;=<span class="number">0</span>;p--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; p;i++) <span class="comment">// 从无序的数据中抛出最大的</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] &gt; A[i+<span class="number">1</span>])  <span class="comment">// 比较元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                swap(A+i,(A+(i+<span class="number">1</span>))); <span class="comment">// 交换元素</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)  <span class="comment">// 满足退出条件 结束循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果展示
<ul>
<li>输入与数据：<code>int a[7] = &#123;3,1,2,98,30,8,90&#125;;</code></li>
</ul></li>
</ul>
<p><img
src="https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png" /></p>
<ul>
<li>复杂度分析 - 优化版本</li>
</ul>
<p>最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历<code>flag</code>变量会触发循环结束，复杂度：</p>
<center>
T = O(N)
</center>
<p>最坏情况：元素逆序，需要遍历比较所有的元素</p>
<center>
T = O(N^2)
</center>
<h4 id="插入排序">2、插入排序</h4>
<p>插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。</p>
<ul>
<li><p>C++实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insertion_Sort</span><span class="params">(ElementType A[],<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p,i，tmp;</span><br><span class="line">    <span class="keyword">for</span>(p = <span class="number">1</span>;p &lt; N;p++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = A[p];  <span class="comment">// 获取插入的元素 </span></span><br><span class="line">        <span class="keyword">for</span>(i = p;i &gt; <span class="number">0</span> &amp;&amp; A[i - <span class="number">1</span>] &gt; tmp;i--) <span class="comment">// A[i-1]表示的是有序序列中的最大元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            A[i] = A[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：</span></span><br><span class="line">        A[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果展示</p>
<ul>
<li>输入与数据：<code>int a[7] = &#123;3,1,1,98,30,8,90&#125;;</code></li>
</ul></li>
</ul>
<p><img
src="https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png" /></p>
<ul>
<li><p>复杂度分析：</p>
<p>最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：</p>
<center>
<p>T = O(N)</p>
</center>
<p>最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：</p>
<center>
<p>T = O(N^2)</p>
</center></li>
</ul>
<h4 id="补充说明">补充说明：</h4>
<ul>
<li>时间复杂度下界</li>
</ul>
<p>    概念：对于下边<code>i&lt;j</code>如果A[i] &gt;
A[j]，则称<code>(i,j)</code>是一对逆序对<font color=red>逆序对(inversion)</font></p>
<ul>
<li>在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font></li>
</ul>
<center>
插入排序：T(N,I) = O(N+I)
</center>
<ul>
<li><p>对于N个不同元素组成的序列，平均具有<code>N(N-1)/4</code>个逆序对。</p></li>
<li><p>对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐<code>Ω(N^2)</code></p></li>
</ul>
<p>基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。</p>
<h3 id="下面将会介绍希尔排序">下面将会介绍，希尔排序！</h3>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>vector dot product</title>
    <url>/2022/07/28/vector-dot-product/</url>
    <content><![CDATA[<h2 id="向量的内积与外积">向量的内积与外积</h2>
<h3 id="点与点的减法">点与点的减法</h3>
<ul>
<li>描述的是起点到终点的运动</li>
</ul>
<h3 id="点p与向量veca的加法">点<span
class="math inline">\({p}\)</span>与向量<span
class="math inline">\(\vec{a}\)</span>的加法</h3>
<ul>
<li>从<span class="math inline">\(P\)</span>出发经过这个向量<span
class="math inline">\(\vec{a}\)</span>代表的运动，到达一个新的点<span
class="math inline">\(P_0\)</span></li>
</ul>
<h3 id="在此处定义两个向量">在此处定义两个向量</h3>
<ul>
<li><span class="math inline">\(\vec{a}\)</span> <span
class="math display">\[  
     \vec{a} = \begin{bmatrix}
        a_1 \\
        a_2 \\
        a_3 \\
      \end{bmatrix}
\]</span></li>
<li><span class="math inline">\(\vec{b}\)</span> <span
class="math display">\[  
    \vec{b} = \begin{bmatrix}
      b_1 \\
      b_2 \\
      b_3 \\
    \end{bmatrix}
\]</span></li>
</ul>
<h3 id="向量点击">向量点击</h3>
<ul>
<li>点击(内积)的公式 <span class="math display">\[\vec{a}\cdot\vec{b} =
|\vec{a}|\times|\vec{b}|\times \cos \theta \]</span> <span
class="math display">\[ \vec{a}\cdot\vec{b} = \sum_{i=1}^{n} \left\{ a_i
* b_i \right\}\]</span></li>
<li>点击的几何意义
<ul>
<li><p>
其中一个向量在另一个向量上的投影且与点击的顺序无关
</p></li>
<li><span class="math inline">\(\vec{a}\cdot\vec{b} &gt; 0\)</span>
方向基本相同，夹角在0°到90°之间</li>
<li><span class="math inline">\(\vec{a}\cdot\vec{b} = 0\)</span>
正交，相互垂直</li>
<li><span class="math inline">\(\vec{a}\cdot\vec{b} &lt; 0\)</span>
方向基本相反，夹角在90°到180°之间</li>
</ul></li>
<li>点击的巧用
<ul>
<li>计算向量的模长的平方 <span class="math display">\[|\vec{a}|^2 =
\vec{a} \cdot \vec{a} \]</span></li>
<li>计算两个向量之间的夹角的<span
class="math inline">\(\cos\theta\)</span> -<img
src="https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png"
title="计算两个向量之间的夹角" alt="计算两个向量之间的夹角" />
<ul>
<li>两个单位向量的点击等于他们的夹角的<span
class="math inline">\(\cos\theta\)</span>的值</li>
</ul></li>
<li>两个互相垂直的向量的点击总是为<code>0</code> <span
class="math inline">\(\theta = 90^0\)</span> <span
class="math display">\[\vec{a} \cdot \vec{b} = |\vec{a}| \ast |\vec{b}|
\ast \cos\theta = 0 \]</span></li>
<li>一条射线描述的向量[起点 +
方向]点击一个平面的法向可以得到起点到平面的距离<br />
### 向量叉积</li>
</ul></li>
<li>外积公式 <span class="math display">\[
    \vec{a} \times \vec{b} =  
    \begin{bmatrix}
      a_2 * b_3 - b_2 * a_3 \\
      a_3 * b_1 - b_3 * a_1 \\
      a_1 * b_2 - b_1 * a_2 \\
    \end{bmatrix}
\]</span></li>
<li>叉积的几何意义
<ul>
<li>几何表达公式 <span class="math display">\[
  \vec{a} \times \vec{b} = |\vec{a}| * |\vec{b}| * sin(\theta) * \vec{n}
\]</span>
<ul>
<li><span class="math inline">\(\vec{n}\)</span> 表示<span
class="math inline">\(\vec{a}\)</span>, <span
class="math inline">\(\vec{b}\)</span>所构成平面的法向量方向的单位向量</li>
</ul></li>
<li>在二维空间中：叉积得到的向量的模长<span
class="math inline">\(|\vec{a}\times\vec{b}|\)</span>等于这两个向量<span
class="math inline">\(\vec{a},\vec{b}\)</span>组成的平行四边形的面积</li>
</ul></li>
<li>外积的使用
<ul>
<li>外积的模长则为夹角的正弦（始终为正）</li>
</ul></li>
</ul>
<h3 id="扩展知识">扩展知识</h3>
<ul>
<li>扩展 - 1
<ul>
<li>平面上的四个点<span class="math inline">\(P_1\)</span>,<span
class="math inline">\(P_2\)</span>,<span
class="math inline">\(P_3\)</span>,<span
class="math inline">\(P_4\)</span>,分别构成向量 <span
class="math inline">\(\vec{P_1P_2}\)</span>与<span
class="math inline">\(\vec{P_3P_4}\)</span>。如何通过点击计算他们交点的坐标?</li>
<li>下次吧！</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>Math</category>
        <category>linear algebra</category>
      </categories>
      <tags>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2021/10/26/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="归并排序">归并排序</h2>
<ul>
<li>归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。</li>
</ul>
<h4 id="有序子列的归并---伪代码">1、有序子列的归并 - 伪代码</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(ElementType A[],ElementType tempA[],<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> RightEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    leftEnd = R - <span class="number">1</span>  <span class="comment">// 左边部分有序元素的结束位置</span></span><br><span class="line">    temp_index = L;  <span class="comment">// 存放结果数组的初始位置</span></span><br><span class="line">    NumElements = RightEnd - L + <span class="number">1</span>;   <span class="comment">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[L] &lt; A[R])</span><br><span class="line">        &#123;</span><br><span class="line">            tempA[temp_index++] = A[L++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">// A[L] &gt; A[R]</span></span><br><span class="line">        &#123;</span><br><span class="line">            tempA[temp_index++] = A[R++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(L &lt;= LeftEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        tempA[temp_index++] = A[L++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(R &lt;= RightEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        tempA[temp_index++] = A[R++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将有序的元素写回到A中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; NumElements;i++,RightEnd--)</span><br><span class="line">    &#123;</span><br><span class="line">        A[RightEnd] = tempA[RightEnd];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="归并的实现---递归">2、归并的实现 - 递归</h4>
<ul>
<li>归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Msort</span><span class="params">(ElementType A[],ElementType tempA[],<span class="keyword">int</span> L,<span class="keyword">int</span> RightEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> center;  <span class="comment">// 每次将元素对半砍开 </span></span><br><span class="line">    <span class="keyword">if</span>(L &lt; RightEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        center = (L + RightEnd) / <span class="number">2</span>;          <span class="comment">// 中间位置的元素</span></span><br><span class="line">        MSort(A,tempA,L,center);              <span class="comment">//左半部分 </span></span><br><span class="line">        MSort(A,tempA,center+<span class="number">1</span>，RightEnd);    <span class="comment">//右半部分 </span></span><br><span class="line">    	Merge(A,tempA,L,center+<span class="number">1</span>,RightEnd);   <span class="comment">// 合并两部分 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="归并的实现---非递归">2、归并的实现 - 非递归</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_Sort</span><span class="params">(ElementType A[],<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">1</span>;   <span class="comment">// 最开始 有序子列的长度</span></span><br><span class="line">    ElementType * tempA;   <span class="comment">// 一个辅助交换的和A等大小的空间</span></span><br><span class="line">    tempA = <span class="keyword">new</span> ElementType[N];</span><br><span class="line">    <span class="keyword">if</span>(tempA != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(length &lt; N)  <span class="comment">// 随着有序子列的扩大，最终一定大于等于N</span></span><br><span class="line">        &#123;</span><br><span class="line">            Merge_pass(A,tempA,N,length);</span><br><span class="line">            length *= <span class="number">2</span>;</span><br><span class="line">            Merge_pass(tempA,A,N,length);</span><br><span class="line">            length *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> [] tempA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;error&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源元素位置 目标元素位置 元素个数 有序子列的大小</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_pass</span><span class="params">(ElementType A,ElementType tempA,<span class="keyword">int</span> N,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= N - <span class="number">2</span>*length;i += <span class="number">2</span>*length)   <span class="comment">// 2*length 每次合并的元素的个数 </span></span><br><span class="line">    &#123;</span><br><span class="line">        Merge_(A,tempA,i,i+length,i+<span class="number">2</span>*length - <span class="number">1</span>);  <span class="comment">// 合并</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i+legnth &lt; N)  <span class="comment">// 剩下的元素个数 &gt; length, 表示还可以进行一次合并： 一组的个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 此时最后被合并的数据 个数 &lt; 2*length </span></span><br><span class="line">		Merge_(A,tempA,i,i+length,N - <span class="number">1</span>);  <span class="comment">// 合并</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 合并最后部分的元素</span></span><br><span class="line">        <span class="keyword">for</span>(j = i; j &lt; N;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tempA[j] = A[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge_</span><span class="params">(ElementType A[],ElementType tempA[],<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> RightEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    leftEnd = R - <span class="number">1</span>  <span class="comment">// 左边部分有序元素的结束位置</span></span><br><span class="line">    temp_index = L;  <span class="comment">// 存放结果数组的初始位置</span></span><br><span class="line">    NumElements = RightEnd - L + <span class="number">1</span>;   <span class="comment">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[L] &lt; A[R])</span><br><span class="line">        &#123;</span><br><span class="line">            tempA[temp_index++] = A[L++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">// A[L] &gt; A[R]</span></span><br><span class="line">        &#123;</span><br><span class="line">            tempA[temp_index++] = A[R++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(L &lt;= LeftEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        tempA[temp_index++] = A[L++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(R &lt;= RightEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        tempA[temp_index++] = A[R++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>微信多开</title>
    <url>/2022/02/28/%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80/</url>
    <content><![CDATA[<h2 id="微信多开的小技巧---windows">微信多开的小技巧 - Windows</h2>
<ul>
<li><p>首先，需要你知道你机器上安装微信 - 请记录它的安装位置</p></li>
<li><p>一般情况下，如果你不做任何修改的话，它会在<code>C:\Program Files (x86)\Tencent\WeChat</code>这个目录下：
   <img
src="https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png"
title="微信安装位置" /></p></li>
<li><p>然后，打开你机器上任意的一个文本编辑器，输入如下内容：</p></li>
<li><p>需要多开多少个微信，你便将如下命令输入重复写多少次。</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start D:\&quot;Program Files (x86)<span class="string">&quot;\Tencent\WeChat\WeChat.exe</span></span><br><span class="line"><span class="string">start D:\&quot;Program Files (x86)&quot;</span>\Tencent\WeChat\WeChat.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请将上面的路径换成你机器上安装微信的路径</span></span><br><span class="line"><span class="comment"># 上面表示的是同时开两个微信程序</span></span><br><span class="line"><span class="comment"># 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li>
<li><p>然后将文件保存，文件后缀为<code>.bat</code>,这是<code>cmd</code>识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。</p>
<p><img
src="https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png"
title="微信多开效果图" /></p></li>
</ul>
]]></content>
      <categories>
        <category>Tips</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次总结</title>
    <url>/2021/10/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="section"></h3>
<p><code>前记：</code></p>
<p><img
src="https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG" /></p>
<p>    从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。</p>
<p> 
   新工作是关于<code>C++　&amp;　OSG</code>的，做一个仿真软件，主要负责一些关于<code>osg</code>的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：</p>
<ul>
<li><code>Qt</code>编写整个软件的界面</li>
<li><code>osg</code>负责整个3D图形的展示</li>
</ul>
<p>  关于这个项目遇到的一些问题：</p>
<ul>
<li><code>osg</code>编译劝退</li>
</ul>
<p>    讲真，<code>osg</code>的库的编译相当劝退，各种库的依赖关系，以及<code>VS</code>的工具链的选择，以及部分库的调试模式的选择。</p>
<p>这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。</p>
<ul>
<li><code>osg</code>与<code>Qt</code>的集成</li>
</ul>
<p>    要求你先编译<code>osg</code>然后才能编译，<code>osgQt</code>在<code>osg3.4</code>之后的版本中便被从原来的库中剔除，需要自己单独编译，</p>
<p>同时<code>Qt4.0</code>的版本与<code>5.0</code>的版本编译使用的<code>Qt</code>的类也存在一些区别。</p>
<p>当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：</p>
<ul>
<li>在于不同的团队合作的时候，如何扯皮！</li>
</ul>
]]></content>
      <categories>
        <category>works</category>
        <category>HJ</category>
      </categories>
      <tags>
        <tag>conclusion</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次面试</title>
    <url>/2022/01/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95-1/</url>
    <content><![CDATA[<h2 id="记一次面试">记一次面试:</h2>
<p>  距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......
  这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是<code>CAD</code>方向，大概都是渲染相关的，所以还是符合我的预期。</p>
<h2 id="start-interview">Start Interview:</h2>
<ul>
<li>首先这是一个<code>Cpp</code>&amp;<code>图形</code>的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是<code>CPP</code>和<code>图形学</code>开发经验,
可以预见大概的问题就是<code>Cpp</code>和图形相关的知识。</li>
</ul>
<hr />
<h3 id="第一次面试">第一次面试</h3>
<h4 id="关于简历中提到的之前的项目">关于简历中提到的之前的项目</h4>
<ul>
<li>部分和之前项目相关的问题</li>
<li>一些技术上的解决方案</li>
<li>......</li>
</ul>
<h4 id="cpp的新的语言特性">CPP的新的语言特性</h4>
<ul>
<li><code>C++11</code>的新语言特性 - 比较常用的
<ul>
<li>智能指针</li>
<li><code>auto</code>自动类型推导</li>
<li>标准库的多线程</li>
<li><code>lambda</code>表达式</li>
</ul></li>
<li>一些指针和引用相关的问题
<ul>
<li>指针是什么？</li>
<li>引用是什么？</li>
<li>两者的区别？</li>
<li>内存分区的相关问题，如：
<ul>
<li>常量在程序中的的存储位置</li>
<li>静态变量在什么位置</li>
<li>......</li>
</ul></li>
</ul></li>
</ul>
<h4 id="图形相关的问题">图形相关的问题</h4>
<ul>
<li>图形管线的问题
<ul>
<li>坐标变换相关的问题
<ul>
<li>投影</li>
<li>视图</li>
</ul></li>
</ul></li>
<li>一些渲染上面的解决方案
<ul>
<li>大数据量的绘制</li>
</ul></li>
</ul>
<h3 id="第二次面试">第二次面试</h3>
<p>  第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：</p>
<ul>
<li>个人介绍
<ul>
<li>基本信息</li>
<li>求学经历</li>
<li>......</li>
</ul></li>
<li>工作经历
<ul>
<li>项目经历</li>
</ul></li>
<li>未来的规划
<ul>
<li>职业规划</li>
<li>个人规划</li>
</ul></li>
<li>个人爱好</li>
</ul>
<p> .......</p>
<p>  后面部分就是关于这个介绍的提问了，无关痛痒。</p>
<p>  一周以后......，在我以为黄了的时候，竟然通过了。</p>
<p>  感谢！</p>
]]></content>
      <categories>
        <category>works</category>
        <category>interview</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>openGL</tag>
        <tag>computer graphics</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次面试</title>
    <url>/2021/07/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<p><em>和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......</em>
目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的<code>C++ &amp; Qt</code>，按照面试官的说法，这是一个纯<code>Qt</code>的岗位，所以接下来的问题大概全部是和<code>Qt</code>相关的，当然也会有部分C++的问题在其中。</p>
<p><font style="color:pink">废话不多说，我们进入正题：</font></p>
<h2 id="c部分的问题">C++部分的问题：</h2>
<ul>
<li><p>第一部分是关于C++这门语言的，面向对象是什么？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// OOP</span></span><br><span class="line"><span class="comment">// 封装,继承,多态</span></span><br></pre></td></tr></table></figure></li>
<li><p>对于多态的理解?</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先是如何实现多态？</span></span><br><span class="line"><span class="number">1.</span> 多态发生在继承关系中。</span><br><span class="line"><span class="number">2.</span> 需要重写虚函数。</span><br><span class="line"><span class="number">3.</span> 父类的指针指向子类的对象。</span><br><span class="line"><span class="number">4.</span> 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。</span><br></pre></td></tr></table></figure>
<p>example： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      A()&#123;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function_virtual</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;function_A&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span> menber;</span><br><span class="line">  </span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      B():A()&#123;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;B&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function_virtual</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;function_B&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span> <span class="keyword">public</span> A</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      D():A()&#123;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;D&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line">  </span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">function_virtual</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;function_D&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      A * a = <span class="keyword">new</span> A;</span><br><span class="line">      B * b = <span class="keyword">new</span> B;</span><br><span class="line">      D * d = <span class="keyword">new</span> D;</span><br><span class="line">  </span><br><span class="line">      A * ptr = b;</span><br><span class="line">      ptr-&gt;function_virtual();</span><br><span class="line">  </span><br><span class="line">      ptr = a;</span><br><span class="line">      ptr-&gt;function_virtual();</span><br><span class="line">  </span><br><span class="line">      ptr = d;</span><br><span class="line">      ptr-&gt;function_virtual();</span><br><span class="line">  	</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure> <font style="color:red">结果如下：</font>
<img
src="https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png"
title="polymorphism" alt="polymorphism" /></p></li>
<li><p>多态的实现 -- <font style="color:red">虚函数表</font></p>
<ul>
<li><p>验证虚函数表：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个简单的C 不带有虚函数 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C()&#123;<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;C&quot;</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> member;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><font style="color:red">输出结果:</font> <img
src="https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png"
title="virtual table 1" alt="virtual_table" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png"
title="virtual table 2" alt="virtual table 2" />
<figcaption aria-hidden="true">virtual table 2</figcaption>
</figure>
<ul>
<li>上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。</li>
</ul></li>
</ul></li>
</ul>
<hr />
<h2 id="qt部分">Qt部分</h2>
<ul>
<li>元对象系统</li>
<li>窗口刷新机制</li>
<li>内存托管(删除机制)</li>
<li>Qquick</li>
<li>Qt的布局</li>
</ul>
<h2 id="opengl部分">OPENGL部分</h2>
<ul>
<li><p>缓冲(双缓冲)</p></li>
<li><p>着色器程序(语言)</p></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>迟到的毕业总结</title>
    <url>/2021/03/18/%E8%BF%9F%E5%88%B0%E7%9A%84%E6%AF%95%E4%B8%9A%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</p>
<p>​ 离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。</p>
<p>对于大学，我仿佛有千言万语，却是欲语还休
。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！</p>
<p>待续。。。</p>
<hr />
<p><code>2021-7-26</code></p>
<p>​
下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。
当然一切都会是新的，我也是。</p>
<p>​ 祝愿我将迎接新的美好，朋友我来了！</p>
]]></content>
      <categories>
        <category>bun</category>
        <category>university</category>
      </categories>
      <tags>
        <tag>conclusion</tag>
        <tag>university</tag>
      </tags>
  </entry>
</search>
