{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2021年终总结.md","hash":"124ea1eede31e470fdf67d842690f610d0ecf4b9","modified":1659026243083},{"_id":"source/CNAME","hash":"9198ffd83e0d8aa2ea2bb40dea5654d0fa6523a4","modified":1659026243051},{"_id":"source/_posts/Bit-manipulation.md","hash":"b957b770d3448f2c0a50ecbc8bd42f6c036e2c80","modified":1659282622090},{"_id":"source/_posts/Bucket-Sort.md","hash":"b56ed100fb20d26779cb3ba99e30abb103930378","modified":1659026243083},{"_id":"source/_posts/Bug奇遇记-uint16-t.md","hash":"50d035d2cabb5fd6ba886ba748b09b2058105840","modified":1659026243083},{"_id":"source/_posts/Dynamic-drawing-of-osg-vertex-buffer-objects.md","hash":"01fe6657dc69d2ccbb1083f7beca63e886bb42fe","modified":1659026243083},{"_id":"source/_posts/Games202-ShadowMap.md","hash":"25a95823e8981c83b1337c0bfbda5ab36d6a4099","modified":1659026243083},{"_id":"source/_posts/Git常用命令-上.md","hash":"586917c5fb307059865c4d340d0d00d24bdc3872","modified":1659026243083},{"_id":"source/_posts/Heap.md","hash":"98261dc2c5b5dcbce2635ea34888b0c5eb7248da","modified":1659026243145},{"_id":"source/_posts/Multi-KeyWord-Sort.md","hash":"0958907b5182c5e8953bceaf71045406e8b409e2","modified":1659026243145},{"_id":"source/_posts/OSG-HUD.md","hash":"a226a9bb2b367b3e968f2f8fa66e5b4dd61fa0fd","modified":1659026243192},{"_id":"source/_posts/OSG踩坑记-模型共享-模型颜色修改.md","hash":"c855e506b8406c904ff7ce3558829b5a17f43a90","modified":1659026243192},{"_id":"source/_posts/OSG踩坑记-默认光源.md","hash":"58d4b3baf8ae8a77a46d545f8ee7456229c1e8fd","modified":1659026243192},{"_id":"source/_posts/Physical-Sort.md","hash":"194dc85f89e784e2af74cd43c13c7d12a63dad10","modified":1659026243208},{"_id":"source/_posts/Qt-connect-function-the-fifth-param.md","hash":"42d10e206c5f29cac330e05aa9cf7b3bfe750886","modified":1659119942553},{"_id":"source/_posts/QuickSort.md","hash":"f9943eeb9cdf9de4773a3ec49a1a90fd69f42a7d","modified":1659026243208},{"_id":"source/_posts/Selection-sort.md","hash":"89537fb500abf881dc286927cf10ce87c631b661","modified":1659026243208},{"_id":"source/_posts/Table-Sort.md","hash":"231a7b3c949b42eb4457f901428a2c06614465f0","modified":1659026243208},{"_id":"source/_posts/Shell-Sort.md","hash":"aee97cd3c780103a1631a88ef97a04e0c191eaf2","modified":1659026243208},{"_id":"source/_posts/baozi.md","hash":"50be8c18bba816b5965610a2684f07244163ab8b","modified":1659026243208},{"_id":"source/_posts/sort-bubble-insertion.md","hash":"62c867790310d85b974dc7bc059abf330ed1193d","modified":1659026243270},{"_id":"source/_posts/归并排序.md","hash":"6ad54135db982733f4f52b2428163954e8d3de3b","modified":1659026243270},{"_id":"source/_posts/微信多开.md","hash":"f51165117bf8267c8166103d1c1a4bada5a6675f","modified":1659026243270},{"_id":"source/_posts/记一次面试-1.md","hash":"d3db305e5604e696ae539d33d4140d7390d027d5","modified":1659026243270},{"_id":"source/_posts/记一次总结.md","hash":"f032178c682093f6bbc22f3075e99dee4da10b13","modified":1659026243270},{"_id":"source/_posts/记一次面试.md","hash":"7ffc38d20fee131f27b0303d237a59cbb6f8f578","modified":1659026243286},{"_id":"source/_posts/vector-dot-product.md","hash":"1e91e77543de15b40a528a4b7d143a5819b4e54d","modified":1659026243270},{"_id":"source/_posts/迟到的毕业总结.md","hash":"8cee0d712178dca0ca891b48e9b1aad7dcc8bd71","modified":1659026243286},{"_id":"source/about/index.md","hash":"dfc323e17cd451ff7adbf9b48a23e4d3f603ede5","modified":1659026243286},{"_id":"source/categories/index.md","hash":"dce67d215b637f3039704dc93afaa34c423551bf","modified":1659026243349},{"_id":"source/home/index.md","hash":"25354fdfed06ef466fda8e55d910fdc4b2dabeea","modified":1659026243396},{"_id":"source/uploads/wechat-qcode.jpg","hash":"5e32da2bbb5828e9050d948db5f9f36731ecfccc","modified":1659026243505},{"_id":"source/tags/index.md","hash":"b3b96db4d1bb3f15c19cdc74e601c93924275b88","modified":1659026243427},{"_id":"themes/next/.git_back/COMMITMESSAGE","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659119942626},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1659119942577},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1659119942599},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1659119954413},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1659119954856},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1659119954923},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1659119954923},{"_id":"themes/next/README.md","hash":"9b0af190c8265911c379ba9c7b453c8a7f1501c8","modified":1659119954923},{"_id":"themes/next/_config.yml","hash":"48e20b4c1ae5ab32e968287cb747380667fca9e0","modified":1659123696997},{"_id":"themes/next/_vendors.yml","hash":"d5cc06efaf76b401eafdc230ae9ba2c86b01d0e1","modified":1659119954923},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1659119954939},{"_id":"themes/next/package.json","hash":"489b4669fe9c0d46704fffb8ea341f4903057323","modified":1659119956926},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1659119956926},{"_id":"themes/next/.git_back/FETCH_HEAD","hash":"fed41a437ad7a6abcf7ac88434e9803b06d9d753","modified":1659119942651},{"_id":"themes/next/.git_back/HEAD","hash":"509e0f78e789c5517a73f9884e9c4d0c89abf07b","modified":1659026243630},{"_id":"themes/next/.git_back/ORIG_HEAD","hash":"6fa54cf7dc7ba1d6ff679ac025299e6d6da06912","modified":1659119942686},{"_id":"themes/next/.git_back/COMMIT_EDITMSG","hash":"9adf4e2b0555afd2bc831f1871ec508c17ab0917","modified":1659119942627},{"_id":"themes/next/.git_back/config","hash":"a6e367c98183d0062d41440fd26cdb8e63805848","modified":1659119942734},{"_id":"themes/next/.git_back/description","hash":"88d76a8724b84a5bbcc3bea08650bc679a0b3da6","modified":1659026243739},{"_id":"themes/next/.git_back/config.backup","hash":"81b9d10b508fbb4d41c38f02174fb50caa49c041","modified":1659119942768},{"_id":"themes/next/.git_back/index","hash":"328c6637e624690c892af862d88c2e2a243cc57f","modified":1659119942797},{"_id":"themes/next/.git_back/packed-refs","hash":"541e891964b7e90241a03aabe75ceafc05363aed","modified":1659026256791},{"_id":"themes/next/.githooks_back/install.js","hash":"305c2a269818466eed9e381b866c6cd1ad7f8afd","modified":1659119954444},{"_id":"themes/next/.githooks_back/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1659119954460},{"_id":"themes/next/.github_back/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1659119954491},{"_id":"themes/next/.github_back/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1659119954491},{"_id":"themes/next/.github_back/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1659119954553},{"_id":"themes/next/.github_back/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1659119954553},{"_id":"themes/next/.github_back/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1659119954601},{"_id":"themes/next/.github_back/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1659119954632},{"_id":"themes/next/.github_back/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1659119954632},{"_id":"themes/next/.github_back/release-drafter.yml","hash":"de38f816e3023e0a5c1fd1f3c2b626f78bc35246","modified":1659119954679},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1659119955020},{"_id":"themes/next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1659119955020},{"_id":"themes/next/languages/bn.yml","hash":"842adcbab6a56762521a02f8b1d8c49c10e02a80","modified":1659119955020},{"_id":"themes/next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1659119955020},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1659119955036},{"_id":"themes/next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1659119955112},{"_id":"themes/next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1659119955128},{"_id":"themes/next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1659119955112},{"_id":"themes/next/languages/es.yml","hash":"21676d658d309eb90342a924e106645611c937bc","modified":1659119955112},{"_id":"themes/next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1659119955133},{"_id":"themes/next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1659119955136},{"_id":"themes/next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1659119955141},{"_id":"themes/next/languages/ko.yml","hash":"a4b607d38fb77f083235a0ecb2384cfdd3542bde","modified":1659119955144},{"_id":"themes/next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1659119955144},{"_id":"themes/next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1659119955144},{"_id":"themes/next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1659119955144},{"_id":"themes/next/languages/ru.yml","hash":"837bb39651769244b19ce458053757d429869764","modified":1659119955160},{"_id":"themes/next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1659119955160},{"_id":"themes/next/languages/tk.yml","hash":"bf61562ac892231bd28f23a2a5597ee98fb05aa6","modified":1659119955160},{"_id":"themes/next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1659119955160},{"_id":"themes/next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1659119955160},{"_id":"themes/next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1659119955160},{"_id":"themes/next/languages/zh-hk.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1659119955176},{"_id":"themes/next/languages/zh-CN.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1659119955176},{"_id":"themes/next/languages/zh-tw.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1659119955176},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1659119954999},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1659119955003},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1659119955005},{"_id":"themes/next/layout/_layout.njk","hash":"2842f3e9fdde5bbd14cac89629221e68d80c8ea1","modified":1659119955176},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1659119956832},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1659119956832},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1659119956832},{"_id":"themes/next/layout/page.njk","hash":"fddfdee95f5da86eab8a85d6eb1901996d2153cf","modified":1659119956879},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1659119956926},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1659119956879},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1659119960485},{"_id":"themes/next/.git_back/hooks/applypatch-msg.sample","hash":"61f0ed9af9a16dbba9b834edfb657f07aa10125d","modified":1659026243802},{"_id":"themes/next/.git_back/hooks/post-update.sample","hash":"6c00d034115de8f56eba4ded1eba7ffc73b332f6","modified":1659026243849},{"_id":"themes/next/.git_back/hooks/commit-msg.sample","hash":"e44c3d173580f6b4d8ee7f9b963d252af9902703","modified":1659026243833},{"_id":"themes/next/.git_back/hooks/fsmonitor-watchman.sample","hash":"bc6f0b202ab5f0514f6f41f2c19e0357e4d3b6af","modified":1659026243849},{"_id":"themes/next/.git_back/hooks/pre-applypatch.sample","hash":"7863e8a9fef55740491ab4429a13081a20a1dad9","modified":1659026243896},{"_id":"themes/next/.git_back/hooks/pre-commit.sample","hash":"faced4d64981b4555e392f9c8268f06c2b7ed7cc","modified":1659026243942},{"_id":"themes/next/.git_back/hooks/pre-merge-commit.sample","hash":"c5c42fa230ef1889142abacc0ec2294bf2690b26","modified":1659026243942},{"_id":"themes/next/.git_back/hooks/pre-rebase.sample","hash":"afa580632af0424e3af1a24e5c1e8ff6b2abb3b7","modified":1659026243989},{"_id":"themes/next/.git_back/hooks/pre-receive.sample","hash":"bfff8781c853c3d554371cc50e63ec70eb377711","modified":1659026243989},{"_id":"themes/next/.git_back/hooks/prepare-commit-msg.sample","hash":"255ff34ec71029bb23cf1257514d52eb99c9c8c1","modified":1659026244052},{"_id":"themes/next/.git_back/hooks/pre-push.sample","hash":"0b0a0cd594748680cfd6679b2244e21071801c50","modified":1659026243989},{"_id":"themes/next/.git_back/hooks/push-to-checkout.sample","hash":"2c046556894060ee38c2ba4414fa04d987f7760d","modified":1659026244052},{"_id":"themes/next/.git_back/hooks/update.sample","hash":"2c4156b4e1ec1480239471043d2f1c1752a1767e","modified":1659026244052},{"_id":"themes/next/.git_back/logs/HEAD","hash":"96863677fa2b70e049bd0a340701fcd772646082","modified":1659119942803},{"_id":"themes/next/.git_back/info/exclude","hash":"0214ce0925395605f10f65300bc1e4871dd9441e","modified":1659026244067},{"_id":"themes/next/.github_back/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1659119954507},{"_id":"themes/next/.github_back/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1659119954507},{"_id":"themes/next/.github_back/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1659119954538},{"_id":"themes/next/.github_back/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1659119954538},{"_id":"themes/next/.github_back/workflows/label-commenter.yml","hash":"b87ffaf40820461159c891d0d41c87e00e312ff3","modified":1659119954679},{"_id":"themes/next/.github_back/workflows/labeler.yml","hash":"bfea9b04e3ea7da31a2095277c4c23ae6bd14baa","modified":1659119954726},{"_id":"themes/next/.github_back/workflows/linter.yml","hash":"4c63c396416457c5c8bc593c72b56070630a0f12","modified":1659119954773},{"_id":"themes/next/.github_back/workflows/lock.yml","hash":"58eca481fd71088a8ae1dbc04645bcfc03460b87","modified":1659119954773},{"_id":"themes/next/.github_back/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1659119954821},{"_id":"themes/next/.github_back/workflows/tester.yml","hash":"dda18899fe62652c633f60c300a93df18f58862f","modified":1659119954856},{"_id":"themes/next/docs/ru/README.md","hash":"ce247fb6ba20c607be42957ff38f2dd6d71c12a4","modified":1659119955005},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1659119955005},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1659119955005},{"_id":"themes/next/docs/zh-CN/README.md","hash":"fc077960de61db02072573dd330ba2ca3ae9d4de","modified":1659119955005},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1659119955191},{"_id":"themes/next/layout/_macro/post.njk","hash":"ce639fff96aabea825d48fc2d928e07039bacb22","modified":1659119955191},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"beebc98f60b41f35bc3f687956a65f81f3145709","modified":1659283054848},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1659119955191},{"_id":"themes/next/layout/_partials/footer.njk","hash":"d31906d34aa62f8ede6e75060b472d84481747d9","modified":1659123369238},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1659119955317},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1659119955496},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1659119955755},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1659119955755},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1659119955818},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1659119956344},{"_id":"themes/next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1659119956385},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1659119956502},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1659119956548},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1659119956586},{"_id":"themes/next/scripts/events/index.js","hash":"e1c366efdab730a7791099115698c97b31b5ff78","modified":1659119956974},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1659119957255},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1659119957271},{"_id":"themes/next/scripts/filters/minify.js","hash":"81edb9cfda491b860ebeb5645c1f5349ccacfbec","modified":1659119957286},{"_id":"themes/next/scripts/filters/post.js","hash":"1ca7885ce5024bfda13e28e605a33ba335b8aea0","modified":1659119957286},{"_id":"themes/next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1659119957286},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1659119957286},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1659119957286},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"ad764d48715c5da87d33f048ad5f1ae8b4e2eb52","modified":1659119957333},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1659119957349},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1659119957349},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1659119957412},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1659119957454},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1659119957494},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1659119957520},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1659119957521},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1659119957524},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1659119957564},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1659119957607},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1659119957564},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1659119957607},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1659119957662},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1659119957662},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1659119957710},{"_id":"themes/next/source/css/_mixins.styl","hash":"74cf298800fa560e1521d1875f60b5097a5c3b4d","modified":1659119959320},{"_id":"themes/next/source/css/main.styl","hash":"38b8a12681a3a04bed02aa1659054912ed6def11","modified":1659119959742},{"_id":"themes/next/source/css/noscript.styl","hash":"68ae8709206919fdfe1166a440d7626843fcb33a","modified":1659119959742},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1659119093025},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1659119093041},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1659119093186},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1659119959789},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1659119959804},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1659119959836},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1659119959836},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1659119959851},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1659119959898},{"_id":"themes/next/source/js/motion.js","hash":"cce4f3cc59e76f899f3c1d9a7c53a33cf693d507","modified":1659119959898},{"_id":"themes/next/source/js/next-boot.js","hash":"da11083557070d947da48d29d2d60988c8d628e9","modified":1659119959898},{"_id":"themes/next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1659119959898},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1659119959898},{"_id":"themes/next/source/js/utils.js","hash":"8abd170f5d3c2399b8012fb08b22dbf4cef2e89f","modified":1659119960440},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1659119960444},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1659119960446},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1659119960483},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1659119960525},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1659119960527},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1659119960530},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1659119960568},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1659119960571},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1659119960613},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1659119960684},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1659119960643},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1659119960641},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1659119960685},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1659119960733},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1659119960736},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1659119960779},{"_id":"themes/next/.git_back/objects/01/d4632291abbbbb576aca1fc4924420a9a32e15","hash":"6bc3228d78e1f904f29d9fcbed9c5a9973862bb1","modified":1659119943018},{"_id":"themes/next/.git_back/objects/02/800aff86d846d1b909299da182d77be0ef2cb5","hash":"c3d266788f27e315163fc05aad696008cf3ca077","modified":1659119943046},{"_id":"themes/next/.git_back/objects/03/35a7605145ac2b24260ab3f50ff6b2e6c0537b","hash":"0be9872f470fa49ea8e54036dbd3cdf2f6a5e018","modified":1659119943068},{"_id":"themes/next/.git_back/objects/05/1e095c290b11dc2750df1fb22f9e1dc3287a7e","hash":"94613205d96c94edb8ee2637955779ece30e23a1","modified":1659119943095},{"_id":"themes/next/.git_back/objects/06/79546e28e7a699e24963ca29e0cf320c575dd2","hash":"a2b875ea89e936ead0303ff151313f55cbe147ed","modified":1659119943098},{"_id":"themes/next/.git_back/objects/06/a4c8ccfef76a1adb6f301df366c105696f4d8e","hash":"10cba2dc2b14f9c691672776946fbfa58eac68f7","modified":1659119943143},{"_id":"themes/next/.git_back/objects/08/0123186fa0128b9dcfc052e80af116184d8e4f","hash":"80e37c72eb8c6b0d6756dc0de7b499d137507345","modified":1659119943188},{"_id":"themes/next/.git_back/objects/08/67ab931de579eb0d4cc95a6afd5d6c6ff8a2bb","hash":"fc35b5090d7064ef44624421f97f067bffb9887e","modified":1659119943210},{"_id":"themes/next/.git_back/objects/0a/4a6ae5ddd7238957e15d366730db6de82aa8e8","hash":"584d41b1067a8247ede9646d01e5ad03846c385f","modified":1659119943213},{"_id":"themes/next/.git_back/objects/0a/f3b020b90ad383265e8d953105e85966fde6f7","hash":"da25638d396ad77d09f922f8e8d7f911e72daf01","modified":1659119943260},{"_id":"themes/next/.git_back/objects/0b/be5ce187a81dafcfea8ec3718041ae8581e5a9","hash":"d4373d69e3d0a16de6603319f15a482e2ae79955","modified":1659119943305},{"_id":"themes/next/.git_back/objects/0c/210d592c5005268af42165ff2c38246a2f18db","hash":"6bee718f2371ba67c5937cfed3c3c261b702087c","modified":1659119943328},{"_id":"themes/next/.git_back/objects/0e/b6f12be97694f0610aeb04e98d107a71014a29","hash":"c41447aa641e07ae905abeaa39f5eeab900cf0cd","modified":1659119943351},{"_id":"themes/next/.git_back/objects/0f/16aebddf080aeb15dfb9c73f862a2de48033a3","hash":"b7471cf8297e3e515524cec52aaf3206115c4b28","modified":1659119943380},{"_id":"themes/next/.git_back/objects/10/4b172167b07995d269029e3bc8cba00b88d5ff","hash":"9f5d702475d14ea0bf25ffaa8c0803fddc4d6669","modified":1659119943383},{"_id":"themes/next/.git_back/objects/10/bf170d01a0dc6d8e63683b52cd374cb8415e9a","hash":"832bf91c0f68bdeaff3af493a8b51a1d3b9629a5","modified":1659119943433},{"_id":"themes/next/.git_back/objects/12/55e2a9f2e37023acd7a941ffef28d339cd3be2","hash":"cbc96b81cff15fe163e9aff182f096a207e95072","modified":1659119943544},{"_id":"themes/next/.git_back/objects/13/78e78381bd8f422a6ad789f77044da810be5fe","hash":"a57d0b95e417033516c582d15a636d65228d29f6","modified":1659119943546},{"_id":"themes/next/.git_back/objects/14/0448c3fc02eb24eff16ba1c9c2e9bf955b76fe","hash":"a56d061dbf5b2105b95c4400f025339c53c1a6f5","modified":1659119943602},{"_id":"themes/next/.git_back/objects/14/94d8f4ab6181d1647ac717d7f21411da4a6e22","hash":"cf09d3944cfae3a9cea9fb97431db91d683d59c9","modified":1659119943642},{"_id":"themes/next/.git_back/objects/15/5de99f3e1ba7487b88c890afcd56f077329c8f","hash":"0d199a196c90874d098724f10adbe2984a0bf0f0","modified":1659119943671},{"_id":"themes/next/.git_back/objects/15/7aac77be304de3e88327a14e09b284574c4c6f","hash":"3dfc308fa500bd4c3c5eea60e8941cd97c58dd4f","modified":1659119943694},{"_id":"themes/next/.git_back/objects/15/a8ba8fb45764e33e22aeefc0e7b1f18c96db36","hash":"150de287e4eba9cfb47482941b41ba488b2fa231","modified":1659119943696},{"_id":"themes/next/.git_back/objects/15/edb70f339effc3efb6e89f6daa5af4e6194baa","hash":"dead712b3bb834cc28756d8ed20389b5584a9d67","modified":1659119943699},{"_id":"themes/next/.git_back/objects/17/70f275ceeb9313b9a6b27f09d85fa779476217","hash":"b9b5bd9435e0d10d116ad128da85f9dca79f9836","modified":1659119943701},{"_id":"themes/next/.git_back/objects/1a/60b5da59a339b7cb5c57e37e000874c505d06f","hash":"ad45d18f52bc2307cd4420147a1a610dd593b75b","modified":1659119943755},{"_id":"themes/next/.git_back/objects/1a/6bb0c10e1fa5e5e80ae073f3ff6722b097079c","hash":"b71b9086d6a18028d28a1c165ac35ff979c7c731","modified":1659119943793},{"_id":"themes/next/.git_back/objects/1c/2a88ebce40a211f8e66c3aaac13b0934b9c944","hash":"7f3ae69e009cbeabd5d42511210ad6710498bbd8","modified":1659119943820},{"_id":"themes/next/.git_back/objects/1c/8568621e94f722535d22e2e3007e62185b9a99","hash":"5a5d20490f6043aab7d6f1c497b83e75dbc13d61","modified":1659119943844},{"_id":"themes/next/.git_back/objects/1d/4b37a68479c93cf36556d60aee540642c06ada","hash":"5e4dae8f3a2627d0f64f2a703e4789df200d20ab","modified":1659119943902},{"_id":"themes/next/.git_back/objects/1e/b15990fddb51443905b1230d07d3f31c0016c4","hash":"dd808b0a51d1eb4a90946aec318c8ea75113cee9","modified":1659119943929},{"_id":"themes/next/.git_back/objects/20/602574021a9ba62e21dc0508d5ea4c4b540cba","hash":"290a2acf54c887de977ec9a1ba37fd11b040a57f","modified":1659119943962},{"_id":"themes/next/.git_back/objects/20/bf537a0112fefddb179514aa8b73a4cc7166e0","hash":"61255f336fafcb569896a4fa04255bb0b2eb26a9","modified":1659119943989},{"_id":"themes/next/.git_back/objects/21/04e3fd5eeb6ce2bd66e535dd715d261e68507f","hash":"0114f453e6b9c8737c8dcbf2a1afcc402d9a7aa7","modified":1659119943992},{"_id":"themes/next/.git_back/objects/21/4813214ab53fd46fe0a12b4714ee61a0d59f5e","hash":"01dc51a8e6d06f94bd6e362e7a8c8e273214e1c5","modified":1659119944078},{"_id":"themes/next/.git_back/objects/21/b95e68a87a0f5f9eec51930245b5566ec80503","hash":"c3413837a9f5de8cd805a422d7d8250b705d36a8","modified":1659119944080},{"_id":"themes/next/.git_back/objects/22/3bc5db624391e504790f3c7260ddf04c08629d","hash":"142ddce81ef1d0fc20129e2f9cb8b911e340245d","modified":1659119944137},{"_id":"themes/next/.git_back/objects/23/7898d7e8cd7dc1b06ec0cae8243fb7ca93b2ea","hash":"4fd876f7f460faa176a750a994423bf322e4154a","modified":1659119944140},{"_id":"themes/next/.git_back/objects/24/490b15a16271329e66d566dd3237fa332a3b8f","hash":"fc15061faa61001ccc8f8e3e782d98494c51525c","modified":1659119944189},{"_id":"themes/next/.git_back/objects/24/58f959f2f01c5ec7856dabd7fd7542f6a65ca2","hash":"e359a34365d8f7b53c6767088e9cb9903a765e8d","modified":1659119944245},{"_id":"themes/next/.git_back/objects/26/102876ad0c5c86d0ac8ab9a1abba3b88bbb887","hash":"6237ffc40c2040bb8817728b3262f94b34a292cf","modified":1659119944271},{"_id":"themes/next/.git_back/objects/26/ea322b551b360332f71f9760aa0d420070184a","hash":"142444d4e19b2f35f216ea63992c4742b12248c3","modified":1659119944302},{"_id":"themes/next/.git_back/objects/26/fa4e4de59e2fb4290d5641658b340c79050d5b","hash":"15a5f41afb2057d40637abbdf7cd70908a1746ac","modified":1659119944327},{"_id":"themes/next/.git_back/objects/28/2738c5bcfaf3169d3302a9eebb2241ae1ea2a0","hash":"180a72617f9b9b84ff9792226d1f64f6122fb914","modified":1659119944383},{"_id":"themes/next/.git_back/objects/28/486d5a5168c0bccb09dfe053127111ccdc3faf","hash":"e47203f55803eacab959261a7f32ebd9ae5e62b0","modified":1659119944384},{"_id":"themes/next/.git_back/objects/28/9f5084fd97986321844da71430bff425266861","hash":"6b4a1a0bc790d90256ace8ffab81de80139268ff","modified":1659119944454},{"_id":"themes/next/.git_back/objects/28/f7ca707866cfb7ebb30d53a2d3042f6cf46e10","hash":"e091dbe8363e3c8c3768a906756328ddf65f3114","modified":1659119944501},{"_id":"themes/next/.git_back/objects/2c/abf9de53d90e55b7368d10433db02a36ab811d","hash":"d90cf17b74b717a398a6e12474eca45f9656366b","modified":1659119944536},{"_id":"themes/next/.git_back/objects/27/403f0f856e6c601865c8c0bc40c47bb7baf451","hash":"909ca349528092c5cf1c703f35f75831c92b3cf8","modified":1659119944330},{"_id":"themes/next/.git_back/objects/2d/39d690d8c47027c5007214f3b89eb687d70639","hash":"1eddf4ed0b141c381b504bf3ec5f3c1b5ce16e45","modified":1659119944562},{"_id":"themes/next/.git_back/objects/2f/27b47450953356de6b2060ab5c559a792f7615","hash":"e27715edbdd7fdd98e731d7ba02998ff03501b53","modified":1659119944662},{"_id":"themes/next/.git_back/objects/2f/d1369958abc67dedc6724f903316fb795e05d1","hash":"df9218facb6d56267acdda21259424a6fd9935fe","modified":1659119944718},{"_id":"themes/next/.git_back/objects/2f/571e2e637341b6d2e01bf7639f701d9c0b6276","hash":"110d9e64c4d424dcc1d5d10adc4072d98a353528","modified":1659119944693},{"_id":"themes/next/.git_back/objects/31/56fb1736b62af2d7e6afdd160e17bc7c45a4a9","hash":"61c84f986f1377f732002cb9b42d10c0b0e2b51c","modified":1659119944777},{"_id":"themes/next/.git_back/objects/2e/429587e789e85c5a279747c5aa310888895bf9","hash":"b5940c65067372e921e56a82595838af0cd8573b","modified":1659119944564},{"_id":"themes/next/.git_back/objects/2e/be60fd3f519aa7806a559d71158d5a2d77ec48","hash":"c9860b41f2d65dc87a6aab5db44c70bd48eb9407","modified":1659119944612},{"_id":"themes/next/.git_back/objects/2e/ddc8202879e2a0ba53f95a98a4b3253bcd6928","hash":"556a04750e134d2f57e3223fb12136f121dbce0a","modified":1659119944614},{"_id":"themes/next/.git_back/objects/34/253879e21c6ce800b7cb4bceee400ce33fbe60","hash":"017bed925af4a610278c22605cac6bfb321b888f","modified":1659119944812},{"_id":"themes/next/.git_back/objects/34/3a121856a874e0ca72e7a2e40dea9772c2edbf","hash":"128cc2b9081b1f2897b54c324c70284ef8c24097","modified":1659119944814},{"_id":"themes/next/.git_back/objects/34/a1a5c0286af9df0c1b302b07d944925d2b9c93","hash":"637f1ad029efe86192195b2545c980e66d120c3c","modified":1659119944902},{"_id":"themes/next/.git_back/objects/34/6c1ca9b7546277345bc803eaa63fde441e8896","hash":"5c02aa4f2ee00dc6063be3bbbcade55065659a86","modified":1659119944858},{"_id":"themes/next/.git_back/objects/31/17c2d940f9862a0e5ccfabe096f765ad32f1bc","hash":"7fc68351f534ce501dada3913c188e80a69bf62a","modified":1659119944753},{"_id":"themes/next/.git_back/objects/35/e35d96f093bb2f61f7b4102f5a8ff924477df1","hash":"59b28d78889ea6e404f7cfdbdfce338f9485b018","modified":1659119944930},{"_id":"themes/next/.git_back/objects/34/b529ca8afac207eafc0f2973c433b4e8649581","hash":"7727368a2132cf284e6c12fa8c55c4b8696d4eca","modified":1659119944927},{"_id":"themes/next/.git_back/objects/36/10f427bc2ebc41677d80ff90e8404545960702","hash":"6d865ad168c02f4b897d2510d1c10d13d3159768","modified":1659119944995},{"_id":"themes/next/.git_back/objects/36/bff9e418d580014f545bd83861d9be2d62a3e7","hash":"b4f5142974c29b91d3a20282a7222f5fc15ebcf0","modified":1659119945045},{"_id":"themes/next/.git_back/objects/37/024e9cc3fb6b19d2665b15cf309f9f32a64611","hash":"a37bb68dc034b7b70987c5c041d0032c755b6533","modified":1659119945563},{"_id":"themes/next/.git_back/objects/37/075df2ea22da069aebee20f90d7d779e93957a","hash":"706c52720b95dc63521a0eb1d12df8cecc98ab42","modified":1659119945565},{"_id":"themes/next/.git_back/objects/37/d9f6c98949867cc881716b44a8059763c856e5","hash":"3227041bf9ad691e50acf07da3e78ad6090f4ed2","modified":1659119945626},{"_id":"themes/next/.git_back/objects/37/ee263d60cc65e71695731ea47e26ae7d6d6178","hash":"19a2d2c653e428ddcf8e82e06032db64014ee146","modified":1659119945678},{"_id":"themes/next/.git_back/objects/38/12c77cdcaf1c8a2f48466a6b201974e3aa5dc8","hash":"0441ff028718d93499e991e387492586be0ffa82","modified":1659119945712},{"_id":"themes/next/.git_back/objects/39/4ece702df6f61b5bd73c74799824ba60f52008","hash":"5f0741ccb3edeea86d160083465ba029997cca28","modified":1659119945737},{"_id":"themes/next/.git_back/objects/39/69e782af6131a177229c314f4c6aa44e39ae0e","hash":"7467684950e11039963cec3acb5ff1e033173c3e","modified":1659119945769},{"_id":"themes/next/.git_back/objects/3a/6e3a296dd994cfd8a45970c38fcdd4f3d1cd05","hash":"163af85b74f88cf9533092434bb619d085ed1e63","modified":1659119945796},{"_id":"themes/next/.git_back/objects/3b/9b48991396b58c315784f1005287fe2b6af102","hash":"342deadb291629cf14a9a3b4dac512ef968d9a1a","modified":1659119945823},{"_id":"themes/next/.git_back/objects/3b/f0c94dcb2dbf9a18a98b2b89069cae375d9f29","hash":"1f5590088a9640a70305d3416b4d8e708fb86f7b","modified":1659119945839},{"_id":"themes/next/.git_back/objects/3b/f5ad0ac65fca1215b459ca526292828e793270","hash":"e572559e16d9a6509eb03bb415ad1eac2784364d","modified":1659119945886},{"_id":"themes/next/.git_back/objects/3c/7b24b84276878c4b6ef8da89581a1c41ef4f55","hash":"6cef012657280a99872b05ada49026317121c858","modified":1659119945886},{"_id":"themes/next/.git_back/objects/3c/ebb774354334f7d876d0fb4bfbdd01e7723374","hash":"5da0fc811ebb2bf4d544f0aac768bf656befc456","modified":1659119945886},{"_id":"themes/next/.git_back/objects/3e/1817788b0be2319889131cb72ce7e2e8d05127","hash":"22b97f9268e556c007ea86c7a6e11a7ba3b57d24","modified":1659119945969},{"_id":"themes/next/.git_back/objects/3f/834ca2b6def6887436383d1d42695c4a358d8d","hash":"d15044de849e2251114fb1e2c0659af9419e6639","modified":1659119946000},{"_id":"themes/next/.git_back/objects/40/713c41db1af09782032e9fdd2847a1b1cb189c","hash":"a41c8fa9d756e5e8fc6d8590c0a780f24be7fd1e","modified":1659119946000},{"_id":"themes/next/.git_back/objects/40/d54dd3ea78be0f37de41f51e254cc0f5ab27d2","hash":"7cf452ef58ec433d34de16edc1abe02bb787bf25","modified":1659119946047},{"_id":"themes/next/.git_back/objects/41/96535756bd04961be8b91a20426dfd23eb89e7","hash":"bad7942299f685b5e75631c5ecd65ecd70bacd09","modified":1659119946062},{"_id":"themes/next/.git_back/objects/41/e35abbac3b631f44e08e5a5882512fce4a8467","hash":"61547631bb5d93552314cf5223f34563ff976bd1","modified":1659119946109},{"_id":"themes/next/.git_back/objects/41/e5b866c828a2abf66263cecd92cc626ee7e069","hash":"997f57518053574329da9e7a4ff8ffed5e021e8c","modified":1659119946109},{"_id":"themes/next/.git_back/objects/42/2b39d12822bac72fcc134bd0dab6be414319b8","hash":"7db3956ab6a51a58130aa43103c7a71a5d1aec27","modified":1659119946156},{"_id":"themes/next/.git_back/objects/42/88fd2b9d53bdbffd97baf879094314cd33ab16","hash":"b255851dd27b16d191bafb3f8ee3edcb93a43d4d","modified":1659119946203},{"_id":"themes/next/.git_back/objects/42/fd3f1226f0152819f670738c22f33df3fb98e7","hash":"df544b46962a018312fd99b51e773598475cd8ca","modified":1659119946235},{"_id":"themes/next/.git_back/objects/44/3ddd94ab74e22561634225ae6b08409dda8a8e","hash":"388134da9bea390bffb0086342c8a187fddb5e46","modified":1659119946235},{"_id":"themes/next/.git_back/objects/44/7793bcc907dc738a877afe8518ac0e68b05728","hash":"f96f8f70dd139437e2e0208aa66160b9a1063c18","modified":1659119946235},{"_id":"themes/next/.git_back/objects/45/37fcb3eb7faa16e9350ae58a0ec9469126bd5d","hash":"ba98f95038f5874f5472e0f5b150ea1844ae1e11","modified":1659119946318},{"_id":"themes/next/.git_back/objects/45/77a472a5c916590ff721fe743cb33dfefb82ea","hash":"eeea7ab59dde4e59f130a34d72007fc455da3522","modified":1659119946365},{"_id":"themes/next/.git_back/objects/45/8a0676554d1a8dedfbb617f80bc411169e7537","hash":"97387f51bce9cbadae6c78973375ec8f4a46c150","modified":1659119946365},{"_id":"themes/next/.git_back/objects/46/0b545a4639ea4156e625d59ca766b70b79db75","hash":"5621b7b4344a46236635b96b5484c6a1fdf2b432","modified":1659119946430},{"_id":"themes/next/.git_back/objects/46/3441055615ef0ee9bd6b88577ca3cdcffdd82f","hash":"ca1b547638a2151ffc384103d3090c50543f9504","modified":1659119946477},{"_id":"themes/next/.git_back/objects/46/8a948ba19f3f3f20679bdb4bfe12bec6f2aa96","hash":"c9d719891f01b424b2259807352a0d64b064c20e","modified":1659119946508},{"_id":"themes/next/.git_back/objects/47/4b51ca3c55d85baf17587f07251a1c8b49fa6a","hash":"2e28f5f40e14230baefb20c7acc8fd6fb95dd161","modified":1659119946523},{"_id":"themes/next/.git_back/objects/48/e5c1e8a72e4e23f1735372ea8d812cafee2f1f","hash":"8a5ce9d9c9b28b76281bafc2994e63d62f1b1c10","modified":1659119946555},{"_id":"themes/next/.git_back/objects/49/d6ac9e903b0394dbc5734efc5c8eec839df942","hash":"f291bb5b6f4cb937dc42af32fd5fe8008277eab4","modified":1659119946570},{"_id":"themes/next/.git_back/objects/4a/76acaccb720a7a63c5746e7f2f1f00f0136f5d","hash":"240a701b9b5746ca8f61bb983acad268f671c34e","modified":1659119946617},{"_id":"themes/next/.git_back/objects/4b/3a29687d123c343aa5ef8582d4e4f314aad012","hash":"68a3d576035a57f194ff6dcd16efa04beacd4717","modified":1659119946617},{"_id":"themes/next/.git_back/objects/4b/4ad8d29291a013a403a441c1b18f840167d432","hash":"8c24baafeddcb4849d32e913f1533ff688890a80","modified":1659119946664},{"_id":"themes/next/.git_back/objects/4d/17d7b0102c05d9a1820f77036dade68c8108a4","hash":"4487b8c2a811456d4cf0a8e3ece042671b43c1a3","modified":1659119946664},{"_id":"themes/next/.git_back/objects/4d/cc1868602441bdc5f04ab67a683c4819d471a0","hash":"78bce6a90ebd1f913c7db3f7bcc86c610dad8ff8","modified":1659119946728},{"_id":"themes/next/.git_back/objects/4e/4a8358478e918318c8039ecdc184ac7c3bb1ff","hash":"a53c5ec5284d22c623934252f06e40dbb0b50c01","modified":1659119946760},{"_id":"themes/next/.git_back/objects/4e/5c9ed0dd4c67cc9e6259871b9113aab36f2af1","hash":"6a7cbe25dbab06402faf5e5feff006a70fdc9cf8","modified":1659119946792},{"_id":"themes/next/.git_back/objects/4e/95877f9f08f9f77e87ca425690a39eb86cacb4","hash":"b4ab87eaeaf1935cf246ac898020a6dab4207cf0","modified":1659119946823},{"_id":"themes/next/.git_back/objects/50/313e20d2d778f540fc5b2cd4e9b2652fb7681b","hash":"ceffffa574b6beb5d78f835b50bc63d1795a8455","modified":1659119946823},{"_id":"themes/next/.git_back/objects/50/ac9c28c48d694edcd1a6252d11a7468c3bc21f","hash":"7ff27329eafd531f82bc33797eaaa46d10318bc1","modified":1659119946870},{"_id":"themes/next/.git_back/objects/51/7ae79fea4e58e67c952750ec96d736ab63ac51","hash":"b2610d49d42bb7cf5420f727159de5dfce6a0646","modified":1659119946870},{"_id":"themes/next/.git_back/objects/51/90398b24837dceb8cc9c7baa818fda73c147b3","hash":"ec94a2e73b3a0e64af7d0775f92d2409ad0d4b60","modified":1659119946917},{"_id":"themes/next/.git_back/objects/51/c90e31efe3c560c91bc2cd03e69372a2ddc69a","hash":"eb9698ddb1b6930e42d9b3692195ba3ce4589408","modified":1659119946948},{"_id":"themes/next/.git_back/objects/52/9b2aea2096386a7bf96ee2716753b8763c9325","hash":"62dff0ebcd926fc3f90dbf419dce079a8e7f3728","modified":1659119946963},{"_id":"themes/next/.git_back/objects/54/1e082959660bcccef850324436e9979b317032","hash":"7b0ec9dab212454b57626906d3f6313604ce7290","modified":1659119946979},{"_id":"themes/next/.git_back/objects/55/24f59ea6be094bdafe98bc3402f1e4c555b317","hash":"ce2083c6a511ee7f6a486fa458437c712ad6ff76","modified":1659119946979},{"_id":"themes/next/.git_back/objects/55/6997ec103951ad9a3a0c5ac1e1e0d5e2875cbe","hash":"5b7101d63d97b4b83d54b200ed2a03c38367a104","modified":1659119947044},{"_id":"themes/next/.git_back/objects/55/78ea5d6f1c9b24843d461dab816a721e327ed9","hash":"ccbda79be34ddfe0acbb09a5851bd557e8794f49","modified":1659119947100},{"_id":"themes/next/.git_back/objects/57/45cf0b766e3b6bc19e61cc0b3c1aa32f20ae93","hash":"5e8a1c069d95f2a720301aacd9829b0ac13491c6","modified":1659119947100},{"_id":"themes/next/.git_back/objects/59/3441b0892565903238be03540fd640eb52ff65","hash":"f54747e917168b9db8d13af4167301b8a80c67f5","modified":1659119947178},{"_id":"themes/next/.git_back/objects/5a/5ea10da4d531a68602a112a3901a570fca7499","hash":"8a23591d93dfc646dcc8688f8e2bd366093de4a2","modified":1659119947178},{"_id":"themes/next/.git_back/objects/59/1f6c098b3501a8286b7b3aec7623858dc9e45c","hash":"0b91e73e56f968477916f1a5dec7107b98673912","modified":1659119947147},{"_id":"themes/next/.git_back/objects/5a/dc813af220fa1215f6a48f2f46492c6505741c","hash":"3b46d655014eda8581b9f96301f0c8479cffc9d7","modified":1659119947178},{"_id":"themes/next/.git_back/objects/5b/0ccb6fd63bd8903da33de5fd043fa8f7c2af27","hash":"d607e57e82204eb9620e87545ffc6ca382af4ee0","modified":1659119947241},{"_id":"themes/next/.git_back/objects/5c/119b88536744132e793c686a9b040521e135d3","hash":"7390d8cbc3ad2420c94e38bc983c1901cf087ea4","modified":1659119947272},{"_id":"themes/next/.git_back/objects/5d/6227674eb837718a5e46155b77ba17e83ee07e","hash":"c870bd6d45821e89f38e8a4207b07906376e10aa","modified":1659119947288},{"_id":"themes/next/.git_back/objects/5e/5bb2fb14930a09f549ddcacb31087fa2b916d0","hash":"c3945d596afd73328660fc6eebdca59a3ebdac07","modified":1659119947319},{"_id":"themes/next/.git_back/objects/60/12def48c965ac7311d5fe9e62a960ea52f4da3","hash":"cfaab7d9cd935e66416b3e33ad3e8e4ea76fe770","modified":1659119947351},{"_id":"themes/next/.git_back/objects/60/6c7af345e2b9d1d205d58d5d87709d124f19c7","hash":"7737968ca35f1df9b0527170e6bbffee62b1baea","modified":1659119947366},{"_id":"themes/next/.git_back/objects/60/b642bf29fea6cba848ff65a95ea81d6cf3dd5a","hash":"d936b47b40539dec76ab2ec426c484e9872e0e5d","modified":1659119947398},{"_id":"themes/next/.git_back/objects/60/f9772106cc913a926150c8ead7bacbc0c7ede9","hash":"d3986ce66601253966724e8be29e31155467497b","modified":1659119947398},{"_id":"themes/next/.git_back/objects/62/576a29bde862429c867edf1091febfafc293fb","hash":"8d875cdad71df5d95fe05dd37321d09f66f26fc4","modified":1659119947398},{"_id":"themes/next/.git_back/objects/63/1d8e086e7a842a226145a6afbcb71f48150424","hash":"85ad45b39df8ee6860801f11c866cf8e036ac391","modified":1659119947476},{"_id":"themes/next/.git_back/objects/63/9e36d136638d121ea1b9d07de4cc9cb0d09917","hash":"44c824693d358908dbe998a27a08a09af44b528c","modified":1659119947521},{"_id":"themes/next/.git_back/objects/63/a40201d43f2bd231cf925c02c69f172b0e4cfc","hash":"0721eba1fcc0ba8c22d59cf86ceb549509f89f41","modified":1659119947523},{"_id":"themes/next/.git_back/objects/64/c4dc2a2c7c194f74aa84300235937c9cc5552a","hash":"ae57c0f16b10f204d6179551cf3455e70ab2c0ef","modified":1659119947555},{"_id":"themes/next/.git_back/objects/64/ca50397d517dcd3b07a92558f5afe60aaca456","hash":"de7135d2ab58ca38f2d5fd98225528e508ddc40a","modified":1659119947586},{"_id":"themes/next/.git_back/objects/65/afc7f83de043c72275ad9890c6432d539452a1","hash":"ed8f0b2e57b629f1ba6e095938b85bd93f4da58f","modified":1659119947617},{"_id":"themes/next/.git_back/objects/66/26183d4c06618d673453aa52f9ed39d3f546a7","hash":"4bed03402ca6eb54b8a844a3dd45a5acd157571f","modified":1659119947633},{"_id":"themes/next/.git_back/objects/66/4fd6a799a9379c2179b2d6c52f90b888d5f68e","hash":"3ec16f537ec90ed2d0ceaec5c1c6635dd27ea378","modified":1659119947664},{"_id":"themes/next/.git_back/objects/67/13babb3789233759e4ee546d724b518955c80d","hash":"d8feca849faf7a90c6e47b6313ede6e808c2094c","modified":1659119947695},{"_id":"themes/next/.git_back/objects/67/1be39190257a0a6a86709af87208bff6d8756f","hash":"11328f098e237d70072756860e2f8245f5aa3003","modified":1659119947711},{"_id":"themes/next/.git_back/objects/68/05d18dea8cb71feb2e7f9779b15c07691d0aa5","hash":"07151c5d84e4ae39f13a936da4f14868534fd7e9","modified":1659119947742},{"_id":"themes/next/.git_back/objects/69/990a324099e7021b19521f9364f1049c05b0c3","hash":"f3a56e1745dbd29ff8085be7b4c022742798431a","modified":1659119947758},{"_id":"themes/next/.git_back/objects/6a/bc20cafea6698e8d80c31919f46220c0d38942","hash":"58d93c89dd4f3537951e79c113c4cd3ef5633016","modified":1659119947789},{"_id":"themes/next/.git_back/objects/6b/ef367c2d4a116199d650cbee423a6a7847870f","hash":"d57f5ba8a6e6df4acfa60053900dff74126b6847","modified":1659119947805},{"_id":"themes/next/.git_back/objects/6c/4988f8448e1488f35e6dd6475a5f8267864c2f","hash":"4006676e493b21f2a72c95c4ce4902520bf5eb5d","modified":1659119947820},{"_id":"themes/next/.git_back/objects/6c/f376c257a8de07c20b01aba10724fad38d4df2","hash":"73e54c2d325bcf397a8df4b23a43ba459e57f1f7","modified":1659119947820},{"_id":"themes/next/.git_back/objects/6d/5af8815ebac55c9c3fdbe699e2a1f2180e4d11","hash":"62d4fc0a05682c7b1f8eeaf2d2ae663579730e9d","modified":1659119947851},{"_id":"themes/next/.git_back/objects/6e/db7859f3ce148ed8546c12331ca9f69cc8847f","hash":"2a46bf9087ea3834917fafe8b2b42e7f82e63a2a","modified":1659119947883},{"_id":"themes/next/.git_back/objects/6f/159f513cafbed45136b8982554c32e067d75fe","hash":"605e6b9b3ab611fe2271d48aa28967282aff052c","modified":1659119947914},{"_id":"themes/next/.git_back/objects/6f/e7f9ccd2fae5a63e0b71f39dd9b7e1594808b5","hash":"031df155610baaa65e0c236c5f98dd7004ed3ef6","modified":1659119947945},{"_id":"themes/next/.git_back/objects/70/0f6fffe983a616461d28dd6af99c1dfdfe2071","hash":"22f745fce20d4eae462718059aec7ecf92fd10cd","modified":1659119947961},{"_id":"themes/next/.git_back/objects/70/aea2bb56dd9dfe22c9893f965f556f71ee928f","hash":"1ee632a9d4189adbe8660c492b9900705a43559b","modified":1659119947992},{"_id":"themes/next/.git_back/objects/70/db4a8dc6459ad49e09f742c7e7611648457d97","hash":"c503ceedd987efb4d58c5113e09ee57d4a5d362d","modified":1659119948008},{"_id":"themes/next/.git_back/objects/71/07c4c7c20a8c6abbf90bcace5fa6a9b31352e7","hash":"f79997cbd99fb0ad0d09a409a5eb4769f83c1d64","modified":1659119948039},{"_id":"themes/next/.git_back/objects/73/0405c9766e9509abaf8ff77311b1204ce16076","hash":"a57d92bbcc4d8bab62ae80b2987a47ab8183d44c","modified":1659119948039},{"_id":"themes/next/.git_back/objects/71/43612c142cca8fa029a634e33903c5f53b2d74","hash":"c05f691c1cb5a04fa45ffdab62547c0b71d0053c","modified":1659119948039},{"_id":"themes/next/.git_back/objects/73/2306208ad95a504fb67b4fdd4e8fba53bf61f4","hash":"dd47392569f8fc8ba8d690774b17e353799f84c8","modified":1659119948086},{"_id":"themes/next/.git_back/objects/73/c7013fb2f97f1739dbf24552f0136dbfec9712","hash":"54425130b37e51bd265f12f6629cd17af4aff1bd","modified":1659119948086},{"_id":"themes/next/.git_back/objects/73/d8731bb9c9620f94b994dd241ea983d988e49e","hash":"a04400ec0c66a99587197d12d3790e68a1483a2c","modified":1659119948133},{"_id":"themes/next/.git_back/objects/79/a7255f5c329b99e9785c0f5c17fbd76e863c15","hash":"536e37c528a6c13a9ef975e12c595a6775c5dc0e","modified":1659119948180},{"_id":"themes/next/.git_back/objects/7a/21dd685372cc8ebc2c74c0ad0d9ce9a720b612","hash":"4b1da531e3e45e8e63ed03b8ba10c4a533446f11","modified":1659119948211},{"_id":"themes/next/.git_back/objects/78/ec4ddd578a5bd0d855f051bc89c0ba4c6a261d","hash":"1f81d8c1bbb61a0b6642499e5b4e06aa63abd1db","modified":1659119948148},{"_id":"themes/next/.git_back/objects/7b/914ce01e53ff74e907f08b25109af9c4c0a65a","hash":"905d7da8b5ef66b0da1830566bd44fabdc821f65","modified":1659119948226},{"_id":"themes/next/.git_back/objects/7b/c650c766267dd7ee1700fda58eb475db97632e","hash":"ba90f232346dc084c442a61b92aea4021b53b4e0","modified":1659119948226},{"_id":"themes/next/.git_back/objects/7b/d32b2c380a0ca80614bce29fe8c6aaa0574356","hash":"a74acf32f1aeefc79ba5c4dd22a800eb3fb2165e","modified":1659119948273},{"_id":"themes/next/.git_back/objects/7b/f1057aa89fb757ac9fbee55cb4e154d9f2555e","hash":"f1365feca39b3c4eab94c15502f4d34653b808c0","modified":1659119948305},{"_id":"themes/next/.git_back/objects/7c/502897b2176b408531811f9342deacd30af16d","hash":"a6011ac53105d5db325560d6068b7e8059c6ed71","modified":1659119948337},{"_id":"themes/next/.git_back/objects/7c/9370e8e1965b3e00266d36541b62935c035ee8","hash":"7061228a1496abc00845f969f0e1da430676e65b","modified":1659119948337},{"_id":"themes/next/.git_back/objects/7d/d67ef28884e91743cc7c60f24ea4b237a00636","hash":"4477575ff8c7a5b44d09610962969327eb3b9e9b","modified":1659119948367},{"_id":"themes/next/.git_back/objects/7e/951ca40d82cf6d68693873eba9cbcbbd223a25","hash":"0a2d51841cb63168c441aa4a72b9e4717ae2de12","modified":1659119948399},{"_id":"themes/next/.git_back/objects/7f/273872e1281c4df865e39858a98c123faff564","hash":"a626d6d92b28339739926712c7f09cd7dd76c2b3","modified":1659119948430},{"_id":"themes/next/.git_back/objects/7f/69808332f98efd9d95e9f04b025e98dfc8ce01","hash":"6966cca077a97943e24692406f5bad82943f01ae","modified":1659119948446},{"_id":"themes/next/.git_back/objects/80/fe036e96ffcf4823b79d623aeb087cc39fd6f5","hash":"3d698895d7f1f1789e563e0f28d07ec4f7f32c5e","modified":1659119948477},{"_id":"themes/next/.git_back/objects/81/08c1cecc8e2b30ef9a863d0ed5d03cefbaabfb","hash":"b9f40624d22581aaf7e962c516bf13f1e33e52d8","modified":1659119948477},{"_id":"themes/next/.git_back/objects/81/75daab081114c93aed8d7e106cbbafeb896da3","hash":"10f336d87203f58f396930b24339e4e2e000a33f","modified":1659119948524},{"_id":"themes/next/.git_back/objects/82/59125be842d132476da6db5f0de060e764e583","hash":"4b772221cde562fb2237a1bc7fee6ee8872636d3","modified":1659119948539},{"_id":"themes/next/.git_back/objects/82/eab9e644fbf38b6d2a17075731df1e66bcec0a","hash":"d6a60773b5ce87f9b6ea425a4da45df850c3cc08","modified":1659119948586},{"_id":"themes/next/.git_back/objects/83/0f8a2c9115da88fe32a6770061337f5dc21278","hash":"6e19a5e06ed424e867eddde91f271761ea0a0f25","modified":1659119948586},{"_id":"themes/next/.git_back/objects/85/8ffdf893feabc9753abc350164e0cd13fddb86","hash":"2e510b09c7ddbf599bf6b18460be6530e21ce592","modified":1659119948664},{"_id":"themes/next/.git_back/objects/83/195e6f02a5edde17355b0dfa50dd9c6c34b4e8","hash":"71ce6c3a525a0822b24de69490fb08b626458b98","modified":1659119948586},{"_id":"themes/next/.git_back/objects/83/2f6207817278a0e34e1c427b6bbe6c4d5b5c8a","hash":"972e69ed8232c88db2e58f3c9f9783e903f2d480","modified":1659119948633},{"_id":"themes/next/.git_back/objects/86/29b74a622e919a7c2c36861c138cc5b22d6f61","hash":"6483cdddc149552bf7888e09f8110755fd17e7a4","modified":1659119948680},{"_id":"themes/next/.git_back/objects/86/aee48665f5aad52ae26533fff3f6ad7f0e2b39","hash":"79e81d5f1fddf09679f6d09abf5f53f890e2b361","modified":1659119948680},{"_id":"themes/next/.git_back/objects/87/47a508dbbba6885fb654e752b4efbac9ecd204","hash":"3e8d0d9f9824f20e1ab01cad87d3abdf0f0506d6","modified":1659119948727},{"_id":"themes/next/.git_back/objects/88/1acad26d4c30db6c9fd47fc001f6592b96dc3d","hash":"5b45542d20246301dbc0d721201a8ae643f01c95","modified":1659119948774},{"_id":"themes/next/.git_back/objects/88/65d9784857fc7d9df62d4b0bc083bb7842e6eb","hash":"17ecbca8be5205b1af18492702fa34e69d305027","modified":1659119948789},{"_id":"themes/next/.git_back/objects/89/b9ab64315b51aba21d0ef29f0b9f9171cbbafc","hash":"3319fcf34c7b2570564c0cf1a6114dadc8f6bb06","modified":1659119948820},{"_id":"themes/next/.git_back/objects/8a/905e47580f198ea0308088edc8efcd749a06cc","hash":"92d31778266ed27dcdefbe51e7064e1df6a8b75f","modified":1659119948852},{"_id":"themes/next/.git_back/objects/8c/10693a11bf447355a00827ab0904f18ff1860c","hash":"e171185ad6be4a0e73ea64cf44a8edb8e74fbfb8","modified":1659119948873},{"_id":"themes/next/.git_back/objects/8d/a0165f4a25873d0ef5e954efb06b33137bf623","hash":"5f15142e8cbf0763f2783a1030e1246040ea00c5","modified":1659119948940},{"_id":"themes/next/.git_back/objects/8e/a0b231b387bbbb1d8fc0ca526196a6c507ed03","hash":"f1b6242249227c40ab13d314f6cb759604698adb","modified":1659119948972},{"_id":"themes/next/.git_back/objects/8e/e55c85ca0e43b9d0ee4c8854f38f81419023c2","hash":"f17938ceda8499e75e562f755ca8be718861ad03","modified":1659119949003},{"_id":"themes/next/.git_back/objects/8f/8eca12b5010dbbfbd8a4951b70756e275671e6","hash":"bf70c10f256c96a9b23b82c9fc63451aff567c34","modified":1659119949003},{"_id":"themes/next/.git_back/objects/90/b12f69d50ae11b37a7afc7b374db263cef15f2","hash":"65ffef06705576a3c2c5a47588ddbc9fb7b62b16","modified":1659119949034},{"_id":"themes/next/.git_back/objects/90/ef99c1ea14aa5f9e2f3b07d63fb3eb5c95ab2f","hash":"d705642767b9ec80f2d0641293c33a683c767f7d","modified":1659119949050},{"_id":"themes/next/.git_back/objects/91/f14ad3c6bb29df556f8168c254052416d70028","hash":"8d3494a5f514e536272ec045148f926040e85e15","modified":1659119949097},{"_id":"themes/next/.git_back/objects/92/2a9853adad03754860b3f9ef48b3e3e7d7ebbd","hash":"5129df5256154b4dd616d53d83dffbe03b641dfa","modified":1659119949112},{"_id":"themes/next/.git_back/objects/93/fe4e9fef50fc420dfb2517a98e85e155fbe3cb","hash":"805670aafdf106d2e8ab2a05582ec0db30c0e0c3","modified":1659119949143},{"_id":"themes/next/.git_back/objects/94/63076f8ff07c95ff65d1eb0ee79cc4d8a6b9c8","hash":"3ed3a7af35c7cd28408b017a8095475ef8f3a682","modified":1659119949159},{"_id":"themes/next/.git_back/objects/95/5bb2c5539cd022ff4906733392fddc46bf9ea0","hash":"b2d2f7008944f3f1469f53797e4c5b8d86b10dff","modified":1659119949159},{"_id":"themes/next/.git_back/objects/95/cc62db0d32235c979811475849c685968f7035","hash":"4f75808b451c16fd07327edd7b34ba5169557138","modified":1659119949222},{"_id":"themes/next/.git_back/objects/95/cef2052040da1cab6890c4ae2ec55efe446d79","hash":"895fa95a767acb6082ea4df1bfb66bb844e6e3ad","modified":1659119949253},{"_id":"themes/next/.git_back/objects/95/dcd77f3895e7d86cae6bc40653f5e7a7ece45f","hash":"2e1302bdc56b6d1909c9179c3511f85679f6bc03","modified":1659119949253},{"_id":"themes/next/.git_back/objects/96/7b3af420bce79cae8ff76bd4647bdee7e64954","hash":"8e1d4265c88dc12f975f89af9b906e50368b907a","modified":1659119949253},{"_id":"themes/next/.git_back/objects/97/75757384cbff2740e11612dce2d257c0f6e75a","hash":"7bb67b4623d607ac2d6c4ee280ecc81a6dc85dc2","modified":1659119949300},{"_id":"themes/next/.git_back/objects/97/e3d815300e91346982cbea9a5526e6bb8b40c0","hash":"fb78b538d9915af0dbf84d34285c423c4499e270","modified":1659119949363},{"_id":"themes/next/.git_back/objects/98/125da4f344758ad097a90568529d513a322494","hash":"b6e54f83f203aaa891c6c45af4efdbdfd0e32ac6","modified":1659119949394},{"_id":"themes/next/.git_back/objects/97/9da41116ba02e8b84ffa1283804044cb3c87d6","hash":"edabe286077cc8325f819b1c1c84cb7a58a3022b","modified":1659119949331},{"_id":"themes/next/.git_back/objects/98/fdf44e8ff1fda773dffa2855cb972676fc6ecb","hash":"2b96ffe6d8e2305dd91991ce4dd4e354321ba6d2","modified":1659119949394},{"_id":"themes/next/.git_back/objects/99/3e5bf15ef168596176f9093530a5991cd90be2","hash":"e95c5c7b9f5ade0f127da3462c23c56f79f91998","modified":1659119949441},{"_id":"themes/next/.git_back/objects/99/9f4973d18167f50b958468cc536e0e58eaca91","hash":"3a779aeffdb7125d6e7f6a924b02bca4b9ad34cb","modified":1659119949503},{"_id":"themes/next/.git_back/objects/99/8a8124b38d08046f78f2e618d2f2f48232607d","hash":"ab182d02ceca3f0b5585e7935ac96621defded09","modified":1659119949472},{"_id":"themes/next/.git_back/objects/9a/23f2727b0e6aaa4004006592d69e8368819d3c","hash":"53732af6dbede779004817031fbcd058bb82efae","modified":1659119949550},{"_id":"themes/next/.git_back/objects/9a/702e914246760119728e661a6b27f16662fe5b","hash":"29fd4537ff4f0ef9fa2f7a51086994fa6307595d","modified":1659119949566},{"_id":"themes/next/.git_back/objects/9a/9e9ef73aa21c8c983fdae0b444535ad383a4f5","hash":"b10d0db054f03b66bd230283fcccc24d6f6a71f7","modified":1659119949597},{"_id":"themes/next/.git_back/objects/9d/bb2e608cf1ffe1f054f14a578b07d37e2e15a5","hash":"0ed232b5f3fb7177a3d09bb53c81f72310747696","modified":1659119949597},{"_id":"themes/next/.git_back/objects/9e/8aedb8eb0543fb4757e58b36200c8b2dc3cb7a","hash":"bd295a10cfd6bd35d2ff537d3b96e3e6b1886a69","modified":1659119949613},{"_id":"themes/next/.git_back/objects/9f/7ec1bcbc94ea7193fe1e71a5e39cbc15c6f035","hash":"06273c2e864576022c800fa1e66645a2c8c7742e","modified":1659119949679},{"_id":"themes/next/.git_back/objects/a0/f1ee48f0d2081f9203ca101a03e380c31e7248","hash":"ac173e45d4af0c1df68c71e907acc4bb13896f7a","modified":1659119949694},{"_id":"themes/next/.git_back/objects/a1/10869f0cf2bef79c9e2a9fd4f8edaf7783db6e","hash":"41f312fc43b5bc8e4b9e6652f22188f068b01223","modified":1659119949741},{"_id":"themes/next/.git_back/objects/a2/6c7cec8e865c47bc92419052cf9f1342fbeb79","hash":"3fd8c55279e84478dea4e8b3b8a7621936c4a4a9","modified":1659119949757},{"_id":"themes/next/.git_back/objects/a3/bd38fcf527b937fa332e121c12a84380cb8f5a","hash":"c93d3a770c732bc72a64e1ef475c2d79598d42f7","modified":1659119949788},{"_id":"themes/next/.git_back/objects/a4/465a0bb24e30476b9e53d4c7ff86a1a6a6bbc1","hash":"a4c37f65aea2c4519401582b7d7c8301da6cd2a6","modified":1659119949819},{"_id":"themes/next/.git_back/objects/a5/d10654939eee923c289890cf7fca11be1cd5dc","hash":"077ea891a13a0e12a8376e0ef3f47920ffa1aac5","modified":1659119949819},{"_id":"themes/next/.git_back/objects/a6/5bc5973ab52a0d5428bac688763a5816930e0c","hash":"88db8564d95b549a082fea1046d2bcca368a095a","modified":1659119949850},{"_id":"themes/next/.git_back/objects/a6/768dba6ef608d2e46b2896745810c57738cb5f","hash":"b98b685ec84f767e06afba236ac39fcdd47bd34f","modified":1659119949850},{"_id":"themes/next/.git_back/objects/a6/ea5268c08a6c91bcb8bfc3caddea2710c84d2e","hash":"320c8bd4b3d9db2e5bc03ba5cbfd30258cf527ef","modified":1659119949904},{"_id":"themes/next/.git_back/objects/a6/f7ba97ce3658941a759cff370aeae53c24a3ea","hash":"85b7492be96e3cbb14d7e98d9081c24382bc2641","modified":1659119949913},{"_id":"themes/next/.git_back/objects/a7/400bdd75399af14b210467e9447bf845da4a43","hash":"324eddc575806c6b95726df9c8004ffaca74b714","modified":1659119949945},{"_id":"themes/next/.git_back/objects/a7/ad716ca400df3dc953ecaa14bca085ef70d590","hash":"264454fff469e2ac7df052ff99979b8b56702ad8","modified":1659119949945},{"_id":"themes/next/.git_back/objects/a8/0d08a3b34c1b17dd04f8ab8cd75f3dad2b6317","hash":"7c0e8856a8cab30768f7b2625aefaab835ae323d","modified":1659119949992},{"_id":"themes/next/.git_back/objects/a8/2408e2892ac27975f1654872c733e9417ca1a7","hash":"ff9d81dc944c388576a0957b20766efe3e4dfd63","modified":1659119949992},{"_id":"themes/next/.git_back/objects/a8/47f804f1886390044113e7a304a86b36dec41a","hash":"3eac97ae03a1168a0bdd70a504b21cc330c07fee","modified":1659119950023},{"_id":"themes/next/.git_back/objects/a8/ae50e4e9dc74d367a2108c6d26e400150a53ba","hash":"930839414e38ab835b34d4380991d6454d7da7cc","modified":1659119950054},{"_id":"themes/next/.git_back/objects/a9/01008f1fe1fdd45774120b2c8f910d0b97b73b","hash":"d559b81481d5897e9bdc63080b1ab4636ac50b63","modified":1659119950054},{"_id":"themes/next/.git_back/objects/a8/be02fc44161cdfcc8891ec4a440bf234fc9af8","hash":"e11b6219caf7726f93dd5b12da8a6d4c4faf23a1","modified":1659119950054},{"_id":"themes/next/.git_back/objects/ab/06adffec5eb9c18da434f296a25058856ecb0e","hash":"87519cc5f4a17a4adbd7f2ead8c7046154923793","modified":1659119950101},{"_id":"themes/next/.git_back/objects/ab/f8bb9f74b5b8cc9fb0a9022f805b97f1b5df33","hash":"414e0892cbef43d800786c0a61898a387fafabee","modified":1659119950166},{"_id":"themes/next/.git_back/objects/ad/8301e2f5c2fb1f8bb40e371db0e8b24560437f","hash":"7ca6dc5be37e9470c3ca599d42eb43fb5908bc91","modified":1659119950198},{"_id":"themes/next/.git_back/objects/ae/30d4f6d5e88217d8b342397fb1cb605c2f48d8","hash":"bcbb75abac28fb8fbec0c2656a89af08e6837324","modified":1659119950229},{"_id":"themes/next/.git_back/objects/ae/a7ae8c2aa37920f611f102e9b463417d4f57e4","hash":"2a5fbbb17e2bbc672d12df94a5cb02c0b0477e8d","modified":1659119950260},{"_id":"themes/next/.git_back/objects/b0/857f7b056d5aca27e34ffbff93cab1b618b218","hash":"46d1ae34a274d9d55d8038bd0057345f85929fbc","modified":1659119950291},{"_id":"themes/next/.git_back/objects/b2/ad4b4ef2bc12b0d66f35fd02ed73330080fb53","hash":"db6c1e987b87fab737297915f8814e225c3b34bd","modified":1659119950323},{"_id":"themes/next/.git_back/objects/b2/c4e2f198fc4d8279cb72b57e3b24e5abfd61a5","hash":"c9329831cfb2e44349630477fe26da17c1ec3782","modified":1659119950354},{"_id":"themes/next/.git_back/objects/b2/fa11906600d601e719762ab08b51de6c687791","hash":"c7f1f0465cf1db0bbc51ece0e256696406624b4a","modified":1659119950355},{"_id":"themes/next/.git_back/objects/b4/557da8be10a67f6ed32e3f45dc5e523c5036a5","hash":"5f0ed59c44127521e4d654ce545891ece505d89d","modified":1659119950355},{"_id":"themes/next/.git_back/objects/b4/8a4e6d73980f4e44d6dfe02433761aecc5cf35","hash":"c2e39fa310a081005abc98e0af529c4967fcc1c2","modified":1659119950355},{"_id":"themes/next/.git_back/objects/b4/f4ae8be26d92cf3ffa57ecae204bd2f64adfa0","hash":"5ac333af7c53748d9ecf73b7aab471a6ada3edcb","modified":1659119950401},{"_id":"themes/next/.git_back/objects/b5/16338d7a13318ed7fcbf18d396d1f2b5860276","hash":"0d6fb3dfe8a7f40812bdfe255f263b75fe69301e","modified":1659119950401},{"_id":"themes/next/.git_back/objects/b5/4f2a368eac037ae81d6e692b6a276b5cce8a21","hash":"ebdb50cb38e8823e0eea989c1517914122cdaba0","modified":1659119950448},{"_id":"themes/next/.git_back/objects/b5/55bd977780efe2d78db5355d159a841411b9a1","hash":"99f0be0b9da0780536709cde0663c35ab6a33702","modified":1659119950479},{"_id":"themes/next/.git_back/objects/b6/57fb6e8cd50d96ee518e978ee1f661c79e069e","hash":"ca236a9de2781fe7a1fef1799dbbbcd9716f0060","modified":1659119950479},{"_id":"themes/next/.git_back/objects/b7/293260bc32b4b2cc43f16939814c46182ac80d","hash":"1aa651be8dfdf3350baa1e42def46e044fb325ba","modified":1659119950526},{"_id":"themes/next/.git_back/objects/b7/ff0a6dbf7cb07d9a7413113b47f13b7a1c528d","hash":"0b3331c8fee2860bf65e4b6fdc4c09134c011e79","modified":1659119950558},{"_id":"themes/next/.git_back/objects/b8/454d305c7583ba218a695c6110961bfaba26ac","hash":"3175d845507b0a07bb55c69c1afb9ac7154080c4","modified":1659119950573},{"_id":"themes/next/.git_back/objects/b8/5b3a7236c1aeb70e055956da8053d15f47a142","hash":"049b90d6055ca30d01da5efef0da38021a7c2430","modified":1659119950573},{"_id":"themes/next/.git_back/objects/ba/9feb77a54951596e82e7c797e1091ed1fb9b82","hash":"3d7ef01456a61d4d47a8b6bbf8df63da5fa5c08d","modified":1659119950620},{"_id":"themes/next/.git_back/objects/ba/aa4b05a4ecfc184e74d8dc653c0aa9fe612379","hash":"ffbe2624d297e140b4501fcd8f637169014b0e31","modified":1659119950663},{"_id":"themes/next/.git_back/objects/ba/c130560ae8cf3d948eae47cabd81b33bca4851","hash":"5679893a25eb91e53a01f6d3a21376c13bb679fe","modified":1659119950694},{"_id":"themes/next/.git_back/objects/bb/031d1d99e4d4427e74a66d3322dae46a792711","hash":"b19999cb4e31718e3869532d2e6167271346267c","modified":1659119950723},{"_id":"themes/next/.git_back/objects/be/8fa515409cb3c7e097d8b04ae86ba474a5d98d","hash":"426f7427b796c4b3a0db3e0f79671a88316fbd12","modified":1659119950754},{"_id":"themes/next/.git_back/objects/be/d8d5af3fa797d519cd290e4405a878d3613d28","hash":"b768fe3c63b633bf6e0487addafd7bb43b96ece3","modified":1659119950781},{"_id":"themes/next/.git_back/objects/c0/111c2587723e4bff43ceb7b492a876da3f7963","hash":"fd55ba3b2aed0790f3ea87a53ea0f05c9dc3ce9a","modified":1659119950784},{"_id":"themes/next/.git_back/objects/c3/54253503a3df51487f31bed2f3e512a0637af9","hash":"5ca0f24b108adeeb32030965d8349011f9ce1cbc","modified":1659119950837},{"_id":"themes/next/.git_back/objects/c4/0af0ff86e18609dc0fd77b83e0ddaffa83e6e3","hash":"52d1a2eb2497d632890830075899bc91fbff9794","modified":1659119950839},{"_id":"themes/next/.git_back/objects/c4/c27c2949a1075fbdfb90b89525781396be6876","hash":"c6290dc5084ee6550517cee7826c37d10b28fb04","modified":1659119950879},{"_id":"themes/next/.git_back/objects/c5/abb3939886cb90caca64f827d6d2fd706a7baf","hash":"b0f4f6ba8428d717da5b37d455be49a3e531daaa","modified":1659119950882},{"_id":"themes/next/.git_back/objects/c7/38ca8f152a4efdae352d7f221d12f376149974","hash":"7976149267e983d246827c1280412d1a07738621","modified":1659119950930},{"_id":"themes/next/.git_back/objects/c7/4c6a09bc1ce685fd19b6cfed94771d8dc4247b","hash":"d34cdfd426593fd5e3f14642e7ae18ec516a8b1c","modified":1659119950968},{"_id":"themes/next/.git_back/objects/c8/74b27c78de3099cd2d4de5576e132f342465f2","hash":"778b43dd3ed2a73f4a1f6b318d0d80713b40b69a","modified":1659119950970},{"_id":"themes/next/.git_back/objects/c8/b916132ce853c1303a99c4cf3a585472f53544","hash":"c3abf9c158baac51de31dbb36eb8fa64058b43cd","modified":1659119950970},{"_id":"themes/next/.git_back/objects/ca/8678f4d6701499d3ede6e955819195b6f923d4","hash":"9a6c6d42b55c170daef530a3184670d7c481419c","modified":1659119951033},{"_id":"themes/next/.git_back/objects/cc/05b5b7c2aad67cfa4592f7784b915b5fdf752f","hash":"b41f23d9e3d0f62efa54f72b96039f309e828144","modified":1659119951035},{"_id":"themes/next/.git_back/objects/cc/48a867fefb6b043106c5663c6709d05a98599c","hash":"f2570a23a86bcc9513373311cb1f8436ee70207d","modified":1659119951101},{"_id":"themes/next/.git_back/objects/cc/d06520d11061ab2c275cadf8bf4184a8fa8757","hash":"51079ae105e3c1f439b6128b0000ef499f351bc6","modified":1659119951148},{"_id":"themes/next/.git_back/objects/cd/5e4fd000efe302d4505c38ec617f64cffe7962","hash":"11e900361d350a326a422f7672c7aa4595de10bc","modified":1659119951179},{"_id":"themes/next/.git_back/objects/cd/6934aff8a1cfd71c21ed2ba6b6ad921e6aa07f","hash":"238335553d1da8c2e66a39253fb408882734f6ab","modified":1659119951181},{"_id":"themes/next/.git_back/objects/cd/d7cd0cfde032debb168c3a1c95b3c9e2e24d4d","hash":"a85a67f70cf35d0d5d598246bf027533790350b8","modified":1659119951221},{"_id":"themes/next/.git_back/objects/ce/31efd5f8c048d5bf0d87cd1d1865e4eb4299b5","hash":"675cf864cf0fb46c0c437fa1f4a2d46459840cee","modified":1659119951263},{"_id":"themes/next/.git_back/objects/ce/b023ec691ba5308dba2375ba48e142d94c06dc","hash":"e23d3158425231a3d3a76b3aaf0328620d902ff3","modified":1659119951289},{"_id":"themes/next/.git_back/objects/cf/1b67569d3d87712776a0bb8b9a1fc59fb0bacf","hash":"81c8f436bbf6873ca079f37c0804e93e66c96a08","modified":1659119951292},{"_id":"themes/next/.git_back/objects/cf/d94604b1835221d5f0989482ecfa76abd64982","hash":"9d336886198d0a2e5785821c41b9c59dc05b6ff9","modified":1659119951337},{"_id":"themes/next/.git_back/objects/d0/40876ef5f610717623009a503e2f5d79cbbc49","hash":"2a427f74004aed157ebb81d4f792ae702e97e478","modified":1659119951379},{"_id":"themes/next/.git_back/objects/d1/b8d2feef35154683c82e927e9953eed3a44b39","hash":"5b347852b2de100085a30d5ae4c0c96fe581d538","modified":1659119951407},{"_id":"themes/next/.git_back/objects/d2/490b7a9cba0ba6edb3ea1989eb6893003429ba","hash":"06142e55280c15d21753fe74b19dbd411ddc5994","modified":1659119951408},{"_id":"themes/next/.git_back/objects/d2/cbe2644e0aecae78dce487841592273730846f","hash":"0814ed68a4e960098dd44499d11f765977e9e59f","modified":1659119951454},{"_id":"themes/next/.git_back/objects/d3/48f1d3510ef1312ac61cd39d9e0d40e9b7f9fc","hash":"6c96afe4069f179522e096355b7c03c92508f0be","modified":1659119951496},{"_id":"themes/next/.git_back/objects/d3/f5a12faa99758192ecc4ed3fc22c9249232e86","hash":"296451fcac4211d8c3bf9eef6e16139369034d1e","modified":1659119951522},{"_id":"themes/next/.git_back/objects/d5/13108efc062d1497750fe54d5945a69729bb58","hash":"0b69c837d218dcc4beabf0e346cb860b4398f3f2","modified":1659119951621},{"_id":"themes/next/.git_back/objects/d5/8c6715eeba16df2ad40eccc01c1d9d450f944f","hash":"53159d832caa2c729f6cd8a63cea835002b0e230","modified":1659119951647},{"_id":"themes/next/.git_back/objects/d5/aca636d0febffe5ef43e7b416c417f3fcef32d","hash":"1c5beeaba2a6d100f412c1720e42d67ff41a036d","modified":1659119951650},{"_id":"themes/next/.git_back/objects/d6/447db150340b8550591ce985a40a79b9af27ab","hash":"9248b1aaa3af862ddaff69bf0d81f7dd2ab18b38","modified":1659119951697},{"_id":"themes/next/.git_back/objects/d7/4819db250d78d9f9acfc628c8331990cc14cfa","hash":"c616b8a309a95799657df8ffaa6f3e9cb8f08c52","modified":1659119951700},{"_id":"themes/next/.git_back/objects/d7/9d825433c99674195e1f44a96327270ed27726","hash":"1d891c81361eec6f72470dcda8ff64fc9f6d498e","modified":1659119951761},{"_id":"themes/next/.git_back/objects/d4/b060a48014a6094da9e74f379b0d2e57d2c4a8","hash":"7b7e02656ccf0b3159b2e81a8485fb076713b964","modified":1659119951554},{"_id":"themes/next/.git_back/objects/d4/faac70ea71519ea8f4c0aa0510c1d9a492027c","hash":"b7b71703dfe6ea2238b100094daa319732bdf0c9","modified":1659119951581},{"_id":"themes/next/.git_back/objects/d8/beb3acfa6e3a088d7382dce975174f990fee11","hash":"8b1b939b2cf4a910a6651259b1ef6c0e43dd5e08","modified":1659119951764},{"_id":"themes/next/.git_back/objects/d9/193ab1b61f9dd130051cac1c0db74c7f6b967b","hash":"f37a74c60685225e9c8705acdd2dabb8529c988d","modified":1659119951833},{"_id":"themes/next/.git_back/objects/d9/a283617ed052b620b03492aefee8eb306a3c7f","hash":"4e96949a1ea9cc4ce650cc760a0f07bb3a493e1c","modified":1659119951872},{"_id":"themes/next/.git_back/objects/db/af39c86cff691c095326c6f3c6380ee7e614b6","hash":"c2455eed0650f2c28aad7e98518e3f608278a9d7","modified":1659119951875},{"_id":"themes/next/.git_back/objects/dc/3ea2fd6f039e4e2f3c9e9b7abbab5fc106d4e9","hash":"6913e39a91983b5996b4febd347be1faa9511b2c","modified":1659119951878},{"_id":"themes/next/.git_back/objects/dc/f9df796c3ffe246765c0e2ac31523f1fc67aaf","hash":"5b79c0c8b71a31ae5dfb502d6876056ad1a51027","modified":1659119951921},{"_id":"themes/next/.git_back/objects/dd/a7c8898c429956c9475f014b462d9cff75b8a4","hash":"5676350aa9981cfa843cb3643ca0545d90d05bbe","modified":1659119951954},{"_id":"themes/next/.git_back/objects/dd/cb389d00cb722bafd0de18f073b474aa0a1861","hash":"795c897707049fa39ff896f9dff7f4797a0b36e6","modified":1659119951985},{"_id":"themes/next/.git_back/objects/de/67221f74f4b518f35250e92c8c7327cdc19e5d","hash":"474060677b02cb1254e932ec9201fe36823f582d","modified":1659119952032},{"_id":"themes/next/.git_back/objects/de/29cc81eef3900b3f94ba2d20afa9d874994bdf","hash":"742ec1094ec79bd576e8af199da567e1de7b476d","modified":1659119952016},{"_id":"themes/next/.git_back/objects/df/1b80cd1454f94fd8135714d6e940a8897441ea","hash":"c9a466268cc62c7648b8ba68e2c209194fccf8f1","modified":1659119952063},{"_id":"themes/next/.git_back/objects/df/90083e0ed8e2807fa42c089b8247506773134e","hash":"af71210cebdf36121e2dac55a7d57ccbf8f9b90d","modified":1659119952094},{"_id":"themes/next/.git_back/objects/e0/313781c66e0a6f5e98134f7883c7c927ab4d9b","hash":"24e5a34c6897459608c5fa68d132916b36a572b1","modified":1659119952094},{"_id":"themes/next/.git_back/objects/e0/53db14fe66b433c89b95b59d38712d89f204a6","hash":"f6d0ce90ac5c7ca01e0427466d0bfa989a235003","modified":1659119952110},{"_id":"themes/next/.git_back/objects/e1/20376d8d51e21c8399515f275189aada60251d","hash":"06217a24e98e5ef570f1fecb6737c4939f0dcc90","modified":1659119952110},{"_id":"themes/next/.git_back/objects/e3/8cc6f33b52e69cd68eb9dd9e4092ab13af3675","hash":"30a7baf04536870bf816eb8846e03eb9d4ca978b","modified":1659119952157},{"_id":"themes/next/.git_back/objects/e3/95d0e07ea0f5fe8fcf369e71f144b86a188ec7","hash":"1172c61376c1b49e353e82cad99bcca5f78fa8e0","modified":1659119952157},{"_id":"themes/next/.git_back/objects/e3/d6312c38cd54c043e57f59838aa9e7434e9fb1","hash":"6b9f5a7608ef169a4bc2e44d9658cc111cff39de","modified":1659119952219},{"_id":"themes/next/.git_back/objects/e3/eb3cbc5320dd34dad6a87d40b162de82f21a0f","hash":"2819dbed431dc9c790510e290e5ec860092caf80","modified":1659119952266},{"_id":"themes/next/.git_back/objects/e5/67d0602cb9970f291ec2012ad500aaf5c7f381","hash":"c29d24e1dcf202b9bcbf08724e21d238793e26ed","modified":1659119952266},{"_id":"themes/next/.git_back/objects/e5/999ebeeb3493e221cfd899c833b1cf557d3153","hash":"e7637b5c34e1c19f37c67cdc0c35f9220ed05bee","modified":1659119952314},{"_id":"themes/next/.git_back/objects/e6/21efca17b3045d69bae51c40414ac204e035af","hash":"9e119abddf64f0de74a169dc7b9e91a42222556c","modified":1659119952314},{"_id":"themes/next/.git_back/objects/e6/98b678e2d4125030f5c1bba017314fbc7687b6","hash":"c0a437bc5fca5348ea11a2b6021f0d9197d47939","modified":1659119952362},{"_id":"themes/next/.git_back/objects/e6/f2404f7b229b53484e2c64c2043263f0083d64","hash":"c937f7a7d25d59d1346750a76ed40924f84fd3c0","modified":1659119952393},{"_id":"themes/next/.git_back/objects/e8/480ce4fe5835adb06fc7ee3d082b39d47f8b74","hash":"de73abc9c04469baaa7d2affb6ee05177086ad33","modified":1659119952408},{"_id":"themes/next/.git_back/objects/e9/05aeea93385183b8fd3ea439444b701e1ac330","hash":"7f6445aee4368b086d2fcdabdd69493d5cdd8f6f","modified":1659119952424},{"_id":"themes/next/.git_back/objects/e9/85ac7edfb4241d2250830509d72d594c273995","hash":"28cee1189ccf6828fb0a6bec345ad6af5ff495b4","modified":1659119952424},{"_id":"themes/next/.git_back/objects/ea/a3ade8388ea9662bfc760e949706c7762d81af","hash":"54c18f92325cef3a6a79339001c6f20e89c0ef64","modified":1659119952424},{"_id":"themes/next/.git_back/objects/eb/6ce327226583c565ca0cf254ac448d6a1f9b7f","hash":"514b8729e11c684ab1d4824e5acff09644cbf2d8","modified":1659119952471},{"_id":"themes/next/.git_back/objects/eb/8e8cc69f37e36068af007070accc67f4107a48","hash":"58d93b7013468912525c83acaae425db44681d0f","modified":1659119952518},{"_id":"themes/next/.git_back/objects/eb/b499025a635b7a68d2c5b12d67903b9546a1e4","hash":"32687d7b3f5b01256faad4c04a3e97a43ac64854","modified":1659119952518},{"_id":"themes/next/.git_back/objects/ec/13ccb2508c506da095613eae2fbc9ef696118b","hash":"77a9d62e8957418ad023e48f51eaf386e5d6de91","modified":1659119952518},{"_id":"themes/next/.git_back/objects/ec/9d14cfa24898da93b2af0d30966b0825ed652c","hash":"52a375618951c805679b0aad9818974556ee0ada","modified":1659119952518},{"_id":"themes/next/.git_back/objects/ed/45f1864464d445c4c39bdfb649626957dfa431","hash":"3319c7abe63ab048fc55c9328c04c4ae1a7efb53","modified":1659119952533},{"_id":"themes/next/.git_back/objects/ee/183e73d49224299c22ce8b2bb28b61d5b4a531","hash":"a16d5bfaac12a9273680a83efb31f816192f43f4","modified":1659119952580},{"_id":"themes/next/.git_back/objects/ee/4dec667e28180d817aefb2c80fcfe82dccb39d","hash":"c1d8d3484c9f4a151da659a534cf1f6f3021cf20","modified":1659119952580},{"_id":"themes/next/.git_back/objects/ee/98ce52b69fc7bb50ab50ce4e68d39efc79811a","hash":"b9fba528392c9efd99f0659bb535fba242a7d022","modified":1659119952627},{"_id":"themes/next/.git_back/objects/ef/311cf30c61e59df67201557df07a39446664c7","hash":"6df51d82e3668205009eb8135aeab7af709fdfe3","modified":1659119952658},{"_id":"themes/next/.git_back/objects/ef/857ade5b6db8a4462f95ff7c02e0ea16c11a18","hash":"ba4ba5eba58bcfb3fe479ca37d43b0cb87cb384f","modified":1659119952658},{"_id":"themes/next/.git_back/objects/ef/8a7c076055c732b3786da2ce26ab01d73188e3","hash":"f4194b8561ce9a3f82cd3cdfdd5364f70e94c5ff","modified":1659119952658},{"_id":"themes/next/.git_back/objects/f1/0ab7db16eafac2ba8d52d2f6c07a9b86ec0abb","hash":"a63e08d0a13a14c6f0762a6e6cb1ffbe86fb2010","modified":1659119952724},{"_id":"themes/next/.git_back/objects/f4/252bd9e2a568db0b0d56efe986b2d7a732ab5e","hash":"5c38bbaffcfad3ed9d62f50262d59617a82edfb6","modified":1659119952789},{"_id":"themes/next/.git_back/objects/f5/df6041a0dbc035b63573ed94294e9c5598884f","hash":"a4adfc5d6864665535a280cae8d9754ba5cd4baf","modified":1659119952821},{"_id":"themes/next/.git_back/objects/f6/7da7830359b44de9ab6c817f86cd677bfc2cb2","hash":"e0d95e967dd781dcad80611f919444c1b476cba4","modified":1659119952852},{"_id":"themes/next/.git_back/objects/f6/dde3daa1dc464b2fab46f8e4bc7bee079913c6","hash":"cd9007e4ce939afb7e77df8902f83700f5577179","modified":1659119952852},{"_id":"themes/next/.git_back/objects/f7/3ca296b6473c653365aff93366565d3d02b002","hash":"021ea021f4f8df48958dc4eb5d862b10c743fabd","modified":1659119952867},{"_id":"themes/next/.git_back/objects/f8/599a2eeec68b5eac70edd00750655b57c3360b","hash":"d24c1d7f11bf8f18ff07f18adaf6deb0287bd903","modified":1659119952914},{"_id":"themes/next/.git_back/objects/f8/878bd3eea561f3bb2fa3607f73d372575b90e9","hash":"e32c5b2aee5ab8a6915afb3ae68d2c459f0ae7f5","modified":1659119952946},{"_id":"themes/next/.git_back/objects/f8/9d31aa3c956910a335d05094eeb59c7cbf3d64","hash":"e71ceb24e5cb9c5e6ed83694f588ea0dece3da26","modified":1659119952946},{"_id":"themes/next/.git_back/objects/fa/5f66eebcd923a824fb3da954e704611973bfe1","hash":"a60ea05a52c7e3008ad62e0c6558cbd445fa7d1e","modified":1659119953091},{"_id":"themes/next/.git_back/objects/fa/708f29e2f7fe9fe1411cbd6fb9a3d6f1b2871a","hash":"4d6e913166fb6a22bb0ce1fff472086b8512edde","modified":1659119953122},{"_id":"themes/next/.git_back/objects/f9/1b94e3e8b1533f6384151f57e597311271fd08","hash":"a11da26e1860a52980922b77e35c14d3af158adc","modified":1659119952997},{"_id":"themes/next/.git_back/objects/f9/650a17327d8b25542e7dfa65221ff144feff1f","hash":"f36310d8a49a525579319ac8fadb631cdae36dd7","modified":1659119953029},{"_id":"themes/next/.git_back/objects/f9/6ca9d072afae9355f05abf517e8505f2cda65e","hash":"c35e4ce3a7655752659c9feca9b5d2a45503dc07","modified":1659119953060},{"_id":"themes/next/.git_back/objects/fd/1569187a4bfe5ef229f64792f1f4cc00c1e2c0","hash":"7ebe65f3ae2e3894f923ff118a9e90ca38aebd7b","modified":1659119953154},{"_id":"themes/next/.git_back/objects/fd/2b1892c3c4691c795cffda0bd209e0ebca6b50","hash":"2fba385c8ffa7cc38d4ebfe5cf17cc6a4533238d","modified":1659119953154},{"_id":"themes/next/.git_back/objects/fd/393d22d32bcaacf3ea1a95da7a8738071a0f64","hash":"8ff0c8fc3e530d6d9eb1c4306470e7411f629d32","modified":1659119953200},{"_id":"themes/next/.git_back/objects/fd/c8d1849c21be7d7087202270319eb91b952249","hash":"ddd015225a884f275c25a6418af310ec4021af84","modified":1659119953232},{"_id":"themes/next/.git_back/objects/fe/581c7590a53466067cc4888c008670895cbbf1","hash":"9e81ea5ca1035328526df1b9af907bebf2117bfd","modified":1659119953263},{"_id":"themes/next/.git_back/objects/fe/6545dd9e3f656bae16eac1613cec59f0125527","hash":"8ff9ab85d6a4352891c2198586689ccb5a8a84b3","modified":1659119953279},{"_id":"themes/next/.git_back/refs/heads/master","hash":"6fa54cf7dc7ba1d6ff679ac025299e6d6da06912","modified":1659119953419},{"_id":"themes/next/.git_back/refs/heads/old","hash":"0db5854381504b2eb39b99fa5c97a52a9ddce075","modified":1659119953459},{"_id":"themes/next/.git_back/refs/tags/v8.0.0","hash":"26c2c1f44d1a946563d5733b81da8c6c268fa61a","modified":1659119953678},{"_id":"themes/next/.git_back/refs/tags/v8.0.0-rc.1","hash":"270ebfd286a2750b9289a2c3ffbc09ed113b1bc1","modified":1659119953693},{"_id":"themes/next/.git_back/refs/tags/v8.0.0-rc.2","hash":"8788394348033a8ebb247dd93e32ea8e08d16464","modified":1659119953709},{"_id":"themes/next/.git_back/refs/tags/v8.0.0-rc.3","hash":"02273e35456005cc18a53c2d9b813a736c844638","modified":1659119953740},{"_id":"themes/next/.git_back/refs/tags/v8.0.0-rc.4","hash":"fae46ac3de8a0782f725c673c64eba68a4c95bcf","modified":1659119953756},{"_id":"themes/next/.git_back/refs/tags/v8.0.0-rc.5","hash":"9ef63047dfb5131cf53852b6fb042dda81a48026","modified":1659119953787},{"_id":"themes/next/.git_back/refs/tags/v8.0.1","hash":"e088307500e1b400562780363e49edc531fc21d2","modified":1659119953803},{"_id":"themes/next/.git_back/refs/tags/v8.0.2","hash":"414a963d79db35c462ba62d97e59f60be3f5a7a7","modified":1659119953850},{"_id":"themes/next/.git_back/refs/tags/v8.1.0","hash":"4c334ad98deafe329a786d134a6acbd3a8d386fe","modified":1659119953881},{"_id":"themes/next/.git_back/refs/tags/v8.10.0","hash":"0bdfe523aea001cde4d213470dfa4b90a8d379ec","modified":1659119953912},{"_id":"themes/next/.git_back/refs/tags/v8.10.1","hash":"3ead7cf1ebeeeb752a03e926d77a2fe56621015f","modified":1659119953928},{"_id":"themes/next/.git_back/refs/tags/v8.11.0","hash":"f1282ac0a37b0c6a0cb3156280a2d2d57166d147","modified":1659119953943},{"_id":"themes/next/.git_back/refs/tags/v8.11.1","hash":"6bca5bf6813e405374e3e861301306b5d5c3a513","modified":1659119953975},{"_id":"themes/next/.git_back/refs/tags/v8.12.0","hash":"d4868025efeabb4fdcec2ea78f29e035ccd77bb2","modified":1659119954006},{"_id":"themes/next/.git_back/refs/tags/v8.12.1","hash":"45e13ab619aa7fbe3ff8ab410f58793b73d15721","modified":1659119954021},{"_id":"themes/next/.git_back/refs/tags/v8.12.2","hash":"6fa54cf7dc7ba1d6ff679ac025299e6d6da06912","modified":1659119954053},{"_id":"themes/next/.git_back/refs/tags/v8.2.0","hash":"35ef5e5418601994df0250616e4590cf692802a6","modified":1659119954068},{"_id":"themes/next/.git_back/refs/tags/v8.2.1","hash":"96937bd869982f6525f95e50f4fb265970f5b1cf","modified":1659119954100},{"_id":"themes/next/.git_back/refs/tags/v8.2.2","hash":"d667f0f11f90e04e51410f81a3e8872d1a940f08","modified":1659119954115},{"_id":"themes/next/.git_back/refs/tags/v8.3.0","hash":"1d1ce4f6e5f0116e53737dcd219e7a1e36a35830","modified":1659119954146},{"_id":"themes/next/.git_back/refs/tags/v8.4.0","hash":"a59c233854e8a9d9d35fff8315f7d534b030d44f","modified":1659119954162},{"_id":"themes/next/.git_back/refs/tags/v8.5.0","hash":"bcd7dfc3df4727e0414b802a304c0c624e8952b1","modified":1659119954193},{"_id":"themes/next/.git_back/refs/tags/v8.6.0","hash":"b81b1dd5e4843c5a0836d4a068c68976169d8acd","modified":1659119954225},{"_id":"themes/next/.git_back/refs/tags/v8.6.1","hash":"bd526c679d2db12f2b1bc1bb91552fe10c7ab8eb","modified":1659119954256},{"_id":"themes/next/.git_back/refs/tags/v8.7.0","hash":"86b6fa436df943b963284c2b8b7efaa7b35bb094","modified":1659119954271},{"_id":"themes/next/.git_back/refs/tags/v8.7.1","hash":"ac763777ea0920a5abe8419df379688fe6fb365c","modified":1659119954305},{"_id":"themes/next/.git_back/refs/tags/v8.8.0","hash":"f7ebe8dda16aef01f67bb548e984414f06cb32a6","modified":1659119954319},{"_id":"themes/next/.git_back/refs/tags/v8.8.1","hash":"c9edc049e4049508278d23f77d50951c17917032","modified":1659119954334},{"_id":"themes/next/.git_back/refs/tags/v8.8.2","hash":"c276e5836a7f1552b513fa12e95039fcfd08302c","modified":1659119954366},{"_id":"themes/next/.git_back/refs/tags/v8.9.0","hash":"e3ed2a23a4c236f4354db3c1ce7fbb02646f8fca","modified":1659119954397},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1659119955191},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"3ff7e251bf99a275cd5dfda1b3e51f773c5f7b05","modified":1659119955207},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1659119955207},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1659119955207},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1659119955238},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1659119955254},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1659119955285},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1659119955348},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1659119955348},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1659119955379},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1659119955437},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1659119955465},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1659119955538},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1659119955540},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1659119955590},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1659119955614},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"17e03b61e20a5cb4195f0e0d75261ce61a1cddc4","modified":1659119955614},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1659119955614},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1659119955661},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1659119955708},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1659119955740},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c5c38b4fb137cc799a6ec31f391d1efc12234c8c","modified":1659119955755},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1659119955849},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1659119955881},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1659119955896},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1659119955928},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"eef710e9be20e7fed7573d0824feaa4eb1cf2737","modified":1659119955959},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1659119956000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1659119956047},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1659119956086},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1659119956115},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1659119956137},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1659119956165},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1659119956193},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1659119956223},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1659119956252},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1659119956273},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1659119956302},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1659119956416},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1659119956419},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1659119956463},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1659119956616},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1659119956645},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1659119956666},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1659119956694},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1659119956724},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1659119956753},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1659119956775},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1659119956801},{"_id":"themes/next/scripts/events/lib/config.js","hash":"f78cd74b25cc0ef65c060fec1d7e056967e26b4b","modified":1659119956974},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1659119956974},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1659119956974},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1659119956974},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"65825c37e473c942095df05183424003d7263df5","modified":1659119956989},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"a96050b0a9bcb49f1f6897660efc77991024790a","modified":1659119956989},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"17fbc99521440a5d6c32ac991ba2038a12f86b31","modified":1659119956989},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1659119956989},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1659119957036},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1659119957036},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1659119957036},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1659119957099},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1659119957130},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1659119957177},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1659119957224},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"dc9289f2cc912599fdd82aa52a19feedc8048fd9","modified":1659119959300},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1659119959679},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1659119959679},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1659119959695},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1659119959726},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1659119959742},{"_id":"themes/next/source/js/schemes/muse.js","hash":"714acb6317cc0d4c5aca26d974c536e37bb9ce1b","modified":1659119959898},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1659119960211},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1659119960273},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1659119960320},{"_id":"themes/next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1659119960320},{"_id":"themes/next/.git_back/logs/refs/heads/master","hash":"de740c28e10bc1612a06bbd3759c6aa06840b08b","modified":1659119942808},{"_id":"themes/next/.git_back/logs/refs/heads/old","hash":"54c9b0b1726dd41b2bff58cc773402dcc2dc0b1e","modified":1659119942870},{"_id":"themes/next/.git_back/refs/remotes/origin/disqusjs","hash":"0d267a4e0aa4a7179aa9e85da837d7d9b8e9d251","modified":1659119953475},{"_id":"themes/next/.git_back/refs/remotes/origin/HEAD","hash":"e72f7364331a01c35feea3858c09e16db1631660","modified":1659026256900},{"_id":"themes/next/.git_back/refs/remotes/origin/master","hash":"6fa54cf7dc7ba1d6ff679ac025299e6d6da06912","modified":1659119953490},{"_id":"themes/next/.git_back/refs/remotes/origin/pr","hash":"27e23cc908ce341b627ac30a713d9324e5c080d0","modified":1659119953600},{"_id":"themes/next/.git_back/refs/remotes/origin/scss","hash":"8140b3dddd7225d12283ea05c157ffb20ee143d2","modified":1659119953647},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1659119957710},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"991c1f80995cec418dc00d3d6b13e2d911ac9894","modified":1659119957710},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1659119958144},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1659119958573},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1659119958612},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1659119958900},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1659119958902},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1659119958949},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1659119958991},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1659119959033},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1659119959035},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1659119959038},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1659119959257},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1659119959320},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1659119959445},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1659119959476},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"ec5d4e8ffe74722a092a69ace2f8dec7776466a8","modified":1659119959507},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1659119959507},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1659119959507},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1659119959554},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1659119959320},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1659119959336},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1659119959366},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"4a454bcadd9de7d73172abd3276943e8626657be","modified":1659119959398},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1659119959398},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1659119959585},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1659119959601},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1659119959601},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1659119959601},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1659119959617},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1659119959648},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1659119960070},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1659119960070},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1659119960070},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1659119960117},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1659119960117},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1659119960164},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1659119960179},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1659119959914},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1659119959945},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1659119959945},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1659119959992},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1659119960023},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1659119960039},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1659119960226},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1659119960273},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1659119960382},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1659119960385},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"3272f3373fa7c3910852124bc5e43e90e3470ff8","modified":1659119960389},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1659119960391},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"e9fffe2a14751e86aed5e84a5e96514413eac2dc","modified":1659119960394},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1659119960396},{"_id":"themes/next/.git_back/logs/refs/remotes/origin/disqusjs","hash":"875f15b1bd2866f06801cbb1c9370c1d936c87c6","modified":1659119942893},{"_id":"themes/next/.git_back/logs/refs/remotes/origin/HEAD","hash":"41121224128df5fed1996ac7b124f4948932d22b","modified":1659026244177},{"_id":"themes/next/.git_back/logs/refs/remotes/origin/master","hash":"c2ca2f9e9713584c6eba4ea559bf50d3dba5741b","modified":1659119942917},{"_id":"themes/next/.git_back/logs/refs/remotes/origin/pr","hash":"088f669b1cff9e33a3571dbe10313cd64c10deb2","modified":1659119942944},{"_id":"themes/next/.git_back/logs/refs/remotes/origin/scss","hash":"136c581840242f7541c57adeb6d504f2c6ce04f9","modified":1659119942993},{"_id":"themes/next/.git_back/refs/remotes/origin/renovate/eslint-8.x","hash":"576dbbdcb10c4f8bde56d3cdd397779b6a7192d8","modified":1659119953631},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1659119957772},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1659119957807},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1659119957838},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1659119957869},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1659119957869},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1659119957901},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"268e0a4cf638b9ce4db07268031ab34c5f31ac65","modified":1659119957916},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1659119957919},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1659119957920},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1659119957970},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1659119957973},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1659119958031},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1659119958034},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1659119958090},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1659119958093},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1659119958178},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1659119958180},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1659119958232},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"0c4c5e39f8ac12febaa0f4ff7265151e139edad8","modified":1659119958271},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1659119958299},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1659119958330},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1659119958357},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1659119958360},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"02b6d1a53f7a02c6b0929b11f3ab904b5b873a0e","modified":1659119958408},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1659119958411},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1659119958462},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f465cc1bfe98e3f2b33f5b696d4870c8dc56da6b","modified":1659119958464},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1659119958506},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1659119958508},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1659119958509},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1659119958615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1659119958617},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1659119958673},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1659119958712},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1659119958740},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1659119958771},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1659119958814},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1659119958817},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1659119958820},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1659119958870},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"047bf8176ea24e277b1a4f6e6ad599033f1d1a44","modified":1659119958988},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1659119958989},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1659119959081},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1659119959111},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1659119959129},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1659119959149},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1659119959172},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1659119959173},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1659119959215},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1659119959218},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f71b2022094c5bc8c74b4ed049639f7262e0b182","modified":1659119959254},{"_id":"themes/next/.git_back/logs/refs/remotes/origin/renovate/eslint-8.x","hash":"e14b4d87d9d6c413ac2e1d6d52ebfc034350b8d7","modified":1659119942968},{"_id":"themes/next/.git_back/objects/20/7328fae6323bed7f04d5a3453cb84d1cd17b6f","hash":"4a4ded168548f376cb31546fdca42dc31db70ae7","modified":1659119943987},{"_id":"themes/next/.git_back/objects/8c/029aada6a552ef1017e2eec47fc0a7db3c3f2e","hash":"9931da2b9b98999270876d19a46864f85670a605","modified":1659119948873},{"_id":"themes/next/.git_back/objects/9b/eb9888b095a0b5714f0ad6aa050463bbebd2e5","hash":"9e44a75f1b63279bdfd6ae443432a39e879d15ac","modified":1659119949597},{"_id":"themes/next/.git_back/objects/aa/df3c30e8e4bf2fe107fa2bdeda51ba3433751a","hash":"248af70e42aaced997f5cf33f2fcf7a473644711","modified":1659119950101},{"_id":"themes/next/.git_back/objects/d7/534c975b2a23edd3bd0b3f7e8c4be104f2a276","hash":"fe71ec21f56645c7ab444ef8a7792ff18f7d67d4","modified":1659119951760},{"_id":"themes/next/.git_back/objects/f0/d78a9e2e8a48ffef0b848a9b48bbfb589befd3","hash":"e956f9ce204e0d541ddeec07552ae7cf54c8552f","modified":1659119952724},{"_id":"themes/next/.git_back/objects/pack/pack-85bbe50da2387215297f3e609621163f5e28e7eb.idx","hash":"d7ba4caf512dddbd4bd66c3c335bf40e5398211e","modified":1659119953310},{"_id":"themes/next/.git_back/objects/pack/pack-994003caf4e868238a52cc0b4355cbe4f0b7b9fa.idx","hash":"02b37064661d6969f31773d621df717a9a0a2281","modified":1659026256009},{"_id":"themes/next/.git_back/objects/44/cfd3102e38ac70150ba4377b923a96e2225c47","hash":"10452dc4728b78835aadefbf6bfc194b6fc54655","modified":1659119946318},{"_id":"themes/next/source/images/background.jpg","hash":"977631c766110769f406e77354d0a6eafd4c8455","modified":1659119093041},{"_id":"themes/next/.git_back/objects/pack/pack-85bbe50da2387215297f3e609621163f5e28e7eb.pack","hash":"9e460b70edfd561f34231d0e530cba44c1fb03ce","modified":1659119953415},{"_id":"themes/next/source/images/avatar.png","hash":"8ca60887b36d4595133f0a9feffac27468381e6a","modified":1659120506016},{"_id":"themes/next/.git_back/objects/pack/pack-994003caf4e868238a52cc0b4355cbe4f0b7b9fa.pack","hash":"ebe2eeac984080af3fa05175209b940879c9ec8e","modified":1659026256775},{"_id":"themes/next/.git_back/objects/36/e3b4b487f8d9a689beaca9eeeca4f17e34d91d","hash":"b4b04b01f0abdaaf3930ab470d636b89be638c0a","modified":1659119945516},{"_id":"public/atom.xml","hash":"d4ca2d5acbde639e49f6e55f7cae4998f07b443a","modified":1659283836609},{"_id":"public/search.xml","hash":"7f52f588e5678cf92f630fcce623d896807c8720","modified":1659283836609},{"_id":"public/sitemap.xml","hash":"ddfd53efa248a3da22ce332ba345a8e9e12aed1e","modified":1659283836609},{"_id":"public/tags/index.html","hash":"ea9f17065e38eceb8bdebfb609d1be289ef7d5f3","modified":1659283836609},{"_id":"public/about/index.html","hash":"52fc7bb61a3120c30fa39ddf95630aeb418ad918","modified":1659283836609},{"_id":"public/home/index.html","hash":"b01c8641bb2b402bb6b6b4e2b186d60e7b5349a2","modified":1659283836609},{"_id":"public/categories/index.html","hash":"996e49f134bcb15237e6d0ad6c2d654425948e21","modified":1659283836609},{"_id":"public/archives/2021/03/index.html","hash":"afb4f1d8a79a6d51d484c641a6d196c1cc897c4d","modified":1659283836609},{"_id":"public/archives/2021/04/index.html","hash":"06b194f4359c1db8f5670d6cc60454138e236450","modified":1659283836609},{"_id":"public/archives/2021/07/index.html","hash":"a94546c8e6fe103a649544db4a3c4e0ef960f832","modified":1659283836609},{"_id":"public/archives/2021/11/index.html","hash":"49861bf0f63a9fd79e39e9bd0b820aa4ee854c15","modified":1659283836609},{"_id":"public/archives/2021/12/index.html","hash":"747b472239c015af8028f309cb7f13e3cf30010b","modified":1659283836609},{"_id":"public/archives/2022/01/index.html","hash":"447d6f83187d88054b6f44d64649e0be46ceab69","modified":1659283836609},{"_id":"public/archives/2022/02/index.html","hash":"ddca31e4584c1f6bf235805d12a13f81f28dbd93","modified":1659283836609},{"_id":"public/archives/2022/07/index.html","hash":"660c59a99c8857e998f51e4e546dd96157d2778c","modified":1659283836609},{"_id":"public/categories/bun/index.html","hash":"4fe37127e0a363ef48e39265d1c9fcf6f94ac27b","modified":1659283836609},{"_id":"public/categories/Coding/index.html","hash":"e9a82312d0d56f99dd029cbc79c0b38c46dd7816","modified":1659283836609},{"_id":"public/categories/bun/life/index.html","hash":"cfd7502ff4d9a4dbf71997868bc6fdd58e464297","modified":1659283836609},{"_id":"public/categories/Computer-Graph/index.html","hash":"9f1336688bec7bf355a7020c580c30c86929dd26","modified":1659283836609},{"_id":"public/categories/works/GF/index.html","hash":"797f49d08c6e6aa0ffc93b7158f9f12376199067","modified":1659283836609},{"_id":"public/categories/works/HJ/index.html","hash":"fb28b21a34d3a24935e51d328feed58279779762","modified":1659283836609},{"_id":"public/categories/works/SCU/index.html","hash":"daf559e493579f0f15dd506daf84f779fcfe965b","modified":1659283836609},{"_id":"public/categories/Math/index.html","hash":"7d11f7e91512ed58b98ae3f2a4a0ef7a3768e510","modified":1659283836609},{"_id":"public/categories/Tips/index.html","hash":"280f82bdbc0684b8b24e7301d0fc06f2d6592779","modified":1659283836609},{"_id":"public/categories/works/HJ/OSG/index.html","hash":"630c89d3af691412d48e06ae2994ce23e45686c5","modified":1659283836609},{"_id":"public/categories/works/interview/index.html","hash":"ad9a9106b8ea4385b9388ab4210e471f67649ea1","modified":1659283836609},{"_id":"public/categories/works/GF/OSG/index.html","hash":"d2e386133a1f5c9fd7761bbc1a2842a457202b3a","modified":1659283836609},{"_id":"public/categories/bun/university/index.html","hash":"5e5ba7a9f183499c5c5014e827ea6db01773b680","modified":1659283836609},{"_id":"public/categories/works/GF/data-type/index.html","hash":"354e0f7d0286c29c47282a5e95fc1029c0f89bf0","modified":1659283836609},{"_id":"public/categories/Math/linear-algebra/index.html","hash":"1dd8a859080054b3deb4d329e2dc6a06f8b59354","modified":1659283836609},{"_id":"public/categories/works/GF/data-type/bugs/index.html","hash":"969066ce5f0ac1b426cc72d3c85846d91388257e","modified":1659283836609},{"_id":"public/tags/mylife/index.html","hash":"01f0351369208aaa432172b98911c8364467c5c9","modified":1659283836609},{"_id":"public/tags/osg/index.html","hash":"78838d217ceee98da53eeb2055944ac1d84be023","modified":1659283836609},{"_id":"public/tags/Games202/index.html","hash":"77d04ca6553bf84bfc4b80ea6a9ecbe51f5201cd","modified":1659283836609},{"_id":"public/tags/Shadow/index.html","hash":"8e29756fded9c833cb52556f9366ea874611f596","modified":1659283836609},{"_id":"public/tags/Git/index.html","hash":"f95aa484b7943a8424875edeb51e3c3972dda505","modified":1659283836609},{"_id":"public/tags/intraduce/index.html","hash":"230e682ebc4016965582e67dec03563c75586a75","modified":1659283836609},{"_id":"public/tags/vector/index.html","hash":"0fef536468572fec04f5cb06fc3cdfe591816513","modified":1659283836609},{"_id":"public/tags/windows/index.html","hash":"bdaae716e4b37a31aaf505c8a912e8291952387b","modified":1659283836609},{"_id":"public/tags/conclusion/index.html","hash":"dccde843bd22fc390b26bc3bccda28375519e585","modified":1659283836609},{"_id":"public/tags/openGL/index.html","hash":"598b707380a38a8fa26055cbc97043b250e864dd","modified":1659283836609},{"_id":"public/tags/computer-graphics/index.html","hash":"6a92ce85dafac8516763b4c29b5a148769986780","modified":1659283836609},{"_id":"public/tags/university/index.html","hash":"f099bb176a31f88917be010dfdd432ea58db235d","modified":1659283836609},{"_id":"public/2022/07/29/Qt-connect-function-the-fifth-param/index.html","hash":"2677e24fb1f67a25981b0934b6f83827a8526aa4","modified":1659283836609},{"_id":"public/2022/07/29/Bit-manipulation/index.html","hash":"81ea698b51ad085164aebd94e89a5e7b97916846","modified":1659283836609},{"_id":"public/2022/07/28/vector-dot-product/index.html","hash":"e54aadf44eeee788dc8cb6c3f0739b51f3287791","modified":1659283836609},{"_id":"public/2022/07/24/Git常用命令-上/index.html","hash":"da428560552f1ac67954a8df4d910d4346034805","modified":1659283836609},{"_id":"public/2022/02/28/微信多开/index.html","hash":"852cac7ceebc47ad0e3b295ce10319f5fe35af15","modified":1659283836609},{"_id":"public/2022/01/16/记一次面试-1/index.html","hash":"e9da0c52ea5d58976f7a1732ffa92f3f9c0ad20f","modified":1659283836609},{"_id":"public/2022/01/16/2021年终总结/index.html","hash":"8bda41dbc88fc3d304f16e4a5025c8b89da4e36c","modified":1659283836609},{"_id":"public/2021/12/13/Games202-ShadowMap/index.html","hash":"11abdbbb2eca54bf481e496d2ba6c24c609af4b0","modified":1659283836609},{"_id":"public/2021/11/07/Multi-KeyWord-Sort/index.html","hash":"8088b93f2ebfcc2a9e7447a61256c97364eae569","modified":1659283836609},{"_id":"public/2021/11/07/Bucket-Sort/index.html","hash":"e6961a5438c0ca22e557df374e7bc0a549ce27b8","modified":1659283836609},{"_id":"public/2021/11/07/Physical-Sort/index.html","hash":"b349c4456a0e6639d55cee36a29e31c9b909bf0f","modified":1659283836609},{"_id":"public/2021/11/07/Dynamic-drawing-of-osg-vertex-buffer-objects/index.html","hash":"17f1cf7a0d5ccbe3defdf830728532617938aa89","modified":1659283836609},{"_id":"public/2021/11/07/Table-Sort/index.html","hash":"5dd9f1e0435e898f022a3ae1e99643015f236781","modified":1659283836609},{"_id":"public/2021/10/28/QuickSort/index.html","hash":"c2a19cb63c000243ba94c3dff49cbc5f078110a2","modified":1659283836609},{"_id":"public/2021/10/26/归并排序/index.html","hash":"d7dbadc6683baa0cbebb2fd519d24a9bd10889ad","modified":1659283836609},{"_id":"public/2021/10/26/Shell-Sort/index.html","hash":"7e079c1537b275f597432275883791322fb7a4bc","modified":1659283836609},{"_id":"public/2021/10/25/Selection-sort/index.html","hash":"69d6dc881ed0b1b5a082326e92bf9d06dc47f045","modified":1659283836609},{"_id":"public/2021/10/24/Heap/index.html","hash":"8cbee21a612222b53617c826765dd5282a62bb5d","modified":1659283836609},{"_id":"public/2021/10/19/sort-bubble-insertion/index.html","hash":"4f64b0b4cf5ba211d05202380f22e08e5716df90","modified":1659283836609},{"_id":"public/2021/10/17/记一次总结/index.html","hash":"cfc5abbfd40ccb7bdccc6bff3d537eb77c94516b","modified":1659283836609},{"_id":"public/2021/07/27/记一次面试/index.html","hash":"22fd19af9ed0b60cb178dacca3eb3818035a0e86","modified":1659283836609},{"_id":"public/2021/07/26/OSG-HUD/index.html","hash":"57e3d111e71b6baaf38b3c5eea32f008c2679da0","modified":1659283836609},{"_id":"public/2021/04/04/OSG踩坑记-默认光源/index.html","hash":"358e3f1fe3454309913003423c18b0b2a7d5bee6","modified":1659283836609},{"_id":"public/2021/03/20/OSG踩坑记-模型共享-模型颜色修改/index.html","hash":"8b05257d81ed3ab4c555be905c9f2ea1cfcc3588","modified":1659283836609},{"_id":"public/2021/03/19/Bug奇遇记-uint16-t/index.html","hash":"ab4792819e8b84396bf9fada9a0d5b2ed090f3c0","modified":1659283836609},{"_id":"public/2021/03/18/迟到的毕业总结/index.html","hash":"c20bb03aea60b5cdceb84206b338519e8085be49","modified":1659283836609},{"_id":"public/2021/03/16/baozi/index.html","hash":"4d729a56215779349bd4cb460f68966a6645866b","modified":1659283836609},{"_id":"public/archives/index.html","hash":"04ad7cdca8c7e5b0fde4212b123b065ca6c00d66","modified":1659283836609},{"_id":"public/archives/page/2/index.html","hash":"46ac67b4ab587892ab6daed31c90ff1e43a101fa","modified":1659283836609},{"_id":"public/archives/page/3/index.html","hash":"01120f5da1c857c14e9c996653be6a9275cf81f6","modified":1659283836609},{"_id":"public/archives/2021/index.html","hash":"51efedfd139588d64574f0192b1681a1a65a40a3","modified":1659283836609},{"_id":"public/archives/2021/page/2/index.html","hash":"c22038a89614ca7cc73a3f3115d5903e1339a540","modified":1659283836609},{"_id":"public/archives/2021/10/index.html","hash":"2c02e97cddcf1011e4d9cd36936791cda7e30583","modified":1659283836609},{"_id":"public/archives/2022/index.html","hash":"e9c06374b2ff135026f329a8d9de34bea3bb2527","modified":1659283836609},{"_id":"public/index.html","hash":"6f4c52bc107904433efa0eb1dbebc8327057ff2f","modified":1659283836609},{"_id":"public/page/2/index.html","hash":"218722a1b91e621ee33b1197af9c0ba9a5b771a8","modified":1659283836609},{"_id":"public/page/3/index.html","hash":"e2b108396824de61725089790c7c0ab0354cf4ff","modified":1659283836609},{"_id":"public/categories/Algorithm/index.html","hash":"ad65998430aaa92de9047fcdeed04605cdce732e","modified":1659283836609},{"_id":"public/categories/works/index.html","hash":"c0bea46327e795af08515e80118acff51b7bc6a5","modified":1659283836609},{"_id":"public/tags/cpp/index.html","hash":"d20ea7f27386de871f117d5243dc7654758c4d90","modified":1659283836609},{"_id":"public/tags/cpp/page/2/index.html","hash":"336c74fd31d863464d57eb29f5bc2d71b6487fee","modified":1659283836609},{"_id":"public/tags/sort/index.html","hash":"15d59099fdd3096fa4cf02e265ef66f1edd8a298","modified":1659283836609},{"_id":"public/CNAME","hash":"9198ffd83e0d8aa2ea2bb40dea5654d0fa6523a4","modified":1659283836609},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1659283836609},{"_id":"public/uploads/wechat-qcode.jpg","hash":"5e32da2bbb5828e9050d948db5f9f36731ecfccc","modified":1659283836609},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1659283836609},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1659283836609},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1659283836609},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1659283836609},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1659283836609},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1659283836609},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1659283836609},{"_id":"public/css/main.css","hash":"79bb62045253aeb84b7686f98415440ca86627c7","modified":1659283836609},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1659283836609},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1659283836609},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1659283836609},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1659283836609},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1659283836609},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1659283836609},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1659283836609},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1659283836609},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1659283836609},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1659283836609},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1659283836609},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1659283836609},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1659283836609},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1659283836609},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1659283836609},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1659283836609},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1659283836609},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1659283836609},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1659283836609},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1659283836609},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1659283836609},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1659283836609},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1659283836609},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1659283836609},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1659283836609},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1659283836609},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1659283836609},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1659283836609},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1659283836609},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1659283836609},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1659283836609},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1659283836609},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1659283836609},{"_id":"public/images/background.jpg","hash":"977631c766110769f406e77354d0a6eafd4c8455","modified":1659283836609},{"_id":"public/images/avatar.png","hash":"8ca60887b36d4595133f0a9feffac27468381e6a","modified":1659283836609}],"Category":[{"name":"bun","_id":"cl69ir6ma0004qcdadpla6jba"},{"name":"Algorithm","_id":"cl69ir6md000bqcdab7qo9dyc"},{"name":"Coding","_id":"cl69ir6mf000gqcda518b28ck"},{"name":"works","_id":"cl69ir6mg000lqcda4uesgpxd"},{"name":"life","parent":"cl69ir6ma0004qcdadpla6jba","_id":"cl69ir6mj000uqcda6zr27yjr"},{"name":"Computer Graph","_id":"cl69ir6mm001aqcda4rpkbdfp"},{"name":"GF","parent":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6mr001qqcda318k1jv1"},{"name":"HJ","parent":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6mu001yqcda1usf6lpt"},{"name":"SCU","parent":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6mz002sqcda3l44dicr"},{"name":"Math","_id":"cl69ir6n0002xqcda5kbzew8v"},{"name":"Tips","_id":"cl69ir6n00032qcdadyu2agkp"},{"name":"OSG","parent":"cl69ir6mu001yqcda1usf6lpt","_id":"cl69ir6n10037qcda6nqf5vgv"},{"name":"interview","parent":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6n1003dqcda6hix2ckh"},{"name":"OSG","parent":"cl69ir6mr001qqcda318k1jv1","_id":"cl69ir6n2003iqcda221acidi"},{"name":"university","parent":"cl69ir6ma0004qcdadpla6jba","_id":"cl69ir6n3003oqcdag0kpdu50"},{"name":"data type","parent":"cl69ir6mr001qqcda318k1jv1","_id":"cl69ir6n50040qcdagupzh2b7"},{"name":"linear algebra","parent":"cl69ir6n0002xqcda5kbzew8v","_id":"cl69ir6n60045qcda4sjrh97x"},{"name":"bugs","parent":"cl69ir6n50040qcdagupzh2b7","_id":"cl69ir6n6004bqcda0jfhd8g9"}],"Data":[],"Page":[{"title":"万物皆可贴标签","date":"2021-03-17T14:20:05.000Z","type":"tags","comments":0,"layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 万物皆可贴标签\ndate: 2021-03-17 22:20:05\ntype: \"tags\"\ncomments: false\nlayout: \"tags\"\n---\n\n","updated":"2022-07-28T16:37:23.427Z","path":"tags/index.html","_id":"cl69ir6m40000qcdagkax1def","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"About me","date":"2021-03-17T14:19:57.000Z","type":"about","_content":"\n#### Current Status\n\n- 一个无心上班的，三流软件开发人员。\n\n#### Work\n\n- 图形开发（图形展示`2D` & `3D`），桌面软件开发。\n\n#### Work Tags\n\n- `Cpp`、`OSG`、`OpenGL`、`Qt`、`VS`、`Git`、`Math`。","source":"about/index.md","raw":"---\ntitle: \"About me\"\ndate: 2021-03-17 22:19:57\ntype: \"about\"\n---\n\n#### Current Status\n\n- 一个无心上班的，三流软件开发人员。\n\n#### Work\n\n- 图形开发（图形展示`2D` & `3D`），桌面软件开发。\n\n#### Work Tags\n\n- `Cpp`、`OSG`、`OpenGL`、`Qt`、`VS`、`Git`、`Math`。","updated":"2022-07-28T16:37:23.286Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl69ir6m80002qcdaes7c2yrs","content":"<h4 id=\"current-status\">Current Status</h4>\r\n<ul>\r\n<li>一个无心上班的，三流软件开发人员。</li>\r\n</ul>\r\n<h4 id=\"work\">Work</h4>\r\n<ul>\r\n<li>图形开发（图形展示<code>2D</code> &amp;\r\n<code>3D</code>），桌面软件开发。</li>\r\n</ul>\r\n<h4 id=\"work-tags\">Work Tags</h4>\r\n<ul>\r\n<li><code>Cpp</code>、<code>OSG</code>、<code>OpenGL</code>、<code>Qt</code>、<code>VS</code>、<code>Git</code>、<code>Math</code>。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"current-status\">Current Status</h4>\r\n<ul>\r\n<li>一个无心上班的，三流软件开发人员。</li>\r\n</ul>\r\n<h4 id=\"work\">Work</h4>\r\n<ul>\r\n<li>图形开发（图形展示<code>2D</code> &amp;\r\n<code>3D</code>），桌面软件开发。</li>\r\n</ul>\r\n<h4 id=\"work-tags\">Work Tags</h4>\r\n<ul>\r\n<li><code>Cpp</code>、<code>OSG</code>、<code>OpenGL</code>、<code>Qt</code>、<code>VS</code>、<code>Git</code>、<code>Math</code>。</li>\r\n</ul>\r\n"},{"title":"home","date":"2021-03-17T14:45:38.000Z","type":"home","_content":"","source":"home/index.md","raw":"---\ntitle: home\ndate: 2021-03-17 22:45:38\ntype: \"home\"\n---\n","updated":"2022-07-28T16:37:23.396Z","path":"home/index.html","comments":1,"layout":"page","_id":"cl69ir6mb0006qcda3mnh2mo3","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"all of categories","date":"2021-03-17T15:18:00.000Z","type":"categories","comments":0,"layout":"categories","_content":"\n### ","source":"categories/index.md","raw":"---\ntitle: \"all of categories\"\ndate: 2021-03-17 23:18:00\ntype: \"categories\"\ncomments: false\nlayout: \"categories\"\n---\n\n### ","updated":"2022-07-28T16:37:23.349Z","path":"categories/index.html","_id":"cl69ir6mc0008qcdag84n59xc","content":"<h3 id=\"section\"></h3>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"section\"></h3>\r\n"}],"Post":[{"title":"2021年终总结","date":"2022-01-15T16:43:19.000Z","_content":"\n### 我起伏的2021年:\n\n- 2021年鸡毛蒜皮\n\n....\n\n### 我的关于2021年的大事件：\n\n#### 1、换了工作\n\n#### 2、离开了那个度过了五年的城市\n\n#### 3、 换了工作的城市\n\n#### 4、告别了好友\n\n#### 5、见了阔怕已久的朋友\n\n#### 6、又一次决定换工作 \n\n- 面试了一个环境可能更好的工作\n\n### 一、我换工作这件事\n\n<p>先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。</p>\n&ensp;&ensp;离开我的上一个岗位的原因颇多,当然究其原因，我觉得`马老板`说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\n&ensp;&ensp;新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。\n\n### 二、离开济南\n\n&ensp;&ensp;我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\n&ensp;&ensp;若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\n&ensp;&ensp;我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以`成都`应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\n&ensp;&ensp;然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\n&ensp;&ensp;然后我来了`北京`.....,只能说，造化弄人。\n\n### 三、告别好友\n\n&ensp;&ensp;我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的`二哥`还有`杨哥`,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\n&ensp;&ensp;从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。\n\n### 四、见了好久不见的朋友\n\n&ensp;&ensp;2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\n&ensp;&ensp;有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\n&ensp;&ensp;同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。\n\n### 五、又一次决定换工作\n\n&ensp;&ensp;决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\n&ensp;&ensp;又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！\n\n\n\n","source":"_posts/2021年终总结.md","raw":"---\ntitle: 2021年终总结\ndate: 2022-01-16 00:43:19\ncategories:\n  - bun\n  - life\ntags:\t\n  - mylife\n---\n\n### 我起伏的2021年:\n\n- 2021年鸡毛蒜皮\n\n....\n\n### 我的关于2021年的大事件：\n\n#### 1、换了工作\n\n#### 2、离开了那个度过了五年的城市\n\n#### 3、 换了工作的城市\n\n#### 4、告别了好友\n\n#### 5、见了阔怕已久的朋友\n\n#### 6、又一次决定换工作 \n\n- 面试了一个环境可能更好的工作\n\n### 一、我换工作这件事\n\n<p>先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。</p>\n&ensp;&ensp;离开我的上一个岗位的原因颇多,当然究其原因，我觉得`马老板`说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\n&ensp;&ensp;新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。\n\n### 二、离开济南\n\n&ensp;&ensp;我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\n&ensp;&ensp;若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\n&ensp;&ensp;我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以`成都`应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\n&ensp;&ensp;然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\n&ensp;&ensp;然后我来了`北京`.....,只能说，造化弄人。\n\n### 三、告别好友\n\n&ensp;&ensp;我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的`二哥`还有`杨哥`,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\n&ensp;&ensp;从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。\n\n### 四、见了好久不见的朋友\n\n&ensp;&ensp;2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\n&ensp;&ensp;有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\n&ensp;&ensp;同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。\n\n### 五、又一次决定换工作\n\n&ensp;&ensp;决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\n&ensp;&ensp;又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！\n\n\n\n","slug":"2021年终总结","published":1,"updated":"2022-07-28T16:37:23.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6m60001qcdaeup5ceaa","content":"<h3 id=\"我起伏的2021年\">我起伏的2021年:</h3>\r\n<ul>\r\n<li>2021年鸡毛蒜皮</li>\r\n</ul>\r\n<p>....</p>\r\n<h3 id=\"我的关于2021年的大事件\">我的关于2021年的大事件：</h3>\r\n<h4 id=\"换了工作\">1、换了工作</h4>\r\n<h4 id=\"离开了那个度过了五年的城市\">2、离开了那个度过了五年的城市</h4>\r\n<h4 id=\"换了工作的城市\">3、 换了工作的城市</h4>\r\n<h4 id=\"告别了好友\">4、告别了好友</h4>\r\n<h4 id=\"见了阔怕已久的朋友\">5、见了阔怕已久的朋友</h4>\r\n<h4 id=\"又一次决定换工作\">6、又一次决定换工作</h4>\r\n<ul>\r\n<li>面试了一个环境可能更好的工作</li>\r\n</ul>\r\n<h3 id=\"一我换工作这件事\">一、我换工作这件事</h3>\r\n<p>\r\n先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。\r\n</p>\r\n<p>  离开我的上一个岗位的原因颇多,当然究其原因，我觉得<code>马老板</code>说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\r\n  新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。</p>\r\n<h3 id=\"二离开济南\">二、离开济南</h3>\r\n<p>  我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\r\n  若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\r\n  我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以<code>成都</code>应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\r\n  然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\r\n  然后我来了<code>北京</code>.....,只能说，造化弄人。</p>\r\n<h3 id=\"三告别好友\">三、告别好友</h3>\r\n<p>  我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的<code>二哥</code>还有<code>杨哥</code>,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\r\n  从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。</p>\r\n<h3 id=\"四见了好久不见的朋友\">四、见了好久不见的朋友</h3>\r\n<p>  2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\r\n  有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\r\n  同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。</p>\r\n<h3 id=\"五又一次决定换工作\">五、又一次决定换工作</h3>\r\n<p>  决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\r\n  又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"我起伏的2021年\">我起伏的2021年:</h3>\r\n<ul>\r\n<li>2021年鸡毛蒜皮</li>\r\n</ul>\r\n<p>....</p>\r\n<h3 id=\"我的关于2021年的大事件\">我的关于2021年的大事件：</h3>\r\n<h4 id=\"换了工作\">1、换了工作</h4>\r\n<h4 id=\"离开了那个度过了五年的城市\">2、离开了那个度过了五年的城市</h4>\r\n<h4 id=\"换了工作的城市\">3、 换了工作的城市</h4>\r\n<h4 id=\"告别了好友\">4、告别了好友</h4>\r\n<h4 id=\"见了阔怕已久的朋友\">5、见了阔怕已久的朋友</h4>\r\n<h4 id=\"又一次决定换工作\">6、又一次决定换工作</h4>\r\n<ul>\r\n<li>面试了一个环境可能更好的工作</li>\r\n</ul>\r\n<h3 id=\"一我换工作这件事\">一、我换工作这件事</h3>\r\n<p>\r\n先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。\r\n</p>\r\n<p>  离开我的上一个岗位的原因颇多,当然究其原因，我觉得<code>马老板</code>说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\r\n  新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。</p>\r\n<h3 id=\"二离开济南\">二、离开济南</h3>\r\n<p>  我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\r\n  若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\r\n  我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以<code>成都</code>应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\r\n  然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\r\n  然后我来了<code>北京</code>.....,只能说，造化弄人。</p>\r\n<h3 id=\"三告别好友\">三、告别好友</h3>\r\n<p>  我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的<code>二哥</code>还有<code>杨哥</code>,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\r\n  从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。</p>\r\n<h3 id=\"四见了好久不见的朋友\">四、见了好久不见的朋友</h3>\r\n<p>  2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\r\n  有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\r\n  同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。</p>\r\n<h3 id=\"五又一次决定换工作\">五、又一次决定换工作</h3>\r\n<p>  决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\r\n  又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！</p>\r\n"},{"title":"Bucket Sort and Cardinality sort","date":"2021-11-07T13:34:19.000Z","_content":"\n### 桶排序\n\n- `T(N,M) = O(M+N)`,M 个桶的情况\n  - N >> M的时候是相对教优秀的算法\n  - M >> N ???\n\n- 假设我们有N = 10个整数，N ∈ [0,999],(此时 M = 1000)；我们便不能在线性时间下完成排序。\n\n### 基数排序：按照数字的进制排序（10）\n\n- example: \n- input: 64 8 216 512 27 729 0 1 343 125 \n  - 使用次位优先(Least Significant Digit)\n  - 先按照个位数将元素放到对应的桶Pass1\n  - 按照十位放到对应的桶中\n\n| Bucket |            0             |            1             |            2             |             3              |             4             |             5              | 6                          |             7             |            8             |             9              |\n| :----: | :----------------------: | :----------------------: | :----------------------: | :------------------------: | :-----------------------: | :------------------------: | -------------------------- | :-----------------------: | :----------------------: | :------------------------: |\n| Pass 1(个位) | <font color=red>0</font> | <font color=red>1</font> | 51<font color=red>2</font> | 34<font color=red>3</font> | 6<font color=red>4</font> | 12<font color=red>5</font> | 21<font color=red>6</font> | 2<font color=red>7</font> | <font color=red>8</font> | 72<font color=red>9</font> |\n| Pass 2(十位) |         0<br>1<br>8         | 512<br>216 | 125<br>27<br>729 |                            |            343            |                            | 64<br>                     |                           |                          |                            |\n| Pass 3 (百位) | 0<br/>1<br/>8<br/>27<br/>64 | 125 | 216 |            343             |                           |            512             |                            |            729            |                          |                            |\n\n- 最终的顺序，分别从每个桶中顺序读取即可。\n\n#### 时间复杂度： `T= O(P(N+B))`\n\n- 较好情况：取决于基数-多少个桶 (B << N时差不多是一个线性复杂度的算法)\n\n","source":"_posts/Bucket-Sort.md","raw":"---\ntitle: Bucket Sort and Cardinality sort\ndate: 2021-11-07 21:34:19\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n### 桶排序\n\n- `T(N,M) = O(M+N)`,M 个桶的情况\n  - N >> M的时候是相对教优秀的算法\n  - M >> N ???\n\n- 假设我们有N = 10个整数，N ∈ [0,999],(此时 M = 1000)；我们便不能在线性时间下完成排序。\n\n### 基数排序：按照数字的进制排序（10）\n\n- example: \n- input: 64 8 216 512 27 729 0 1 343 125 \n  - 使用次位优先(Least Significant Digit)\n  - 先按照个位数将元素放到对应的桶Pass1\n  - 按照十位放到对应的桶中\n\n| Bucket |            0             |            1             |            2             |             3              |             4             |             5              | 6                          |             7             |            8             |             9              |\n| :----: | :----------------------: | :----------------------: | :----------------------: | :------------------------: | :-----------------------: | :------------------------: | -------------------------- | :-----------------------: | :----------------------: | :------------------------: |\n| Pass 1(个位) | <font color=red>0</font> | <font color=red>1</font> | 51<font color=red>2</font> | 34<font color=red>3</font> | 6<font color=red>4</font> | 12<font color=red>5</font> | 21<font color=red>6</font> | 2<font color=red>7</font> | <font color=red>8</font> | 72<font color=red>9</font> |\n| Pass 2(十位) |         0<br>1<br>8         | 512<br>216 | 125<br>27<br>729 |                            |            343            |                            | 64<br>                     |                           |                          |                            |\n| Pass 3 (百位) | 0<br/>1<br/>8<br/>27<br/>64 | 125 | 216 |            343             |                           |            512             |                            |            729            |                          |                            |\n\n- 最终的顺序，分别从每个桶中顺序读取即可。\n\n#### 时间复杂度： `T= O(P(N+B))`\n\n- 较好情况：取决于基数-多少个桶 (B << N时差不多是一个线性复杂度的算法)\n\n","slug":"Bucket-Sort","published":1,"updated":"2022-07-28T16:37:23.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6m90003qcdabkb0e0jv","content":"<h3 id=\"桶排序\">桶排序</h3>\r\n<ul>\r\n<li><code>T(N,M) = O(M+N)</code>,M 个桶的情况\r\n<ul>\r\n<li>N &gt;&gt; M的时候是相对教优秀的算法</li>\r\n<li>M &gt;&gt; N ???</li>\r\n</ul></li>\r\n<li>假设我们有N = 10个整数，N ∈ [0,999],(此时 M =\r\n1000)；我们便不能在线性时间下完成排序。</li>\r\n</ul>\r\n<h3\r\nid=\"基数排序按照数字的进制排序10\">基数排序：按照数字的进制排序（10）</h3>\r\n<ul>\r\n<li>example:</li>\r\n<li>input: 64 8 216 512 27 729 0 1 343 125\r\n<ul>\r\n<li>使用次位优先(Least Significant Digit)</li>\r\n<li>先按照个位数将元素放到对应的桶Pass1</li>\r\n<li>按照十位放到对应的桶中</li>\r\n</ul></li>\r\n</ul>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 2%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">Bucket</th>\r\n<th style=\"text-align: center;\">0</th>\r\n<th style=\"text-align: center;\">1</th>\r\n<th style=\"text-align: center;\">2</th>\r\n<th style=\"text-align: center;\">3</th>\r\n<th style=\"text-align: center;\">4</th>\r\n<th style=\"text-align: center;\">5</th>\r\n<th>6</th>\r\n<th style=\"text-align: center;\">7</th>\r\n<th style=\"text-align: center;\">8</th>\r\n<th style=\"text-align: center;\">9</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Pass 1(个位)</td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\">51<font color=red>2</font></td>\r\n<td style=\"text-align: center;\">34<font color=red>3</font></td>\r\n<td style=\"text-align: center;\">6<font color=red>4</font></td>\r\n<td style=\"text-align: center;\">12<font color=red>5</font></td>\r\n<td>21<font color=red>6</font></td>\r\n<td style=\"text-align: center;\">2<font color=red>7</font></td>\r\n<td style=\"text-align: center;\"><font color=red>8</font></td>\r\n<td style=\"text-align: center;\">72<font color=red>9</font></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Pass 2(十位)</td>\r\n<td style=\"text-align: center;\">0<br>1<br>8</td>\r\n<td style=\"text-align: center;\">512<br>216</td>\r\n<td style=\"text-align: center;\">125<br>27<br>729</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">343</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td>64<br></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Pass 3 (百位)</td>\r\n<td style=\"text-align: center;\">0<br/>1<br/>8<br/>27<br/>64</td>\r\n<td style=\"text-align: center;\">125</td>\r\n<td style=\"text-align: center;\">216</td>\r\n<td style=\"text-align: center;\">343</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">512</td>\r\n<td></td>\r\n<td style=\"text-align: center;\">729</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>最终的顺序，分别从每个桶中顺序读取即可。</li>\r\n</ul>\r\n<h4 id=\"时间复杂度-t-opnb\">时间复杂度： <code>T= O(P(N+B))</code></h4>\r\n<ul>\r\n<li>较好情况：取决于基数-多少个桶 (B &lt;&lt;\r\nN时差不多是一个线性复杂度的算法)</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"桶排序\">桶排序</h3>\r\n<ul>\r\n<li><code>T(N,M) = O(M+N)</code>,M 个桶的情况\r\n<ul>\r\n<li>N &gt;&gt; M的时候是相对教优秀的算法</li>\r\n<li>M &gt;&gt; N ???</li>\r\n</ul></li>\r\n<li>假设我们有N = 10个整数，N ∈ [0,999],(此时 M =\r\n1000)；我们便不能在线性时间下完成排序。</li>\r\n</ul>\r\n<h3\r\nid=\"基数排序按照数字的进制排序10\">基数排序：按照数字的进制排序（10）</h3>\r\n<ul>\r\n<li>example:</li>\r\n<li>input: 64 8 216 512 27 729 0 1 343 125\r\n<ul>\r\n<li>使用次位优先(Least Significant Digit)</li>\r\n<li>先按照个位数将元素放到对应的桶Pass1</li>\r\n<li>按照十位放到对应的桶中</li>\r\n</ul></li>\r\n</ul>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 2%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">Bucket</th>\r\n<th style=\"text-align: center;\">0</th>\r\n<th style=\"text-align: center;\">1</th>\r\n<th style=\"text-align: center;\">2</th>\r\n<th style=\"text-align: center;\">3</th>\r\n<th style=\"text-align: center;\">4</th>\r\n<th style=\"text-align: center;\">5</th>\r\n<th>6</th>\r\n<th style=\"text-align: center;\">7</th>\r\n<th style=\"text-align: center;\">8</th>\r\n<th style=\"text-align: center;\">9</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Pass 1(个位)</td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\">51<font color=red>2</font></td>\r\n<td style=\"text-align: center;\">34<font color=red>3</font></td>\r\n<td style=\"text-align: center;\">6<font color=red>4</font></td>\r\n<td style=\"text-align: center;\">12<font color=red>5</font></td>\r\n<td>21<font color=red>6</font></td>\r\n<td style=\"text-align: center;\">2<font color=red>7</font></td>\r\n<td style=\"text-align: center;\"><font color=red>8</font></td>\r\n<td style=\"text-align: center;\">72<font color=red>9</font></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Pass 2(十位)</td>\r\n<td style=\"text-align: center;\">0<br>1<br>8</td>\r\n<td style=\"text-align: center;\">512<br>216</td>\r\n<td style=\"text-align: center;\">125<br>27<br>729</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">343</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td>64<br></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Pass 3 (百位)</td>\r\n<td style=\"text-align: center;\">0<br/>1<br/>8<br/>27<br/>64</td>\r\n<td style=\"text-align: center;\">125</td>\r\n<td style=\"text-align: center;\">216</td>\r\n<td style=\"text-align: center;\">343</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">512</td>\r\n<td></td>\r\n<td style=\"text-align: center;\">729</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>最终的顺序，分别从每个桶中顺序读取即可。</li>\r\n</ul>\r\n<h4 id=\"时间复杂度-t-opnb\">时间复杂度： <code>T= O(P(N+B))</code></h4>\r\n<ul>\r\n<li>较好情况：取决于基数-多少个桶 (B &lt;&lt;\r\nN时差不多是一个线性复杂度的算法)</li>\r\n</ul>\r\n"},{"title":"Bit manipulation","date":"2022-07-29T09:24:35.000Z","_content":"### 将二进制数某一位置0，置1，取反\n- 用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用\n---\n- 函数实现 \n\n#### 1. 将不同进制数转为二进制(非必须) - 我们只是为了显示结果\n- 模拟人的计算过程\n    ```cpp\n    static void showBinary(int d)\n    {\n        using std::cout;\n        using std::endl;\n        using std::array;\n\n        // 存储具体对应的位的值 0 / 1\n        array<int, 32> num;\n        num.fill(0);\n        int flag = 1; // 当前转换的Bit位\n        for (int i = 31; i >= 0; i--)\n        {\n            if (d & flag)\n            {\n                num[i] = 1;\n            }\n            else\n            {\n                num[i] = 0;\n            }\n\n            flag = flag << 1;\n        }\n\n        // 查找第一个不是零的数 \n        int index = 0;\n        #if 1 \n        // 此过程可以省略 做了个显示上的优化\n            for (auto i = 0; i < num.size(); i++)\n            {\n                if (num[i] != 0)\n                {\n\n                    i == 0 ? index = i : index = i - 1;\n                    break;\n                }\n            }\n        #endif \n\n        // 输出转换结果\n        for (auto i = index; i < num.size(); i++)\n        {\n            cout << num[i];\n\n        }\n        cout << endl;\n    }\n\n    ```\n\n#### 某一位置为 0\n- `&`运算的应用\n    ```cpp\n        /// 某一位设置为 0\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2Zero(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // 取反是一个只和取反位数以及之后所有位数相关的操作\n            // 二进制的位数从0开始计算 所以需要 bits - 1 \n            // 1 << (bits(3) - 1) = 4 = 0100 \n            // ~4 = 1011\n            // & 同为 1 则为 1 => 1011 & (任意数字) 第三位等于 0\n            d = d & (~(1 << (bits - 1)));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n    ```\n\n#### 某一位置为 1\n- `|` 运算的应用, 只要有一个是1 结果都是1\n    ```cpp\n        /// 某一位设置为 1\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2One(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // d(16) = 10000 bits = 3\n            // 1 << bits - 1 == 4 = 0100\n            // d | 0100 = 10000 | 0100  = 10100 \n            d = d | (1 << (bits - 1));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n    ```\n\n#### 某一位置取反\n- `^` 异或运算的运用\n    - `^` 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0\n\n    ```cpp\n        /// 某一位取反\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2Negate(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // 转换过程\n            // ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 \n            // d(15) == 1111 bits = 3\n            // 1 << bits - 1 == 0100\n            // 1111\n            // 0100 ^\n            // 1011 \n            d = d ^ (1 << (bits - 1));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n\n    ```\n\n## 参考\n- [1] [Github](https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation \"Github\")","source":"_posts/Bit-manipulation.md","raw":"---\ntitle: Bit manipulation\ndate: 2022-07-29 17:24:35\ncategories:\n- Coding\ntags:\n- cpp\n---\n### 将二进制数某一位置0，置1，取反\n- 用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用\n---\n- 函数实现 \n\n#### 1. 将不同进制数转为二进制(非必须) - 我们只是为了显示结果\n- 模拟人的计算过程\n    ```cpp\n    static void showBinary(int d)\n    {\n        using std::cout;\n        using std::endl;\n        using std::array;\n\n        // 存储具体对应的位的值 0 / 1\n        array<int, 32> num;\n        num.fill(0);\n        int flag = 1; // 当前转换的Bit位\n        for (int i = 31; i >= 0; i--)\n        {\n            if (d & flag)\n            {\n                num[i] = 1;\n            }\n            else\n            {\n                num[i] = 0;\n            }\n\n            flag = flag << 1;\n        }\n\n        // 查找第一个不是零的数 \n        int index = 0;\n        #if 1 \n        // 此过程可以省略 做了个显示上的优化\n            for (auto i = 0; i < num.size(); i++)\n            {\n                if (num[i] != 0)\n                {\n\n                    i == 0 ? index = i : index = i - 1;\n                    break;\n                }\n            }\n        #endif \n\n        // 输出转换结果\n        for (auto i = index; i < num.size(); i++)\n        {\n            cout << num[i];\n\n        }\n        cout << endl;\n    }\n\n    ```\n\n#### 某一位置为 0\n- `&`运算的应用\n    ```cpp\n        /// 某一位设置为 0\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2Zero(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // 取反是一个只和取反位数以及之后所有位数相关的操作\n            // 二进制的位数从0开始计算 所以需要 bits - 1 \n            // 1 << (bits(3) - 1) = 4 = 0100 \n            // ~4 = 1011\n            // & 同为 1 则为 1 => 1011 & (任意数字) 第三位等于 0\n            d = d & (~(1 << (bits - 1)));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n    ```\n\n#### 某一位置为 1\n- `|` 运算的应用, 只要有一个是1 结果都是1\n    ```cpp\n        /// 某一位设置为 1\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2One(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // d(16) = 10000 bits = 3\n            // 1 << bits - 1 == 4 = 0100\n            // d | 0100 = 10000 | 0100  = 10100 \n            d = d | (1 << (bits - 1));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n    ```\n\n#### 某一位置取反\n- `^` 异或运算的运用\n    - `^` 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0\n\n    ```cpp\n        /// 某一位取反\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2Negate(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // 转换过程\n            // ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 \n            // d(15) == 1111 bits = 3\n            // 1 << bits - 1 == 0100\n            // 1111\n            // 0100 ^\n            // 1011 \n            d = d ^ (1 << (bits - 1));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n\n    ```\n\n## 参考\n- [1] [Github](https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation \"Github\")","slug":"Bit-manipulation","published":1,"updated":"2022-07-31T15:50:22.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mb0007qcda2gss38yk","content":"<h3 id=\"将二进制数某一位置0置1取反\">将二进制数某一位置0，置1，取反</h3>\r\n<ul>\r\n<li><h2\r\nid=\"用位运算可以解决我们的问题所以下面部分的代码就是一些位运算的简单应用\">用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用</h2></li>\r\n<li>函数实现</li>\r\n</ul>\r\n<h4 id=\"将不同进制数转为二进制非必须---我们只是为了显示结果\">1.\r\n将不同进制数转为二进制(非必须) - 我们只是为了显示结果</h4>\r\n<ul>\r\n<li>模拟人的计算过程 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储具体对应的位的值 0 / 1</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 32&gt; num;</span><br><span class=\"line\">    num.fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>; <span class=\"comment\">// 当前转换的Bit位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">31</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d &amp; flag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = flag &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找第一个不是零的数 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1 </span></span><br><span class=\"line\">    <span class=\"comment\">// 此过程可以省略 做了个显示上的优化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; num.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                i == <span class=\"number\">0</span> ? index = i : index = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出转换结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = index; i &lt; num.size(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; num[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置为-0\">某一位置为 0</h4>\r\n<ul>\r\n<li><code>&amp;</code>运算的应用 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位设置为 0</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2Zero</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// 取反是一个只和取反位数以及之后所有位数相关的操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 二进制的位数从0开始计算 所以需要 bits - 1 </span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; (bits(3) - 1) = 4 = 0100 </span></span><br><span class=\"line\">    <span class=\"comment\">// ~4 = 1011</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp; 同为 1 则为 1 =&gt; 1011 &amp; (任意数字) 第三位等于 0</span></span><br><span class=\"line\">    d = d &amp; (~(<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>)));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置为-1\">某一位置为 1</h4>\r\n<ul>\r\n<li><code>|</code> 运算的应用, 只要有一个是1 结果都是1\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位设置为 1</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2One</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// d(16) = 10000 bits = 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; bits - 1 == 4 = 0100</span></span><br><span class=\"line\">    <span class=\"comment\">// d | 0100 = 10000 | 0100  = 10100 </span></span><br><span class=\"line\">    d = d | (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置取反\">某一位置取反</h4>\r\n<ul>\r\n<li><code>^</code> 异或运算的运用\r\n<ul>\r\n<li><code>^</code> 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1 其余的情况都是\r\n0</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位取反</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2Negate</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// 转换过程</span></span><br><span class=\"line\">    <span class=\"comment\">// ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 </span></span><br><span class=\"line\">    <span class=\"comment\">// d(15) == 1111 bits = 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; bits - 1 == 0100</span></span><br><span class=\"line\">    <span class=\"comment\">// 1111</span></span><br><span class=\"line\">    <span class=\"comment\">// 0100 ^</span></span><br><span class=\"line\">    <span class=\"comment\">// 1011 </span></span><br><span class=\"line\">    d = d ^ (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h2 id=\"参考\">参考</h2>\r\n<ul>\r\n<li>[1] <a\r\nhref=\"https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation\"\r\ntitle=\"Github\">Github</a></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"将二进制数某一位置0置1取反\">将二进制数某一位置0，置1，取反</h3>\r\n<ul>\r\n<li><h2\r\nid=\"用位运算可以解决我们的问题所以下面部分的代码就是一些位运算的简单应用\">用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用</h2></li>\r\n<li>函数实现</li>\r\n</ul>\r\n<h4 id=\"将不同进制数转为二进制非必须---我们只是为了显示结果\">1.\r\n将不同进制数转为二进制(非必须) - 我们只是为了显示结果</h4>\r\n<ul>\r\n<li>模拟人的计算过程 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储具体对应的位的值 0 / 1</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 32&gt; num;</span><br><span class=\"line\">    num.fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>; <span class=\"comment\">// 当前转换的Bit位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">31</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d &amp; flag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = flag &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找第一个不是零的数 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1 </span></span><br><span class=\"line\">    <span class=\"comment\">// 此过程可以省略 做了个显示上的优化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; num.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                i == <span class=\"number\">0</span> ? index = i : index = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出转换结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = index; i &lt; num.size(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; num[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置为-0\">某一位置为 0</h4>\r\n<ul>\r\n<li><code>&amp;</code>运算的应用 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位设置为 0</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2Zero</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// 取反是一个只和取反位数以及之后所有位数相关的操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 二进制的位数从0开始计算 所以需要 bits - 1 </span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; (bits(3) - 1) = 4 = 0100 </span></span><br><span class=\"line\">    <span class=\"comment\">// ~4 = 1011</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp; 同为 1 则为 1 =&gt; 1011 &amp; (任意数字) 第三位等于 0</span></span><br><span class=\"line\">    d = d &amp; (~(<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>)));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置为-1\">某一位置为 1</h4>\r\n<ul>\r\n<li><code>|</code> 运算的应用, 只要有一个是1 结果都是1\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位设置为 1</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2One</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// d(16) = 10000 bits = 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; bits - 1 == 4 = 0100</span></span><br><span class=\"line\">    <span class=\"comment\">// d | 0100 = 10000 | 0100  = 10100 </span></span><br><span class=\"line\">    d = d | (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置取反\">某一位置取反</h4>\r\n<ul>\r\n<li><code>^</code> 异或运算的运用\r\n<ul>\r\n<li><code>^</code> 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1 其余的情况都是\r\n0</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位取反</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2Negate</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// 转换过程</span></span><br><span class=\"line\">    <span class=\"comment\">// ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 </span></span><br><span class=\"line\">    <span class=\"comment\">// d(15) == 1111 bits = 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; bits - 1 == 0100</span></span><br><span class=\"line\">    <span class=\"comment\">// 1111</span></span><br><span class=\"line\">    <span class=\"comment\">// 0100 ^</span></span><br><span class=\"line\">    <span class=\"comment\">// 1011 </span></span><br><span class=\"line\">    d = d ^ (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h2 id=\"参考\">参考</h2>\r\n<ul>\r\n<li>[1] <a\r\nhref=\"https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation\"\r\ntitle=\"Github\">Github</a></li>\r\n</ul>\r\n"},{"title":"Dynamic drawing of osg vertex buffer objects","date":"2021-11-06T16:36:24.000Z","_content":"\n### `Dynamic drawing of osg vertex buffer objects`\n\n- 使用`显示列表`绘制图形在速度上并没有`vertex buffer object`那么快，所以在更高的`osg`的版本中，推荐使用`vertex buffer object`\n\n- 在使用`vertex buffer object`的情况下，动态更新绘制的数据\n\n- 代码实现：\n```C++\n// 首先- 创建完成 osg::Geometry\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;\n// 关闭显示列表 并使用vbo(vertex buffer object)\ngeom->setUseDisplayLists(false);\ngeom->setUseVertexBufferObject(true);\n// 修改几何体的绘制数据的类型 \ngeom->setDataVariance(osg::Object::DataVariance::DYNAMIC);\n//================================================================\n// 更新操作 \n// 先获取顶点数组 \nauto varray = dynamic_cast<osg::Vec3Array>(geom->getVertexArray());\n// 需改顶点数据\n// ---------------------你可以想数组中插入顶点-----------------------------------\n// 调用 dirty函数，告诉osg::Geometry你修改了顶点\nvarray->dirty();\n// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))\n// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) \nauto pri_set = geom->getPrimitiveSet(0);\n// void  setNumInstances (int n) \npri_set->setNumInstances(修改后的顶点个数)；\npri_set->dirty();\n// 更新几何体\ngeom->dirty();\n```\n\n","source":"_posts/Dynamic-drawing-of-osg-vertex-buffer-objects.md","raw":"---\ntitle: Dynamic drawing of osg vertex buffer objects\ndate: 2021-11-07 00:36:24\ncategories: \n- works\n- HJ\n- OSG\ntags: \n- cpp\n- osg\n---\n\n### `Dynamic drawing of osg vertex buffer objects`\n\n- 使用`显示列表`绘制图形在速度上并没有`vertex buffer object`那么快，所以在更高的`osg`的版本中，推荐使用`vertex buffer object`\n\n- 在使用`vertex buffer object`的情况下，动态更新绘制的数据\n\n- 代码实现：\n```C++\n// 首先- 创建完成 osg::Geometry\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;\n// 关闭显示列表 并使用vbo(vertex buffer object)\ngeom->setUseDisplayLists(false);\ngeom->setUseVertexBufferObject(true);\n// 修改几何体的绘制数据的类型 \ngeom->setDataVariance(osg::Object::DataVariance::DYNAMIC);\n//================================================================\n// 更新操作 \n// 先获取顶点数组 \nauto varray = dynamic_cast<osg::Vec3Array>(geom->getVertexArray());\n// 需改顶点数据\n// ---------------------你可以想数组中插入顶点-----------------------------------\n// 调用 dirty函数，告诉osg::Geometry你修改了顶点\nvarray->dirty();\n// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))\n// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) \nauto pri_set = geom->getPrimitiveSet(0);\n// void  setNumInstances (int n) \npri_set->setNumInstances(修改后的顶点个数)；\npri_set->dirty();\n// 更新几何体\ngeom->dirty();\n```\n\n","slug":"Dynamic-drawing-of-osg-vertex-buffer-objects","published":1,"updated":"2022-07-28T16:37:23.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mc0009qcdadepd4igr","content":"<h3\r\nid=\"dynamic-drawing-of-osg-vertex-buffer-objects\"><code>Dynamic drawing of osg vertex buffer objects</code></h3>\r\n<ul>\r\n<li><p>使用<code>显示列表</code>绘制图形在速度上并没有<code>vertex buffer object</code>那么快，所以在更高的<code>osg</code>的版本中，推荐使用<code>vertex buffer object</code></p></li>\r\n<li><p>在使用<code>vertex buffer object</code>的情况下，动态更新绘制的数据</p></li>\r\n<li><p>代码实现： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先- 创建完成 osg::Geometry</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;</span><br><span class=\"line\"><span class=\"comment\">// 关闭显示列表 并使用vbo(vertex buffer object)</span></span><br><span class=\"line\">geom-&gt;setUseDisplayLists(<span class=\"literal\">false</span>);</span><br><span class=\"line\">geom-&gt;setUseVertexBufferObject(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 修改几何体的绘制数据的类型 </span></span><br><span class=\"line\">geom-&gt;setDataVariance(osg::Object::DataVariance::DYNAMIC);</span><br><span class=\"line\"><span class=\"comment\">//================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 更新操作 </span></span><br><span class=\"line\"><span class=\"comment\">// 先获取顶点数组 </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> varray = <span class=\"keyword\">dynamic_cast</span>&lt;osg::Vec3Array&gt;(geom-&gt;getVertexArray());</span><br><span class=\"line\"><span class=\"comment\">// 需改顶点数据</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------你可以想数组中插入顶点-----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 调用 dirty函数，告诉osg::Geometry你修改了顶点</span></span><br><span class=\"line\">varray-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))</span></span><br><span class=\"line\"><span class=\"comment\">// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pri_set = geom-&gt;getPrimitiveSet(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// void  setNumInstances (int n) </span></span><br><span class=\"line\">pri_set-&gt;setNumInstances(修改后的顶点个数)；</span><br><span class=\"line\">pri_set-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 更新几何体</span></span><br><span class=\"line\">geom-&gt;dirty();</span><br></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3\r\nid=\"dynamic-drawing-of-osg-vertex-buffer-objects\"><code>Dynamic drawing of osg vertex buffer objects</code></h3>\r\n<ul>\r\n<li><p>使用<code>显示列表</code>绘制图形在速度上并没有<code>vertex buffer object</code>那么快，所以在更高的<code>osg</code>的版本中，推荐使用<code>vertex buffer object</code></p></li>\r\n<li><p>在使用<code>vertex buffer object</code>的情况下，动态更新绘制的数据</p></li>\r\n<li><p>代码实现： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先- 创建完成 osg::Geometry</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;</span><br><span class=\"line\"><span class=\"comment\">// 关闭显示列表 并使用vbo(vertex buffer object)</span></span><br><span class=\"line\">geom-&gt;setUseDisplayLists(<span class=\"literal\">false</span>);</span><br><span class=\"line\">geom-&gt;setUseVertexBufferObject(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 修改几何体的绘制数据的类型 </span></span><br><span class=\"line\">geom-&gt;setDataVariance(osg::Object::DataVariance::DYNAMIC);</span><br><span class=\"line\"><span class=\"comment\">//================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 更新操作 </span></span><br><span class=\"line\"><span class=\"comment\">// 先获取顶点数组 </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> varray = <span class=\"keyword\">dynamic_cast</span>&lt;osg::Vec3Array&gt;(geom-&gt;getVertexArray());</span><br><span class=\"line\"><span class=\"comment\">// 需改顶点数据</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------你可以想数组中插入顶点-----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 调用 dirty函数，告诉osg::Geometry你修改了顶点</span></span><br><span class=\"line\">varray-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))</span></span><br><span class=\"line\"><span class=\"comment\">// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pri_set = geom-&gt;getPrimitiveSet(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// void  setNumInstances (int n) </span></span><br><span class=\"line\">pri_set-&gt;setNumInstances(修改后的顶点个数)；</span><br><span class=\"line\">pri_set-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 更新几何体</span></span><br><span class=\"line\">geom-&gt;dirty();</span><br></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n"},{"title":"Bug奇遇记-uint16_t","date":"2021-03-19T12:47:11.000Z","_content":"\n### uint16_t \n\n- 标准定义中：\n\n```c++\ntypedef unsigned short  uint16_t; // max == _UI16_MAX 0xffffu \n```\n\n![uint16_t](https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png \"uint16\")\n\n#### 问题：\n\n- <font color=red>这是一个粗心的问题</font>\n\n在我正在实现的功能中有一个数据遍历的部分，我使用了`uint16_t`类型作为索引的类型，但是`uint16_t`数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！\n\n---\n\n### 正确的结果展示：\n\n![lum_2](https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png \"result\")\n\n\n\n![right result](https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png \"Result\")\n\n","source":"_posts/Bug奇遇记-uint16-t.md","raw":"---\ntitle: Bug奇遇记-uint16_t\ndate: 2021-03-19 20:47:11\ncategories:\n- works\n- GF\n- data type\n- bugs\ntags:\n - cpp\n - osg\n---\n\n### uint16_t \n\n- 标准定义中：\n\n```c++\ntypedef unsigned short  uint16_t; // max == _UI16_MAX 0xffffu \n```\n\n![uint16_t](https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png \"uint16\")\n\n#### 问题：\n\n- <font color=red>这是一个粗心的问题</font>\n\n在我正在实现的功能中有一个数据遍历的部分，我使用了`uint16_t`类型作为索引的类型，但是`uint16_t`数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！\n\n---\n\n### 正确的结果展示：\n\n![lum_2](https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png \"result\")\n\n\n\n![right result](https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png \"Result\")\n\n","slug":"Bug奇遇记-uint16-t","published":1,"updated":"2022-07-28T16:37:23.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mc000aqcdahu77h825","content":"<h3 id=\"uint16_t\">uint16_t</h3>\r\n<ul>\r\n<li>标准定义中：</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  <span class=\"keyword\">uint16_t</span>; <span class=\"comment\">// max == _UI16_MAX 0xffffu </span></span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png\"\r\ntitle=\"uint16\" alt=\"uint16_t\" />\r\n<figcaption aria-hidden=\"true\">uint16_t</figcaption>\r\n</figure>\r\n<h4 id=\"问题\">问题：</h4>\r\n<ul>\r\n<li><font color=red>这是一个粗心的问题</font></li>\r\n</ul>\r\n<p>在我正在实现的功能中有一个数据遍历的部分，我使用了<code>uint16_t</code>类型作为索引的类型，但是<code>uint16_t</code>数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！</p>\r\n<hr />\r\n<h3 id=\"正确的结果展示\">正确的结果展示：</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png\"\r\ntitle=\"result\" alt=\"lum_2\" />\r\n<figcaption aria-hidden=\"true\">lum_2</figcaption>\r\n</figure>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png\"\r\ntitle=\"Result\" alt=\"right result\" />\r\n<figcaption aria-hidden=\"true\">right result</figcaption>\r\n</figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"uint16_t\">uint16_t</h3>\r\n<ul>\r\n<li>标准定义中：</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  <span class=\"keyword\">uint16_t</span>; <span class=\"comment\">// max == _UI16_MAX 0xffffu </span></span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png\"\r\ntitle=\"uint16\" alt=\"uint16_t\" />\r\n<figcaption aria-hidden=\"true\">uint16_t</figcaption>\r\n</figure>\r\n<h4 id=\"问题\">问题：</h4>\r\n<ul>\r\n<li><font color=red>这是一个粗心的问题</font></li>\r\n</ul>\r\n<p>在我正在实现的功能中有一个数据遍历的部分，我使用了<code>uint16_t</code>类型作为索引的类型，但是<code>uint16_t</code>数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！</p>\r\n<hr />\r\n<h3 id=\"正确的结果展示\">正确的结果展示：</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png\"\r\ntitle=\"result\" alt=\"lum_2\" />\r\n<figcaption aria-hidden=\"true\">lum_2</figcaption>\r\n</figure>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png\"\r\ntitle=\"Result\" alt=\"right result\" />\r\n<figcaption aria-hidden=\"true\">right result</figcaption>\r\n</figure>\r\n"},{"title":"Games202-ShadowMap","date":"2021-12-13T14:25:25.000Z","_content":"\n## Shadow Map\n\n- 记录一下关于`Games202`的学习\n\n#### shadow map\n\n- 实现：通过比较当前的`point`,在光源空间的的深度与深度图中记录的深度的大小，决定当前的`point`是否在阴影中\n\n- 如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png)\n\n上图来自`Games202`的课件：\n\n- 阴影图`shadow map`记录了相机在光照位置下的最近最近深度。\n\n- 关于计算当前vertex point 是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-`lightPVM`)，用于将顶点转换到光空间。\n\n- 在`Games202`的作业1中，我们需要使用提供的matrix的接口处理矩阵。\n\n  ```javascript\n  mat.translate() // 设置矩阵的移动 \n  mat4.scale      // 设置矩阵的缩放\n  \n  mat4.lookAt(); // 生成的视图矩阵\n  mat4.ortho();  // 平行投影\n  \n  mat4.multiply(); // 矩阵的乘法\n  ```\n\n  [gl-matrix文档](https://www.icode9.com/content-4-956693.html)\n\n- 深度比较：\n\n  ```glsl\n  sampler2D shadowMap;   // 你的深度图\n  mat4 lightPVM;         // 光空间的变换矩阵\n  vec4 vertexPosition;   // 渲染的顶点坐标\n  \n  // 1： 将顶点变换到光空间 \n  vec4 vertex_light = lightPVM * vertexPosition;\n  // 2: 透视除法将顶点变换到NDC坐标\n  vec3 ndc_pos = vertex_light.xyz / vertex_light.w;\n  // 3: 将深度变到 0-1\n  ndc_pos = ndc_pos * 0.5 + 0.5；\n  // 4：获取深度图中记录的深度\n  // 5: 获取当前点在光空间下的实际深度\n  // 6: 比较两个深度的大小    \n  // 7：返回当前点是否在阴影中    \n  ```\n\n  \n\n- 最终效果\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png)\n","source":"_posts/Games202-ShadowMap.md","raw":"---\ntitle: Games202-ShadowMap\ndate: 2021-12-13 22:25:25\ncategories:\n- Computer Graph\ntags:\n- Games202\n- Shadow\n---\n\n## Shadow Map\n\n- 记录一下关于`Games202`的学习\n\n#### shadow map\n\n- 实现：通过比较当前的`point`,在光源空间的的深度与深度图中记录的深度的大小，决定当前的`point`是否在阴影中\n\n- 如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png)\n\n上图来自`Games202`的课件：\n\n- 阴影图`shadow map`记录了相机在光照位置下的最近最近深度。\n\n- 关于计算当前vertex point 是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-`lightPVM`)，用于将顶点转换到光空间。\n\n- 在`Games202`的作业1中，我们需要使用提供的matrix的接口处理矩阵。\n\n  ```javascript\n  mat.translate() // 设置矩阵的移动 \n  mat4.scale      // 设置矩阵的缩放\n  \n  mat4.lookAt(); // 生成的视图矩阵\n  mat4.ortho();  // 平行投影\n  \n  mat4.multiply(); // 矩阵的乘法\n  ```\n\n  [gl-matrix文档](https://www.icode9.com/content-4-956693.html)\n\n- 深度比较：\n\n  ```glsl\n  sampler2D shadowMap;   // 你的深度图\n  mat4 lightPVM;         // 光空间的变换矩阵\n  vec4 vertexPosition;   // 渲染的顶点坐标\n  \n  // 1： 将顶点变换到光空间 \n  vec4 vertex_light = lightPVM * vertexPosition;\n  // 2: 透视除法将顶点变换到NDC坐标\n  vec3 ndc_pos = vertex_light.xyz / vertex_light.w;\n  // 3: 将深度变到 0-1\n  ndc_pos = ndc_pos * 0.5 + 0.5；\n  // 4：获取深度图中记录的深度\n  // 5: 获取当前点在光空间下的实际深度\n  // 6: 比较两个深度的大小    \n  // 7：返回当前点是否在阴影中    \n  ```\n\n  \n\n- 最终效果\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png)\n","slug":"Games202-ShadowMap","published":1,"updated":"2022-07-28T16:37:23.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6me000eqcdadqsn9pmr","content":"<h2 id=\"shadow-map\">Shadow Map</h2>\r\n<ul>\r\n<li>记录一下关于<code>Games202</code>的学习</li>\r\n</ul>\r\n<h4 id=\"shadow-map-1\">shadow map</h4>\r\n<ul>\r\n<li><p>实现：通过比较当前的<code>point</code>,在光源空间的的深度与深度图中记录的深度的大小，决定当前的<code>point</code>是否在阴影中</p></li>\r\n<li><p>如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：</p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png\" /></p></li>\r\n</ul>\r\n<p>上图来自<code>Games202</code>的课件：</p>\r\n<ul>\r\n<li><p>阴影图<code>shadow map</code>记录了相机在光照位置下的最近最近深度。</p></li>\r\n<li><p>关于计算当前vertex point\r\n是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-<code>lightPVM</code>)，用于将顶点转换到光空间。</p></li>\r\n<li><p>在<code>Games202</code>的作业1中，我们需要使用提供的matrix的接口处理矩阵。</p>\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mat.translate() <span class=\"comment\">// 设置矩阵的移动 </span></span><br><span class=\"line\">mat4.scale      <span class=\"comment\">// 设置矩阵的缩放</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.lookAt(); <span class=\"comment\">// 生成的视图矩阵</span></span><br><span class=\"line\">mat4.ortho();  <span class=\"comment\">// 平行投影</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.multiply(); <span class=\"comment\">// 矩阵的乘法</span></span><br></pre></td></tr></table></figure>\r\n<p><a\r\nhref=\"https://www.icode9.com/content-4-956693.html\">gl-matrix文档</a></p></li>\r\n<li><p>深度比较：</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">sampler2D</span> shadowMap;   <span class=\"comment\">// 你的深度图</span></span><br><span class=\"line\"><span class=\"type\">mat4</span> lightPVM;         <span class=\"comment\">// 光空间的变换矩阵</span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertexPosition;   <span class=\"comment\">// 渲染的顶点坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1： 将顶点变换到光空间 </span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertex_light = lightPVM * vertexPosition;</span><br><span class=\"line\"><span class=\"comment\">// 2: 透视除法将顶点变换到NDC坐标</span></span><br><span class=\"line\"><span class=\"type\">vec3</span> ndc_pos = vertex_light.xyz / vertex_light.w;</span><br><span class=\"line\"><span class=\"comment\">// 3: 将深度变到 0-1</span></span><br><span class=\"line\">ndc_pos = ndc_pos * <span class=\"number\">0.5</span> + <span class=\"number\">0.5</span>；</span><br><span class=\"line\"><span class=\"comment\">// 4：获取深度图中记录的深度</span></span><br><span class=\"line\"><span class=\"comment\">// 5: 获取当前点在光空间下的实际深度</span></span><br><span class=\"line\"><span class=\"comment\">// 6: 比较两个深度的大小    </span></span><br><span class=\"line\"><span class=\"comment\">// 7：返回当前点是否在阴影中    </span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>最终效果</p></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png\" /></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"shadow-map\">Shadow Map</h2>\r\n<ul>\r\n<li>记录一下关于<code>Games202</code>的学习</li>\r\n</ul>\r\n<h4 id=\"shadow-map-1\">shadow map</h4>\r\n<ul>\r\n<li><p>实现：通过比较当前的<code>point</code>,在光源空间的的深度与深度图中记录的深度的大小，决定当前的<code>point</code>是否在阴影中</p></li>\r\n<li><p>如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：</p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png\" /></p></li>\r\n</ul>\r\n<p>上图来自<code>Games202</code>的课件：</p>\r\n<ul>\r\n<li><p>阴影图<code>shadow map</code>记录了相机在光照位置下的最近最近深度。</p></li>\r\n<li><p>关于计算当前vertex point\r\n是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-<code>lightPVM</code>)，用于将顶点转换到光空间。</p></li>\r\n<li><p>在<code>Games202</code>的作业1中，我们需要使用提供的matrix的接口处理矩阵。</p>\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mat.translate() <span class=\"comment\">// 设置矩阵的移动 </span></span><br><span class=\"line\">mat4.scale      <span class=\"comment\">// 设置矩阵的缩放</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.lookAt(); <span class=\"comment\">// 生成的视图矩阵</span></span><br><span class=\"line\">mat4.ortho();  <span class=\"comment\">// 平行投影</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.multiply(); <span class=\"comment\">// 矩阵的乘法</span></span><br></pre></td></tr></table></figure>\r\n<p><a\r\nhref=\"https://www.icode9.com/content-4-956693.html\">gl-matrix文档</a></p></li>\r\n<li><p>深度比较：</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">sampler2D</span> shadowMap;   <span class=\"comment\">// 你的深度图</span></span><br><span class=\"line\"><span class=\"type\">mat4</span> lightPVM;         <span class=\"comment\">// 光空间的变换矩阵</span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertexPosition;   <span class=\"comment\">// 渲染的顶点坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1： 将顶点变换到光空间 </span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertex_light = lightPVM * vertexPosition;</span><br><span class=\"line\"><span class=\"comment\">// 2: 透视除法将顶点变换到NDC坐标</span></span><br><span class=\"line\"><span class=\"type\">vec3</span> ndc_pos = vertex_light.xyz / vertex_light.w;</span><br><span class=\"line\"><span class=\"comment\">// 3: 将深度变到 0-1</span></span><br><span class=\"line\">ndc_pos = ndc_pos * <span class=\"number\">0.5</span> + <span class=\"number\">0.5</span>；</span><br><span class=\"line\"><span class=\"comment\">// 4：获取深度图中记录的深度</span></span><br><span class=\"line\"><span class=\"comment\">// 5: 获取当前点在光空间下的实际深度</span></span><br><span class=\"line\"><span class=\"comment\">// 6: 比较两个深度的大小    </span></span><br><span class=\"line\"><span class=\"comment\">// 7：返回当前点是否在阴影中    </span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>最终效果</p></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png\" /></p>\r\n"},{"title":"Git常用命令(上)","date":"2022-07-24T10:25:51.000Z","_content":"\n# Git常用命令\n---\n### `install Git`\n\n- Git -- [官方网站](https://git-scm.com/)\n\n\n","source":"_posts/Git常用命令-上.md","raw":"---\ntitle: Git常用命令(上)\ndate: 2022-07-24 18:25:51\ncategories:\n- works\n- SCU\ntags:\n- Git\n---\n\n# Git常用命令\n---\n### `install Git`\n\n- Git -- [官方网站](https://git-scm.com/)\n\n\n","slug":"Git常用命令-上","published":1,"updated":"2022-07-28T16:37:23.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6me000fqcda9llafqtg","content":"<h2 id=\"git常用命令\"># Git常用命令</h2>\r\n<h3 id=\"install-git\"><code>install Git</code></h3>\r\n<ul>\r\n<li>Git -- <a href=\"https://git-scm.com/\">官方网站</a></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git常用命令\"># Git常用命令</h2>\r\n<h3 id=\"install-git\"><code>install Git</code></h3>\r\n<ul>\r\n<li>Git -- <a href=\"https://git-scm.com/\">官方网站</a></li>\r\n</ul>\r\n"},{"title":"Heap","date":"2021-10-24T07:55:06.000Z","_content":"\n## 堆\n\n#### 优先队列(`Pripority Queue`)\n- 特殊的 \"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。\n- 使用数组构建：\n  - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入数组的尾部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;从数组中删除元素，需要将元素移动位置：`T=O(N)`\n- 链表构建：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入链表的头部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;删除元素：`T=O(1)`\n- 有序数组：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N) or O(log2(N))`\n   &ensp;&ensp;&ensp;&ensp;移动元素并插入`T=O(N)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素：`T=O(1)`\n- 有序链表：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N)`\n   &ensp;&ensp;&ensp;&ensp;插入`T=O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素(或者首元素)：`T=O(1)`\n\n#### 最大堆 - 完全二叉树（大顶堆）\n\n- 根元素是当前树中最大的\n\n##### 1、堆的创建 -- 创建空堆\n\n```C++\ntypedef strut HeapStruct * MaxHeap;\nstruct HeadStruct{\n    ElementType * Elements;   // 存储元素的数组 \n    int Size;                 // 当前元素个数\n    int Capacity;             // 堆的最大容量\n}\n\n// 创建堆\nMaxHeap create(int MaxSize)\n{\n    MaxHeap H = malloc(sizeof(struct HeapStruct));\n    H->Elements = malloc((MaxSize+1) * sizeof(ElementType));\n    H->size = 0;\n    H->Capactity = MaxSize;\n    H->Elements[0] = MaxData;  // O号位置存储的是哨兵 不是个元素 \n\treturn H;\n}\n\n```\n\n\n\n##### 2，堆的插入\n\n```C++ \nvoid Insert(MaxHeap H,ElementType item)\n{\n    int i;\n    if(isFull(H))\n    {\n        std::cout<<\"最大堆已经满了\"<<std::endl;\n    }\n    i = ++H->Size;  // i等于 插入元素后的堆中的最后一个元素的下标\n    // 交换节点的位置 \n    for(;H->Elements[i/2] < item; i = i/2) // 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值\n    {\n        H->Elements[i] = H->Elements[i/2];  // 覆盖结果\n    }\n    H->Elements[i] = item;\n}\n\n```\n\n##### 3、堆的删除\n\n```C++ \n// 取出根节点\n// 将最后一个元素放到根节点(保留树的特性)\n// 修改使其具有最大（最小）堆的特性\n\nEleementType deleteMax(MaxHeap H)\n{\n    int parent,child;\n    ElementType MaxChild,temp;\n    if(IsEmpty(H))\n    {\n        std::cout<<\"堆为空\"<<std::endl;\n        return ;\n    }\n    MaxItem = H->Elements[1]; // 取出根的最大值 \n    // 取出堆中最后一个元素， 并将Size - 1\n    temp = H->Elements[H->Size --];\n    // 调整数据的大小关系 \n    for(parent = 1; parent*2 < H->Size;parent = child)  // 是不是存在左孩子 \n    {\n        child = parent * 2;\n        // 比较左右孩子的大小\n        if((child != H->Size)) && (H->Elements[child] < H->Elements[child+1]))  // 当前child不是最后一个元素 \n        {\n            child++; \n        }\n        // 不满足交换条件 - 结束循环\n        if(temp > H->Elements[child])\n        {\n            break;\n        }\n        else\n        {\n            // 交换元素 \n            H->Elements[parent] = H->Elements[child];\n            \n        }\n    }\n    // 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可\n    H->Elements[parent] = temp;\n    return MaxItem;\n}\n\n```\n\n##### 4、最大堆的建立\n\n&ensp;&ensp;建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中\n\n&ensp;&ensp;1、通过插入操作，将N个元素一个一个的插入到空堆中去：`T = O(NlogN)`\n\n&ensp;&ensp;2、线性时间复杂度下建立最大堆\n\n​\t&ensp;&ensp;1、将元素安顺序输入，先构建完全二叉树（下标为1开始）\n\n&ensp;\t&ensp;2、调整元素位置，使其满足最大堆\n\n<a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap C++ 实现  </a>\n\n#### 最小堆- 完全二叉树（小顶堆）\n\n- 可以参照最大堆写\n\n","source":"_posts/Heap.md","raw":"---\ntitle: Heap \ndate: 2021-10-24 15:55:06\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## 堆\n\n#### 优先队列(`Pripority Queue`)\n- 特殊的 \"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。\n- 使用数组构建：\n  - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入数组的尾部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;从数组中删除元素，需要将元素移动位置：`T=O(N)`\n- 链表构建：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入链表的头部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;删除元素：`T=O(1)`\n- 有序数组：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N) or O(log2(N))`\n   &ensp;&ensp;&ensp;&ensp;移动元素并插入`T=O(N)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素：`T=O(1)`\n- 有序链表：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N)`\n   &ensp;&ensp;&ensp;&ensp;插入`T=O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素(或者首元素)：`T=O(1)`\n\n#### 最大堆 - 完全二叉树（大顶堆）\n\n- 根元素是当前树中最大的\n\n##### 1、堆的创建 -- 创建空堆\n\n```C++\ntypedef strut HeapStruct * MaxHeap;\nstruct HeadStruct{\n    ElementType * Elements;   // 存储元素的数组 \n    int Size;                 // 当前元素个数\n    int Capacity;             // 堆的最大容量\n}\n\n// 创建堆\nMaxHeap create(int MaxSize)\n{\n    MaxHeap H = malloc(sizeof(struct HeapStruct));\n    H->Elements = malloc((MaxSize+1) * sizeof(ElementType));\n    H->size = 0;\n    H->Capactity = MaxSize;\n    H->Elements[0] = MaxData;  // O号位置存储的是哨兵 不是个元素 \n\treturn H;\n}\n\n```\n\n\n\n##### 2，堆的插入\n\n```C++ \nvoid Insert(MaxHeap H,ElementType item)\n{\n    int i;\n    if(isFull(H))\n    {\n        std::cout<<\"最大堆已经满了\"<<std::endl;\n    }\n    i = ++H->Size;  // i等于 插入元素后的堆中的最后一个元素的下标\n    // 交换节点的位置 \n    for(;H->Elements[i/2] < item; i = i/2) // 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值\n    {\n        H->Elements[i] = H->Elements[i/2];  // 覆盖结果\n    }\n    H->Elements[i] = item;\n}\n\n```\n\n##### 3、堆的删除\n\n```C++ \n// 取出根节点\n// 将最后一个元素放到根节点(保留树的特性)\n// 修改使其具有最大（最小）堆的特性\n\nEleementType deleteMax(MaxHeap H)\n{\n    int parent,child;\n    ElementType MaxChild,temp;\n    if(IsEmpty(H))\n    {\n        std::cout<<\"堆为空\"<<std::endl;\n        return ;\n    }\n    MaxItem = H->Elements[1]; // 取出根的最大值 \n    // 取出堆中最后一个元素， 并将Size - 1\n    temp = H->Elements[H->Size --];\n    // 调整数据的大小关系 \n    for(parent = 1; parent*2 < H->Size;parent = child)  // 是不是存在左孩子 \n    {\n        child = parent * 2;\n        // 比较左右孩子的大小\n        if((child != H->Size)) && (H->Elements[child] < H->Elements[child+1]))  // 当前child不是最后一个元素 \n        {\n            child++; \n        }\n        // 不满足交换条件 - 结束循环\n        if(temp > H->Elements[child])\n        {\n            break;\n        }\n        else\n        {\n            // 交换元素 \n            H->Elements[parent] = H->Elements[child];\n            \n        }\n    }\n    // 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可\n    H->Elements[parent] = temp;\n    return MaxItem;\n}\n\n```\n\n##### 4、最大堆的建立\n\n&ensp;&ensp;建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中\n\n&ensp;&ensp;1、通过插入操作，将N个元素一个一个的插入到空堆中去：`T = O(NlogN)`\n\n&ensp;&ensp;2、线性时间复杂度下建立最大堆\n\n​\t&ensp;&ensp;1、将元素安顺序输入，先构建完全二叉树（下标为1开始）\n\n&ensp;\t&ensp;2、调整元素位置，使其满足最大堆\n\n<a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap C++ 实现  </a>\n\n#### 最小堆- 完全二叉树（小顶堆）\n\n- 可以参照最大堆写\n\n","slug":"Heap","published":1,"updated":"2022-07-28T16:37:23.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mf000iqcdafsilbio2","content":"<h2 id=\"堆\">堆</h2>\r\n<h4\r\nid=\"优先队列pripority-queue\">优先队列(<code>Pripority Queue</code>)</h4>\r\n<ul>\r\n<li>特殊的\r\n\"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。</li>\r\n<li>使用数组构建：\r\n<ul>\r\n<li>插入：      总是插入数组的尾部<code>T = O(1)</code></li>\r\n<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>\r\n     从数组中删除元素，需要将元素移动位置：<code>T=O(N)</code></li>\r\n</ul></li>\r\n<li>链表构建：\r\n<ul>\r\n<li>插入：      总是插入链表的头部<code>T = O(1)</code></li>\r\n<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>\r\n     删除元素：<code>T=O(1)</code></li>\r\n</ul></li>\r\n<li>有序数组：\r\n<ul>\r\n<li>插入：     找到合适的位置:<code>T = O(N) or O(log2(N))</code>\r\n    移动元素并插入<code>T=O(N)</code></li>\r\n<li>删除：     删除最后一个元素：<code>T=O(1)</code></li>\r\n</ul></li>\r\n<li>有序链表：\r\n<ul>\r\n<li>插入：     找到合适的位置:<code>T = O(N)</code>\r\n    插入<code>T=O(1)</code></li>\r\n<li>删除：     删除最后一个元素(或者首元素)：<code>T=O(1)</code></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"最大堆---完全二叉树大顶堆\">最大堆 - 完全二叉树（大顶堆）</h4>\r\n<ul>\r\n<li>根元素是当前树中最大的</li>\r\n</ul>\r\n<h5 id=\"堆的创建----创建空堆\">1、堆的创建 -- 创建空堆</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> strut HeapStruct * MaxHeap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeadStruct</span>&#123;</span></span><br><span class=\"line\">    ElementType * Elements;   <span class=\"comment\">// 存储元素的数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size;                 <span class=\"comment\">// 当前元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Capacity;             <span class=\"comment\">// 堆的最大容量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建堆</span></span><br><span class=\"line\"><span class=\"function\">MaxHeap <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> MaxSize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MaxHeap H = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct HeapStruct));</span><br><span class=\"line\">    H-&gt;Elements = <span class=\"built_in\">malloc</span>((MaxSize+<span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(ElementType));</span><br><span class=\"line\">    H-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    H-&gt;Capactity = MaxSize;</span><br><span class=\"line\">    H-&gt;Elements[<span class=\"number\">0</span>] = MaxData;  <span class=\"comment\">// O号位置存储的是哨兵 不是个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> H;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"堆的插入\">2，堆的插入</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(MaxHeap H,ElementType item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isFull(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;最大堆已经满了&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = ++H-&gt;Size;  <span class=\"comment\">// i等于 插入元素后的堆中的最后一个元素的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 交换节点的位置 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;H-&gt;Elements[i/<span class=\"number\">2</span>] &lt; item; i = i/<span class=\"number\">2</span>) <span class=\"comment\">// 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        H-&gt;Elements[i] = H-&gt;Elements[i/<span class=\"number\">2</span>];  <span class=\"comment\">// 覆盖结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    H-&gt;Elements[i] = item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"堆的删除\">3、堆的删除</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取出根节点</span></span><br><span class=\"line\"><span class=\"comment\">// 将最后一个元素放到根节点(保留树的特性)</span></span><br><span class=\"line\"><span class=\"comment\">// 修改使其具有最大（最小）堆的特性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EleementType <span class=\"title\">deleteMax</span><span class=\"params\">(MaxHeap H)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent,child;</span><br><span class=\"line\">    ElementType MaxChild,temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(IsEmpty(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;堆为空&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxItem = H-&gt;Elements[<span class=\"number\">1</span>]; <span class=\"comment\">// 取出根的最大值 </span></span><br><span class=\"line\">    <span class=\"comment\">// 取出堆中最后一个元素， 并将Size - 1</span></span><br><span class=\"line\">    temp = H-&gt;Elements[H-&gt;Size --];</span><br><span class=\"line\">    <span class=\"comment\">// 调整数据的大小关系 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(parent = <span class=\"number\">1</span>; parent*<span class=\"number\">2</span> &lt; H-&gt;Size;parent = child)  <span class=\"comment\">// 是不是存在左孩子 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        child = parent * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 比较左右孩子的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((child != H-&gt;Size)) &amp;&amp; (H-&gt;Elements[child] &lt; H-&gt;Elements[child+<span class=\"number\">1</span>]))  <span class=\"comment\">// 当前child不是最后一个元素 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            child++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不满足交换条件 - 结束循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp &gt; H-&gt;Elements[child])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            H-&gt;Elements[parent] = H-&gt;Elements[child];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可</span></span><br><span class=\"line\">    H-&gt;Elements[parent] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaxItem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"最大堆的建立\">4、最大堆的建立</h5>\r\n<p>  建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中</p>\r\n<p>  1、通过插入操作，将N个元素一个一个的插入到空堆中去：<code>T = O(NlogN)</code></p>\r\n<p>  2、线性时间复杂度下建立最大堆</p>\r\n<p>​   1、将元素安顺序输入，先构建完全二叉树（下标为1开始）</p>\r\n<p>   2、调整元素位置，使其满足最大堆</p>\r\n<p><a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap\r\nC++ 实现  </a></p>\r\n<h4 id=\"最小堆--完全二叉树小顶堆\">最小堆- 完全二叉树（小顶堆）</h4>\r\n<ul>\r\n<li>可以参照最大堆写</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"堆\">堆</h2>\r\n<h4\r\nid=\"优先队列pripority-queue\">优先队列(<code>Pripority Queue</code>)</h4>\r\n<ul>\r\n<li>特殊的\r\n\"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。</li>\r\n<li>使用数组构建：\r\n<ul>\r\n<li>插入：      总是插入数组的尾部<code>T = O(1)</code></li>\r\n<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>\r\n     从数组中删除元素，需要将元素移动位置：<code>T=O(N)</code></li>\r\n</ul></li>\r\n<li>链表构建：\r\n<ul>\r\n<li>插入：      总是插入链表的头部<code>T = O(1)</code></li>\r\n<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>\r\n     删除元素：<code>T=O(1)</code></li>\r\n</ul></li>\r\n<li>有序数组：\r\n<ul>\r\n<li>插入：     找到合适的位置:<code>T = O(N) or O(log2(N))</code>\r\n    移动元素并插入<code>T=O(N)</code></li>\r\n<li>删除：     删除最后一个元素：<code>T=O(1)</code></li>\r\n</ul></li>\r\n<li>有序链表：\r\n<ul>\r\n<li>插入：     找到合适的位置:<code>T = O(N)</code>\r\n    插入<code>T=O(1)</code></li>\r\n<li>删除：     删除最后一个元素(或者首元素)：<code>T=O(1)</code></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"最大堆---完全二叉树大顶堆\">最大堆 - 完全二叉树（大顶堆）</h4>\r\n<ul>\r\n<li>根元素是当前树中最大的</li>\r\n</ul>\r\n<h5 id=\"堆的创建----创建空堆\">1、堆的创建 -- 创建空堆</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> strut HeapStruct * MaxHeap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeadStruct</span>&#123;</span></span><br><span class=\"line\">    ElementType * Elements;   <span class=\"comment\">// 存储元素的数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size;                 <span class=\"comment\">// 当前元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Capacity;             <span class=\"comment\">// 堆的最大容量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建堆</span></span><br><span class=\"line\"><span class=\"function\">MaxHeap <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> MaxSize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MaxHeap H = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct HeapStruct));</span><br><span class=\"line\">    H-&gt;Elements = <span class=\"built_in\">malloc</span>((MaxSize+<span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(ElementType));</span><br><span class=\"line\">    H-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    H-&gt;Capactity = MaxSize;</span><br><span class=\"line\">    H-&gt;Elements[<span class=\"number\">0</span>] = MaxData;  <span class=\"comment\">// O号位置存储的是哨兵 不是个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> H;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"堆的插入\">2，堆的插入</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(MaxHeap H,ElementType item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isFull(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;最大堆已经满了&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = ++H-&gt;Size;  <span class=\"comment\">// i等于 插入元素后的堆中的最后一个元素的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 交换节点的位置 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;H-&gt;Elements[i/<span class=\"number\">2</span>] &lt; item; i = i/<span class=\"number\">2</span>) <span class=\"comment\">// 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        H-&gt;Elements[i] = H-&gt;Elements[i/<span class=\"number\">2</span>];  <span class=\"comment\">// 覆盖结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    H-&gt;Elements[i] = item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"堆的删除\">3、堆的删除</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取出根节点</span></span><br><span class=\"line\"><span class=\"comment\">// 将最后一个元素放到根节点(保留树的特性)</span></span><br><span class=\"line\"><span class=\"comment\">// 修改使其具有最大（最小）堆的特性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EleementType <span class=\"title\">deleteMax</span><span class=\"params\">(MaxHeap H)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent,child;</span><br><span class=\"line\">    ElementType MaxChild,temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(IsEmpty(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;堆为空&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxItem = H-&gt;Elements[<span class=\"number\">1</span>]; <span class=\"comment\">// 取出根的最大值 </span></span><br><span class=\"line\">    <span class=\"comment\">// 取出堆中最后一个元素， 并将Size - 1</span></span><br><span class=\"line\">    temp = H-&gt;Elements[H-&gt;Size --];</span><br><span class=\"line\">    <span class=\"comment\">// 调整数据的大小关系 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(parent = <span class=\"number\">1</span>; parent*<span class=\"number\">2</span> &lt; H-&gt;Size;parent = child)  <span class=\"comment\">// 是不是存在左孩子 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        child = parent * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 比较左右孩子的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((child != H-&gt;Size)) &amp;&amp; (H-&gt;Elements[child] &lt; H-&gt;Elements[child+<span class=\"number\">1</span>]))  <span class=\"comment\">// 当前child不是最后一个元素 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            child++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不满足交换条件 - 结束循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp &gt; H-&gt;Elements[child])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            H-&gt;Elements[parent] = H-&gt;Elements[child];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可</span></span><br><span class=\"line\">    H-&gt;Elements[parent] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaxItem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"最大堆的建立\">4、最大堆的建立</h5>\r\n<p>  建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中</p>\r\n<p>  1、通过插入操作，将N个元素一个一个的插入到空堆中去：<code>T = O(NlogN)</code></p>\r\n<p>  2、线性时间复杂度下建立最大堆</p>\r\n<p>​   1、将元素安顺序输入，先构建完全二叉树（下标为1开始）</p>\r\n<p>   2、调整元素位置，使其满足最大堆</p>\r\n<p><a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap\r\nC++ 实现  </a></p>\r\n<h4 id=\"最小堆--完全二叉树小顶堆\">最小堆- 完全二叉树（小顶堆）</h4>\r\n<ul>\r\n<li>可以参照最大堆写</li>\r\n</ul>\r\n"},{"title":"Multi KeyWord Sort","date":"2021-11-07T14:18:51.000Z","_content":"\n### 多关键字排序\n\n- 扑克牌的例子\n\n- 一副扑克牌是按照两种顺序排的：\n  - K0,花色：梅花 < 方块 < 红桃 < 黑桃\n  - k1，面值: 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < J < Q < K < A\n- 主位优先：（Most Significant Digit）\n  - 先用四个花色建桶，然后使用面值建桶\n\n#### 一个更好的方法：\n\n- 依旧使用次位优先：\n\n  - 先使用面值建桶\n\n  - 然后按照大小将结果合并，使用花色建桶。\n\n  - 最终的输出结果便是有序的\n\n    \n","source":"_posts/Multi-KeyWord-Sort.md","raw":"---\ntitle: Multi KeyWord Sort\ndate: 2021-11-07 22:18:51\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n### 多关键字排序\n\n- 扑克牌的例子\n\n- 一副扑克牌是按照两种顺序排的：\n  - K0,花色：梅花 < 方块 < 红桃 < 黑桃\n  - k1，面值: 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < J < Q < K < A\n- 主位优先：（Most Significant Digit）\n  - 先用四个花色建桶，然后使用面值建桶\n\n#### 一个更好的方法：\n\n- 依旧使用次位优先：\n\n  - 先使用面值建桶\n\n  - 然后按照大小将结果合并，使用花色建桶。\n\n  - 最终的输出结果便是有序的\n\n    \n","slug":"Multi-KeyWord-Sort","published":1,"updated":"2022-07-28T16:37:23.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mg000jqcda2pmif6of","content":"<h3 id=\"多关键字排序\">多关键字排序</h3>\r\n<ul>\r\n<li><p>扑克牌的例子</p></li>\r\n<li><p>一副扑克牌是按照两种顺序排的：</p>\r\n<ul>\r\n<li>K0,花色：梅花 &lt; 方块 &lt; 红桃 &lt; 黑桃</li>\r\n<li>k1，面值: 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10\r\n&lt; J &lt; Q &lt; K &lt; A</li>\r\n</ul></li>\r\n<li><p>主位优先：（Most Significant Digit）</p>\r\n<ul>\r\n<li>先用四个花色建桶，然后使用面值建桶</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"一个更好的方法\">一个更好的方法：</h4>\r\n<ul>\r\n<li><p>依旧使用次位优先：</p>\r\n<ul>\r\n<li><p>先使用面值建桶</p></li>\r\n<li><p>然后按照大小将结果合并，使用花色建桶。</p></li>\r\n<li><p>最终的输出结果便是有序的</p></li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"多关键字排序\">多关键字排序</h3>\r\n<ul>\r\n<li><p>扑克牌的例子</p></li>\r\n<li><p>一副扑克牌是按照两种顺序排的：</p>\r\n<ul>\r\n<li>K0,花色：梅花 &lt; 方块 &lt; 红桃 &lt; 黑桃</li>\r\n<li>k1，面值: 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10\r\n&lt; J &lt; Q &lt; K &lt; A</li>\r\n</ul></li>\r\n<li><p>主位优先：（Most Significant Digit）</p>\r\n<ul>\r\n<li>先用四个花色建桶，然后使用面值建桶</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"一个更好的方法\">一个更好的方法：</h4>\r\n<ul>\r\n<li><p>依旧使用次位优先：</p>\r\n<ul>\r\n<li><p>先使用面值建桶</p></li>\r\n<li><p>然后按照大小将结果合并，使用花色建桶。</p></li>\r\n<li><p>最终的输出结果便是有序的</p></li>\r\n</ul></li>\r\n</ul>\r\n"},{"title":"OSG-HUD","date":"2021-07-26T14:40:11.000Z","_content":"\n# OSG-HUD\n\n- <p>\"HUD\"在渲染的场景中算是比较常见的存在: 游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...</p>\n\n<b style=\"color:red\">如何创建HUD ？</b> \n\n<p>本质上说，HUD就是一个相机( 在`OSG`中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行</p>\n\n<b style=\"color:red\">实现要点，如下：</b>\n\n- 关闭节点的光照，保证整个视口显示的场景的亮度是一样的。\n- 关闭深度测试\n- 调整渲染的顺序为最后渲染，让`HUD`显示在整个场景的最前方\n- 设置参考帧为绝对参考帧\n- 设置变换矩阵,不受父节点的影响\n- 设置投影矩阵(平行投影或者透视),设置视口的大小。\n\n\n\n## Create HUD\n\n### 1、创建相机节点\n\n```C++\nosg::ref_ptr<osg::Camera> hud_camera = new osg::Camera;   // 创建相机的节点\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;      // 创建绘制的节点(也可以是文字)\n```\n\n### 2、设置投影矩阵\n\n```C++\nhud_camera->setProjectionMatrixAsOrtho2D(-3, 4, -3, 4, -1.0, 100);  // 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小\n```\n\n### 3、设置视口大小(ViewPort)\n\n```C++\n// void setViewport(osg::Viewport* viewport);\n// void setViewport(int x,int y,int width,int height);\nhud_camera->setviewport();  // 两种方式都是可以的 \n```\n\n### 4、设置渲染的顺序\n\n```C++\nhud_camera->setRenderOrder(osg::Camera::POST_RENDER);\n```\n\n### 5、设置参考帧\n\n```C++\nhud_camera->setReferenceFrame(osg::Transform::ABSOLUTE_RF);\n```\n\n### 6、设置不受父节点的影响\n\n```C++\nhud_camera->setViewMatrix(osg::Matrix::identity());\n```\n\n### 7、设置不获取焦点\n\n```C++\nhud_camera->setAllowEventFocus(false);\n```\n\n### 8、设置节点的更新回调\n\n```C++\n// void setUpdateCallback(Callback* nc);\n// 需要重写一个节点的更新回调 修改节点的视图矩阵 \n// 设置相机的三个参数  \n// 视点 相机的位置 相机的向上方向\nhud_camera->setUpdateCallback();\n```\n\n## 挂载节点\n\n### 1、将前面创建的几何节点挂载到 相机上\n\n```C++\nosg::ref_ptr<osg::Geode> node = new osg::Geode;\nnode->addChild(geom.get());\nhud_camera->addChild(node.get());\n```\n\n### 2、设置节点的属性\n\n- 关闭光照 深度测试 & 打开混溶\n\n```C++\nauto states = node->getOrCreateStateSet();\nstates->setMode(GL_LIGHTING, osg::StateAttribute::ON);   //关闭灯光\nstates->setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);//关闭深度测试\nstates->setMode(GL_BLEND, osg::StateAttribute::ON);  \n```\n\n\n\n","source":"_posts/OSG-HUD.md","raw":"---\ntitle: OSG-HUD\ndate: 2021-07-26 22:40:11\ncategories:\n - works\n - GF\ntags:\n- cpp\n- osg\n---\n\n# OSG-HUD\n\n- <p>\"HUD\"在渲染的场景中算是比较常见的存在: 游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...</p>\n\n<b style=\"color:red\">如何创建HUD ？</b> \n\n<p>本质上说，HUD就是一个相机( 在`OSG`中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行</p>\n\n<b style=\"color:red\">实现要点，如下：</b>\n\n- 关闭节点的光照，保证整个视口显示的场景的亮度是一样的。\n- 关闭深度测试\n- 调整渲染的顺序为最后渲染，让`HUD`显示在整个场景的最前方\n- 设置参考帧为绝对参考帧\n- 设置变换矩阵,不受父节点的影响\n- 设置投影矩阵(平行投影或者透视),设置视口的大小。\n\n\n\n## Create HUD\n\n### 1、创建相机节点\n\n```C++\nosg::ref_ptr<osg::Camera> hud_camera = new osg::Camera;   // 创建相机的节点\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;      // 创建绘制的节点(也可以是文字)\n```\n\n### 2、设置投影矩阵\n\n```C++\nhud_camera->setProjectionMatrixAsOrtho2D(-3, 4, -3, 4, -1.0, 100);  // 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小\n```\n\n### 3、设置视口大小(ViewPort)\n\n```C++\n// void setViewport(osg::Viewport* viewport);\n// void setViewport(int x,int y,int width,int height);\nhud_camera->setviewport();  // 两种方式都是可以的 \n```\n\n### 4、设置渲染的顺序\n\n```C++\nhud_camera->setRenderOrder(osg::Camera::POST_RENDER);\n```\n\n### 5、设置参考帧\n\n```C++\nhud_camera->setReferenceFrame(osg::Transform::ABSOLUTE_RF);\n```\n\n### 6、设置不受父节点的影响\n\n```C++\nhud_camera->setViewMatrix(osg::Matrix::identity());\n```\n\n### 7、设置不获取焦点\n\n```C++\nhud_camera->setAllowEventFocus(false);\n```\n\n### 8、设置节点的更新回调\n\n```C++\n// void setUpdateCallback(Callback* nc);\n// 需要重写一个节点的更新回调 修改节点的视图矩阵 \n// 设置相机的三个参数  \n// 视点 相机的位置 相机的向上方向\nhud_camera->setUpdateCallback();\n```\n\n## 挂载节点\n\n### 1、将前面创建的几何节点挂载到 相机上\n\n```C++\nosg::ref_ptr<osg::Geode> node = new osg::Geode;\nnode->addChild(geom.get());\nhud_camera->addChild(node.get());\n```\n\n### 2、设置节点的属性\n\n- 关闭光照 深度测试 & 打开混溶\n\n```C++\nauto states = node->getOrCreateStateSet();\nstates->setMode(GL_LIGHTING, osg::StateAttribute::ON);   //关闭灯光\nstates->setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);//关闭深度测试\nstates->setMode(GL_BLEND, osg::StateAttribute::ON);  \n```\n\n\n\n","slug":"OSG-HUD","published":1,"updated":"2022-07-28T16:37:23.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mh000oqcdafniu8chm","content":"<h1 id=\"osg-hud\">OSG-HUD</h1>\r\n<ul>\r\n<li><p>\r\n\"HUD\"在渲染的场景中算是比较常见的存在:\r\n游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...\r\n</p></li>\r\n</ul>\r\n<p><b style=\"color:red\">如何创建HUD ？</b></p>\r\n<p>\r\n本质上说，HUD就是一个相机(\r\n在<code>OSG</code>中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行\r\n</p>\r\n<p><b style=\"color:red\">实现要点，如下：</b></p>\r\n<ul>\r\n<li>关闭节点的光照，保证整个视口显示的场景的亮度是一样的。</li>\r\n<li>关闭深度测试</li>\r\n<li>调整渲染的顺序为最后渲染，让<code>HUD</code>显示在整个场景的最前方</li>\r\n<li>设置参考帧为绝对参考帧</li>\r\n<li>设置变换矩阵,不受父节点的影响</li>\r\n<li>设置投影矩阵(平行投影或者透视),设置视口的大小。</li>\r\n</ul>\r\n<h2 id=\"create-hud\">Create HUD</h2>\r\n<h3 id=\"创建相机节点\">1、创建相机节点</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Camera&gt; hud_camera = <span class=\"keyword\">new</span> osg::Camera;   <span class=\"comment\">// 创建相机的节点</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;      <span class=\"comment\">// 创建绘制的节点(也可以是文字)</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置投影矩阵\">2、设置投影矩阵</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setProjectionMatrixAsOrtho2D(<span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-1.0</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置视口大小viewport\">3、设置视口大小(ViewPort)</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setViewport(osg::Viewport* viewport);</span></span><br><span class=\"line\"><span class=\"comment\">// void setViewport(int x,int y,int width,int height);</span></span><br><span class=\"line\">hud_camera-&gt;setviewport();  <span class=\"comment\">// 两种方式都是可以的 </span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置渲染的顺序\">4、设置渲染的顺序</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setRenderOrder(osg::Camera::POST_RENDER);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置参考帧\">5、设置参考帧</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setReferenceFrame(osg::Transform::ABSOLUTE_RF);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置不受父节点的影响\">6、设置不受父节点的影响</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setViewMatrix(osg::Matrix::identity());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置不获取焦点\">7、设置不获取焦点</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setAllowEventFocus(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置节点的更新回调\">8、设置节点的更新回调</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setUpdateCallback(Callback* nc);</span></span><br><span class=\"line\"><span class=\"comment\">// 需要重写一个节点的更新回调 修改节点的视图矩阵 </span></span><br><span class=\"line\"><span class=\"comment\">// 设置相机的三个参数  </span></span><br><span class=\"line\"><span class=\"comment\">// 视点 相机的位置 相机的向上方向</span></span><br><span class=\"line\">hud_camera-&gt;setUpdateCallback();</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"挂载节点\">挂载节点</h2>\r\n<h3 id=\"将前面创建的几何节点挂载到-相机上\">1、将前面创建的几何节点挂载到\r\n相机上</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Geode&gt; node = <span class=\"keyword\">new</span> osg::Geode;</span><br><span class=\"line\">node-&gt;addChild(geom.get());</span><br><span class=\"line\">hud_camera-&gt;addChild(node.get());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置节点的属性\">2、设置节点的属性</h3>\r\n<ul>\r\n<li>关闭光照 深度测试 &amp; 打开混溶</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> states = node-&gt;getOrCreateStateSet();</span><br><span class=\"line\">states-&gt;setMode(GL_LIGHTING, osg::StateAttribute::ON);   <span class=\"comment\">//关闭灯光</span></span><br><span class=\"line\">states-&gt;setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);<span class=\"comment\">//关闭深度测试</span></span><br><span class=\"line\">states-&gt;setMode(GL_BLEND, osg::StateAttribute::ON);  </span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"osg-hud\">OSG-HUD</h1>\r\n<ul>\r\n<li><p>\r\n\"HUD\"在渲染的场景中算是比较常见的存在:\r\n游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...\r\n</p></li>\r\n</ul>\r\n<p><b style=\"color:red\">如何创建HUD ？</b></p>\r\n<p>\r\n本质上说，HUD就是一个相机(\r\n在<code>OSG</code>中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行\r\n</p>\r\n<p><b style=\"color:red\">实现要点，如下：</b></p>\r\n<ul>\r\n<li>关闭节点的光照，保证整个视口显示的场景的亮度是一样的。</li>\r\n<li>关闭深度测试</li>\r\n<li>调整渲染的顺序为最后渲染，让<code>HUD</code>显示在整个场景的最前方</li>\r\n<li>设置参考帧为绝对参考帧</li>\r\n<li>设置变换矩阵,不受父节点的影响</li>\r\n<li>设置投影矩阵(平行投影或者透视),设置视口的大小。</li>\r\n</ul>\r\n<h2 id=\"create-hud\">Create HUD</h2>\r\n<h3 id=\"创建相机节点\">1、创建相机节点</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Camera&gt; hud_camera = <span class=\"keyword\">new</span> osg::Camera;   <span class=\"comment\">// 创建相机的节点</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;      <span class=\"comment\">// 创建绘制的节点(也可以是文字)</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置投影矩阵\">2、设置投影矩阵</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setProjectionMatrixAsOrtho2D(<span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-1.0</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置视口大小viewport\">3、设置视口大小(ViewPort)</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setViewport(osg::Viewport* viewport);</span></span><br><span class=\"line\"><span class=\"comment\">// void setViewport(int x,int y,int width,int height);</span></span><br><span class=\"line\">hud_camera-&gt;setviewport();  <span class=\"comment\">// 两种方式都是可以的 </span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置渲染的顺序\">4、设置渲染的顺序</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setRenderOrder(osg::Camera::POST_RENDER);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置参考帧\">5、设置参考帧</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setReferenceFrame(osg::Transform::ABSOLUTE_RF);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置不受父节点的影响\">6、设置不受父节点的影响</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setViewMatrix(osg::Matrix::identity());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置不获取焦点\">7、设置不获取焦点</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setAllowEventFocus(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置节点的更新回调\">8、设置节点的更新回调</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setUpdateCallback(Callback* nc);</span></span><br><span class=\"line\"><span class=\"comment\">// 需要重写一个节点的更新回调 修改节点的视图矩阵 </span></span><br><span class=\"line\"><span class=\"comment\">// 设置相机的三个参数  </span></span><br><span class=\"line\"><span class=\"comment\">// 视点 相机的位置 相机的向上方向</span></span><br><span class=\"line\">hud_camera-&gt;setUpdateCallback();</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"挂载节点\">挂载节点</h2>\r\n<h3 id=\"将前面创建的几何节点挂载到-相机上\">1、将前面创建的几何节点挂载到\r\n相机上</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Geode&gt; node = <span class=\"keyword\">new</span> osg::Geode;</span><br><span class=\"line\">node-&gt;addChild(geom.get());</span><br><span class=\"line\">hud_camera-&gt;addChild(node.get());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置节点的属性\">2、设置节点的属性</h3>\r\n<ul>\r\n<li>关闭光照 深度测试 &amp; 打开混溶</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> states = node-&gt;getOrCreateStateSet();</span><br><span class=\"line\">states-&gt;setMode(GL_LIGHTING, osg::StateAttribute::ON);   <span class=\"comment\">//关闭灯光</span></span><br><span class=\"line\">states-&gt;setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);<span class=\"comment\">//关闭深度测试</span></span><br><span class=\"line\">states-&gt;setMode(GL_BLEND, osg::StateAttribute::ON);  </span><br></pre></td></tr></table></figure>\r\n"},{"title":"OSG踩坑记-模型共享&模型颜色修改","date":"2021-03-20T12:54:22.000Z","_content":"\n###  简单概述\n\n在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。\n\n### 伪代码：\n\n#### 1、读入模型\n\n```c++\n// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。\n// 使用osg自带读取模型的函数读取模型\n// 推荐使用 osg 的智能指针\n// 此处使用一个 内嵌的几何体 代替模型 \n\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry; \n// osg 的智能指针采用引用计数的方式决定当前对象是否释放\n```\n\n#### 2、计算对模型的旋转、缩放、平移的操作矩阵\n\n```C++\n// osg 有专门用户模型操作的类  osg::MatrixTransform \n// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 \nosg::ref_ptr<osg::MatrixTransform> trans = new osg::MatrixTransform;\n// 对于模型的操作，有PVM矩阵的意思 \n\n// 创建旋转矩阵 \nosg::Matrix matrix_rotate;\n// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  \nmatrix_rotate.makeRotate(osg::vec3(0,0,1),osg::vec3(1,0,0));  // 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向\n// 你也可以直接选择使用\nosg::Matrix::rotate(osg::Vec3(),osg::Vec3()); // 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵\n\n// ==============================================================================================\n// 也可以直接 设置最终的变换矩阵 \ntrans->setMatrix(matrix_rotate * osg::Martix::scale(1.0,1.0,1.0) * osg::translate(osg::Vec3()));\n// trans 已经存储了 我们对于模型的操作 \n```\n\n#### 3、对trans节点设置材料等属性 \n\n```C++\n// 创建材质对象\nosg::Material* mat = new osg::Material();\nmat->setColorMode(osg::Material::ColorMode::DIFFUSE);   // 设置绘制颜色的模式 \nmat->setDiffuse(osg::Material::FRONT, osg::Vec4());      // 设置此种模式下的颜色 \n\ntrans->getOrCreateStateSet()->setAttribute(mat);        // 将材质设置给 节点 \n```\n\n#### 4、将对象作为节点添加\n\n```C++\ntrans.addchild(geom.get());\n```\n\n#### 5、将操作节点添加到绘制的根节点或者是其他的叶节点\n\n```C++\n// ......\n```\n\n","source":"_posts/OSG踩坑记-模型共享-模型颜色修改.md","raw":"---\ntitle: OSG踩坑记-模型共享&模型颜色修改\ndate: 2021-03-20 20:54:22\ncategories: \n- works\n- GF\n- OSG\ntags: \n- cpp\n- osg\n---\n\n###  简单概述\n\n在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。\n\n### 伪代码：\n\n#### 1、读入模型\n\n```c++\n// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。\n// 使用osg自带读取模型的函数读取模型\n// 推荐使用 osg 的智能指针\n// 此处使用一个 内嵌的几何体 代替模型 \n\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry; \n// osg 的智能指针采用引用计数的方式决定当前对象是否释放\n```\n\n#### 2、计算对模型的旋转、缩放、平移的操作矩阵\n\n```C++\n// osg 有专门用户模型操作的类  osg::MatrixTransform \n// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 \nosg::ref_ptr<osg::MatrixTransform> trans = new osg::MatrixTransform;\n// 对于模型的操作，有PVM矩阵的意思 \n\n// 创建旋转矩阵 \nosg::Matrix matrix_rotate;\n// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  \nmatrix_rotate.makeRotate(osg::vec3(0,0,1),osg::vec3(1,0,0));  // 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向\n// 你也可以直接选择使用\nosg::Matrix::rotate(osg::Vec3(),osg::Vec3()); // 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵\n\n// ==============================================================================================\n// 也可以直接 设置最终的变换矩阵 \ntrans->setMatrix(matrix_rotate * osg::Martix::scale(1.0,1.0,1.0) * osg::translate(osg::Vec3()));\n// trans 已经存储了 我们对于模型的操作 \n```\n\n#### 3、对trans节点设置材料等属性 \n\n```C++\n// 创建材质对象\nosg::Material* mat = new osg::Material();\nmat->setColorMode(osg::Material::ColorMode::DIFFUSE);   // 设置绘制颜色的模式 \nmat->setDiffuse(osg::Material::FRONT, osg::Vec4());      // 设置此种模式下的颜色 \n\ntrans->getOrCreateStateSet()->setAttribute(mat);        // 将材质设置给 节点 \n```\n\n#### 4、将对象作为节点添加\n\n```C++\ntrans.addchild(geom.get());\n```\n\n#### 5、将操作节点添加到绘制的根节点或者是其他的叶节点\n\n```C++\n// ......\n```\n\n","slug":"OSG踩坑记-模型共享-模型颜色修改","published":1,"updated":"2022-07-28T16:37:23.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mi000qqcda2v2ra40o","content":"<h3 id=\"简单概述\">简单概述</h3>\r\n<p>在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。</p>\r\n<h3 id=\"伪代码\">伪代码：</h3>\r\n<h4 id=\"读入模型\">1、读入模型</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。</span></span><br><span class=\"line\"><span class=\"comment\">// 使用osg自带读取模型的函数读取模型</span></span><br><span class=\"line\"><span class=\"comment\">// 推荐使用 osg 的智能指针</span></span><br><span class=\"line\"><span class=\"comment\">// 此处使用一个 内嵌的几何体 代替模型 </span></span><br><span class=\"line\"></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry; </span><br><span class=\"line\"><span class=\"comment\">// osg 的智能指针采用引用计数的方式决定当前对象是否释放</span></span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"计算对模型的旋转缩放平移的操作矩阵\">2、计算对模型的旋转、缩放、平移的操作矩阵</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osg 有专门用户模型操作的类  osg::MatrixTransform </span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 </span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::MatrixTransform&gt; trans = <span class=\"keyword\">new</span> osg::MatrixTransform;</span><br><span class=\"line\"><span class=\"comment\">// 对于模型的操作，有PVM矩阵的意思 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建旋转矩阵 </span></span><br><span class=\"line\">osg::Matrix matrix_rotate;</span><br><span class=\"line\"><span class=\"comment\">// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  </span></span><br><span class=\"line\">matrix_rotate.makeRotate(osg::vec3(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>),osg::vec3(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));  <span class=\"comment\">// 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向</span></span><br><span class=\"line\"><span class=\"comment\">// 你也可以直接选择使用</span></span><br><span class=\"line\">osg::Matrix::rotate(osg::Vec3(),osg::Vec3()); <span class=\"comment\">// 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==============================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接 设置最终的变换矩阵 </span></span><br><span class=\"line\">trans-&gt;setMatrix(matrix_rotate * osg::Martix::scale(<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>) * osg::translate(osg::Vec3()));</span><br><span class=\"line\"><span class=\"comment\">// trans 已经存储了 我们对于模型的操作 </span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"对trans节点设置材料等属性\">3、对trans节点设置材料等属性</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建材质对象</span></span><br><span class=\"line\">osg::Material* mat = <span class=\"keyword\">new</span> osg::Material();</span><br><span class=\"line\">mat-&gt;setColorMode(osg::Material::ColorMode::DIFFUSE);   <span class=\"comment\">// 设置绘制颜色的模式 </span></span><br><span class=\"line\">mat-&gt;setDiffuse(osg::Material::FRONT, osg::Vec4());      <span class=\"comment\">// 设置此种模式下的颜色 </span></span><br><span class=\"line\"></span><br><span class=\"line\">trans-&gt;getOrCreateStateSet()-&gt;setAttribute(mat);        <span class=\"comment\">// 将材质设置给 节点 </span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"将对象作为节点添加\">4、将对象作为节点添加</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trans.addchild(geom.get());</span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"将操作节点添加到绘制的根节点或者是其他的叶节点\">5、将操作节点添加到绘制的根节点或者是其他的叶节点</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ......</span></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单概述\">简单概述</h3>\r\n<p>在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。</p>\r\n<h3 id=\"伪代码\">伪代码：</h3>\r\n<h4 id=\"读入模型\">1、读入模型</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。</span></span><br><span class=\"line\"><span class=\"comment\">// 使用osg自带读取模型的函数读取模型</span></span><br><span class=\"line\"><span class=\"comment\">// 推荐使用 osg 的智能指针</span></span><br><span class=\"line\"><span class=\"comment\">// 此处使用一个 内嵌的几何体 代替模型 </span></span><br><span class=\"line\"></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry; </span><br><span class=\"line\"><span class=\"comment\">// osg 的智能指针采用引用计数的方式决定当前对象是否释放</span></span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"计算对模型的旋转缩放平移的操作矩阵\">2、计算对模型的旋转、缩放、平移的操作矩阵</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osg 有专门用户模型操作的类  osg::MatrixTransform </span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 </span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::MatrixTransform&gt; trans = <span class=\"keyword\">new</span> osg::MatrixTransform;</span><br><span class=\"line\"><span class=\"comment\">// 对于模型的操作，有PVM矩阵的意思 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建旋转矩阵 </span></span><br><span class=\"line\">osg::Matrix matrix_rotate;</span><br><span class=\"line\"><span class=\"comment\">// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  </span></span><br><span class=\"line\">matrix_rotate.makeRotate(osg::vec3(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>),osg::vec3(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));  <span class=\"comment\">// 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向</span></span><br><span class=\"line\"><span class=\"comment\">// 你也可以直接选择使用</span></span><br><span class=\"line\">osg::Matrix::rotate(osg::Vec3(),osg::Vec3()); <span class=\"comment\">// 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==============================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接 设置最终的变换矩阵 </span></span><br><span class=\"line\">trans-&gt;setMatrix(matrix_rotate * osg::Martix::scale(<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>) * osg::translate(osg::Vec3()));</span><br><span class=\"line\"><span class=\"comment\">// trans 已经存储了 我们对于模型的操作 </span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"对trans节点设置材料等属性\">3、对trans节点设置材料等属性</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建材质对象</span></span><br><span class=\"line\">osg::Material* mat = <span class=\"keyword\">new</span> osg::Material();</span><br><span class=\"line\">mat-&gt;setColorMode(osg::Material::ColorMode::DIFFUSE);   <span class=\"comment\">// 设置绘制颜色的模式 </span></span><br><span class=\"line\">mat-&gt;setDiffuse(osg::Material::FRONT, osg::Vec4());      <span class=\"comment\">// 设置此种模式下的颜色 </span></span><br><span class=\"line\"></span><br><span class=\"line\">trans-&gt;getOrCreateStateSet()-&gt;setAttribute(mat);        <span class=\"comment\">// 将材质设置给 节点 </span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"将对象作为节点添加\">4、将对象作为节点添加</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trans.addchild(geom.get());</span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"将操作节点添加到绘制的根节点或者是其他的叶节点\">5、将操作节点添加到绘制的根节点或者是其他的叶节点</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ......</span></span><br></pre></td></tr></table></figure>\r\n"},{"title":"OSG踩坑记-默认光源","date":"2021-04-03T16:10:50.000Z","mathjax":true,"_content":"\n### OSG-Viewer默认光源\n\n```C++\nosg::Node->getOrCreateStateSet()->setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    // 法线随着模型大小变化而变化。\nosg::Node->getOrCreateStateSet()->setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); // 关闭节点光源 并遵从父节点的光照设置\n```\n\n---\n\n##### `不指定法向` -- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化 </font> \n\n### Viewer 默认光源的使用\n\n#### 1、设置光照的相关的信息 \n\n- `osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配`\n\n- 你需要设置的信息包括: ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。\n\n> 设置光照  -- <font color=Green>衰减公式</font>\n> $$\n> F = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\n> $$\n>\n\n```C++ \n\t// 1. 获取缺省的光照\n\tosg::Light *light = viewer->getLight(); // 从当前的查看器 获取光照设置 \n\tlight->setAmbient(osg::Vec4(0.4, 0.4, 0.4, 1.0));   // 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);\n\tlight->setDiffuse(osg::Vec4(0.5, 0.5, 0.5, 1.0));   // 漫反射   直接来源于光源\n\tlight->setSpecular(osg::Vec4(0.2, 0.2, 0.2, 1.0));  // specular   高光 此处给的很低  \n\t// 由于此处我们使用的是平行光\n\tosg::Vec4 lightpos(x, y, z, 0.0f);   // 记住: 平行光的位置的最后一个分量必须是 0 \n\tlight->setPosition(lightpos);        // 设置光照位置 \n\t// 光照方向设置\n\t// 需要用到高度角和方位角 -- 计算一个你需要方向 \n\t\n\n\t// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减\n\tlight->setConstantAttenuation(1.0f);\n\tlight->setLinearAttenuation(0.0f);\n\tlight->setQuadraticAttenuation(0.f);\n```\n\n<font color=red> 产生平行光，位置分量的第四分量必须是0 </font>\n\n#### 2、对节点设置好材料属性\n\n- 材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。","source":"_posts/OSG踩坑记-默认光源.md","raw":"---\ntitle: OSG踩坑记-默认光源\ndate: 2021-04-04 00:10:50\ncategories: \n- works\n- GF\n- OSG\ntags:\n- cpp\n- osg\nmathjax: true\n---\n\n### OSG-Viewer默认光源\n\n```C++\nosg::Node->getOrCreateStateSet()->setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    // 法线随着模型大小变化而变化。\nosg::Node->getOrCreateStateSet()->setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); // 关闭节点光源 并遵从父节点的光照设置\n```\n\n---\n\n##### `不指定法向` -- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化 </font> \n\n### Viewer 默认光源的使用\n\n#### 1、设置光照的相关的信息 \n\n- `osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配`\n\n- 你需要设置的信息包括: ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。\n\n> 设置光照  -- <font color=Green>衰减公式</font>\n> $$\n> F = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\n> $$\n>\n\n```C++ \n\t// 1. 获取缺省的光照\n\tosg::Light *light = viewer->getLight(); // 从当前的查看器 获取光照设置 \n\tlight->setAmbient(osg::Vec4(0.4, 0.4, 0.4, 1.0));   // 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);\n\tlight->setDiffuse(osg::Vec4(0.5, 0.5, 0.5, 1.0));   // 漫反射   直接来源于光源\n\tlight->setSpecular(osg::Vec4(0.2, 0.2, 0.2, 1.0));  // specular   高光 此处给的很低  \n\t// 由于此处我们使用的是平行光\n\tosg::Vec4 lightpos(x, y, z, 0.0f);   // 记住: 平行光的位置的最后一个分量必须是 0 \n\tlight->setPosition(lightpos);        // 设置光照位置 \n\t// 光照方向设置\n\t// 需要用到高度角和方位角 -- 计算一个你需要方向 \n\t\n\n\t// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减\n\tlight->setConstantAttenuation(1.0f);\n\tlight->setLinearAttenuation(0.0f);\n\tlight->setQuadraticAttenuation(0.f);\n```\n\n<font color=red> 产生平行光，位置分量的第四分量必须是0 </font>\n\n#### 2、对节点设置好材料属性\n\n- 材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。","slug":"OSG踩坑记-默认光源","published":1,"updated":"2022-07-28T16:37:23.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mj000vqcda2w7fa7ss","content":"<h3 id=\"osg-viewer默认光源\">OSG-Viewer默认光源</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    <span class=\"comment\">// 法线随着模型大小变化而变化。</span></span><br><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); <span class=\"comment\">// 关闭节点光源 并遵从父节点的光照设置</span></span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<h5\r\nid=\"不指定法向----仍然可以看到-光照效果-但是无法看到明暗变化\"><code>不指定法向</code>\r\n-- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化\r\n</font></h5>\r\n<h3 id=\"viewer-默认光源的使用\">Viewer 默认光源的使用</h3>\r\n<h4 id=\"设置光照的相关的信息\">1、设置光照的相关的信息</h4>\r\n<ul>\r\n<li><p><code>osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配</code></p></li>\r\n<li><p>你需要设置的信息包括:\r\nambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。</p></li>\r\n</ul>\r\n<blockquote>\r\n<p>设置光照 -- <font color=Green>衰减公式</font> <span\r\nclass=\"math display\">\\[\r\nF = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\r\n\\]</span></p>\r\n</blockquote>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取缺省的光照</span></span><br><span class=\"line\">osg::Light *light = viewer-&gt;getLight(); <span class=\"comment\">// 从当前的查看器 获取光照设置 </span></span><br><span class=\"line\">light-&gt;setAmbient(osg::Vec4(<span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);</span></span><br><span class=\"line\">light-&gt;setDiffuse(osg::Vec4(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 漫反射   直接来源于光源</span></span><br><span class=\"line\">light-&gt;setSpecular(osg::Vec4(<span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">1.0</span>));  <span class=\"comment\">// specular   高光 此处给的很低  </span></span><br><span class=\"line\"><span class=\"comment\">// 由于此处我们使用的是平行光</span></span><br><span class=\"line\"><span class=\"function\">osg::Vec4 <span class=\"title\">lightpos</span><span class=\"params\">(x, y, z, <span class=\"number\">0.0f</span>)</span></span>;   <span class=\"comment\">// 记住: 平行光的位置的最后一个分量必须是 0 </span></span><br><span class=\"line\">light-&gt;setPosition(lightpos);        <span class=\"comment\">// 设置光照位置 </span></span><br><span class=\"line\"><span class=\"comment\">// 光照方向设置</span></span><br><span class=\"line\"><span class=\"comment\">// 需要用到高度角和方位角 -- 计算一个你需要方向 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减</span></span><br><span class=\"line\">light-&gt;setConstantAttenuation(<span class=\"number\">1.0f</span>);</span><br><span class=\"line\">light-&gt;setLinearAttenuation(<span class=\"number\">0.0f</span>);</span><br><span class=\"line\">light-&gt;setQuadraticAttenuation(<span class=\"number\">0.f</span>);</span><br></pre></td></tr></table></figure>\r\n<p><font color=red> 产生平行光，位置分量的第四分量必须是0 </font></p>\r\n<h4 id=\"对节点设置好材料属性\">2、对节点设置好材料属性</h4>\r\n<ul>\r\n<li>材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"osg-viewer默认光源\">OSG-Viewer默认光源</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    <span class=\"comment\">// 法线随着模型大小变化而变化。</span></span><br><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); <span class=\"comment\">// 关闭节点光源 并遵从父节点的光照设置</span></span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<h5\r\nid=\"不指定法向----仍然可以看到-光照效果-但是无法看到明暗变化\"><code>不指定法向</code>\r\n-- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化\r\n</font></h5>\r\n<h3 id=\"viewer-默认光源的使用\">Viewer 默认光源的使用</h3>\r\n<h4 id=\"设置光照的相关的信息\">1、设置光照的相关的信息</h4>\r\n<ul>\r\n<li><p><code>osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配</code></p></li>\r\n<li><p>你需要设置的信息包括:\r\nambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。</p></li>\r\n</ul>\r\n<blockquote>\r\n<p>设置光照 -- <font color=Green>衰减公式</font> <span\r\nclass=\"math display\">\\[\r\nF = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\r\n\\]</span></p>\r\n</blockquote>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取缺省的光照</span></span><br><span class=\"line\">osg::Light *light = viewer-&gt;getLight(); <span class=\"comment\">// 从当前的查看器 获取光照设置 </span></span><br><span class=\"line\">light-&gt;setAmbient(osg::Vec4(<span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);</span></span><br><span class=\"line\">light-&gt;setDiffuse(osg::Vec4(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 漫反射   直接来源于光源</span></span><br><span class=\"line\">light-&gt;setSpecular(osg::Vec4(<span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">1.0</span>));  <span class=\"comment\">// specular   高光 此处给的很低  </span></span><br><span class=\"line\"><span class=\"comment\">// 由于此处我们使用的是平行光</span></span><br><span class=\"line\"><span class=\"function\">osg::Vec4 <span class=\"title\">lightpos</span><span class=\"params\">(x, y, z, <span class=\"number\">0.0f</span>)</span></span>;   <span class=\"comment\">// 记住: 平行光的位置的最后一个分量必须是 0 </span></span><br><span class=\"line\">light-&gt;setPosition(lightpos);        <span class=\"comment\">// 设置光照位置 </span></span><br><span class=\"line\"><span class=\"comment\">// 光照方向设置</span></span><br><span class=\"line\"><span class=\"comment\">// 需要用到高度角和方位角 -- 计算一个你需要方向 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减</span></span><br><span class=\"line\">light-&gt;setConstantAttenuation(<span class=\"number\">1.0f</span>);</span><br><span class=\"line\">light-&gt;setLinearAttenuation(<span class=\"number\">0.0f</span>);</span><br><span class=\"line\">light-&gt;setQuadraticAttenuation(<span class=\"number\">0.f</span>);</span><br></pre></td></tr></table></figure>\r\n<p><font color=red> 产生平行光，位置分量的第四分量必须是0 </font></p>\r\n<h4 id=\"对节点设置好材料属性\">2、对节点设置好材料属性</h4>\r\n<ul>\r\n<li>材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。</li>\r\n</ul>\r\n"},{"title":"Physical Sort","date":"2021-11-07T10:05:13.000Z","_content":"\n### 物理排序\n\n- 我们从上一节的知识开始 {% post_link  Table-Sort 表排序 %}，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求\n- 排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成\n\n|   A   |           A[0]           |           A[1]           |            A[2]             |           A[3]           |           A[4]            |           A[5]           |           A[6]            |           A[7]            |           A[8]            |              A[9]              |\n| :---: | :----------------------: | :----------------------: | :-------------------------: | :----------------------: | :-----------------------: | :----------------------: | :-----------------------: | :-----------------------: | :-----------------------: | :----------------------------: |\n|  Key  |            f             |            d             |              c              |            a             |             g             |            b             |             h             |             e             |             i             |               u                |\n| table |            0             |            1             |              2              |            3             |             4             |            5             |             6             |             7             |             8             |               9                |\n|  环   | <font color=red>3</font> | <font color=red>5</font> | <font color=yellow>2</font> | <font color=red>1</font> | <font color=blue>7</font> | <font color=red>0</font> | <font color=blue>4</font> | <font color=blue>6</font> | <font color=pink>8</font> | <font color=\"#32FF00\">9</font> |\n\n- 我们从`table[0]= 3` 开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环\n\n  ```C++ \n  // table[0] -> table[3] -> table[1] -> table[0]\n  // 上述序列构成了一个环\n  ```\n\n- 排序，按环处理：\n\n  - 首先，取一个临时变量`temp`随机存储，环中的任意一个元素，以A[0]为例：\n\n    ```C++ \n    temp  = f;  // 此时A[0] 为空 \n    ```\n\n  - 将table中的元素放到`A[0],A[0] = A[table[0]];`\n  \n  - |    A    |           A[0]           |           A[1]           | A[2] |           A[3]           | A[4] |           A[5]           | A[6] | A[7] | A[8] | A[9] |\n    | :-----: | :----------------------: | :----------------------: | :--: | :----------------------: | :--: | :----------------------: | :--: | :--: | :--: | :--: |\n    |   Key   |            f             |            d             |  c   |            a             |  g   |            b             |  h   |  e   |  i   |  u   |\n    |  table  |            0             |            1             |  2   |            3             |  4   |            5             |  6   |  7   |  8   |  9   |\n    |   环    | <font color=red>3</font> | <font color=red>5</font> |      | <font color=red>1</font> |      | <font color=red>0</font> |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |                          |      |           null           |      |                          |      |      |      |      |\n    |  table  |            0             |                          |      |            1             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |           null           |      |            d             |      |                          |      |      |      |      |\n    |  table  |            0             |            5             |      |            3             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |           null           |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            0             |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |            f             |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            5             |      |      |      |      |\n    \n  - 判断环结束：\n  \n    - `table[i] == i`，此时环结束\n  \n- 复杂度分析：\n\n  - 最好： 初始的时候都有序\n  - 最坏：两本书(a,b)发生交换，需要三个步骤：\n    - 两本书发生交换：\n      - 取出一本(a)，temp\n      - a = b;\n      - b = temp;\n    - 存在[N/2]个环，每个环两个元素，需要[3N/2]此移动\n  - `T = O(mN)`,m是每个元素A的复制时间\n","source":"_posts/Physical-Sort.md","raw":"---\ntitle: Physical Sort\ndate: 2021-11-07 18:05:13\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n### 物理排序\n\n- 我们从上一节的知识开始 {% post_link  Table-Sort 表排序 %}，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求\n- 排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成\n\n|   A   |           A[0]           |           A[1]           |            A[2]             |           A[3]           |           A[4]            |           A[5]           |           A[6]            |           A[7]            |           A[8]            |              A[9]              |\n| :---: | :----------------------: | :----------------------: | :-------------------------: | :----------------------: | :-----------------------: | :----------------------: | :-----------------------: | :-----------------------: | :-----------------------: | :----------------------------: |\n|  Key  |            f             |            d             |              c              |            a             |             g             |            b             |             h             |             e             |             i             |               u                |\n| table |            0             |            1             |              2              |            3             |             4             |            5             |             6             |             7             |             8             |               9                |\n|  环   | <font color=red>3</font> | <font color=red>5</font> | <font color=yellow>2</font> | <font color=red>1</font> | <font color=blue>7</font> | <font color=red>0</font> | <font color=blue>4</font> | <font color=blue>6</font> | <font color=pink>8</font> | <font color=\"#32FF00\">9</font> |\n\n- 我们从`table[0]= 3` 开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环\n\n  ```C++ \n  // table[0] -> table[3] -> table[1] -> table[0]\n  // 上述序列构成了一个环\n  ```\n\n- 排序，按环处理：\n\n  - 首先，取一个临时变量`temp`随机存储，环中的任意一个元素，以A[0]为例：\n\n    ```C++ \n    temp  = f;  // 此时A[0] 为空 \n    ```\n\n  - 将table中的元素放到`A[0],A[0] = A[table[0]];`\n  \n  - |    A    |           A[0]           |           A[1]           | A[2] |           A[3]           | A[4] |           A[5]           | A[6] | A[7] | A[8] | A[9] |\n    | :-----: | :----------------------: | :----------------------: | :--: | :----------------------: | :--: | :----------------------: | :--: | :--: | :--: | :--: |\n    |   Key   |            f             |            d             |  c   |            a             |  g   |            b             |  h   |  e   |  i   |  u   |\n    |  table  |            0             |            1             |  2   |            3             |  4   |            5             |  6   |  7   |  8   |  9   |\n    |   环    | <font color=red>3</font> | <font color=red>5</font> |      | <font color=red>1</font> |      | <font color=red>0</font> |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |                          |      |           null           |      |                          |      |      |      |      |\n    |  table  |            0             |                          |      |            1             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |           null           |      |            d             |      |                          |      |      |      |      |\n    |  table  |            0             |            5             |      |            3             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |           null           |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            0             |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |            f             |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            5             |      |      |      |      |\n    \n  - 判断环结束：\n  \n    - `table[i] == i`，此时环结束\n  \n- 复杂度分析：\n\n  - 最好： 初始的时候都有序\n  - 最坏：两本书(a,b)发生交换，需要三个步骤：\n    - 两本书发生交换：\n      - 取出一本(a)，temp\n      - a = b;\n      - b = temp;\n    - 存在[N/2]个环，每个环两个元素，需要[3N/2]此移动\n  - `T = O(mN)`,m是每个元素A的复制时间\n","slug":"Physical-Sort","published":1,"updated":"2022-07-28T16:37:23.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mk000yqcda1dz1hesa","content":"<h3 id=\"物理排序\">物理排序</h3>\r\n<ul>\r\n<li>我们从上一节的知识开始\r\n<a href=\"/2021/11/07/Table-Sort/\" title=\"表排序\">表排序</a>，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求</li>\r\n<li>排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成</li>\r\n</ul>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 1%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 11%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">环</td>\r\n<td style=\"text-align: center;\"><font color=red>3</font></td>\r\n<td style=\"text-align: center;\"><font color=red>5</font></td>\r\n<td style=\"text-align: center;\"><font color=yellow>2</font></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>7</font></td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>4</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>6</font></td>\r\n<td style=\"text-align: center;\"><font color=pink>8</font></td>\r\n<td style=\"text-align: center;\"><font color=\"#32FF00\">9</font></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><p>我们从<code>table[0]= 3</code>\r\n开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// table[0] -&gt; table[3] -&gt; table[1] -&gt; table[0]</span></span><br><span class=\"line\"><span class=\"comment\">// 上述序列构成了一个环</span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>排序，按环处理：</p>\r\n<ul>\r\n<li><p>首先，取一个临时变量<code>temp</code>随机存储，环中的任意一个元素，以A[0]为例：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp  = f;  <span class=\"comment\">// 此时A[0] 为空 </span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>将table中的元素放到<code>A[0],A[0] = A[table[0]];</code></p></li>\r\n<li><table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 5%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">环</td>\r\n<td style=\"text-align: center;\"><font color=red>3</font></td>\r\n<td style=\"text-align: center;\"><font color=red>5</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n</tbody>\r\n</table></li>\r\n<li><p>判断环结束：</p>\r\n<ul>\r\n<li><code>table[i] == i</code>，此时环结束</li>\r\n</ul></li>\r\n</ul></li>\r\n<li><p>复杂度分析：</p>\r\n<ul>\r\n<li>最好： 初始的时候都有序</li>\r\n<li>最坏：两本书(a,b)发生交换，需要三个步骤：\r\n<ul>\r\n<li>两本书发生交换：\r\n<ul>\r\n<li>取出一本(a)，temp</li>\r\n<li>a = b;</li>\r\n<li>b = temp;</li>\r\n</ul></li>\r\n<li>存在[N/2]个环，每个环两个元素，需要[3N/2]此移动</li>\r\n</ul></li>\r\n<li><code>T = O(mN)</code>,m是每个元素A的复制时间</li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"物理排序\">物理排序</h3>\r\n<ul>\r\n<li>我们从上一节的知识开始\r\n<a href=\"/2021/11/07/Table-Sort/\" title=\"表排序\">表排序</a>，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求</li>\r\n<li>排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成</li>\r\n</ul>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 1%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 11%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">环</td>\r\n<td style=\"text-align: center;\"><font color=red>3</font></td>\r\n<td style=\"text-align: center;\"><font color=red>5</font></td>\r\n<td style=\"text-align: center;\"><font color=yellow>2</font></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>7</font></td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>4</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>6</font></td>\r\n<td style=\"text-align: center;\"><font color=pink>8</font></td>\r\n<td style=\"text-align: center;\"><font color=\"#32FF00\">9</font></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><p>我们从<code>table[0]= 3</code>\r\n开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// table[0] -&gt; table[3] -&gt; table[1] -&gt; table[0]</span></span><br><span class=\"line\"><span class=\"comment\">// 上述序列构成了一个环</span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>排序，按环处理：</p>\r\n<ul>\r\n<li><p>首先，取一个临时变量<code>temp</code>随机存储，环中的任意一个元素，以A[0]为例：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp  = f;  <span class=\"comment\">// 此时A[0] 为空 </span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>将table中的元素放到<code>A[0],A[0] = A[table[0]];</code></p></li>\r\n<li><table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 5%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">环</td>\r\n<td style=\"text-align: center;\"><font color=red>3</font></td>\r\n<td style=\"text-align: center;\"><font color=red>5</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n</tbody>\r\n</table></li>\r\n<li><p>判断环结束：</p>\r\n<ul>\r\n<li><code>table[i] == i</code>，此时环结束</li>\r\n</ul></li>\r\n</ul></li>\r\n<li><p>复杂度分析：</p>\r\n<ul>\r\n<li>最好： 初始的时候都有序</li>\r\n<li>最坏：两本书(a,b)发生交换，需要三个步骤：\r\n<ul>\r\n<li>两本书发生交换：\r\n<ul>\r\n<li>取出一本(a)，temp</li>\r\n<li>a = b;</li>\r\n<li>b = temp;</li>\r\n</ul></li>\r\n<li>存在[N/2]个环，每个环两个元素，需要[3N/2]此移动</li>\r\n</ul></li>\r\n<li><code>T = O(mN)</code>,m是每个元素A的复制时间</li>\r\n</ul></li>\r\n</ul>\r\n"},{"title":"Qt connect function the fifth param","date":"2022-07-29T09:26:28.000Z","_content":"","source":"_posts/Qt-connect-function-the-fifth-param.md","raw":"---\ntitle: Qt connect function the fifth param\ndate: 2022-07-29 17:26:28\ntags:\n---\n","slug":"Qt-connect-function-the-fifth-param","published":1,"updated":"2022-07-29T18:39:02.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6ml0012qcdaaibq3ead","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"QuickSort","date":"2021-10-28T14:28:59.000Z","_content":"\n## Quick Sort\n\n#### 1、快速排序概述\n\n- 快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。\n\n- 伪码实现\n\n```C++ \nvoid QuickSort(ElementType A[],int N)\n{\n    if(N < 2)\n    {\n        return ; //数据有序 不需要排序\n    }\n    // 计算主元 -- 将数据分组\n    pivot = {A|A中的一个元素}\n    将A（S）分成两个独立的子集{A[] \\ pivot}；\n    A1 = {a∈S|a < pivot};\n    A2 = {a∈S|a > pivot};\n    // 递归调用QuickSort\n}\n```\n\n#### 2、选主元\n\n- 选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。\n\n- 下面介绍一种主元的选取方法：\n\n  - 取头，中，尾的中位数\n\n  - 伪码描述：\n  ```C++\n  ElementType Media3(ElementType A[],int left,int right)\n  {\n      int center = (left + right) / 2;\n      \n      // 如果坐标的比中间的大\n      if(A[left] > A[center])\n      {\n          Swap(&A[left],&A[center]);  // 交换 左中的值 \n          //此后 A[center] > A[left]\n      }\n      // 交换后的左 依旧大于右边\n      if(A[left] > A[right])\n      {\n           Swap(&A[left],&A[right]); \n      }\n      if(A[center] > A[right])\n      {\n           Swap(&A[center],&A[right]); \n      }\n      // A[right] > A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素\n      swap(&A[center],&A[right - 1]);\n      \n      return A[rigjt -1 ];  // 返回我们得到的主元 \n  }\n  ```\n\n#### 3、子集划分\n\n- 每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。\n\n#### 4、算法实现\n\n```C++ \nvoid QuickSort(ElementType A[], int left,int right)\n{\n    if(Cutoff <= right - left)\n    {\n        // 主元\n        poivt = Media3(A,left,right);\n        int i = left;        // i 当前指向第一个元素的位置 \n        int j = right - 1;   // J 指向主元的位置 \n        for(;;)\n        {\n            while(A[++i] < poivt){}\n            while(A[--j] > poivt){}\n            if(i < j)\n            {\n                swap(&A[i],A[j]);\n            }\n            else\n            {\n                break;\n            }\n        }\n        swap(&A[i],&A[right - 1]);\n        // 递归 \n        QuickSort(A,left,i-1);\n        QuickSort(A,i,right);\n    }\n    else\n    {\n        Insert_selection(A+left,right - left + 1);\n    }\n    \n}\n\n```\n\n","source":"_posts/QuickSort.md","raw":"---\ntitle: QuickSort\ndate: 2021-10-28 22:28:59\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## Quick Sort\n\n#### 1、快速排序概述\n\n- 快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。\n\n- 伪码实现\n\n```C++ \nvoid QuickSort(ElementType A[],int N)\n{\n    if(N < 2)\n    {\n        return ; //数据有序 不需要排序\n    }\n    // 计算主元 -- 将数据分组\n    pivot = {A|A中的一个元素}\n    将A（S）分成两个独立的子集{A[] \\ pivot}；\n    A1 = {a∈S|a < pivot};\n    A2 = {a∈S|a > pivot};\n    // 递归调用QuickSort\n}\n```\n\n#### 2、选主元\n\n- 选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。\n\n- 下面介绍一种主元的选取方法：\n\n  - 取头，中，尾的中位数\n\n  - 伪码描述：\n  ```C++\n  ElementType Media3(ElementType A[],int left,int right)\n  {\n      int center = (left + right) / 2;\n      \n      // 如果坐标的比中间的大\n      if(A[left] > A[center])\n      {\n          Swap(&A[left],&A[center]);  // 交换 左中的值 \n          //此后 A[center] > A[left]\n      }\n      // 交换后的左 依旧大于右边\n      if(A[left] > A[right])\n      {\n           Swap(&A[left],&A[right]); \n      }\n      if(A[center] > A[right])\n      {\n           Swap(&A[center],&A[right]); \n      }\n      // A[right] > A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素\n      swap(&A[center],&A[right - 1]);\n      \n      return A[rigjt -1 ];  // 返回我们得到的主元 \n  }\n  ```\n\n#### 3、子集划分\n\n- 每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。\n\n#### 4、算法实现\n\n```C++ \nvoid QuickSort(ElementType A[], int left,int right)\n{\n    if(Cutoff <= right - left)\n    {\n        // 主元\n        poivt = Media3(A,left,right);\n        int i = left;        // i 当前指向第一个元素的位置 \n        int j = right - 1;   // J 指向主元的位置 \n        for(;;)\n        {\n            while(A[++i] < poivt){}\n            while(A[--j] > poivt){}\n            if(i < j)\n            {\n                swap(&A[i],A[j]);\n            }\n            else\n            {\n                break;\n            }\n        }\n        swap(&A[i],&A[right - 1]);\n        // 递归 \n        QuickSort(A,left,i-1);\n        QuickSort(A,i,right);\n    }\n    else\n    {\n        Insert_selection(A+left,right - left + 1);\n    }\n    \n}\n\n```\n\n","slug":"QuickSort","published":1,"updated":"2022-07-28T16:37:23.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6ml0015qcda9gurg8aj","content":"<h2 id=\"quick-sort\">Quick Sort</h2>\r\n<h4 id=\"快速排序概述\">1、快速排序概述</h4>\r\n<ul>\r\n<li><p>快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。</p></li>\r\n<li><p>伪码实现</p></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ; <span class=\"comment\">//数据有序 不需要排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算主元 -- 将数据分组</span></span><br><span class=\"line\">    pivot = &#123;A|A中的一个元素&#125;</span><br><span class=\"line\">    将A（S）分成两个独立的子集&#123;A[] \\ pivot&#125;；</span><br><span class=\"line\">    A1 = &#123;a∈S|a &lt; pivot&#125;;</span><br><span class=\"line\">    A2 = &#123;a∈S|a &gt; pivot&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 递归调用QuickSort</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"选主元\">2、选主元</h4>\r\n<ul>\r\n<li><p>选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。</p></li>\r\n<li><p>下面介绍一种主元的选取方法：</p>\r\n<ul>\r\n<li><p>取头，中，尾的中位数</p></li>\r\n<li><p>伪码描述： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ElementType <span class=\"title\">Media3</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果坐标的比中间的大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[center])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Swap(&amp;A[left],&amp;A[center]);  <span class=\"comment\">// 交换 左中的值 </span></span><br><span class=\"line\">        <span class=\"comment\">//此后 A[center] &gt; A[left]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换后的左 依旧大于右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[left],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[center] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[center],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A[right] &gt; A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素</span></span><br><span class=\"line\">    swap(&amp;A[center],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A[rigjt <span class=\"number\">-1</span> ];  <span class=\"comment\">// 返回我们得到的主元 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"子集划分\">3、子集划分</h4>\r\n<ul>\r\n<li>每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。</li>\r\n</ul>\r\n<h4 id=\"算法实现\">4、算法实现</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Cutoff &lt;= right - left)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主元</span></span><br><span class=\"line\">        poivt = Media3(A,left,right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;        <span class=\"comment\">// i 当前指向第一个元素的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right - <span class=\"number\">1</span>;   <span class=\"comment\">// J 指向主元的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[++i] &lt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[--j] &gt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(&amp;A[i],A[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(&amp;A[i],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// 递归 </span></span><br><span class=\"line\">        QuickSort(A,left,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        QuickSort(A,i,right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Insert_selection(A+left,right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"quick-sort\">Quick Sort</h2>\r\n<h4 id=\"快速排序概述\">1、快速排序概述</h4>\r\n<ul>\r\n<li><p>快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。</p></li>\r\n<li><p>伪码实现</p></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ; <span class=\"comment\">//数据有序 不需要排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算主元 -- 将数据分组</span></span><br><span class=\"line\">    pivot = &#123;A|A中的一个元素&#125;</span><br><span class=\"line\">    将A（S）分成两个独立的子集&#123;A[] \\ pivot&#125;；</span><br><span class=\"line\">    A1 = &#123;a∈S|a &lt; pivot&#125;;</span><br><span class=\"line\">    A2 = &#123;a∈S|a &gt; pivot&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 递归调用QuickSort</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"选主元\">2、选主元</h4>\r\n<ul>\r\n<li><p>选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。</p></li>\r\n<li><p>下面介绍一种主元的选取方法：</p>\r\n<ul>\r\n<li><p>取头，中，尾的中位数</p></li>\r\n<li><p>伪码描述： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ElementType <span class=\"title\">Media3</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果坐标的比中间的大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[center])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Swap(&amp;A[left],&amp;A[center]);  <span class=\"comment\">// 交换 左中的值 </span></span><br><span class=\"line\">        <span class=\"comment\">//此后 A[center] &gt; A[left]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换后的左 依旧大于右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[left],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[center] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[center],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A[right] &gt; A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素</span></span><br><span class=\"line\">    swap(&amp;A[center],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A[rigjt <span class=\"number\">-1</span> ];  <span class=\"comment\">// 返回我们得到的主元 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"子集划分\">3、子集划分</h4>\r\n<ul>\r\n<li>每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。</li>\r\n</ul>\r\n<h4 id=\"算法实现\">4、算法实现</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Cutoff &lt;= right - left)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主元</span></span><br><span class=\"line\">        poivt = Media3(A,left,right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;        <span class=\"comment\">// i 当前指向第一个元素的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right - <span class=\"number\">1</span>;   <span class=\"comment\">// J 指向主元的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[++i] &lt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[--j] &gt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(&amp;A[i],A[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(&amp;A[i],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// 递归 </span></span><br><span class=\"line\">        QuickSort(A,left,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        QuickSort(A,i,right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Insert_selection(A+left,right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n"},{"title":"Selection_sort","date":"2021-10-25T14:25:09.000Z","_content":"\n## 选择排序  \n\n- 选择排序，每次从无序的数据中选择一个`最大的`或者是`最小的`,放到合适的位置。\n\n- 代码实现：\n\n    ```C++ \n    // 这里为了使用最大堆-我们倒着排序 \n    void Selection_Sort(ElementType A[], int N)\n    {  \n        for(auto i = N-1;i >= 0；i--)\n        {\n        \t  max_postion = scanForMax(A,0,i); //获取最大元素的下标 \n              swap(&A[i],&A[max_position]);    // 交换元素    \n        }\n    }\n    ```\n\n- `scanForMax`\n  - 查找当前无序元素中最大的元素，并返回元素的下标\n    - 常规下，直接对数组元素进行扫描，时间复杂度`O(N)`,整个算法的时间复杂度`T=O(N^2)`\n    - 优化方案：如何快速找到最大值 -- 最大堆or最小堆。\n\n","source":"_posts/Selection-sort.md","raw":"---\ntitle: Selection_sort\ndate: 2021-10-25 22:25:09\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## 选择排序  \n\n- 选择排序，每次从无序的数据中选择一个`最大的`或者是`最小的`,放到合适的位置。\n\n- 代码实现：\n\n    ```C++ \n    // 这里为了使用最大堆-我们倒着排序 \n    void Selection_Sort(ElementType A[], int N)\n    {  \n        for(auto i = N-1;i >= 0；i--)\n        {\n        \t  max_postion = scanForMax(A,0,i); //获取最大元素的下标 \n              swap(&A[i],&A[max_position]);    // 交换元素    \n        }\n    }\n    ```\n\n- `scanForMax`\n  - 查找当前无序元素中最大的元素，并返回元素的下标\n    - 常规下，直接对数组元素进行扫描，时间复杂度`O(N)`,整个算法的时间复杂度`T=O(N^2)`\n    - 优化方案：如何快速找到最大值 -- 最大堆or最小堆。\n\n","slug":"Selection-sort","published":1,"updated":"2022-07-28T16:37:23.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mm0018qcda5rf3crys","content":"<h2 id=\"选择排序\">选择排序</h2>\r\n<ul>\r\n<li><p>选择排序，每次从无序的数据中选择一个<code>最大的</code>或者是<code>最小的</code>,放到合适的位置。</p></li>\r\n<li><p>代码实现：</p>\r\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里为了使用最大堆-我们倒着排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Selection_Sort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = N<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>；i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t  max_postion = scanForMax(A,<span class=\"number\">0</span>,i); <span class=\"comment\">//获取最大元素的下标 </span></span><br><span class=\"line\">          swap(&amp;A[i],&amp;A[max_position]);    <span class=\"comment\">// 交换元素    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><code>scanForMax</code></p>\r\n<ul>\r\n<li>查找当前无序元素中最大的元素，并返回元素的下标\r\n<ul>\r\n<li>常规下，直接对数组元素进行扫描，时间复杂度<code>O(N)</code>,整个算法的时间复杂度<code>T=O(N^2)</code></li>\r\n<li>优化方案：如何快速找到最大值 -- 最大堆or最小堆。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"选择排序\">选择排序</h2>\r\n<ul>\r\n<li><p>选择排序，每次从无序的数据中选择一个<code>最大的</code>或者是<code>最小的</code>,放到合适的位置。</p></li>\r\n<li><p>代码实现：</p>\r\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里为了使用最大堆-我们倒着排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Selection_Sort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = N<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>；i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t  max_postion = scanForMax(A,<span class=\"number\">0</span>,i); <span class=\"comment\">//获取最大元素的下标 </span></span><br><span class=\"line\">          swap(&amp;A[i],&amp;A[max_position]);    <span class=\"comment\">// 交换元素    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><code>scanForMax</code></p>\r\n<ul>\r\n<li>查找当前无序元素中最大的元素，并返回元素的下标\r\n<ul>\r\n<li>常规下，直接对数组元素进行扫描，时间复杂度<code>O(N)</code>,整个算法的时间复杂度<code>T=O(N^2)</code></li>\r\n<li>优化方案：如何快速找到最大值 -- 最大堆or最小堆。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n"},{"title":"Table-Sort","date":"2021-11-06T16:30:03.000Z","_content":"\n### 表排序\n\n- 某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\n  - 定义一个指针数组作为\"表\"（table）\n- 概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\n  - 我们定义一个新的部分`table`记录数组中每个元素的下标\n\n| A | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7]  | A[8] | A[9] |\n|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|  Key  | f | d | c | a | g | b | h | e | i | u |\n| table | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\n  - - 初始状态下，`table[index]` 等于A 的`index`\n    - 然后我们同通过任意一种排序比较`A[table]`对应的关键字的大小，从而交换`table`中的值——排序\n\n- 排序结果 -- 使用插入排序\n\n  |     A      | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9] |\n  | :--------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n  |    Key     |  f   |  d   |  c   |  a   |  g   |  b   |  h   |  e   |  i   |  u   |\n  |   table    |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |\n  | 第零次插入 |  0   |      |      |      |      |      |      |      |      |      |\n  | 第一次插入 |  1   |  0   |      |      |      |      |      |      |      |      |\n  | 第二次插入 |  2   |  1   |  0   |      |      |      |      |      |      |      |\n  | 第三次插入 |  3   |  2   |  1   |  0   |      |      |      |      |      |      |\n  | 第四次插入 |  3   |  2   |  1   |  0   |  4   |      |      |      |      |      |\n  | 第五次插入 |  3   |  5   |  2   |  1   |  0   |  4   |      |      |      |      |\n  | 第六次插入 |  3   |  5   |  2   |  1   |  0   |  4   |  6   |      |      |      |\n  | 第七次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |      |      |\n  | 第八次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |      |\n  | 第九次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n  |   table    |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n\n- 到此，上述表变得有序：\n- 正确的输出结果是:\n  - `A[table[0]],A[table[0]]........`\n\n","source":"_posts/Table-Sort.md","raw":"---\ntitle: Table-Sort\ndate: 2021-11-07 00:30:03\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n### 表排序\n\n- 某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\n  - 定义一个指针数组作为\"表\"（table）\n- 概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\n  - 我们定义一个新的部分`table`记录数组中每个元素的下标\n\n| A | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7]  | A[8] | A[9] |\n|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|  Key  | f | d | c | a | g | b | h | e | i | u |\n| table | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\n  - - 初始状态下，`table[index]` 等于A 的`index`\n    - 然后我们同通过任意一种排序比较`A[table]`对应的关键字的大小，从而交换`table`中的值——排序\n\n- 排序结果 -- 使用插入排序\n\n  |     A      | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9] |\n  | :--------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n  |    Key     |  f   |  d   |  c   |  a   |  g   |  b   |  h   |  e   |  i   |  u   |\n  |   table    |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |\n  | 第零次插入 |  0   |      |      |      |      |      |      |      |      |      |\n  | 第一次插入 |  1   |  0   |      |      |      |      |      |      |      |      |\n  | 第二次插入 |  2   |  1   |  0   |      |      |      |      |      |      |      |\n  | 第三次插入 |  3   |  2   |  1   |  0   |      |      |      |      |      |      |\n  | 第四次插入 |  3   |  2   |  1   |  0   |  4   |      |      |      |      |      |\n  | 第五次插入 |  3   |  5   |  2   |  1   |  0   |  4   |      |      |      |      |\n  | 第六次插入 |  3   |  5   |  2   |  1   |  0   |  4   |  6   |      |      |      |\n  | 第七次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |      |      |\n  | 第八次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |      |\n  | 第九次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n  |   table    |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n\n- 到此，上述表变得有序：\n- 正确的输出结果是:\n  - `A[table[0]],A[table[0]]........`\n\n","slug":"Table-Sort","published":1,"updated":"2022-07-28T16:37:23.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mo001cqcda7l1e5na2","content":"<h3 id=\"表排序\">表排序</h3>\r\n<ul>\r\n<li>某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\r\n<ul>\r\n<li>定义一个指针数组作为\"表\"（table）</li>\r\n</ul></li>\r\n<li>概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\r\n<ul>\r\n<li>我们定义一个新的部分<code>table</code>记录数组中每个元素的下标</li>\r\n</ul></li>\r\n</ul>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><ul>\r\n<li>初始状态下，<code>table[index]</code> 等于A\r\n的<code>index</code></li>\r\n<li>然后我们同通过任意一种排序比较<code>A[table]</code>对应的关键字的大小，从而交换<code>table</code>中的值——排序</li>\r\n</ul></li>\r\n<li><p>排序结果 -- 使用插入排序</p>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 20%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第零次插入</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第一次插入</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第二次插入</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第三次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第四次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第五次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第六次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第七次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第八次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第九次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table></li>\r\n<li><p>到此，上述表变得有序：</p></li>\r\n<li><p>正确的输出结果是:</p>\r\n<ul>\r\n<li><code>A[table[0]],A[table[0]]........</code></li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"表排序\">表排序</h3>\r\n<ul>\r\n<li>某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\r\n<ul>\r\n<li>定义一个指针数组作为\"表\"（table）</li>\r\n</ul></li>\r\n<li>概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\r\n<ul>\r\n<li>我们定义一个新的部分<code>table</code>记录数组中每个元素的下标</li>\r\n</ul></li>\r\n</ul>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><ul>\r\n<li>初始状态下，<code>table[index]</code> 等于A\r\n的<code>index</code></li>\r\n<li>然后我们同通过任意一种排序比较<code>A[table]</code>对应的关键字的大小，从而交换<code>table</code>中的值——排序</li>\r\n</ul></li>\r\n<li><p>排序结果 -- 使用插入排序</p>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 20%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第零次插入</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第一次插入</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第二次插入</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第三次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第四次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第五次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第六次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第七次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第八次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第九次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table></li>\r\n<li><p>到此，上述表变得有序：</p></li>\r\n<li><p>正确的输出结果是:</p>\r\n<ul>\r\n<li><code>A[table[0]],A[table[0]]........</code></li>\r\n</ul></li>\r\n</ul>\r\n"},{"title":"Shell-Sort","date":"2021-10-26T12:25:46.000Z","_content":"\n###  希尔排序\n\n- 希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\n  - `DK[i-1]`有序后，执行`DK[i]`的排序后，`DK[i-1]`依旧是有序的\n\n#### 1、原始的希尔排序\n\n- `DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)`\n\n```C++\nvoid Shell_sort(ElementTypes A[], int N)\n{\n    int D;  // 当前次序的间隔\n    int P,i;\n    ElementType temp;\n    for(P=N/2;D>0;D/=2) // 间隔的变换\n    {\n        // 插入排序 \n        for(P = D; P<N; P++)\n        {\n        \ttemp = A[P];  // 当前要插入的元素 \n            for(i = P; i >= D && A[i-D] > temp;i -= D)  // 和已经有序的元素进行比较\n            // 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动\n            {\n                A[i] = A[i-D];\n            }\n            A[i] = temp;  // temp 放到正确位置\n        }\n    }\n}\n\n```\n\n- 复杂度分析： 当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到`O(N^2)`。\n\n","source":"_posts/Shell-Sort.md","raw":"---\ntitle: Shell-Sort\ndate: 2021-10-26 20:25:46\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n###  希尔排序\n\n- 希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\n  - `DK[i-1]`有序后，执行`DK[i]`的排序后，`DK[i-1]`依旧是有序的\n\n#### 1、原始的希尔排序\n\n- `DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)`\n\n```C++\nvoid Shell_sort(ElementTypes A[], int N)\n{\n    int D;  // 当前次序的间隔\n    int P,i;\n    ElementType temp;\n    for(P=N/2;D>0;D/=2) // 间隔的变换\n    {\n        // 插入排序 \n        for(P = D; P<N; P++)\n        {\n        \ttemp = A[P];  // 当前要插入的元素 \n            for(i = P; i >= D && A[i-D] > temp;i -= D)  // 和已经有序的元素进行比较\n            // 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动\n            {\n                A[i] = A[i-D];\n            }\n            A[i] = temp;  // temp 放到正确位置\n        }\n    }\n}\n\n```\n\n- 复杂度分析： 当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到`O(N^2)`。\n\n","slug":"Shell-Sort","published":1,"updated":"2022-07-28T16:37:23.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mo001gqcda5kgpbfac","content":"<h3 id=\"希尔排序\">希尔排序</h3>\r\n<ul>\r\n<li>希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\r\n<ul>\r\n<li><code>DK[i-1]</code>有序后，执行<code>DK[i]</code>的排序后，<code>DK[i-1]</code>依旧是有序的</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"原始的希尔排序\">1、原始的希尔排序</h4>\r\n<ul>\r\n<li><code>DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Shell_sort</span><span class=\"params\">(ElementTypes A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D;  <span class=\"comment\">// 当前次序的间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> P,i;</span><br><span class=\"line\">    ElementType temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(P=N/<span class=\"number\">2</span>;D&gt;<span class=\"number\">0</span>;D/=<span class=\"number\">2</span>) <span class=\"comment\">// 间隔的变换</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入排序 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(P = D; P&lt;N; P++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \ttemp = A[P];  <span class=\"comment\">// 当前要插入的元素 </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i = P; i &gt;= D &amp;&amp; A[i-D] &gt; temp;i -= D)  <span class=\"comment\">// 和已经有序的元素进行比较</span></span><br><span class=\"line\">            <span class=\"comment\">// 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                A[i] = A[i-D];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[i] = temp;  <span class=\"comment\">// temp 放到正确位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>复杂度分析：\r\n当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到<code>O(N^2)</code>。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"希尔排序\">希尔排序</h3>\r\n<ul>\r\n<li>希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\r\n<ul>\r\n<li><code>DK[i-1]</code>有序后，执行<code>DK[i]</code>的排序后，<code>DK[i-1]</code>依旧是有序的</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"原始的希尔排序\">1、原始的希尔排序</h4>\r\n<ul>\r\n<li><code>DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Shell_sort</span><span class=\"params\">(ElementTypes A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D;  <span class=\"comment\">// 当前次序的间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> P,i;</span><br><span class=\"line\">    ElementType temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(P=N/<span class=\"number\">2</span>;D&gt;<span class=\"number\">0</span>;D/=<span class=\"number\">2</span>) <span class=\"comment\">// 间隔的变换</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入排序 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(P = D; P&lt;N; P++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \ttemp = A[P];  <span class=\"comment\">// 当前要插入的元素 </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i = P; i &gt;= D &amp;&amp; A[i-D] &gt; temp;i -= D)  <span class=\"comment\">// 和已经有序的元素进行比较</span></span><br><span class=\"line\">            <span class=\"comment\">// 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                A[i] = A[i-D];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[i] = temp;  <span class=\"comment\">// temp 放到正确位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>复杂度分析：\r\n当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到<code>O(N^2)</code>。</li>\r\n</ul>\r\n"},{"title":"Boy","date":"2021-03-16T13:53:58.000Z","_content":"\n####  About this Blog\n\n- 个人博客，分享我的日常与一些工作内容\n\n","source":"_posts/baozi.md","raw":"---\ntitle: \"Boy\"\ndate: 2021-03-16 21:53:58\ncategories:\n- bun\n- life\ntags:\n - intraduce\n---\n\n####  About this Blog\n\n- 个人博客，分享我的日常与一些工作内容\n\n","slug":"baozi","published":1,"updated":"2022-07-28T16:37:23.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mp001kqcdaaucmaac0","content":"<h4 id=\"about-this-blog\">About this Blog</h4>\r\n<ul>\r\n<li>个人博客，分享我的日常与一些工作内容</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"about-this-blog\">About this Blog</h4>\r\n<ul>\r\n<li>个人博客，分享我的日常与一些工作内容</li>\r\n</ul>\r\n"},{"title":"简单排序-冒泡&插入","date":"2021-10-19T15:41:14.000Z","_content":"\n## 简单排序:\n\n- 冒泡排序\n- 插入排序\n\n上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。\n\n在常规的排序算法中：我们默认的顺序是从小到大\n\n#### 1、冒泡排序\n\n&ensp;&ensp;原理： 冒泡排序是一个两重的`for`循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。\n\n- C++实现 -- 初始版本\n\n```c++\nvoid swap(int * a,int * b)；\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素 \n            }\n        }\n    }\n}\n\nvoid swap(int * a,int * b)\n{\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n```\n\n- 优化版本\n\n如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：\n\n```C++\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n    bool flag = false;       // 标识数组是否有序\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素\n                flag = true;\n            }\n        }\n        if(!flag)  // 满足退出条件 结束循环\n        {\n            break; \n        }\n    }\n}\n```\n- 结果展示\n  - 输入与数据：`int a[7] = {3,1,2,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png)\n\n- 复杂度分析 - 优化版本\n\n最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历`flag`变量会触发循环结束，复杂度：\n\n<center>T = O(N)</center>\n\n最坏情况：元素逆序，需要遍历比较所有的元素\n\n<center>T = O(N^2)</center>\n\n#### 2、插入排序\n\n插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。\n\n- C++实现 \n\n  ```C++\n  void Insertion_Sort(ElementType A[],int N)\n  {\n      int p,i，tmp;\n      for(p = 1;p < N;p++)\n      {\n          tmp = A[p];  // 获取插入的元素 \n          for(i = p;i > 0 && A[i - 1] > tmp;i--) // A[i-1]表示的是有序序列中的最大元素\n          {\n              A[i] = A[i-1];\n          }\n          // 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：\n          A[i] = tmp;\n      }\n  }\n  ```\n\n- 结果展示\n\n  - 输入与数据：`int a[7] = {3,1,1,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png)\n\n- 复杂度分析：\n\n  最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：\n\n  <center>T = O(N)</center>\n\n  最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：\n\n  <center>T = O(N^2)</center>\n\n#### 补充说明：\n\n- 时间复杂度下界\n\n&ensp;&ensp;&ensp;&ensp;概念：对于下边`i<j`如果A[i] > A[j]，则称`(i,j)`是一对逆序对<font color=red>逆序对(inversion)</font>\n\n- 在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font>\n\n<center>插入排序：T(N,I) = O(N+I)</center>\n\n- 对于N个不同元素组成的序列，平均具有`N(N-1)/4`个逆序对。\n\n- 对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐`Ω(N^2)`\n\n基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。\n\n### 下面将会介绍，希尔排序！\n\n","source":"_posts/sort-bubble-insertion.md","raw":"---\ntitle: 简单排序-冒泡&插入\ndate: 2021-10-19 23:41:14\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## 简单排序:\n\n- 冒泡排序\n- 插入排序\n\n上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。\n\n在常规的排序算法中：我们默认的顺序是从小到大\n\n#### 1、冒泡排序\n\n&ensp;&ensp;原理： 冒泡排序是一个两重的`for`循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。\n\n- C++实现 -- 初始版本\n\n```c++\nvoid swap(int * a,int * b)；\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素 \n            }\n        }\n    }\n}\n\nvoid swap(int * a,int * b)\n{\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n```\n\n- 优化版本\n\n如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：\n\n```C++\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n    bool flag = false;       // 标识数组是否有序\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素\n                flag = true;\n            }\n        }\n        if(!flag)  // 满足退出条件 结束循环\n        {\n            break; \n        }\n    }\n}\n```\n- 结果展示\n  - 输入与数据：`int a[7] = {3,1,2,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png)\n\n- 复杂度分析 - 优化版本\n\n最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历`flag`变量会触发循环结束，复杂度：\n\n<center>T = O(N)</center>\n\n最坏情况：元素逆序，需要遍历比较所有的元素\n\n<center>T = O(N^2)</center>\n\n#### 2、插入排序\n\n插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。\n\n- C++实现 \n\n  ```C++\n  void Insertion_Sort(ElementType A[],int N)\n  {\n      int p,i，tmp;\n      for(p = 1;p < N;p++)\n      {\n          tmp = A[p];  // 获取插入的元素 \n          for(i = p;i > 0 && A[i - 1] > tmp;i--) // A[i-1]表示的是有序序列中的最大元素\n          {\n              A[i] = A[i-1];\n          }\n          // 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：\n          A[i] = tmp;\n      }\n  }\n  ```\n\n- 结果展示\n\n  - 输入与数据：`int a[7] = {3,1,1,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png)\n\n- 复杂度分析：\n\n  最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：\n\n  <center>T = O(N)</center>\n\n  最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：\n\n  <center>T = O(N^2)</center>\n\n#### 补充说明：\n\n- 时间复杂度下界\n\n&ensp;&ensp;&ensp;&ensp;概念：对于下边`i<j`如果A[i] > A[j]，则称`(i,j)`是一对逆序对<font color=red>逆序对(inversion)</font>\n\n- 在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font>\n\n<center>插入排序：T(N,I) = O(N+I)</center>\n\n- 对于N个不同元素组成的序列，平均具有`N(N-1)/4`个逆序对。\n\n- 对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐`Ω(N^2)`\n\n基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。\n\n### 下面将会介绍，希尔排序！\n\n","slug":"sort-bubble-insertion","published":1,"updated":"2022-07-28T16:37:23.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mq001oqcda7u63686u","content":"<h2 id=\"简单排序\">简单排序:</h2>\r\n<ul>\r\n<li>冒泡排序</li>\r\n<li>插入排序</li>\r\n</ul>\r\n<p>上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。</p>\r\n<p>在常规的排序算法中：我们默认的顺序是从小到大</p>\r\n<h4 id=\"冒泡排序\">1、冒泡排序</h4>\r\n<p>  原理：\r\n冒泡排序是一个两重的<code>for</code>循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。</p>\r\n<ul>\r\n<li>C++实现 -- 初始版本</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap(int * a,int * b)；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> * a,<span class=\"keyword\">int</span> * b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">    *b ^= *a;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>优化版本</li>\r\n</ul>\r\n<p>如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;       <span class=\"comment\">// 标识数组是否有序</span></span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素</span></span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)  <span class=\"comment\">// 满足退出条件 结束循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>结果展示\r\n<ul>\r\n<li>输入与数据：<code>int a[7] = &#123;3,1,2,98,30,8,90&#125;;</code></li>\r\n</ul></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png\" /></p>\r\n<ul>\r\n<li>复杂度分析 - 优化版本</li>\r\n</ul>\r\n<p>最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历<code>flag</code>变量会触发循环结束，复杂度：</p>\r\n<center>\r\nT = O(N)\r\n</center>\r\n<p>最坏情况：元素逆序，需要遍历比较所有的元素</p>\r\n<center>\r\nT = O(N^2)\r\n</center>\r\n<h4 id=\"插入排序\">2、插入排序</h4>\r\n<p>插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。</p>\r\n<ul>\r\n<li><p>C++实现</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertion_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p,i，tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = <span class=\"number\">1</span>;p &lt; N;p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = A[p];  <span class=\"comment\">// 获取插入的元素 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = p;i &gt; <span class=\"number\">0</span> &amp;&amp; A[i - <span class=\"number\">1</span>] &gt; tmp;i--) <span class=\"comment\">// A[i-1]表示的是有序序列中的最大元素</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            A[i] = A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：</span></span><br><span class=\"line\">        A[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n<li><p>结果展示</p>\r\n<ul>\r\n<li>输入与数据：<code>int a[7] = &#123;3,1,1,98,30,8,90&#125;;</code></li>\r\n</ul></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png\" /></p>\r\n<ul>\r\n<li><p>复杂度分析：</p>\r\n<p>最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：</p>\r\n<center>\r\n<p>T = O(N)</p>\r\n</center>\r\n<p>最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：</p>\r\n<center>\r\n<p>T = O(N^2)</p>\r\n</center></li>\r\n</ul>\r\n<h4 id=\"补充说明\">补充说明：</h4>\r\n<ul>\r\n<li>时间复杂度下界</li>\r\n</ul>\r\n<p>    概念：对于下边<code>i&lt;j</code>如果A[i] &gt;\r\nA[j]，则称<code>(i,j)</code>是一对逆序对<font color=red>逆序对(inversion)</font></p>\r\n<ul>\r\n<li>在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font></li>\r\n</ul>\r\n<center>\r\n插入排序：T(N,I) = O(N+I)\r\n</center>\r\n<ul>\r\n<li><p>对于N个不同元素组成的序列，平均具有<code>N(N-1)/4</code>个逆序对。</p></li>\r\n<li><p>对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐<code>Ω(N^2)</code></p></li>\r\n</ul>\r\n<p>基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。</p>\r\n<h3 id=\"下面将会介绍希尔排序\">下面将会介绍，希尔排序！</h3>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单排序\">简单排序:</h2>\r\n<ul>\r\n<li>冒泡排序</li>\r\n<li>插入排序</li>\r\n</ul>\r\n<p>上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。</p>\r\n<p>在常规的排序算法中：我们默认的顺序是从小到大</p>\r\n<h4 id=\"冒泡排序\">1、冒泡排序</h4>\r\n<p>  原理：\r\n冒泡排序是一个两重的<code>for</code>循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。</p>\r\n<ul>\r\n<li>C++实现 -- 初始版本</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap(int * a,int * b)；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> * a,<span class=\"keyword\">int</span> * b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">    *b ^= *a;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>优化版本</li>\r\n</ul>\r\n<p>如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;       <span class=\"comment\">// 标识数组是否有序</span></span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素</span></span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)  <span class=\"comment\">// 满足退出条件 结束循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>结果展示\r\n<ul>\r\n<li>输入与数据：<code>int a[7] = &#123;3,1,2,98,30,8,90&#125;;</code></li>\r\n</ul></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png\" /></p>\r\n<ul>\r\n<li>复杂度分析 - 优化版本</li>\r\n</ul>\r\n<p>最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历<code>flag</code>变量会触发循环结束，复杂度：</p>\r\n<center>\r\nT = O(N)\r\n</center>\r\n<p>最坏情况：元素逆序，需要遍历比较所有的元素</p>\r\n<center>\r\nT = O(N^2)\r\n</center>\r\n<h4 id=\"插入排序\">2、插入排序</h4>\r\n<p>插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。</p>\r\n<ul>\r\n<li><p>C++实现</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertion_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p,i，tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = <span class=\"number\">1</span>;p &lt; N;p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = A[p];  <span class=\"comment\">// 获取插入的元素 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = p;i &gt; <span class=\"number\">0</span> &amp;&amp; A[i - <span class=\"number\">1</span>] &gt; tmp;i--) <span class=\"comment\">// A[i-1]表示的是有序序列中的最大元素</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            A[i] = A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：</span></span><br><span class=\"line\">        A[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n<li><p>结果展示</p>\r\n<ul>\r\n<li>输入与数据：<code>int a[7] = &#123;3,1,1,98,30,8,90&#125;;</code></li>\r\n</ul></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png\" /></p>\r\n<ul>\r\n<li><p>复杂度分析：</p>\r\n<p>最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：</p>\r\n<center>\r\n<p>T = O(N)</p>\r\n</center>\r\n<p>最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：</p>\r\n<center>\r\n<p>T = O(N^2)</p>\r\n</center></li>\r\n</ul>\r\n<h4 id=\"补充说明\">补充说明：</h4>\r\n<ul>\r\n<li>时间复杂度下界</li>\r\n</ul>\r\n<p>    概念：对于下边<code>i&lt;j</code>如果A[i] &gt;\r\nA[j]，则称<code>(i,j)</code>是一对逆序对<font color=red>逆序对(inversion)</font></p>\r\n<ul>\r\n<li>在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font></li>\r\n</ul>\r\n<center>\r\n插入排序：T(N,I) = O(N+I)\r\n</center>\r\n<ul>\r\n<li><p>对于N个不同元素组成的序列，平均具有<code>N(N-1)/4</code>个逆序对。</p></li>\r\n<li><p>对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐<code>Ω(N^2)</code></p></li>\r\n</ul>\r\n<p>基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。</p>\r\n<h3 id=\"下面将会介绍希尔排序\">下面将会介绍，希尔排序！</h3>\r\n"},{"title":"vector dot product","date":"2022-07-27T16:55:14.000Z","mathjax":"tru","_content":"## 向量的内积与外积\n### 点与点的减法\n- 描述的是起点到终点的运动\n\n### 点${p}$与向量$\\vec{a}$的加法\n\n- 从$P$出发经过这个向量$\\vec{a}$代表的运动，到达一个新的点$P_0$\n\n### 在此处定义两个向量\n- $\\vec{a}$\n  $$  \n       \\vec{a} = \\begin{bmatrix} \n          a_1 \\\\\n          a_2 \\\\\n          a_3 \\\\\n        \\end{bmatrix}\n  $$ \n- $\\vec{b}$\n  $$  \n      \\vec{b} = \\begin{bmatrix} \n        b_1 \\\\\n        b_2 \\\\\n        b_3 \\\\\n      \\end{bmatrix}\n  $$ \n\n### 向量点击\n\n- 点击(内积)的公式\n  $$\\vec{a}\\cdot\\vec{b} = |\\vec{a}|\\times|\\vec{b}|\\times \\cos \\theta $$\n  $$ \\vec{a}\\cdot\\vec{b} = \\sum_{i=1}^{n} \\left\\{ a_i * b_i \\right\\}$$\n- 点击的几何意义\n  - <p> 其中一个向量在另一个向量上的投影且与点击的顺序无关 </p>\n  - $\\vec{a}\\cdot\\vec{b} > 0$    方向基本相同，夹角在0°到90°之间\n  - $\\vec{a}\\cdot\\vec{b} = 0$    正交，相互垂直 \n  - $\\vec{a}\\cdot\\vec{b} < 0$    方向基本相反，夹角在90°到180°之间\n- 点击的巧用\n  - 计算向量的模长的平方\n    $$|\\vec{a}|^2 = \\vec{a} \\cdot \\vec{a} $$\n  - 计算两个向量之间的夹角的$\\cos\\theta$\n    -![计算两个向量之间的夹角](https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png \"计算两个向量之间的夹角\")\n    - 两个单位向量的点击等于他们的夹角的$\\cos\\theta$的值\n  - 两个互相垂直的向量的点击总是为`0` $\\theta = 90^0$\n    $$\\vec{a} \\cdot \\vec{b} = |\\vec{a}| \\ast |\\vec{b}| \\ast \\cos\\theta = 0 $$\n  - 一条射线描述的向量[起点 + 方向]点击一个平面的法向可以得到起点到平面的距离   \n### 向量叉积\n\n- 外积公式\n  $$ \n      \\vec{a} \\times \\vec{b} =  \n      \\begin{bmatrix} \n        a_2 * b_3 - b_2 * a_3 \\\\\n        a_3 * b_1 - b_3 * a_1 \\\\\n        a_1 * b_2 - b_1 * a_2 \\\\\n      \\end{bmatrix}\n   $$\n- 叉积的几何意义\n  - 几何表达公式\n    $$\n      \\vec{a} \\times \\vec{b} = |\\vec{a}| * |\\vec{b}| * sin(\\theta) * \\vec{n}\n    $$\n    - $\\vec{n}$ 表示$\\vec{a}$, $\\vec{b}$所构成平面的法向量方向的单位向量\n  - 在二维空间中：叉积得到的向量的模长$|\\vec{a}\\times\\vec{b}|$等于这两个向量$\\vec{a},\\vec{b}$组成的平行四边形的面积\n - 外积的使用\n    - 外积的模长则为夹角的正弦（始终为正）\n\n### 扩展知识\n\n- 扩展 - 1\n  - 平面上的四个点$P_1$,$P_2$,$P_3$,$P_4$,分别构成向量 $\\vec{P_1P_2}$与$\\vec{P_3P_4}$。如何通过点击计算他们交点的坐标?\n  - 下次吧！","source":"_posts/vector-dot-product.md","raw":"---\ntitle: vector dot product\ndate: 2022-07-28 00:55:14\nmathjax: tru\ncategories:\n- Math\n- linear algebra\ntags:\n- vector\n---\n## 向量的内积与外积\n### 点与点的减法\n- 描述的是起点到终点的运动\n\n### 点${p}$与向量$\\vec{a}$的加法\n\n- 从$P$出发经过这个向量$\\vec{a}$代表的运动，到达一个新的点$P_0$\n\n### 在此处定义两个向量\n- $\\vec{a}$\n  $$  \n       \\vec{a} = \\begin{bmatrix} \n          a_1 \\\\\n          a_2 \\\\\n          a_3 \\\\\n        \\end{bmatrix}\n  $$ \n- $\\vec{b}$\n  $$  \n      \\vec{b} = \\begin{bmatrix} \n        b_1 \\\\\n        b_2 \\\\\n        b_3 \\\\\n      \\end{bmatrix}\n  $$ \n\n### 向量点击\n\n- 点击(内积)的公式\n  $$\\vec{a}\\cdot\\vec{b} = |\\vec{a}|\\times|\\vec{b}|\\times \\cos \\theta $$\n  $$ \\vec{a}\\cdot\\vec{b} = \\sum_{i=1}^{n} \\left\\{ a_i * b_i \\right\\}$$\n- 点击的几何意义\n  - <p> 其中一个向量在另一个向量上的投影且与点击的顺序无关 </p>\n  - $\\vec{a}\\cdot\\vec{b} > 0$    方向基本相同，夹角在0°到90°之间\n  - $\\vec{a}\\cdot\\vec{b} = 0$    正交，相互垂直 \n  - $\\vec{a}\\cdot\\vec{b} < 0$    方向基本相反，夹角在90°到180°之间\n- 点击的巧用\n  - 计算向量的模长的平方\n    $$|\\vec{a}|^2 = \\vec{a} \\cdot \\vec{a} $$\n  - 计算两个向量之间的夹角的$\\cos\\theta$\n    -![计算两个向量之间的夹角](https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png \"计算两个向量之间的夹角\")\n    - 两个单位向量的点击等于他们的夹角的$\\cos\\theta$的值\n  - 两个互相垂直的向量的点击总是为`0` $\\theta = 90^0$\n    $$\\vec{a} \\cdot \\vec{b} = |\\vec{a}| \\ast |\\vec{b}| \\ast \\cos\\theta = 0 $$\n  - 一条射线描述的向量[起点 + 方向]点击一个平面的法向可以得到起点到平面的距离   \n### 向量叉积\n\n- 外积公式\n  $$ \n      \\vec{a} \\times \\vec{b} =  \n      \\begin{bmatrix} \n        a_2 * b_3 - b_2 * a_3 \\\\\n        a_3 * b_1 - b_3 * a_1 \\\\\n        a_1 * b_2 - b_1 * a_2 \\\\\n      \\end{bmatrix}\n   $$\n- 叉积的几何意义\n  - 几何表达公式\n    $$\n      \\vec{a} \\times \\vec{b} = |\\vec{a}| * |\\vec{b}| * sin(\\theta) * \\vec{n}\n    $$\n    - $\\vec{n}$ 表示$\\vec{a}$, $\\vec{b}$所构成平面的法向量方向的单位向量\n  - 在二维空间中：叉积得到的向量的模长$|\\vec{a}\\times\\vec{b}|$等于这两个向量$\\vec{a},\\vec{b}$组成的平行四边形的面积\n - 外积的使用\n    - 外积的模长则为夹角的正弦（始终为正）\n\n### 扩展知识\n\n- 扩展 - 1\n  - 平面上的四个点$P_1$,$P_2$,$P_3$,$P_4$,分别构成向量 $\\vec{P_1P_2}$与$\\vec{P_3P_4}$。如何通过点击计算他们交点的坐标?\n  - 下次吧！","slug":"vector-dot-product","published":1,"updated":"2022-07-28T16:37:23.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mr001sqcdac1yu5f8a","content":"<h2 id=\"向量的内积与外积\">向量的内积与外积</h2>\r\n<h3 id=\"点与点的减法\">点与点的减法</h3>\r\n<ul>\r\n<li>描述的是起点到终点的运动</li>\r\n</ul>\r\n<h3 id=\"点p与向量veca的加法\">点<span\r\nclass=\"math inline\">\\({p}\\)</span>与向量<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>的加法</h3>\r\n<ul>\r\n<li>从<span class=\"math inline\">\\(P\\)</span>出发经过这个向量<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>代表的运动，到达一个新的点<span\r\nclass=\"math inline\">\\(P_0\\)</span></li>\r\n</ul>\r\n<h3 id=\"在此处定义两个向量\">在此处定义两个向量</h3>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\)</span> <span\r\nclass=\"math display\">\\[  \r\n     \\vec{a} = \\begin{bmatrix}\r\n        a_1 \\\\\r\n        a_2 \\\\\r\n        a_3 \\\\\r\n      \\end{bmatrix}\r\n\\]</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{b}\\)</span> <span\r\nclass=\"math display\">\\[  \r\n    \\vec{b} = \\begin{bmatrix}\r\n      b_1 \\\\\r\n      b_2 \\\\\r\n      b_3 \\\\\r\n    \\end{bmatrix}\r\n\\]</span></li>\r\n</ul>\r\n<h3 id=\"向量点击\">向量点击</h3>\r\n<ul>\r\n<li>点击(内积)的公式 <span class=\"math display\">\\[\\vec{a}\\cdot\\vec{b} =\r\n|\\vec{a}|\\times|\\vec{b}|\\times \\cos \\theta \\]</span> <span\r\nclass=\"math display\">\\[ \\vec{a}\\cdot\\vec{b} = \\sum_{i=1}^{n} \\left\\{ a_i\r\n* b_i \\right\\}\\]</span></li>\r\n<li>点击的几何意义\r\n<ul>\r\n<li><p>\r\n其中一个向量在另一个向量上的投影且与点击的顺序无关\r\n</p></li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} &gt; 0\\)</span>\r\n方向基本相同，夹角在0°到90°之间</li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} = 0\\)</span>\r\n正交，相互垂直</li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} &lt; 0\\)</span>\r\n方向基本相反，夹角在90°到180°之间</li>\r\n</ul></li>\r\n<li>点击的巧用\r\n<ul>\r\n<li>计算向量的模长的平方 <span class=\"math display\">\\[|\\vec{a}|^2 =\r\n\\vec{a} \\cdot \\vec{a} \\]</span></li>\r\n<li>计算两个向量之间的夹角的<span\r\nclass=\"math inline\">\\(\\cos\\theta\\)</span> -<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png\"\r\ntitle=\"计算两个向量之间的夹角\" alt=\"计算两个向量之间的夹角\" />\r\n<ul>\r\n<li>两个单位向量的点击等于他们的夹角的<span\r\nclass=\"math inline\">\\(\\cos\\theta\\)</span>的值</li>\r\n</ul></li>\r\n<li>两个互相垂直的向量的点击总是为<code>0</code> <span\r\nclass=\"math inline\">\\(\\theta = 90^0\\)</span> <span\r\nclass=\"math display\">\\[\\vec{a} \\cdot \\vec{b} = |\\vec{a}| \\ast |\\vec{b}|\r\n\\ast \\cos\\theta = 0 \\]</span></li>\r\n<li>一条射线描述的向量[起点 +\r\n方向]点击一个平面的法向可以得到起点到平面的距离<br />\r\n### 向量叉积</li>\r\n</ul></li>\r\n<li>外积公式 <span class=\"math display\">\\[\r\n    \\vec{a} \\times \\vec{b} =  \r\n    \\begin{bmatrix}\r\n      a_2 * b_3 - b_2 * a_3 \\\\\r\n      a_3 * b_1 - b_3 * a_1 \\\\\r\n      a_1 * b_2 - b_1 * a_2 \\\\\r\n    \\end{bmatrix}\r\n\\]</span></li>\r\n<li>叉积的几何意义\r\n<ul>\r\n<li>几何表达公式 <span class=\"math display\">\\[\r\n  \\vec{a} \\times \\vec{b} = |\\vec{a}| * |\\vec{b}| * sin(\\theta) * \\vec{n}\r\n\\]</span>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n}\\)</span> 表示<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>, <span\r\nclass=\"math inline\">\\(\\vec{b}\\)</span>所构成平面的法向量方向的单位向量</li>\r\n</ul></li>\r\n<li>在二维空间中：叉积得到的向量的模长<span\r\nclass=\"math inline\">\\(|\\vec{a}\\times\\vec{b}|\\)</span>等于这两个向量<span\r\nclass=\"math inline\">\\(\\vec{a},\\vec{b}\\)</span>组成的平行四边形的面积</li>\r\n</ul></li>\r\n<li>外积的使用\r\n<ul>\r\n<li>外积的模长则为夹角的正弦（始终为正）</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"扩展知识\">扩展知识</h3>\r\n<ul>\r\n<li>扩展 - 1\r\n<ul>\r\n<li>平面上的四个点<span class=\"math inline\">\\(P_1\\)</span>,<span\r\nclass=\"math inline\">\\(P_2\\)</span>,<span\r\nclass=\"math inline\">\\(P_3\\)</span>,<span\r\nclass=\"math inline\">\\(P_4\\)</span>,分别构成向量 <span\r\nclass=\"math inline\">\\(\\vec{P_1P_2}\\)</span>与<span\r\nclass=\"math inline\">\\(\\vec{P_3P_4}\\)</span>。如何通过点击计算他们交点的坐标?</li>\r\n<li>下次吧！</li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"向量的内积与外积\">向量的内积与外积</h2>\r\n<h3 id=\"点与点的减法\">点与点的减法</h3>\r\n<ul>\r\n<li>描述的是起点到终点的运动</li>\r\n</ul>\r\n<h3 id=\"点p与向量veca的加法\">点<span\r\nclass=\"math inline\">\\({p}\\)</span>与向量<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>的加法</h3>\r\n<ul>\r\n<li>从<span class=\"math inline\">\\(P\\)</span>出发经过这个向量<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>代表的运动，到达一个新的点<span\r\nclass=\"math inline\">\\(P_0\\)</span></li>\r\n</ul>\r\n<h3 id=\"在此处定义两个向量\">在此处定义两个向量</h3>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\)</span> <span\r\nclass=\"math display\">\\[  \r\n     \\vec{a} = \\begin{bmatrix}\r\n        a_1 \\\\\r\n        a_2 \\\\\r\n        a_3 \\\\\r\n      \\end{bmatrix}\r\n\\]</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{b}\\)</span> <span\r\nclass=\"math display\">\\[  \r\n    \\vec{b} = \\begin{bmatrix}\r\n      b_1 \\\\\r\n      b_2 \\\\\r\n      b_3 \\\\\r\n    \\end{bmatrix}\r\n\\]</span></li>\r\n</ul>\r\n<h3 id=\"向量点击\">向量点击</h3>\r\n<ul>\r\n<li>点击(内积)的公式 <span class=\"math display\">\\[\\vec{a}\\cdot\\vec{b} =\r\n|\\vec{a}|\\times|\\vec{b}|\\times \\cos \\theta \\]</span> <span\r\nclass=\"math display\">\\[ \\vec{a}\\cdot\\vec{b} = \\sum_{i=1}^{n} \\left\\{ a_i\r\n* b_i \\right\\}\\]</span></li>\r\n<li>点击的几何意义\r\n<ul>\r\n<li><p>\r\n其中一个向量在另一个向量上的投影且与点击的顺序无关\r\n</p></li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} &gt; 0\\)</span>\r\n方向基本相同，夹角在0°到90°之间</li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} = 0\\)</span>\r\n正交，相互垂直</li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} &lt; 0\\)</span>\r\n方向基本相反，夹角在90°到180°之间</li>\r\n</ul></li>\r\n<li>点击的巧用\r\n<ul>\r\n<li>计算向量的模长的平方 <span class=\"math display\">\\[|\\vec{a}|^2 =\r\n\\vec{a} \\cdot \\vec{a} \\]</span></li>\r\n<li>计算两个向量之间的夹角的<span\r\nclass=\"math inline\">\\(\\cos\\theta\\)</span> -<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png\"\r\ntitle=\"计算两个向量之间的夹角\" alt=\"计算两个向量之间的夹角\" />\r\n<ul>\r\n<li>两个单位向量的点击等于他们的夹角的<span\r\nclass=\"math inline\">\\(\\cos\\theta\\)</span>的值</li>\r\n</ul></li>\r\n<li>两个互相垂直的向量的点击总是为<code>0</code> <span\r\nclass=\"math inline\">\\(\\theta = 90^0\\)</span> <span\r\nclass=\"math display\">\\[\\vec{a} \\cdot \\vec{b} = |\\vec{a}| \\ast |\\vec{b}|\r\n\\ast \\cos\\theta = 0 \\]</span></li>\r\n<li>一条射线描述的向量[起点 +\r\n方向]点击一个平面的法向可以得到起点到平面的距离<br />\r\n### 向量叉积</li>\r\n</ul></li>\r\n<li>外积公式 <span class=\"math display\">\\[\r\n    \\vec{a} \\times \\vec{b} =  \r\n    \\begin{bmatrix}\r\n      a_2 * b_3 - b_2 * a_3 \\\\\r\n      a_3 * b_1 - b_3 * a_1 \\\\\r\n      a_1 * b_2 - b_1 * a_2 \\\\\r\n    \\end{bmatrix}\r\n\\]</span></li>\r\n<li>叉积的几何意义\r\n<ul>\r\n<li>几何表达公式 <span class=\"math display\">\\[\r\n  \\vec{a} \\times \\vec{b} = |\\vec{a}| * |\\vec{b}| * sin(\\theta) * \\vec{n}\r\n\\]</span>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n}\\)</span> 表示<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>, <span\r\nclass=\"math inline\">\\(\\vec{b}\\)</span>所构成平面的法向量方向的单位向量</li>\r\n</ul></li>\r\n<li>在二维空间中：叉积得到的向量的模长<span\r\nclass=\"math inline\">\\(|\\vec{a}\\times\\vec{b}|\\)</span>等于这两个向量<span\r\nclass=\"math inline\">\\(\\vec{a},\\vec{b}\\)</span>组成的平行四边形的面积</li>\r\n</ul></li>\r\n<li>外积的使用\r\n<ul>\r\n<li>外积的模长则为夹角的正弦（始终为正）</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"扩展知识\">扩展知识</h3>\r\n<ul>\r\n<li>扩展 - 1\r\n<ul>\r\n<li>平面上的四个点<span class=\"math inline\">\\(P_1\\)</span>,<span\r\nclass=\"math inline\">\\(P_2\\)</span>,<span\r\nclass=\"math inline\">\\(P_3\\)</span>,<span\r\nclass=\"math inline\">\\(P_4\\)</span>,分别构成向量 <span\r\nclass=\"math inline\">\\(\\vec{P_1P_2}\\)</span>与<span\r\nclass=\"math inline\">\\(\\vec{P_3P_4}\\)</span>。如何通过点击计算他们交点的坐标?</li>\r\n<li>下次吧！</li>\r\n</ul></li>\r\n</ul>\r\n"},{"title":"归并排序","date":"2021-10-26T15:53:24.000Z","_content":"\n## 归并排序\n\n- 归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。\n\n#### 1、有序子列的归并 - 伪代码 \n\n```C++ \n// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置\nvoid Merge(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n    // 将有序的元素写回到A中\n    for(int i =0;i < NumElements;i++,RightEnd--)\n    {\n        A[RightEnd] = tempA[RightEnd];\n    }\n}\n\n```\n\n#### 2、归并的实现 - 递归\n\n- 归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：\n\n```C++ \nvoid Msort(ElementType A[],ElementType tempA[],int L,int RightEnd)\n{\n    int center;  // 每次将元素对半砍开 \n    if(L < RightEnd)\n    {\n        center = (L + RightEnd) / 2;          // 中间位置的元素\n        MSort(A,tempA,L,center);              //左半部分 \n        MSort(A,tempA,center+1，RightEnd);    //右半部分 \n    \tMerge(A,tempA,L,center+1,RightEnd);   // 合并两部分 \n    }\n}\n```\n\n#### 2、归并的实现 - 非递归\n\n```C++ \nvoid Merge_Sort(ElementType A[],int N)\n{\n    int length = 1;   // 最开始 有序子列的长度\n    ElementType * tempA;   // 一个辅助交换的和A等大小的空间\n    tempA = new ElementType[N];\n    if(tempA != nullptr)\n    {\n        while(length < N)  // 随着有序子列的扩大，最终一定大于等于N\n        {\n            Merge_pass(A,tempA,N,length);\n            length *= 2;\n            Merge_pass(tempA,A,N,length);\n            length *= 2;\n        }\n        delete [] tempA;\n    }\n    else\n    {\n        std::cout<<\"error\"<<std::endl;\n    }\n}\n\n// 源元素位置 目标元素位置 元素个数 有序子列的大小\nvoid Merge_pass(ElementType A,ElementType tempA,int N,int length)\n{\n    for(i = 0;i <= N - 2*length;i += 2*length)   // 2*length 每次合并的元素的个数 \n    {\n        Merge_(A,tempA,i,i+length,i+2*length - 1);  // 合并\n    }\n    if(i+legnth < N)  // 剩下的元素个数 > length, 表示还可以进行一次合并： 一组的个数\n    {\n        // 此时最后被合并的数据 个数 < 2*length \n\t\tMerge_(A,tempA,i,i+length,N - 1);  // 合并\n    }\n    else\n    {\n        // 合并最后部分的元素\n        for(j = i; j < N;j++)\n        {\n            tempA[j] = A[j];\n        }\n    }\n}\n\nvoid Merge_(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n}\n```\n\n","source":"_posts/归并排序.md","raw":"---\ntitle: 归并排序\ndate: 2021-10-26 23:53:24\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## 归并排序\n\n- 归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。\n\n#### 1、有序子列的归并 - 伪代码 \n\n```C++ \n// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置\nvoid Merge(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n    // 将有序的元素写回到A中\n    for(int i =0;i < NumElements;i++,RightEnd--)\n    {\n        A[RightEnd] = tempA[RightEnd];\n    }\n}\n\n```\n\n#### 2、归并的实现 - 递归\n\n- 归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：\n\n```C++ \nvoid Msort(ElementType A[],ElementType tempA[],int L,int RightEnd)\n{\n    int center;  // 每次将元素对半砍开 \n    if(L < RightEnd)\n    {\n        center = (L + RightEnd) / 2;          // 中间位置的元素\n        MSort(A,tempA,L,center);              //左半部分 \n        MSort(A,tempA,center+1，RightEnd);    //右半部分 \n    \tMerge(A,tempA,L,center+1,RightEnd);   // 合并两部分 \n    }\n}\n```\n\n#### 2、归并的实现 - 非递归\n\n```C++ \nvoid Merge_Sort(ElementType A[],int N)\n{\n    int length = 1;   // 最开始 有序子列的长度\n    ElementType * tempA;   // 一个辅助交换的和A等大小的空间\n    tempA = new ElementType[N];\n    if(tempA != nullptr)\n    {\n        while(length < N)  // 随着有序子列的扩大，最终一定大于等于N\n        {\n            Merge_pass(A,tempA,N,length);\n            length *= 2;\n            Merge_pass(tempA,A,N,length);\n            length *= 2;\n        }\n        delete [] tempA;\n    }\n    else\n    {\n        std::cout<<\"error\"<<std::endl;\n    }\n}\n\n// 源元素位置 目标元素位置 元素个数 有序子列的大小\nvoid Merge_pass(ElementType A,ElementType tempA,int N,int length)\n{\n    for(i = 0;i <= N - 2*length;i += 2*length)   // 2*length 每次合并的元素的个数 \n    {\n        Merge_(A,tempA,i,i+length,i+2*length - 1);  // 合并\n    }\n    if(i+legnth < N)  // 剩下的元素个数 > length, 表示还可以进行一次合并： 一组的个数\n    {\n        // 此时最后被合并的数据 个数 < 2*length \n\t\tMerge_(A,tempA,i,i+length,N - 1);  // 合并\n    }\n    else\n    {\n        // 合并最后部分的元素\n        for(j = i; j < N;j++)\n        {\n            tempA[j] = A[j];\n        }\n    }\n}\n\nvoid Merge_(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n}\n```\n\n","slug":"归并排序","published":1,"updated":"2022-07-28T16:37:23.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mr001vqcdahx444ihe","content":"<h2 id=\"归并排序\">归并排序</h2>\r\n<ul>\r\n<li>归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。</li>\r\n</ul>\r\n<h4 id=\"有序子列的归并---伪代码\">1、有序子列的归并 - 伪代码</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将有序的元素写回到A中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i &lt; NumElements;i++,RightEnd--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A[RightEnd] = tempA[RightEnd];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"归并的实现---递归\">2、归并的实现 - 递归</h4>\r\n<ul>\r\n<li>归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Msort</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center;  <span class=\"comment\">// 每次将元素对半砍开 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt; RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        center = (L + RightEnd) / <span class=\"number\">2</span>;          <span class=\"comment\">// 中间位置的元素</span></span><br><span class=\"line\">        MSort(A,tempA,L,center);              <span class=\"comment\">//左半部分 </span></span><br><span class=\"line\">        MSort(A,tempA,center+<span class=\"number\">1</span>，RightEnd);    <span class=\"comment\">//右半部分 </span></span><br><span class=\"line\">    \tMerge(A,tempA,L,center+<span class=\"number\">1</span>,RightEnd);   <span class=\"comment\">// 合并两部分 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"归并的实现---非递归\">2、归并的实现 - 非递归</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">1</span>;   <span class=\"comment\">// 最开始 有序子列的长度</span></span><br><span class=\"line\">    ElementType * tempA;   <span class=\"comment\">// 一个辅助交换的和A等大小的空间</span></span><br><span class=\"line\">    tempA = <span class=\"keyword\">new</span> ElementType[N];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tempA != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(length &lt; N)  <span class=\"comment\">// 随着有序子列的扩大，最终一定大于等于N</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Merge_pass(A,tempA,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            Merge_pass(tempA,A,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] tempA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;error&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源元素位置 目标元素位置 元素个数 有序子列的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_pass</span><span class=\"params\">(ElementType A,ElementType tempA,<span class=\"keyword\">int</span> N,<span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt;= N - <span class=\"number\">2</span>*length;i += <span class=\"number\">2</span>*length)   <span class=\"comment\">// 2*length 每次合并的元素的个数 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Merge_(A,tempA,i,i+length,i+<span class=\"number\">2</span>*length - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+legnth &lt; N)  <span class=\"comment\">// 剩下的元素个数 &gt; length, 表示还可以进行一次合并： 一组的个数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此时最后被合并的数据 个数 &lt; 2*length </span></span><br><span class=\"line\">\t\tMerge_(A,tempA,i,i+length,N - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 合并最后部分的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i; j &lt; N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[j] = A[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"归并排序\">归并排序</h2>\r\n<ul>\r\n<li>归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。</li>\r\n</ul>\r\n<h4 id=\"有序子列的归并---伪代码\">1、有序子列的归并 - 伪代码</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将有序的元素写回到A中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i &lt; NumElements;i++,RightEnd--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A[RightEnd] = tempA[RightEnd];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"归并的实现---递归\">2、归并的实现 - 递归</h4>\r\n<ul>\r\n<li>归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Msort</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center;  <span class=\"comment\">// 每次将元素对半砍开 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt; RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        center = (L + RightEnd) / <span class=\"number\">2</span>;          <span class=\"comment\">// 中间位置的元素</span></span><br><span class=\"line\">        MSort(A,tempA,L,center);              <span class=\"comment\">//左半部分 </span></span><br><span class=\"line\">        MSort(A,tempA,center+<span class=\"number\">1</span>，RightEnd);    <span class=\"comment\">//右半部分 </span></span><br><span class=\"line\">    \tMerge(A,tempA,L,center+<span class=\"number\">1</span>,RightEnd);   <span class=\"comment\">// 合并两部分 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"归并的实现---非递归\">2、归并的实现 - 非递归</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">1</span>;   <span class=\"comment\">// 最开始 有序子列的长度</span></span><br><span class=\"line\">    ElementType * tempA;   <span class=\"comment\">// 一个辅助交换的和A等大小的空间</span></span><br><span class=\"line\">    tempA = <span class=\"keyword\">new</span> ElementType[N];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tempA != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(length &lt; N)  <span class=\"comment\">// 随着有序子列的扩大，最终一定大于等于N</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Merge_pass(A,tempA,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            Merge_pass(tempA,A,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] tempA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;error&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源元素位置 目标元素位置 元素个数 有序子列的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_pass</span><span class=\"params\">(ElementType A,ElementType tempA,<span class=\"keyword\">int</span> N,<span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt;= N - <span class=\"number\">2</span>*length;i += <span class=\"number\">2</span>*length)   <span class=\"comment\">// 2*length 每次合并的元素的个数 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Merge_(A,tempA,i,i+length,i+<span class=\"number\">2</span>*length - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+legnth &lt; N)  <span class=\"comment\">// 剩下的元素个数 &gt; length, 表示还可以进行一次合并： 一组的个数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此时最后被合并的数据 个数 &lt; 2*length </span></span><br><span class=\"line\">\t\tMerge_(A,tempA,i,i+length,N - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 合并最后部分的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i; j &lt; N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[j] = A[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"微信多开","date":"2022-02-28T14:11:02.000Z","_content":"\n## 微信多开的小技巧 - Windows\n\n- 首先，需要你知道你机器上安装微信 - 请记录它的安装位置\n\n- 一般情况下，如果你不做任何修改的话，它会在`C:\\Program Files (x86)\\Tencent\\WeChat`这个目录下：\n&ensp;&ensp; ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png \"微信安装位置\")\n\n- 然后，打开你机器上任意的一个文本编辑器，输入如下内容：\n\n- 需要多开多少个微信，你便将如下命令输入重复写多少次。\n\n    ```bash\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    \n    # 请将上面的路径换成你机器上安装微信的路径\n    # 上面表示的是同时开两个微信程序\n    # 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别\n    \n    ```\n\n- 然后将文件保存，文件后缀为`.bat`,这是`cmd`识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png \"微信多开效果图\")\n\n","source":"_posts/微信多开.md","raw":"---\ntitle: 微信多开\ndate: 2022-02-28 22:11:02\ncategories:\n- Tips\ntags:\n- windows\n---\n\n## 微信多开的小技巧 - Windows\n\n- 首先，需要你知道你机器上安装微信 - 请记录它的安装位置\n\n- 一般情况下，如果你不做任何修改的话，它会在`C:\\Program Files (x86)\\Tencent\\WeChat`这个目录下：\n&ensp;&ensp; ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png \"微信安装位置\")\n\n- 然后，打开你机器上任意的一个文本编辑器，输入如下内容：\n\n- 需要多开多少个微信，你便将如下命令输入重复写多少次。\n\n    ```bash\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    \n    # 请将上面的路径换成你机器上安装微信的路径\n    # 上面表示的是同时开两个微信程序\n    # 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别\n    \n    ```\n\n- 然后将文件保存，文件后缀为`.bat`,这是`cmd`识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png \"微信多开效果图\")\n\n","slug":"微信多开","published":1,"updated":"2022-07-28T16:37:23.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mu0020qcdacu456fze","content":"<h2 id=\"微信多开的小技巧---windows\">微信多开的小技巧 - Windows</h2>\r\n<ul>\r\n<li><p>首先，需要你知道你机器上安装微信 - 请记录它的安装位置</p></li>\r\n<li><p>一般情况下，如果你不做任何修改的话，它会在<code>C:\\Program Files (x86)\\Tencent\\WeChat</code>这个目录下：\r\n   <img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png\"\r\ntitle=\"微信安装位置\" /></p></li>\r\n<li><p>然后，打开你机器上任意的一个文本编辑器，输入如下内容：</p></li>\r\n<li><p>需要多开多少个微信，你便将如下命令输入重复写多少次。</p>\r\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start D:\\&quot;Program Files (x86)<span class=\"string\">&quot;\\Tencent\\WeChat\\WeChat.exe</span></span><br><span class=\"line\"><span class=\"string\">start D:\\&quot;Program Files (x86)&quot;</span>\\Tencent\\WeChat\\WeChat.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请将上面的路径换成你机器上安装微信的路径</span></span><br><span class=\"line\"><span class=\"comment\"># 上面表示的是同时开两个微信程序</span></span><br><span class=\"line\"><span class=\"comment\"># 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>然后将文件保存，文件后缀为<code>.bat</code>,这是<code>cmd</code>识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。</p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png\"\r\ntitle=\"微信多开效果图\" /></p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微信多开的小技巧---windows\">微信多开的小技巧 - Windows</h2>\r\n<ul>\r\n<li><p>首先，需要你知道你机器上安装微信 - 请记录它的安装位置</p></li>\r\n<li><p>一般情况下，如果你不做任何修改的话，它会在<code>C:\\Program Files (x86)\\Tencent\\WeChat</code>这个目录下：\r\n   <img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png\"\r\ntitle=\"微信安装位置\" /></p></li>\r\n<li><p>然后，打开你机器上任意的一个文本编辑器，输入如下内容：</p></li>\r\n<li><p>需要多开多少个微信，你便将如下命令输入重复写多少次。</p>\r\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start D:\\&quot;Program Files (x86)<span class=\"string\">&quot;\\Tencent\\WeChat\\WeChat.exe</span></span><br><span class=\"line\"><span class=\"string\">start D:\\&quot;Program Files (x86)&quot;</span>\\Tencent\\WeChat\\WeChat.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请将上面的路径换成你机器上安装微信的路径</span></span><br><span class=\"line\"><span class=\"comment\"># 上面表示的是同时开两个微信程序</span></span><br><span class=\"line\"><span class=\"comment\"># 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>然后将文件保存，文件后缀为<code>.bat</code>,这是<code>cmd</code>识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。</p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png\"\r\ntitle=\"微信多开效果图\" /></p></li>\r\n</ul>\r\n"},{"title":"记一次总结","date":"2021-10-17T07:25:40.000Z","_content":"\n### \n\n`前记：`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG)\n\n&ensp;&ensp;&ensp;&ensp;从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。\n\n&ensp; &ensp;&ensp;&ensp;新工作是关于```C++　&　OSG```的，做一个仿真软件，主要负责一些关于`osg`的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：\n\n- `Qt`编写整个软件的界面\n- `osg`负责整个3D图形的展示\n\n&ensp; 关于这个项目遇到的一些问题：\n\n-   `osg`编译劝退\t\n\n&ensp;&ensp;&ensp;&ensp;讲真，`osg`的库的编译相当劝退，各种库的依赖关系，以及`VS`的工具链的选择，以及部分库的调试模式的选择。\n\n这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。\n\n- `osg`与`Qt`的集成\n\n&ensp;&ensp;&ensp;&ensp;要求你先编译`osg`然后才能编译，`osgQt`在`osg3.4`之后的版本中便被从原来的库中剔除，需要自己单独编译，\n\n同时`Qt4.0`的版本与`5.0`的版本编译使用的`Qt`的类也存在一些区别。\n\n当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：\n\n- 在于不同的团队合作的时候，如何扯皮！\n\n\n\n","source":"_posts/记一次总结.md","raw":"---\ntitle: 记一次总结\ndate: 2021-10-17 15:25:40\ntags:\n- conclusion\ncategories:\n- works\n- HJ\n---\n\n### \n\n`前记：`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG)\n\n&ensp;&ensp;&ensp;&ensp;从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。\n\n&ensp; &ensp;&ensp;&ensp;新工作是关于```C++　&　OSG```的，做一个仿真软件，主要负责一些关于`osg`的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：\n\n- `Qt`编写整个软件的界面\n- `osg`负责整个3D图形的展示\n\n&ensp; 关于这个项目遇到的一些问题：\n\n-   `osg`编译劝退\t\n\n&ensp;&ensp;&ensp;&ensp;讲真，`osg`的库的编译相当劝退，各种库的依赖关系，以及`VS`的工具链的选择，以及部分库的调试模式的选择。\n\n这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。\n\n- `osg`与`Qt`的集成\n\n&ensp;&ensp;&ensp;&ensp;要求你先编译`osg`然后才能编译，`osgQt`在`osg3.4`之后的版本中便被从原来的库中剔除，需要自己单独编译，\n\n同时`Qt4.0`的版本与`5.0`的版本编译使用的`Qt`的类也存在一些区别。\n\n当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：\n\n- 在于不同的团队合作的时候，如何扯皮！\n\n\n\n","slug":"记一次总结","published":1,"updated":"2022-07-28T16:37:23.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mv0023qcda593mdbov","content":"<h3 id=\"section\"></h3>\r\n<p><code>前记：</code></p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG\" /></p>\r\n<p>    从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。</p>\r\n<p> \r\n   新工作是关于<code>C++　&amp;　OSG</code>的，做一个仿真软件，主要负责一些关于<code>osg</code>的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：</p>\r\n<ul>\r\n<li><code>Qt</code>编写整个软件的界面</li>\r\n<li><code>osg</code>负责整个3D图形的展示</li>\r\n</ul>\r\n<p>  关于这个项目遇到的一些问题：</p>\r\n<ul>\r\n<li><code>osg</code>编译劝退</li>\r\n</ul>\r\n<p>    讲真，<code>osg</code>的库的编译相当劝退，各种库的依赖关系，以及<code>VS</code>的工具链的选择，以及部分库的调试模式的选择。</p>\r\n<p>这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。</p>\r\n<ul>\r\n<li><code>osg</code>与<code>Qt</code>的集成</li>\r\n</ul>\r\n<p>    要求你先编译<code>osg</code>然后才能编译，<code>osgQt</code>在<code>osg3.4</code>之后的版本中便被从原来的库中剔除，需要自己单独编译，</p>\r\n<p>同时<code>Qt4.0</code>的版本与<code>5.0</code>的版本编译使用的<code>Qt</code>的类也存在一些区别。</p>\r\n<p>当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：</p>\r\n<ul>\r\n<li>在于不同的团队合作的时候，如何扯皮！</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"section\"></h3>\r\n<p><code>前记：</code></p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG\" /></p>\r\n<p>    从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。</p>\r\n<p> \r\n   新工作是关于<code>C++　&amp;　OSG</code>的，做一个仿真软件，主要负责一些关于<code>osg</code>的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：</p>\r\n<ul>\r\n<li><code>Qt</code>编写整个软件的界面</li>\r\n<li><code>osg</code>负责整个3D图形的展示</li>\r\n</ul>\r\n<p>  关于这个项目遇到的一些问题：</p>\r\n<ul>\r\n<li><code>osg</code>编译劝退</li>\r\n</ul>\r\n<p>    讲真，<code>osg</code>的库的编译相当劝退，各种库的依赖关系，以及<code>VS</code>的工具链的选择，以及部分库的调试模式的选择。</p>\r\n<p>这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。</p>\r\n<ul>\r\n<li><code>osg</code>与<code>Qt</code>的集成</li>\r\n</ul>\r\n<p>    要求你先编译<code>osg</code>然后才能编译，<code>osgQt</code>在<code>osg3.4</code>之后的版本中便被从原来的库中剔除，需要自己单独编译，</p>\r\n<p>同时<code>Qt4.0</code>的版本与<code>5.0</code>的版本编译使用的<code>Qt</code>的类也存在一些区别。</p>\r\n<p>当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：</p>\r\n<ul>\r\n<li>在于不同的团队合作的时候，如何扯皮！</li>\r\n</ul>\r\n"},{"title":"记一次面试","date":"2022-01-15T16:51:02.000Z","_content":"\n## 记一次面试:\n\n&ensp;&ensp;距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\n&ensp;&ensp;这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是`CAD`方向，大概都是渲染相关的，所以还是符合我的预期。\n\n\n## Start Interview:\n\n- 首先这是一个`Cpp`&`图形`的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是`CPP`和`图形学`开发经验, 可以预见大概的问题就是`Cpp`和图形相关的知识。\n\n---\n\n\n### 第一次面试\n\n#### 关于简历中提到的之前的项目\n\n- 部分和之前项目相关的问题\n- 一些技术上的解决方案\n- ......\n\n#### CPP的新的语言特性\n\n- `C++11`的新语言特性 - 比较常用的\n  - 智能指针\n  - `auto`自动类型推导\n  - 标准库的多线程\n  - `lambda`表达式\n\n- 一些指针和引用相关的问题\n  - 指针是什么？\n  - 引用是什么？\n  - 两者的区别？\n  - 内存分区的相关问题，如：\n    - 常量在程序中的的存储位置\n    - 静态变量在什么位置\n    - ......\n\n#### 图形相关的问题\n\n- 图形管线的问题\n  - 坐标变换相关的问题\n    - 投影\n    - 视图\n\n- 一些渲染上面的解决方案\n  - 大数据量的绘制\n\n### 第二次面试\n\n&ensp;&ensp;第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：\n\n- 个人介绍\t\n  - 基本信息\n  - 求学经历\n  - ......\n\n- 工作经历\n  - 项目经历\n\n- 未来的规划\n  - 职业规划\n  - 个人规划\n\n- 个人爱好\n\n&ensp;.......\n\n&ensp;&ensp;后面部分就是关于这个介绍的提问了，无关痛痒。\n\n&ensp;&ensp;一周以后......，在我以为黄了的时候，竟然通过了。\n\n&ensp;&ensp;感谢！\n\n","source":"_posts/记一次面试-1.md","raw":"---\ntitle: 记一次面试\ndate: 2022-01-16 00:51:02\ncategories:\n  - works\n  - interview\ntags:\n  - openGL\t\n  - cpp\n  - computer graphics\n---\n\n## 记一次面试:\n\n&ensp;&ensp;距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\n&ensp;&ensp;这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是`CAD`方向，大概都是渲染相关的，所以还是符合我的预期。\n\n\n## Start Interview:\n\n- 首先这是一个`Cpp`&`图形`的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是`CPP`和`图形学`开发经验, 可以预见大概的问题就是`Cpp`和图形相关的知识。\n\n---\n\n\n### 第一次面试\n\n#### 关于简历中提到的之前的项目\n\n- 部分和之前项目相关的问题\n- 一些技术上的解决方案\n- ......\n\n#### CPP的新的语言特性\n\n- `C++11`的新语言特性 - 比较常用的\n  - 智能指针\n  - `auto`自动类型推导\n  - 标准库的多线程\n  - `lambda`表达式\n\n- 一些指针和引用相关的问题\n  - 指针是什么？\n  - 引用是什么？\n  - 两者的区别？\n  - 内存分区的相关问题，如：\n    - 常量在程序中的的存储位置\n    - 静态变量在什么位置\n    - ......\n\n#### 图形相关的问题\n\n- 图形管线的问题\n  - 坐标变换相关的问题\n    - 投影\n    - 视图\n\n- 一些渲染上面的解决方案\n  - 大数据量的绘制\n\n### 第二次面试\n\n&ensp;&ensp;第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：\n\n- 个人介绍\t\n  - 基本信息\n  - 求学经历\n  - ......\n\n- 工作经历\n  - 项目经历\n\n- 未来的规划\n  - 职业规划\n  - 个人规划\n\n- 个人爱好\n\n&ensp;.......\n\n&ensp;&ensp;后面部分就是关于这个介绍的提问了，无关痛痒。\n\n&ensp;&ensp;一周以后......，在我以为黄了的时候，竟然通过了。\n\n&ensp;&ensp;感谢！\n\n","slug":"记一次面试-1","published":1,"updated":"2022-07-28T16:37:23.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mv0028qcda9f2qaa8s","content":"<h2 id=\"记一次面试\">记一次面试:</h2>\r\n<p>  距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\r\n  这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是<code>CAD</code>方向，大概都是渲染相关的，所以还是符合我的预期。</p>\r\n<h2 id=\"start-interview\">Start Interview:</h2>\r\n<ul>\r\n<li>首先这是一个<code>Cpp</code>&amp;<code>图形</code>的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是<code>CPP</code>和<code>图形学</code>开发经验,\r\n可以预见大概的问题就是<code>Cpp</code>和图形相关的知识。</li>\r\n</ul>\r\n<hr />\r\n<h3 id=\"第一次面试\">第一次面试</h3>\r\n<h4 id=\"关于简历中提到的之前的项目\">关于简历中提到的之前的项目</h4>\r\n<ul>\r\n<li>部分和之前项目相关的问题</li>\r\n<li>一些技术上的解决方案</li>\r\n<li>......</li>\r\n</ul>\r\n<h4 id=\"cpp的新的语言特性\">CPP的新的语言特性</h4>\r\n<ul>\r\n<li><code>C++11</code>的新语言特性 - 比较常用的\r\n<ul>\r\n<li>智能指针</li>\r\n<li><code>auto</code>自动类型推导</li>\r\n<li>标准库的多线程</li>\r\n<li><code>lambda</code>表达式</li>\r\n</ul></li>\r\n<li>一些指针和引用相关的问题\r\n<ul>\r\n<li>指针是什么？</li>\r\n<li>引用是什么？</li>\r\n<li>两者的区别？</li>\r\n<li>内存分区的相关问题，如：\r\n<ul>\r\n<li>常量在程序中的的存储位置</li>\r\n<li>静态变量在什么位置</li>\r\n<li>......</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"图形相关的问题\">图形相关的问题</h4>\r\n<ul>\r\n<li>图形管线的问题\r\n<ul>\r\n<li>坐标变换相关的问题\r\n<ul>\r\n<li>投影</li>\r\n<li>视图</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>一些渲染上面的解决方案\r\n<ul>\r\n<li>大数据量的绘制</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"第二次面试\">第二次面试</h3>\r\n<p>  第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：</p>\r\n<ul>\r\n<li>个人介绍\r\n<ul>\r\n<li>基本信息</li>\r\n<li>求学经历</li>\r\n<li>......</li>\r\n</ul></li>\r\n<li>工作经历\r\n<ul>\r\n<li>项目经历</li>\r\n</ul></li>\r\n<li>未来的规划\r\n<ul>\r\n<li>职业规划</li>\r\n<li>个人规划</li>\r\n</ul></li>\r\n<li>个人爱好</li>\r\n</ul>\r\n<p> .......</p>\r\n<p>  后面部分就是关于这个介绍的提问了，无关痛痒。</p>\r\n<p>  一周以后......，在我以为黄了的时候，竟然通过了。</p>\r\n<p>  感谢！</p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记一次面试\">记一次面试:</h2>\r\n<p>  距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\r\n  这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是<code>CAD</code>方向，大概都是渲染相关的，所以还是符合我的预期。</p>\r\n<h2 id=\"start-interview\">Start Interview:</h2>\r\n<ul>\r\n<li>首先这是一个<code>Cpp</code>&amp;<code>图形</code>的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是<code>CPP</code>和<code>图形学</code>开发经验,\r\n可以预见大概的问题就是<code>Cpp</code>和图形相关的知识。</li>\r\n</ul>\r\n<hr />\r\n<h3 id=\"第一次面试\">第一次面试</h3>\r\n<h4 id=\"关于简历中提到的之前的项目\">关于简历中提到的之前的项目</h4>\r\n<ul>\r\n<li>部分和之前项目相关的问题</li>\r\n<li>一些技术上的解决方案</li>\r\n<li>......</li>\r\n</ul>\r\n<h4 id=\"cpp的新的语言特性\">CPP的新的语言特性</h4>\r\n<ul>\r\n<li><code>C++11</code>的新语言特性 - 比较常用的\r\n<ul>\r\n<li>智能指针</li>\r\n<li><code>auto</code>自动类型推导</li>\r\n<li>标准库的多线程</li>\r\n<li><code>lambda</code>表达式</li>\r\n</ul></li>\r\n<li>一些指针和引用相关的问题\r\n<ul>\r\n<li>指针是什么？</li>\r\n<li>引用是什么？</li>\r\n<li>两者的区别？</li>\r\n<li>内存分区的相关问题，如：\r\n<ul>\r\n<li>常量在程序中的的存储位置</li>\r\n<li>静态变量在什么位置</li>\r\n<li>......</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"图形相关的问题\">图形相关的问题</h4>\r\n<ul>\r\n<li>图形管线的问题\r\n<ul>\r\n<li>坐标变换相关的问题\r\n<ul>\r\n<li>投影</li>\r\n<li>视图</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>一些渲染上面的解决方案\r\n<ul>\r\n<li>大数据量的绘制</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"第二次面试\">第二次面试</h3>\r\n<p>  第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：</p>\r\n<ul>\r\n<li>个人介绍\r\n<ul>\r\n<li>基本信息</li>\r\n<li>求学经历</li>\r\n<li>......</li>\r\n</ul></li>\r\n<li>工作经历\r\n<ul>\r\n<li>项目经历</li>\r\n</ul></li>\r\n<li>未来的规划\r\n<ul>\r\n<li>职业规划</li>\r\n<li>个人规划</li>\r\n</ul></li>\r\n<li>个人爱好</li>\r\n</ul>\r\n<p> .......</p>\r\n<p>  后面部分就是关于这个介绍的提问了，无关痛痒。</p>\r\n<p>  一周以后......，在我以为黄了的时候，竟然通过了。</p>\r\n<p>  感谢！</p>\r\n"},{"title":"记一次面试","date":"2021-07-27T12:31:46.000Z","_content":"\n*和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......*\n\t目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的`C++ & Qt`，按照面试官的说法，这是一个纯`Qt`的岗位，所以接下来的问题大概全部是和`Qt`相关的，当然也会有部分C++的问题在其中。\n\n<font style=\"color:pink\">废话不多说，我们进入正题：</font>\n\n## C++部分的问题：\n\n- 第一部分是关于C++这门语言的，面向对象是什么？\n\n  ```C++\n   // OOP\n   // 封装,继承,多态\n  ```\n\n- 对于多态的理解?\n\n  ```C++ \n  // 首先是如何实现多态？\n  1. 多态发生在继承关系中。\n  2. 需要重写虚函数。\n  3. 父类的指针指向子类的对象。\n  4. 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。\n  ```\nexample：\n  ```C++\nclass A\n  {\n  public:\n      A(){std::cout<<\"A\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_A\"<<std::endl;\n      }\n  private:\n      int menber;\n  \n  };\n  \n  class B: public A\n  {\n  public:\n      B():A(){std::cout<<\"B\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_B\"<<std::endl;\n      }\n  };\n  \n  class D: public A\n  {\n  public:\n      D():A(){std::cout<<\"D\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_D\"<<std::endl;\n      }\n  };\n  \n  int main()\n  {\n      A * a = new A;\n      B * b = new B;\n      D * d = new D;\n  \n      A * ptr = b;\n      ptr->function_virtual();\n  \n      ptr = a;\n      ptr->function_virtual();\n  \n      ptr = d;\n      ptr->function_virtual();\n  \t\n      return 0;\n  }\n  \n  ```\n\t<font style=\"color:red\">结果如下：</font>\n\t![polymorphism](https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png \"polymorphism\")\n\n\n- 多态的实现 -- <font style=\"color:red\">虚函数表</font>\n\n  - 验证虚函数表：\n\n    ```C++\n    // 一个简单的C 不带有虚函数 \n    class C\n    {\n    public:\n        C(){std::cout<<\"C\"<<std::endl;}\n    private:\n        long long member;\n    };\n    ```\n\t<font style=\"color:red\">输出结果:</font> ![virtual_table](https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png \"virtual table 1\")\n  \t\n  \t![virtual table 2](https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png \"virtual table 2\")\n  \t\n  \t- 上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。\n\n---\n\n## Qt部分\n\n- 元对象系统\n- 窗口刷新机制\n- 内存托管(删除机制)\n- Qquick\n- Qt的布局\n\n\n\n## OPENGL部分\n\n- 缓冲(双缓冲)\n\n- 着色器程序(语言)\n\n  ","source":"_posts/记一次面试.md","raw":"---\ntitle: 记一次面试\ndate: 2021-07-27 20:31:46\ntags:\n---\n\n*和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......*\n\t目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的`C++ & Qt`，按照面试官的说法，这是一个纯`Qt`的岗位，所以接下来的问题大概全部是和`Qt`相关的，当然也会有部分C++的问题在其中。\n\n<font style=\"color:pink\">废话不多说，我们进入正题：</font>\n\n## C++部分的问题：\n\n- 第一部分是关于C++这门语言的，面向对象是什么？\n\n  ```C++\n   // OOP\n   // 封装,继承,多态\n  ```\n\n- 对于多态的理解?\n\n  ```C++ \n  // 首先是如何实现多态？\n  1. 多态发生在继承关系中。\n  2. 需要重写虚函数。\n  3. 父类的指针指向子类的对象。\n  4. 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。\n  ```\nexample：\n  ```C++\nclass A\n  {\n  public:\n      A(){std::cout<<\"A\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_A\"<<std::endl;\n      }\n  private:\n      int menber;\n  \n  };\n  \n  class B: public A\n  {\n  public:\n      B():A(){std::cout<<\"B\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_B\"<<std::endl;\n      }\n  };\n  \n  class D: public A\n  {\n  public:\n      D():A(){std::cout<<\"D\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_D\"<<std::endl;\n      }\n  };\n  \n  int main()\n  {\n      A * a = new A;\n      B * b = new B;\n      D * d = new D;\n  \n      A * ptr = b;\n      ptr->function_virtual();\n  \n      ptr = a;\n      ptr->function_virtual();\n  \n      ptr = d;\n      ptr->function_virtual();\n  \t\n      return 0;\n  }\n  \n  ```\n\t<font style=\"color:red\">结果如下：</font>\n\t![polymorphism](https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png \"polymorphism\")\n\n\n- 多态的实现 -- <font style=\"color:red\">虚函数表</font>\n\n  - 验证虚函数表：\n\n    ```C++\n    // 一个简单的C 不带有虚函数 \n    class C\n    {\n    public:\n        C(){std::cout<<\"C\"<<std::endl;}\n    private:\n        long long member;\n    };\n    ```\n\t<font style=\"color:red\">输出结果:</font> ![virtual_table](https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png \"virtual table 1\")\n  \t\n  \t![virtual table 2](https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png \"virtual table 2\")\n  \t\n  \t- 上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。\n\n---\n\n## Qt部分\n\n- 元对象系统\n- 窗口刷新机制\n- 内存托管(删除机制)\n- Qquick\n- Qt的布局\n\n\n\n## OPENGL部分\n\n- 缓冲(双缓冲)\n\n- 着色器程序(语言)\n\n  ","slug":"记一次面试","published":1,"updated":"2022-07-28T16:37:23.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mw002bqcda3pjg9029","content":"<p><em>和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......</em>\r\n目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的<code>C++ &amp; Qt</code>，按照面试官的说法，这是一个纯<code>Qt</code>的岗位，所以接下来的问题大概全部是和<code>Qt</code>相关的，当然也会有部分C++的问题在其中。</p>\r\n<p><font style=\"color:pink\">废话不多说，我们进入正题：</font></p>\r\n<h2 id=\"c部分的问题\">C++部分的问题：</h2>\r\n<ul>\r\n<li><p>第一部分是关于C++这门语言的，面向对象是什么？</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OOP</span></span><br><span class=\"line\"><span class=\"comment\">// 封装,继承,多态</span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>对于多态的理解?</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先是如何实现多态？</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 多态发生在继承关系中。</span><br><span class=\"line\"><span class=\"number\">2.</span> 需要重写虚函数。</span><br><span class=\"line\"><span class=\"number\">3.</span> 父类的指针指向子类的对象。</span><br><span class=\"line\"><span class=\"number\">4.</span> 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。</span><br></pre></td></tr></table></figure>\r\n<p>example： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> menber;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      B():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      D():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      A * a = <span class=\"keyword\">new</span> A;</span><br><span class=\"line\">      B * b = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">      D * d = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">  </span><br><span class=\"line\">      A * ptr = b;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = a;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = d;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  \t</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure> <font style=\"color:red\">结果如下：</font>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png\"\r\ntitle=\"polymorphism\" alt=\"polymorphism\" /></p></li>\r\n<li><p>多态的实现 -- <font style=\"color:red\">虚函数表</font></p>\r\n<ul>\r\n<li><p>验证虚函数表：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的C 不带有虚函数 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    C()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;C&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> member;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><font style=\"color:red\">输出结果:</font> <img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png\"\r\ntitle=\"virtual table 1\" alt=\"virtual_table\" /></p>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png\"\r\ntitle=\"virtual table 2\" alt=\"virtual table 2\" />\r\n<figcaption aria-hidden=\"true\">virtual table 2</figcaption>\r\n</figure>\r\n<ul>\r\n<li>上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"qt部分\">Qt部分</h2>\r\n<ul>\r\n<li>元对象系统</li>\r\n<li>窗口刷新机制</li>\r\n<li>内存托管(删除机制)</li>\r\n<li>Qquick</li>\r\n<li>Qt的布局</li>\r\n</ul>\r\n<h2 id=\"opengl部分\">OPENGL部分</h2>\r\n<ul>\r\n<li><p>缓冲(双缓冲)</p></li>\r\n<li><p>着色器程序(语言)</p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<p><em>和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......</em>\r\n目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的<code>C++ &amp; Qt</code>，按照面试官的说法，这是一个纯<code>Qt</code>的岗位，所以接下来的问题大概全部是和<code>Qt</code>相关的，当然也会有部分C++的问题在其中。</p>\r\n<p><font style=\"color:pink\">废话不多说，我们进入正题：</font></p>\r\n<h2 id=\"c部分的问题\">C++部分的问题：</h2>\r\n<ul>\r\n<li><p>第一部分是关于C++这门语言的，面向对象是什么？</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OOP</span></span><br><span class=\"line\"><span class=\"comment\">// 封装,继承,多态</span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>对于多态的理解?</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先是如何实现多态？</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 多态发生在继承关系中。</span><br><span class=\"line\"><span class=\"number\">2.</span> 需要重写虚函数。</span><br><span class=\"line\"><span class=\"number\">3.</span> 父类的指针指向子类的对象。</span><br><span class=\"line\"><span class=\"number\">4.</span> 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。</span><br></pre></td></tr></table></figure>\r\n<p>example： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> menber;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      B():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      D():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      A * a = <span class=\"keyword\">new</span> A;</span><br><span class=\"line\">      B * b = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">      D * d = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">  </span><br><span class=\"line\">      A * ptr = b;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = a;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = d;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  \t</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure> <font style=\"color:red\">结果如下：</font>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png\"\r\ntitle=\"polymorphism\" alt=\"polymorphism\" /></p></li>\r\n<li><p>多态的实现 -- <font style=\"color:red\">虚函数表</font></p>\r\n<ul>\r\n<li><p>验证虚函数表：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的C 不带有虚函数 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    C()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;C&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> member;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><font style=\"color:red\">输出结果:</font> <img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png\"\r\ntitle=\"virtual table 1\" alt=\"virtual_table\" /></p>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png\"\r\ntitle=\"virtual table 2\" alt=\"virtual table 2\" />\r\n<figcaption aria-hidden=\"true\">virtual table 2</figcaption>\r\n</figure>\r\n<ul>\r\n<li>上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"qt部分\">Qt部分</h2>\r\n<ul>\r\n<li>元对象系统</li>\r\n<li>窗口刷新机制</li>\r\n<li>内存托管(删除机制)</li>\r\n<li>Qquick</li>\r\n<li>Qt的布局</li>\r\n</ul>\r\n<h2 id=\"opengl部分\">OPENGL部分</h2>\r\n<ul>\r\n<li><p>缓冲(双缓冲)</p></li>\r\n<li><p>着色器程序(语言)</p></li>\r\n</ul>\r\n"},{"title":"迟到的毕业总结","date":"2021-03-18T15:59:55.000Z","_content":"\n <font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！\n\n​\t离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。\n\n对于大学，我仿佛有千言万语，却是欲语还休 。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！\n\n\n\n待续。。。\n\n---\n\n\n\n`2021-7-26`\n\n​\t下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\n当然一切都会是新的，我也是。\n\n​\t祝愿我将迎接新的美好，朋友我来了！\n\n","source":"_posts/迟到的毕业总结.md","raw":"---\ntitle: 迟到的毕业总结\ndate: 2021-03-18 23:59:55\ncategories:\n- bun\n- university \ntags:\n - university \n - conclusion\n---\n\n <font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！\n\n​\t离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。\n\n对于大学，我仿佛有千言万语，却是欲语还休 。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！\n\n\n\n待续。。。\n\n---\n\n\n\n`2021-7-26`\n\n​\t下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\n当然一切都会是新的，我也是。\n\n​\t祝愿我将迎接新的美好，朋友我来了！\n\n","slug":"迟到的毕业总结","published":1,"updated":"2022-07-28T16:37:23.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl69ir6mx002gqcda6efbgqke","content":"<p><font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</p>\r\n<p>​ 离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。</p>\r\n<p>对于大学，我仿佛有千言万语，却是欲语还休\r\n。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！</p>\r\n<p>待续。。。</p>\r\n<hr />\r\n<p><code>2021-7-26</code></p>\r\n<p>​\r\n下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\r\n当然一切都会是新的，我也是。</p>\r\n<p>​ 祝愿我将迎接新的美好，朋友我来了！</p>\r\n","site":{"data":{}},"excerpt":"","more":"<p><font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</p>\r\n<p>​ 离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。</p>\r\n<p>对于大学，我仿佛有千言万语，却是欲语还休\r\n。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！</p>\r\n<p>待续。。。</p>\r\n<hr />\r\n<p><code>2021-7-26</code></p>\r\n<p>​\r\n下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\r\n当然一切都会是新的，我也是。</p>\r\n<p>​ 祝愿我将迎接新的美好，朋友我来了！</p>\r\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl69ir6m90003qcdabkb0e0jv","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mg000kqcda690l734z"},{"post_id":"cl69ir6mf000iqcdafsilbio2","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mj000rqcdadwrlai2s"},{"post_id":"cl69ir6mb0007qcda2gss38yk","category_id":"cl69ir6mf000gqcda518b28ck","_id":"cl69ir6mk000wqcdahjeob2bx"},{"post_id":"cl69ir6mg000jqcda2pmif6of","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mk000zqcdabe98bsx9"},{"post_id":"cl69ir6mk000yqcda1dz1hesa","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mm0019qcda1st8db3d"},{"post_id":"cl69ir6m60001qcdaeup5ceaa","category_id":"cl69ir6ma0004qcdadpla6jba","_id":"cl69ir6mo001dqcda59aj2lyt"},{"post_id":"cl69ir6m60001qcdaeup5ceaa","category_id":"cl69ir6mj000uqcda6zr27yjr","_id":"cl69ir6mp001hqcda07bzgev0"},{"post_id":"cl69ir6ml0015qcda9gurg8aj","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mq001lqcda4njh8sqw"},{"post_id":"cl69ir6mm0018qcda5rf3crys","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mq001pqcdadsfghs2w"},{"post_id":"cl69ir6mo001cqcda7l1e5na2","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mr001tqcda2of5cqaw"},{"post_id":"cl69ir6me000eqcdadqsn9pmr","category_id":"cl69ir6mm001aqcda4rpkbdfp","_id":"cl69ir6mt001wqcda4d83f03z"},{"post_id":"cl69ir6mo001gqcda5kgpbfac","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mu0021qcdagete039i"},{"post_id":"cl69ir6mp001kqcdaaucmaac0","category_id":"cl69ir6ma0004qcdadpla6jba","_id":"cl69ir6mv0024qcdaf7nn782q"},{"post_id":"cl69ir6mp001kqcdaaucmaac0","category_id":"cl69ir6mj000uqcda6zr27yjr","_id":"cl69ir6mw0029qcda0wb5595q"},{"post_id":"cl69ir6mq001oqcda7u63686u","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6mw002cqcda8ugs0ynd"},{"post_id":"cl69ir6mh000oqcdafniu8chm","category_id":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6mx002hqcdacrc8dtd7"},{"post_id":"cl69ir6mh000oqcdafniu8chm","category_id":"cl69ir6mr001qqcda318k1jv1","_id":"cl69ir6my002jqcdac5vyb5kd"},{"post_id":"cl69ir6mr001vqcdahx444ihe","category_id":"cl69ir6md000bqcdab7qo9dyc","_id":"cl69ir6my002nqcda40vahhje"},{"post_id":"cl69ir6mv0023qcda593mdbov","category_id":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6mz002pqcda35lpa7xw"},{"post_id":"cl69ir6mv0023qcda593mdbov","category_id":"cl69ir6mu001yqcda1usf6lpt","_id":"cl69ir6mz002tqcdadgqr45q2"},{"post_id":"cl69ir6me000fqcda9llafqtg","category_id":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6n00031qcdad4sa6onr"},{"post_id":"cl69ir6me000fqcda9llafqtg","category_id":"cl69ir6mz002sqcda3l44dicr","_id":"cl69ir6n00034qcda2rvi7p2m"},{"post_id":"cl69ir6mu0020qcdacu456fze","category_id":"cl69ir6n00032qcdadyu2agkp","_id":"cl69ir6n1003bqcdadiv832th"},{"post_id":"cl69ir6mc0009qcdadepd4igr","category_id":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6n2003hqcdahfvn0bdc"},{"post_id":"cl69ir6mc0009qcdadepd4igr","category_id":"cl69ir6mu001yqcda1usf6lpt","_id":"cl69ir6n2003kqcda8own4vdb"},{"post_id":"cl69ir6mc0009qcdadepd4igr","category_id":"cl69ir6n10037qcda6nqf5vgv","_id":"cl69ir6n2003mqcda1vdt583r"},{"post_id":"cl69ir6mv0028qcda9f2qaa8s","category_id":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6n3003qqcdab22u8p1j"},{"post_id":"cl69ir6mv0028qcda9f2qaa8s","category_id":"cl69ir6n1003dqcda6hix2ckh","_id":"cl69ir6n3003sqcdaabs51ksf"},{"post_id":"cl69ir6mi000qqcda2v2ra40o","category_id":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6n5003wqcdac6wy1rj3"},{"post_id":"cl69ir6mi000qqcda2v2ra40o","category_id":"cl69ir6mr001qqcda318k1jv1","_id":"cl69ir6n5003yqcda2ocv6793"},{"post_id":"cl69ir6mi000qqcda2v2ra40o","category_id":"cl69ir6n2003iqcda221acidi","_id":"cl69ir6n50042qcda69ueeegs"},{"post_id":"cl69ir6mx002gqcda6efbgqke","category_id":"cl69ir6ma0004qcdadpla6jba","_id":"cl69ir6n60044qcda8dw24xfc"},{"post_id":"cl69ir6mx002gqcda6efbgqke","category_id":"cl69ir6n3003oqcdag0kpdu50","_id":"cl69ir6n60046qcdahwfj35ts"},{"post_id":"cl69ir6mj000vqcda2w7fa7ss","category_id":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6n60048qcda2j227p1b"},{"post_id":"cl69ir6mj000vqcda2w7fa7ss","category_id":"cl69ir6mr001qqcda318k1jv1","_id":"cl69ir6n6004aqcda74yl580p"},{"post_id":"cl69ir6mj000vqcda2w7fa7ss","category_id":"cl69ir6n2003iqcda221acidi","_id":"cl69ir6n6004cqcda0fhm07c7"},{"post_id":"cl69ir6mr001sqcdac1yu5f8a","category_id":"cl69ir6n0002xqcda5kbzew8v","_id":"cl69ir6n6004dqcda06sedhcn"},{"post_id":"cl69ir6mr001sqcdac1yu5f8a","category_id":"cl69ir6n60045qcda4sjrh97x","_id":"cl69ir6n6004eqcdae7zqf4h5"},{"post_id":"cl69ir6mc000aqcdahu77h825","category_id":"cl69ir6mg000lqcda4uesgpxd","_id":"cl69ir6n7004fqcda3lv05h7c"},{"post_id":"cl69ir6mc000aqcdahu77h825","category_id":"cl69ir6mr001qqcda318k1jv1","_id":"cl69ir6n7004gqcda7kgvhccp"},{"post_id":"cl69ir6mc000aqcdahu77h825","category_id":"cl69ir6n50040qcdagupzh2b7","_id":"cl69ir6n7004hqcdad0t57mc0"},{"post_id":"cl69ir6mc000aqcdahu77h825","category_id":"cl69ir6n6004bqcda0jfhd8g9","_id":"cl69ir6n7004iqcda3pab8hni"}],"PostTag":[{"post_id":"cl69ir6m60001qcdaeup5ceaa","tag_id":"cl69ir6ma0005qcda7567g5of","_id":"cl69ir6md000dqcdacvl41br2"},{"post_id":"cl69ir6mf000iqcdafsilbio2","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mh000nqcdahdgle45b"},{"post_id":"cl69ir6mf000iqcdafsilbio2","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6mi000pqcda1szrbqin"},{"post_id":"cl69ir6m90003qcdabkb0e0jv","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mj000tqcdaex3l5shd"},{"post_id":"cl69ir6m90003qcdabkb0e0jv","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6mk000xqcdac4hzhl7n"},{"post_id":"cl69ir6mg000jqcda2pmif6of","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6ml0011qcdadmuoevz9"},{"post_id":"cl69ir6mg000jqcda2pmif6of","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6ml0014qcda5l6e27dr"},{"post_id":"cl69ir6mb0007qcda2gss38yk","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mm0016qcdabq7j42wt"},{"post_id":"cl69ir6mk000yqcda1dz1hesa","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mo001bqcda83o3d14s"},{"post_id":"cl69ir6mk000yqcda1dz1hesa","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6mo001eqcda8or08i5w"},{"post_id":"cl69ir6mc0009qcdadepd4igr","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mp001jqcda9xuieg8n"},{"post_id":"cl69ir6mc0009qcdadepd4igr","tag_id":"cl69ir6mk0010qcda735s1sks","_id":"cl69ir6mq001mqcda4k52ep0f"},{"post_id":"cl69ir6ml0015qcda9gurg8aj","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mr001rqcdad9rx4yru"},{"post_id":"cl69ir6ml0015qcda9gurg8aj","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6mr001uqcda37zvgldk"},{"post_id":"cl69ir6mm0018qcda5rf3crys","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mu001zqcdaheom5wrt"},{"post_id":"cl69ir6mm0018qcda5rf3crys","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6mu0022qcda8hlw4em6"},{"post_id":"cl69ir6mo001cqcda7l1e5na2","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mv0026qcda7kj1b1q1"},{"post_id":"cl69ir6mo001cqcda7l1e5na2","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6mw002aqcda0wz45cmb"},{"post_id":"cl69ir6mo001gqcda5kgpbfac","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mx002eqcda02tzc0zw"},{"post_id":"cl69ir6mo001gqcda5kgpbfac","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6my002iqcdabftd4r7p"},{"post_id":"cl69ir6mc000aqcdahu77h825","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6my002lqcda2qm8253b"},{"post_id":"cl69ir6mc000aqcdahu77h825","tag_id":"cl69ir6mk0010qcda735s1sks","_id":"cl69ir6mz002oqcda4cl6cooh"},{"post_id":"cl69ir6mq001oqcda7u63686u","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mz002rqcda33xd2kqs"},{"post_id":"cl69ir6mq001oqcda7u63686u","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6mz002uqcdaepa3c97c"},{"post_id":"cl69ir6mr001vqcdahx444ihe","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6mz002wqcdaaflu9xrr"},{"post_id":"cl69ir6mr001vqcdahx444ihe","tag_id":"cl69ir6mf000hqcda02lxg3zq","_id":"cl69ir6n0002yqcda490q6l6w"},{"post_id":"cl69ir6me000eqcdadqsn9pmr","tag_id":"cl69ir6mq001nqcda33dofj6n","_id":"cl69ir6n0002zqcda5akgbfq0"},{"post_id":"cl69ir6me000eqcdadqsn9pmr","tag_id":"cl69ir6mt001xqcdacu3hahc0","_id":"cl69ir6n00033qcda5zyjbtgo"},{"post_id":"cl69ir6me000fqcda9llafqtg","tag_id":"cl69ir6mv0025qcdaakrmdes6","_id":"cl69ir6n00035qcda4miffqmj"},{"post_id":"cl69ir6mh000oqcdafniu8chm","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6n10038qcda5e763xpb"},{"post_id":"cl69ir6mh000oqcdafniu8chm","tag_id":"cl69ir6mk0010qcda735s1sks","_id":"cl69ir6n10039qcdad0es56vm"},{"post_id":"cl69ir6mi000qqcda2v2ra40o","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6n1003cqcdaan91405z"},{"post_id":"cl69ir6mi000qqcda2v2ra40o","tag_id":"cl69ir6mk0010qcda735s1sks","_id":"cl69ir6n2003eqcdac5ja4con"},{"post_id":"cl69ir6mj000vqcda2w7fa7ss","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6n2003gqcdacfcwcm0v"},{"post_id":"cl69ir6mj000vqcda2w7fa7ss","tag_id":"cl69ir6mk0010qcda735s1sks","_id":"cl69ir6n2003jqcda70t686iw"},{"post_id":"cl69ir6mp001kqcdaaucmaac0","tag_id":"cl69ir6mz002vqcda5mn4a3ix","_id":"cl69ir6n2003lqcda9xnn89a6"},{"post_id":"cl69ir6mr001sqcdac1yu5f8a","tag_id":"cl69ir6n00030qcda7nl5221h","_id":"cl69ir6n3003pqcda1n631yfr"},{"post_id":"cl69ir6mu0020qcdacu456fze","tag_id":"cl69ir6n10036qcda2ulyesg9","_id":"cl69ir6n3003rqcda7esd7for"},{"post_id":"cl69ir6mv0023qcda593mdbov","tag_id":"cl69ir6n1003aqcdaf0fje61i","_id":"cl69ir6n4003vqcdaezs7bx6m"},{"post_id":"cl69ir6mv0028qcda9f2qaa8s","tag_id":"cl69ir6n2003fqcda50166hzo","_id":"cl69ir6n5003xqcda5nl54cmw"},{"post_id":"cl69ir6mv0028qcda9f2qaa8s","tag_id":"cl69ir6md000cqcdafy5cdy2f","_id":"cl69ir6n50041qcda126n6u11"},{"post_id":"cl69ir6mv0028qcda9f2qaa8s","tag_id":"cl69ir6n2003nqcda5alod1g2","_id":"cl69ir6n60043qcda69suh2dt"},{"post_id":"cl69ir6mx002gqcda6efbgqke","tag_id":"cl69ir6n3003tqcdadzox2mu4","_id":"cl69ir6n60047qcdaabmeei2k"},{"post_id":"cl69ir6mx002gqcda6efbgqke","tag_id":"cl69ir6n1003aqcdaf0fje61i","_id":"cl69ir6n60049qcda5m328al5"}],"Tag":[{"name":"mylife","_id":"cl69ir6ma0005qcda7567g5of"},{"name":"cpp","_id":"cl69ir6md000cqcdafy5cdy2f"},{"name":"sort","_id":"cl69ir6mf000hqcda02lxg3zq"},{"name":"osg","_id":"cl69ir6mk0010qcda735s1sks"},{"name":"Games202","_id":"cl69ir6mq001nqcda33dofj6n"},{"name":"Shadow","_id":"cl69ir6mt001xqcdacu3hahc0"},{"name":"Git","_id":"cl69ir6mv0025qcdaakrmdes6"},{"name":"intraduce","_id":"cl69ir6mz002vqcda5mn4a3ix"},{"name":"vector","_id":"cl69ir6n00030qcda7nl5221h"},{"name":"windows","_id":"cl69ir6n10036qcda2ulyesg9"},{"name":"conclusion","_id":"cl69ir6n1003aqcdaf0fje61i"},{"name":"openGL","_id":"cl69ir6n2003fqcda50166hzo"},{"name":"computer graphics","_id":"cl69ir6n2003nqcda5alod1g2"},{"name":"university","_id":"cl69ir6n3003tqcdadzox2mu4"}]}}