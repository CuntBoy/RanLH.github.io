{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/content/lum_arrow_2.png","path":"images/content/lum_arrow_2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/content/uint16_t.png","path":"images/content/uint16_t.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/content/lum_arrow_1.png","path":"images/content/lum_arrow_1.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"9198ffd83e0d8aa2ea2bb40dea5654d0fa6523a4","modified":1627310797648},{"_id":"source/_posts/2021年终总结.md","hash":"5bfd785b6da1fdad1a2d06ddc2f9b808847e99f6","modified":1646052664584},{"_id":"source/_posts/Bucket-Sort.md","hash":"3ba1f3f43800fa36115dca88bd2397c136497c28","modified":1636301402848},{"_id":"source/_posts/Bug奇遇记-uint16-t.md","hash":"c30320a084223b543544c126a81c9c6204a6bf3b","modified":1627308604730},{"_id":"source/_posts/Dynamic-drawing-of-osg-vertex-buffer-objects.md","hash":"b91e465a5b9bed61c4fb2c2cd467136cb6575e44","modified":1636270979546},{"_id":"source/_posts/Games202-ShadowMap.md","hash":"12f2fc5bf1df2537302c20c210541e5a385f1940","modified":1639408715100},{"_id":"source/_posts/Heap.md","hash":"5bd91b771738d1dc43736424a51ab22746971c4d","modified":1635171458899},{"_id":"source/_posts/Multi-KeyWord-Sort.md","hash":"064a74da7b4fab2e79731e7859826356bf2f3b0b","modified":1636301396755},{"_id":"source/_posts/OSG-HUD.md","hash":"0191ebda309fe95b3ce285bf8482d7e1c1367b6f","modified":1627311044785},{"_id":"source/_posts/OSG踩坑记-模型共享-模型颜色修改.md","hash":"44edd3c59c004ed4c451640cc2abf841b617ae23","modified":1616311200906},{"_id":"source/_posts/OSG踩坑记-默认光源.md","hash":"fed998864a3a510c5c4176e4ca857645bbe2d79d","modified":1617466897094},{"_id":"source/_posts/Physical-Sort.md","hash":"e01ab88636078f9e30366265e02ab30904422ac4","modified":1636291485302},{"_id":"source/_posts/QuickSort.md","hash":"45914277a7ce07b50db3b17c2af2fb0cf4621e21","modified":1636127920443},{"_id":"source/_posts/Selection-sort.md","hash":"27bf32b78858504ca56ee9fc0e6e5af4b71d4c60","modified":1635173140922},{"_id":"source/_posts/Shell-Sort.md","hash":"61f2a4b0047edfce5bc2bf7b98b779b7c39f6c19","modified":1635255707156},{"_id":"source/_posts/Table-Sort.md","hash":"da41e33ec3b59d9e1c5edcee6c7af86e8b7835c0","modified":1636279276285},{"_id":"source/_posts/baozi.md","hash":"6e6318e27d3ec7068353ec3a10f20ab2cf1e8d2c","modified":1616081462868},{"_id":"source/_posts/sort-bubble-insertion.md","hash":"dcbb77153b1179a4fe53a33693f2e9d0de4eda94","modified":1634828235739},{"_id":"source/_posts/归并排序.md","hash":"1da2a41b4a4be478f3ef5dafd30156a96a86da0d","modified":1635349229782},{"_id":"source/_posts/微信多开.md","hash":"8c0398737fdb894f66fd4b488a6958204c6de0f7","modified":1646058970964},{"_id":"source/_posts/记一次总结.md","hash":"34185aa15a207f83aa5fdd2deac40c8354738e7c","modified":1634461448967},{"_id":"source/_posts/记一次面试-1.md","hash":"c268bca1415cf2058aeb21903b8ca3327e5b595a","modified":1646057070600},{"_id":"source/_posts/记一次面试.md","hash":"88ff765d5ee87f29f3a9872cab1704b810dd78e8","modified":1627394396475},{"_id":"source/_posts/迟到的毕业总结.md","hash":"a44bf0651ec40c83c015cff3770325edc7761677","modified":1627313243088},{"_id":"source/about/index.md","hash":"6bb81b3f8277110633a932eb61e5a499581b7fac","modified":1616080991423},{"_id":"source/categories/index.md","hash":"236083d68d8025f61f92d0e0b4e204b0ef153490","modified":1616081451461},{"_id":"source/tags/index.md","hash":"45274de8daf24abfab25dd6babb51ab7b579a5db","modified":1616075136421},{"_id":"source/home/index.md","hash":"bc87602b4927ef3728ae4c8a1b5ef29679bff7f8","modified":1615994815303},{"_id":"source/uploads/wechat-qcode.jpg","hash":"5e32da2bbb5828e9050d948db5f9f36731ecfccc","modified":1616077164542},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615911450781},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615911450678},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615911450678},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615911450761},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615911450762},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615911450763},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615911450779},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1615911450780},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1615911450649},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1615911450648},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1615911450649},{"_id":"themes/next/.gitignore_back","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1615911627301},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1615911450653},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1615911450653},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1615911450654},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1615911450654},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1615911627302},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1615911450655},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1615911627303},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1615911627304},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1615911627307},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1615911450657},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1615911627336},{"_id":"themes/next/.git_back/ORIG_HEAD","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1615911648554},{"_id":"themes/next/.git_back/config","hash":"7730d1eab9d8b2e2e1de022501f7dc3597984c9d","modified":1615911627383},{"_id":"themes/next/.git_back/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1615911627386},{"_id":"themes/next/.git_back/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1615911439979},{"_id":"themes/next/.git_back/index","hash":"3b00331ae852b5eccd67a0de0c3b56819d75dab0","modified":1658654859779},{"_id":"themes/next/.git_back/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1615911450636},{"_id":"themes/next/.git_back/FETCH_HEAD","hash":"d5932b39c178826b7db21fb111fe59f356b4e644","modified":1658654901811},{"_id":"themes/next/.github_back/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1615911627298},{"_id":"themes/next/.github_back/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1615911627299},{"_id":"themes/next/.github_back/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1615911627300},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1615911627307},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1615911627308},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1615911627309},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1615911627310},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1615911627311},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1615911627311},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1615911627312},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1615911627312},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1615911627313},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1615911627314},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1615911627314},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1615911627315},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1615911627316},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1615911627317},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1615911627316},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1615911627318},{"_id":"themes/next/_config.yml","hash":"f9ea8eb7275ce803a1cb519bb20ae4ce93cd5c26","modified":1627314428605},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1615911627319},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1615911627332},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1615911450697},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1615911627334},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1615911627335},{"_id":"themes/next/.github_back/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1615911450651},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1615911627336},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1615911450700},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1615911450701},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1615911627338},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1615911450703},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1615911450876},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1615911450875},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1615911450876},{"_id":"themes/next/.git_back/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1615911439989},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1616077668769},{"_id":"themes/next/.git_back/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1615911439980},{"_id":"themes/next/.git_back/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1615911439981},{"_id":"themes/next/.git_back/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1615911439982},{"_id":"themes/next/.git_back/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1615911439981},{"_id":"themes/next/.git_back/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1615911439980},{"_id":"themes/next/.git_back/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1615911439985},{"_id":"themes/next/.git_back/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1615911439984},{"_id":"themes/next/.git_back/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1615911439986},{"_id":"themes/next/.git_back/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1615911439987},{"_id":"themes/next/.git_back/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1615911439986},{"_id":"themes/next/.git_back/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1615911439987},{"_id":"themes/next/.git_back/logs/HEAD","hash":"db01ca4ce57397c6984a70c8b97712009391ccbf","modified":1615911627386},{"_id":"themes/next/.git_back/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1615911439988},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1615911450664},{"_id":"themes/next/.git_back/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1615911439988},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1615911450664},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1615911627320},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1615911627321},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1615911450666},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1615991074506},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1615991114647},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1615911627324},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"eb617491224b4032efcbfb36744794ab7f125390","modified":1627313622776},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1615911627325},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1615911627327},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1615911450672},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1615911450672},{"_id":"themes/next/layout/_partials/head.swig","hash":"959d564c4a39f2330f87db3bf49939eaa5c65889","modified":1646060619252},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1615911450673},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1615911450677},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1615911450677},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1615911627329},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1615911450688},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1615911450688},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1615911450688},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1615911627332},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1615911450690},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1615911450690},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1615911450691},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1615911627339},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1615911450705},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1615911450705},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1615911450705},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1615911450706},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1615911450706},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1615911450707},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1615911450707},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1615911450708},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1615911450781},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1615911450782},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1615911627363},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1615911450782},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1615911450783},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1615911450784},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1615911450785},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1615911450786},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1615911450787},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1615911450787},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1615911450788},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1615911627363},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1615911627363},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1615911450788},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1615911627364},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1615911450789},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1615911450789},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1615911450790},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1615911450790},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1615911450671},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1615911450671},{"_id":"themes/next/.git_back/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1615911627377},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1615911450674},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1615911450673},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1615911450674},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1615911450675},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1615911450675},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1615911450676},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1615911627327},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1615911450677},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1615911450678},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1615911450679},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1615911450685},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1615911450686},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1615911450686},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1615911627331},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1615911450686},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1615911627331},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1615911450687},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1615911627331},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1615911450687},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1615911627329},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1615911450680},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1615911450681},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1615911450680},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1615911450681},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1615911450681},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1615911627329},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1615911450682},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1615911627330},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1615911450683},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1615911450683},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1615911450684},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1615911450684},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1615911450694},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1615911450694},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1615911450695},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1615911450696},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1615911450761},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1615911627357},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1615911450763},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1615911627360},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1615911627361},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1615911627362},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"205569e2291d875b3759a2235c73d8b570f9266c","modified":1616082406796},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1615911627362},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1615911450791},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1615911450792},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1615911627365},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1615911450792},{"_id":"themes/next/source/images/content/uint16_t.png","hash":"358f7e3360e36f58906be387117f62e96a8d0812","modified":1616159086227},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1615911450793},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1615911450793},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1615911627365},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1615911627366},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1615911450795},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1615911450796},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1615911627368},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1615911450806},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1615911450810},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1615911627370},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1615911450812},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1615911450812},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1615911450829},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1615911450828},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1615911450829},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1615911450829},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1615911450830},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1615911450825},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1615911450824},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1615911450825},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1615911450825},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1615911450847},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1615911450851},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1615911450851},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1615911450852},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1615911450852},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1615911450853},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1615911450853},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1615911627371},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1615911627372},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1615911627372},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1615911450854},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1615911450854},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1615911450855},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1615911450855},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1615911450856},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1615911450856},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1615911450856},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1615911450857},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1615911450857},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1615911450858},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1615911450858},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1615911450859},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1615911450859},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1615911450860},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1615911450861},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1615911450861},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1615911450862},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1615911450870},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1615911450870},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1615911450873},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1615911450873},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1615911450874},{"_id":"themes/next/.git_back/logs/refs/heads/master","hash":"2ad2a1fe50b6b0a929c37cfa403a453f98610c80","modified":1615911627379},{"_id":"themes/next/.git_back/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1615911450641},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1615911450693},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1615911450693},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1615911627340},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1615911450709},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1615911627341},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1615911450710},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1615911450710},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1615911627344},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1615911450745},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1615911450758},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1615911627356},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1615911450759},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1615911627356},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1615911450759},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1615911450760},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1615911450760},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1615911627358},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1615911450765},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1615911450765},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1615911450766},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1615911450767},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1615911627358},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1615911450769},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1615911450770},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1615911450773},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1615911450773},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1615911627359},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1615911450774},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1615911450774},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1615911450775},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1615911450776},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1615911450776},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1615911450776},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1615911627360},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1615911450777},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1615911627367},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1615911450801},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1615911450804},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1615911450805},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1615911450813},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1615911450813},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1615911450814},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1615911450814},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1615911450815},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1615911450815},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1615911450822},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1615911450823},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1615911450824},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1615911450831},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1615911450831},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1615911450832},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1615911450827},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1615911450827},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1615911450869},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1615911450869},{"_id":"themes/next/.git_back/logs/refs/remotes/origin/HEAD","hash":"42e65153069048a47feb0e32d08cdd31145dace7","modified":1615911450641},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1615911627342},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1615911450712},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1615911450712},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1615911450713},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1615911450713},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1615911450713},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1615911450714},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1615911627342},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1615911450715},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1615911627343},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1615911450718},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1615911450718},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1615911450719},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1615911450719},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1615911627345},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1615911450722},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1615911450723},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1615911450724},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1615911450726},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1615911627345},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1615911627346},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1615911450728},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1615911627347},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1615911450730},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1615911450730},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1615911627347},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1615911450731},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1615911627348},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1615911627348},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1615911627349},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1615911450737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1615911627350},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1615911450739},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1615911450739},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1615911450741},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1615911627351},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1615911450743},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1615911627351},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1615911450745},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1615911450746},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1615911450747},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1615911627352},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1615911450748},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1615911450748},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1615911627353},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1615911450750},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1615911450751},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1615911450752},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1615911450753},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1615911450754},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1615911450755},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1615911450755},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1615911627354},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1615911450756},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1615911450756},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1615911450757},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1615911627354},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1615911627355},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1615911450771},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1615911450772},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1615911450775},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1615911450798},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1615911450798},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1615911450799},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1615911450800},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1615911627368},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1615911450818},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1615911450819},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1615911450820},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1615911450820},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1615911450821},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1615911450822},{"_id":"themes/next/source/images/favicon.png","hash":"7f9622c7ef0208cef5c86ad7924c2a3f55b5160e","modified":1616311481523},{"_id":"themes/next/source/images/content/lum_arrow_2.png","hash":"8c7bbcef1106bcd81e6ee27da6b54066dbeeb859","modified":1616154383476},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1615911450849},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1615911450803},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1615911450846},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1615911450847},{"_id":"themes/next/source/images/content/lum_arrow_1.png","hash":"911f34359978022ce1fcc2d23a9eac1ff3fa82cf","modified":1616154383009},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1615911450836},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1615911450838},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1615911450845},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1615911450872},{"_id":"themes/next/.git_back/objects/pack/pack-994003caf4e868238a52cc0b4355cbe4f0b7b9fa.idx","hash":"02b37064661d6969f31773d621df717a9a0a2281","modified":1615911450562},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1615911450809},{"_id":"themes/next/source/images/background.jpg","hash":"977631c766110769f406e77354d0a6eafd4c8455","modified":1579092368892},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1615911450866},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1615911450842},{"_id":"themes/next/.git_back/objects/pack/pack-994003caf4e868238a52cc0b4355cbe4f0b7b9fa.pack","hash":"ebe2eeac984080af3fa05175209b940879c9ec8e","modified":1615911450556},{"_id":"themes/next/source/uploads/avatar.png","hash":"d5c8d6782c9c86499bd0b6c314c66b5709a0dc9e","modified":1616082727402},{"_id":"public/atom.xml","hash":"e5fa000358f13c7f799714c01f2b713f99a7f351","modified":1658657959677},{"_id":"public/sitemap.xml","hash":"4c57195b9883d5ebc7d26ae18b18be05dcabd2f3","modified":1658657959677},{"_id":"public/search.xml","hash":"2d3d2038c74616769203909af758477efdf1a27c","modified":1658657959677},{"_id":"public/about/index.html","hash":"b824c2638ea8938d5a0f502e596ffda452a98d09","modified":1658657959677},{"_id":"public/categories/index.html","hash":"5f07fff1124c1a009a80b77564954a5c2fdc5ca9","modified":1658657959677},{"_id":"public/tags/index.html","hash":"9e52a26cbea29a9ccd700da5c9aa52eb6601b306","modified":1658657959677},{"_id":"public/home/index.html","hash":"9fe5d97738ba3cecb2fa95345b44ae8e1b7ecca5","modified":1658657959677},{"_id":"public/2022/02/28/微信多开/index.html","hash":"59fd03a07e94ad2123b20564b38e18b0e8abdd7e","modified":1658657959677},{"_id":"public/2022/01/16/记一次面试-1/index.html","hash":"3a0f9dce7c77a4e02096cb3ac8828b3d9d868f90","modified":1658657959677},{"_id":"public/2022/01/16/2021年终总结/index.html","hash":"e9e159631dfb37a41eb64f5477e1c23d671fc355","modified":1658657959677},{"_id":"public/2021/12/13/Games202-ShadowMap/index.html","hash":"10f999e8e401acb2011449add5534e0d5fffb2a2","modified":1658657959677},{"_id":"public/2021/11/07/Multi-KeyWord-Sort/index.html","hash":"e1b7056d0ced3d4e1a0b754e1fd3ae9231f52d05","modified":1658657959677},{"_id":"public/2021/11/07/Bucket-Sort/index.html","hash":"ba3682374619d8e233819bc9898ff5afc899eedb","modified":1658657959677},{"_id":"public/2021/11/07/Physical-Sort/index.html","hash":"d15a255d5ed8b2fd570dbcc84ab43c39a9d65891","modified":1658657959677},{"_id":"public/2021/11/07/Dynamic-drawing-of-osg-vertex-buffer-objects/index.html","hash":"bb9f76d9fe24a41f01cb3a34aec1aade2fddc034","modified":1658657959677},{"_id":"public/2021/11/07/Table-Sort/index.html","hash":"e02938c30b94de7c9adefa97e2252439cea10e4c","modified":1658657959677},{"_id":"public/2021/10/28/QuickSort/index.html","hash":"1a2e1faef7e80869e6e5a19c58d068603c66d732","modified":1658657959677},{"_id":"public/2021/10/26/归并排序/index.html","hash":"7c6f68a2cfd45fcf6d9efe70a8efc7ea057e6c2d","modified":1658657959677},{"_id":"public/2021/10/26/Shell-Sort/index.html","hash":"169424651e4b60b75347b0d08645941ba495bf05","modified":1658657959677},{"_id":"public/2021/10/25/Selection-sort/index.html","hash":"79aa3ad437c08d33ba041ecf77d609d400e5aaf4","modified":1658657959677},{"_id":"public/2021/10/24/Heap/index.html","hash":"285b34dca0d6a84f19bed41802603e842533ad71","modified":1658657959677},{"_id":"public/2021/10/19/sort-bubble-insertion/index.html","hash":"ad3a153e7135e5323968a9b2f537eeb98a8316c5","modified":1658657959677},{"_id":"public/2021/10/17/记一次总结/index.html","hash":"f2df58a3c6152d6b16b80e4ecabde94acf6a17b3","modified":1658657959677},{"_id":"public/2021/07/27/记一次面试/index.html","hash":"0eef5e1cf31acb354a3109309d94b4e0c8f10cf2","modified":1658657959677},{"_id":"public/2021/07/26/OSG-HUD/index.html","hash":"0f4076b93f613b99bdfe0e498cfca5dd07c0d481","modified":1658657959677},{"_id":"public/2021/04/04/OSG踩坑记-默认光源/index.html","hash":"932d341908a699c7376995730d3826004297c2bf","modified":1658657959677},{"_id":"public/2021/03/20/OSG踩坑记-模型共享-模型颜色修改/index.html","hash":"3c33c87057109cabacd582866efcf6928229227d","modified":1658657959677},{"_id":"public/2021/03/19/Bug奇遇记-uint16-t/index.html","hash":"8465e7dc949bd121334a7079748a97c620e345b8","modified":1658657959677},{"_id":"public/2021/03/18/迟到的毕业总结/index.html","hash":"90759065459d80edde2c785add2595463c42ec48","modified":1658657959677},{"_id":"public/2021/03/16/baozi/index.html","hash":"ea27f497df6e868748d8b2428be68389811a04b7","modified":1658657959677},{"_id":"public/archives/index.html","hash":"a48596f34dae0e6cfffedbb4902b91c934caf2c0","modified":1658657959677},{"_id":"public/archives/page/2/index.html","hash":"5ef6c0e698dba918ec4861c28250dc680ae407ee","modified":1658657959677},{"_id":"public/archives/page/3/index.html","hash":"a879fdc0c0761bb31a1bb04e9954fff546a99ae6","modified":1658657959677},{"_id":"public/archives/2021/index.html","hash":"c0313efe9ce141458c7cf6bfb7b8ac982c8c0e12","modified":1658657959677},{"_id":"public/archives/2021/page/2/index.html","hash":"630792ab5d23b271786ae76f1350702b7956275b","modified":1658657959677},{"_id":"public/archives/2021/03/index.html","hash":"e77a478ada7dd6695a1289ac7391b3d1e99540f7","modified":1658657959677},{"_id":"public/archives/2021/04/index.html","hash":"7f3d968329399cd60e89c510548d23f41fac4bc0","modified":1658657959677},{"_id":"public/archives/2021/07/index.html","hash":"3daf78b82e50700679bd8af10d90a6a3e5a66f8f","modified":1658657959677},{"_id":"public/archives/2021/10/index.html","hash":"f9405e67872781ee6b62247e4d65ddf7f77cdf81","modified":1658657959677},{"_id":"public/archives/2021/11/index.html","hash":"318f8a450ade82606374b16ac09f4788b4078f23","modified":1658657959677},{"_id":"public/archives/2021/12/index.html","hash":"ba6628e97dacec56b926aec9bbd5d4a00029f0e5","modified":1658657959677},{"_id":"public/archives/2022/index.html","hash":"51938e7f233aa6877326dfe2aefa5bf751e6a890","modified":1658657959677},{"_id":"public/archives/2022/01/index.html","hash":"bb29b969b9ab8310660ced60b87da4becea49da1","modified":1658657959677},{"_id":"public/archives/2022/02/index.html","hash":"b40a3cbb338c9d1defff010f85816a428f91227c","modified":1658657959677},{"_id":"public/categories/bun/index.html","hash":"dde6914685518e7054de7ba2a80962af89a1800f","modified":1658657959677},{"_id":"public/categories/Algorithm/index.html","hash":"6dc57fa4605a57eca073bf4f7d1a79785859e506","modified":1658657959677},{"_id":"public/categories/works/index.html","hash":"231db35c097d9e97db9a9867407b3675dcb1b7fc","modified":1658657959677},{"_id":"public/categories/bun/life/index.html","hash":"33043d443334680b6142887023a0fb4ae4e096a0","modified":1658657959677},{"_id":"public/categories/Computer-Graph/index.html","hash":"9cf707c3447d4ae5af9f9ef3a6f004cda759435b","modified":1658657959677},{"_id":"public/categories/works/GF/index.html","hash":"0d5ff3a1af2f9ae6c33c77d5078c35bdcb34ce71","modified":1658657959677},{"_id":"public/categories/works/HJ/index.html","hash":"cebeb60c35f61eb8a0a300cecfaf6cb3a952aff8","modified":1658657959677},{"_id":"public/categories/Tips/index.html","hash":"888bf1c7845ae46c240e3c29ea3f681569756c10","modified":1658657959677},{"_id":"public/categories/works/GF/data-type/index.html","hash":"0fb6aac63113c95f2afbeafeffba37fa905c7a79","modified":1658657959677},{"_id":"public/categories/works/interview/index.html","hash":"1c12bc49f2038bd57201427c15ef5223fd7ddaf9","modified":1658657959677},{"_id":"public/categories/works/GF/OSG/index.html","hash":"ede0ad4c15f1f20b5f85d8be51f1928e02b2ed93","modified":1658657959677},{"_id":"public/categories/bun/university/index.html","hash":"144205d607766ffe3b8087e2d78ce2dee10c4e2f","modified":1658657959677},{"_id":"public/categories/works/HJ/OSG/index.html","hash":"1eced18024bc559e7852d34b840d0782a22f9f3f","modified":1658657959677},{"_id":"public/categories/works/GF/data-type/bugs/index.html","hash":"bc7908057a30525195b472bae17d3f1a388c9b65","modified":1658657959677},{"_id":"public/index.html","hash":"3488591b84258cedd27d4e773d9702adc3240602","modified":1658657959677},{"_id":"public/page/2/index.html","hash":"5251908f7f63e26fe8d94b76ceeb02559808a759","modified":1658657959677},{"_id":"public/page/3/index.html","hash":"a7dac5a61210ad4a65d7dded998722b46b7fd01c","modified":1658657959677},{"_id":"public/tags/mylife/index.html","hash":"5c0c2680e555e2cccbf33318c50248c034a3d3ba","modified":1658657959677},{"_id":"public/tags/cpp/index.html","hash":"31c833932e61da5c6dc3cfcf87f8ed3f3304ecf8","modified":1658657959677},{"_id":"public/tags/cpp/page/2/index.html","hash":"179d0faf050688c64ee805ac0280f3d41812f470","modified":1658657959677},{"_id":"public/tags/sort/index.html","hash":"1749f13ce245c134442b0e30a6278cf851abd673","modified":1658657959677},{"_id":"public/tags/osg/index.html","hash":"4e02bf33ad5bc08c2f905347758f9915bafec80c","modified":1658657959677},{"_id":"public/tags/Games202/index.html","hash":"015ee0d5cdf343ededf5479aac0a423e7ef7476b","modified":1658657959677},{"_id":"public/tags/Shadow/index.html","hash":"8d05c6e1365ea6f4d391af89faba3508bfdd03b7","modified":1658657959677},{"_id":"public/tags/intraduce/index.html","hash":"753f976916f7f418d5f1c723b95ee4dc997ee752","modified":1658657959677},{"_id":"public/tags/windows/index.html","hash":"9fecfd79355ae2d17d1a202f0d0cef320c71e31a","modified":1658657959677},{"_id":"public/tags/conclusion/index.html","hash":"0ee678fe60511eb424ce041d07778987b92333de","modified":1658657959677},{"_id":"public/tags/openGL/index.html","hash":"01d2c3a4734b8b73b1016c03524d83b7662d5e08","modified":1658657959677},{"_id":"public/tags/computer-graphics/index.html","hash":"e403134377cc35f12147fe9da096db2e93805ad6","modified":1658657959677},{"_id":"public/tags/university/index.html","hash":"2d0c78632c55c05bef7517b5c50054194583e4e8","modified":1658657959677},{"_id":"public/CNAME","hash":"9198ffd83e0d8aa2ea2bb40dea5654d0fa6523a4","modified":1658657959677},{"_id":"public/uploads/wechat-qcode.jpg","hash":"5e32da2bbb5828e9050d948db5f9f36731ecfccc","modified":1658657959677},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1658657959677},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1658657959677},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1658657959677},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1658657959677},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1658657959677},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1658657959677},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1658657959677},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1658657959677},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1658657959677},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1658657959677},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1658657959677},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1658657959677},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1658657959677},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1658657959677},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1658657959677},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1658657959677},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1658657959677},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1658657959677},{"_id":"public/images/content/uint16_t.png","hash":"358f7e3360e36f58906be387117f62e96a8d0812","modified":1658657959677},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1658657959677},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1658657959677},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1658657959677},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1658657959677},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1658657959677},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1658657959677},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1658657959677},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1658657959677},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1658657959677},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1658657959677},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1658657959677},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1658657959677},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1658657959677},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1658657959677},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1658657959677},{"_id":"public/images/favicon.png","hash":"7f9622c7ef0208cef5c86ad7924c2a3f55b5160e","modified":1658657959677},{"_id":"public/images/content/lum_arrow_2.png","hash":"8c7bbcef1106bcd81e6ee27da6b54066dbeeb859","modified":1658657959677},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1658657959677},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1658657959677},{"_id":"public/images/content/lum_arrow_1.png","hash":"911f34359978022ce1fcc2d23a9eac1ff3fa82cf","modified":1658657959677},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1658657959677},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1658657959677},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1658657959677},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1658657959677},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1658657959677},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1658657959677},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1658657959677},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1658657959677},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1658657959677},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1658657959677},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1658657959677},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1658657959677},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1658657959677},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1658657959677},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1658657959677},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1658657959677},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1658657959677},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1658657959677},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1658657959677},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1658657959677},{"_id":"public/lib/fastclick/README.html","hash":"c88ed76304392b9e77b266fcbbc05f443c5df133","modified":1658657959677},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1658657959677},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1658657959677},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1658657959677},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1658657959677},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1658657959677},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1658657959677},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1658657959677},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1658657959677},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1658657959677},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1658657959677},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1658657959677},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1658657959677},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1658657959677},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1658657959677},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1658657959677},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1658657959677},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1658657959677},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1658657959677},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1658657959677},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1658657959677},{"_id":"public/css/main.css","hash":"38321af2008300756846eb631b02136c7e549077","modified":1658657959677},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1658657959677},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1658657959677},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1658657959677},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1658657959677},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1658657959677},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1658657959677},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1658657959677},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1658657959677},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1658657959677},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1658657959677},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1658657959677},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1658657959677},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1658657959677},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1658657959677},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1658657959677},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1658657959677},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1658657959677},{"_id":"public/images/background.jpg","hash":"977631c766110769f406e77354d0a6eafd4c8455","modified":1658657959677},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1658657959677},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1658657959677},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1658657959677},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1658657959677},{"_id":"public/uploads/avatar.png","hash":"d5c8d6782c9c86499bd0b6c314c66b5709a0dc9e","modified":1658657959677}],"Category":[{"name":"bun","_id":"cl5z64h3w0004q0uu2bgxe5up"},{"name":"Algorithm","_id":"cl5z64h41000bq0uu248551dz"},{"name":"works","_id":"cl5z64h45000gq0uuf4u33n9q"},{"name":"life","parent":"cl5z64h3w0004q0uu2bgxe5up","_id":"cl5z64h4d000tq0uu436wbfx4"},{"name":"Computer Graph","_id":"cl5z64h4g000zq0uugids5alp"},{"name":"GF","parent":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h4r001aq0uu9p0n6gt5"},{"name":"HJ","parent":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h560024q0uu12vjb4nt"},{"name":"Tips","_id":"cl5z64h57002bq0uu82oi0ve0"},{"name":"data type","parent":"cl5z64h4r001aq0uu9p0n6gt5","_id":"cl5z64h59002hq0uu75sg1z6t"},{"name":"interview","parent":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h5c002qq0uuhabfauw7"},{"name":"OSG","parent":"cl5z64h4r001aq0uu9p0n6gt5","_id":"cl5z64h5e002vq0uu53mu05ai"},{"name":"university","parent":"cl5z64h3w0004q0uu2bgxe5up","_id":"cl5z64h5f0031q0uu7b121nzp"},{"name":"OSG","parent":"cl5z64h560024q0uu12vjb4nt","_id":"cl5z64h5j003eq0uucn06d2mt"},{"name":"bugs","parent":"cl5z64h59002hq0uu75sg1z6t","_id":"cl5z64h5k003kq0uuf2ue3f3j"}],"Data":[],"Page":[{"title":"About me","date":"2021-03-17T14:19:57.000Z","type":"about","_content":"\n#### Current Status\n\n- 一个无心上班的，三流软件开发人员。\n\n#### Work\n\n- 图形开发（图形展示`2D` & `3D`），桌面软件开发。\n\n#### Work Tags\n\n- `Cpp`、`OSG`、`OpenGL`、`Qt`、`VS`、`Git`、`Math`。","source":"about/index.md","raw":"---\ntitle: \"About me\"\ndate: 2021-03-17 22:19:57\ntype: \"about\"\n---\n\n#### Current Status\n\n- 一个无心上班的，三流软件开发人员。\n\n#### Work\n\n- 图形开发（图形展示`2D` & `3D`），桌面软件开发。\n\n#### Work Tags\n\n- `Cpp`、`OSG`、`OpenGL`、`Qt`、`VS`、`Git`、`Math`。","updated":"2021-03-18T15:23:11.423Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl5z64h3n0000q0uudsau65kq","content":"<h4 id=\"Current-Status\"><a href=\"#Current-Status\" class=\"headerlink\" title=\"Current Status\"></a>Current Status</h4><ul>\n<li>一个无心上班的，三流软件开发人员。</li>\n</ul>\n<h4 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h4><ul>\n<li>图形开发（图形展示<code>2D</code> &amp; <code>3D</code>），桌面软件开发。</li>\n</ul>\n<h4 id=\"Work-Tags\"><a href=\"#Work-Tags\" class=\"headerlink\" title=\"Work Tags\"></a>Work Tags</h4><ul>\n<li><code>Cpp</code>、<code>OSG</code>、<code>OpenGL</code>、<code>Qt</code>、<code>VS</code>、<code>Git</code>、<code>Math</code>。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Current-Status\"><a href=\"#Current-Status\" class=\"headerlink\" title=\"Current Status\"></a>Current Status</h4><ul>\n<li>一个无心上班的，三流软件开发人员。</li>\n</ul>\n<h4 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h4><ul>\n<li>图形开发（图形展示<code>2D</code> &amp; <code>3D</code>），桌面软件开发。</li>\n</ul>\n<h4 id=\"Work-Tags\"><a href=\"#Work-Tags\" class=\"headerlink\" title=\"Work Tags\"></a>Work Tags</h4><ul>\n<li><code>Cpp</code>、<code>OSG</code>、<code>OpenGL</code>、<code>Qt</code>、<code>VS</code>、<code>Git</code>、<code>Math</code>。</li>\n</ul>\n"},{"title":"all of categories","date":"2021-03-17T15:18:00.000Z","type":"categories","comments":0,"layout":"categories","_content":"\n### ","source":"categories/index.md","raw":"---\ntitle: \"all of categories\"\ndate: 2021-03-17 23:18:00\ntype: \"categories\"\ncomments: false\nlayout: \"categories\"\n---\n\n### ","updated":"2021-03-18T15:30:51.461Z","path":"categories/index.html","_id":"cl5z64h3t0002q0uuhih989is","content":"<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3>"},{"title":"万物皆可贴标签","date":"2021-03-17T14:20:05.000Z","type":"tags","comments":0,"layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 万物皆可贴标签\ndate: 2021-03-17 22:20:05\ntype: \"tags\"\ncomments: false\nlayout: \"tags\"\n---\n\n","updated":"2021-03-18T13:45:36.421Z","path":"tags/index.html","_id":"cl5z64h3x0006q0uu74me3wwn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"home","date":"2021-03-17T14:45:38.000Z","type":"home","_content":"","source":"home/index.md","raw":"---\ntitle: home\ndate: 2021-03-17 22:45:38\ntype: \"home\"\n---\n","updated":"2021-03-17T15:26:55.303Z","path":"home/index.html","comments":1,"layout":"page","_id":"cl5z64h3z0008q0uucyn6dp86","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2021年终总结","date":"2022-01-15T16:43:19.000Z","_content":"\n### 我起伏的2021年:\n\n- 2021年鸡毛蒜皮\n\n....\n\n### 我的关于2021年的大事件：\n\n#### 1、换了工作\n\n#### 2、离开了那个度过了五年的城市\n\n#### 3、 换了工作的城市\n\n#### 4、告别了好友\n\n#### 5、见了阔怕已久的朋友\n\n#### 6、又一次决定换工作 \n\n- 面试了一个环境可能更好的工作\n\n### 一、我换工作这件事\n\n<p>先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。</p>\n&ensp;&ensp;离开我的上一个岗位的原因颇多,当然究其原因，我觉得`马老板`说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\n&ensp;&ensp;新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。\n\n### 二、离开济南\n\n&ensp;&ensp;我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\n&ensp;&ensp;若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\n&ensp;&ensp;我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以`成都`应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\n&ensp;&ensp;然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\n&ensp;&ensp;然后我来了`北京`.....,只能说，造化弄人。\n\n### 三、告别好友\n\n&ensp;&ensp;我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的`二哥`还有`杨哥`,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\n&ensp;&ensp;从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。\n\n### 四、见了好久不见的朋友\n\n&ensp;&ensp;2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\n&ensp;&ensp;有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\n&ensp;&ensp;同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。\n\n### 五、又一次决定换工作\n\n&ensp;&ensp;决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\n&ensp;&ensp;又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！\n\n\n\n","source":"_posts/2021年终总结.md","raw":"---\ntitle: 2021年终总结\ndate: 2022-01-16 00:43:19\ncategories:\n  - bun\n  - life\ntags:\t\n  - mylife\n---\n\n### 我起伏的2021年:\n\n- 2021年鸡毛蒜皮\n\n....\n\n### 我的关于2021年的大事件：\n\n#### 1、换了工作\n\n#### 2、离开了那个度过了五年的城市\n\n#### 3、 换了工作的城市\n\n#### 4、告别了好友\n\n#### 5、见了阔怕已久的朋友\n\n#### 6、又一次决定换工作 \n\n- 面试了一个环境可能更好的工作\n\n### 一、我换工作这件事\n\n<p>先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。</p>\n&ensp;&ensp;离开我的上一个岗位的原因颇多,当然究其原因，我觉得`马老板`说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\n&ensp;&ensp;新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。\n\n### 二、离开济南\n\n&ensp;&ensp;我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\n&ensp;&ensp;若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\n&ensp;&ensp;我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以`成都`应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\n&ensp;&ensp;然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\n&ensp;&ensp;然后我来了`北京`.....,只能说，造化弄人。\n\n### 三、告别好友\n\n&ensp;&ensp;我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的`二哥`还有`杨哥`,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\n&ensp;&ensp;从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。\n\n### 四、见了好久不见的朋友\n\n&ensp;&ensp;2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\n&ensp;&ensp;有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\n&ensp;&ensp;同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。\n\n### 五、又一次决定换工作\n\n&ensp;&ensp;决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\n&ensp;&ensp;又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！\n\n\n\n","slug":"2021年终总结","published":1,"updated":"2022-02-28T12:51:04.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h3q0001q0uug10cfnkg","content":"<h3 id=\"我起伏的2021年\"><a href=\"#我起伏的2021年\" class=\"headerlink\" title=\"我起伏的2021年:\"></a>我起伏的2021年:</h3><ul>\n<li>2021年鸡毛蒜皮</li>\n</ul>\n<p>….</p>\n<h3 id=\"我的关于2021年的大事件：\"><a href=\"#我的关于2021年的大事件：\" class=\"headerlink\" title=\"我的关于2021年的大事件：\"></a>我的关于2021年的大事件：</h3><h4 id=\"1、换了工作\"><a href=\"#1、换了工作\" class=\"headerlink\" title=\"1、换了工作\"></a>1、换了工作</h4><h4 id=\"2、离开了那个度过了五年的城市\"><a href=\"#2、离开了那个度过了五年的城市\" class=\"headerlink\" title=\"2、离开了那个度过了五年的城市\"></a>2、离开了那个度过了五年的城市</h4><h4 id=\"3、-换了工作的城市\"><a href=\"#3、-换了工作的城市\" class=\"headerlink\" title=\"3、 换了工作的城市\"></a>3、 换了工作的城市</h4><h4 id=\"4、告别了好友\"><a href=\"#4、告别了好友\" class=\"headerlink\" title=\"4、告别了好友\"></a>4、告别了好友</h4><h4 id=\"5、见了阔怕已久的朋友\"><a href=\"#5、见了阔怕已久的朋友\" class=\"headerlink\" title=\"5、见了阔怕已久的朋友\"></a>5、见了阔怕已久的朋友</h4><h4 id=\"6、又一次决定换工作\"><a href=\"#6、又一次决定换工作\" class=\"headerlink\" title=\"6、又一次决定换工作\"></a>6、又一次决定换工作</h4><ul>\n<li>面试了一个环境可能更好的工作</li>\n</ul>\n<h3 id=\"一、我换工作这件事\"><a href=\"#一、我换工作这件事\" class=\"headerlink\" title=\"一、我换工作这件事\"></a>一、我换工作这件事</h3><p>先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。</p>\n&ensp;&ensp;离开我的上一个岗位的原因颇多,当然究其原因，我觉得`马老板`说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\n&ensp;&ensp;新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。\n\n<h3 id=\"二、离开济南\"><a href=\"#二、离开济南\" class=\"headerlink\" title=\"二、离开济南\"></a>二、离开济南</h3><p>&ensp;&ensp;我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。<br>&ensp;&ensp;若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息……<br>&ensp;&ensp;我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以<code>成都</code>应该是个不错的选择，我开始面试，将目标公司地域选到了成都…..<br>&ensp;&ensp;然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。<br>&ensp;&ensp;然后我来了<code>北京</code>…..,只能说，造化弄人。</p>\n<h3 id=\"三、告别好友\"><a href=\"#三、告别好友\" class=\"headerlink\" title=\"三、告别好友\"></a>三、告别好友</h3><p>&ensp;&ensp;我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的<code>二哥</code>还有<code>杨哥</code>,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。<br>&ensp;&ensp;从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。</p>\n<h3 id=\"四、见了好久不见的朋友\"><a href=\"#四、见了好久不见的朋友\" class=\"headerlink\" title=\"四、见了好久不见的朋友\"></a>四、见了好久不见的朋友</h3><p>&ensp;&ensp;2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。<br>&ensp;&ensp;有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。<br>&ensp;&ensp;同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。</p>\n<h3 id=\"五、又一次决定换工作\"><a href=\"#五、又一次决定换工作\" class=\"headerlink\" title=\"五、又一次决定换工作\"></a>五、又一次决定换工作</h3><p>&ensp;&ensp;决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。<br>&ensp;&ensp;又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"我起伏的2021年\"><a href=\"#我起伏的2021年\" class=\"headerlink\" title=\"我起伏的2021年:\"></a>我起伏的2021年:</h3><ul>\n<li>2021年鸡毛蒜皮</li>\n</ul>\n<p>….</p>\n<h3 id=\"我的关于2021年的大事件：\"><a href=\"#我的关于2021年的大事件：\" class=\"headerlink\" title=\"我的关于2021年的大事件：\"></a>我的关于2021年的大事件：</h3><h4 id=\"1、换了工作\"><a href=\"#1、换了工作\" class=\"headerlink\" title=\"1、换了工作\"></a>1、换了工作</h4><h4 id=\"2、离开了那个度过了五年的城市\"><a href=\"#2、离开了那个度过了五年的城市\" class=\"headerlink\" title=\"2、离开了那个度过了五年的城市\"></a>2、离开了那个度过了五年的城市</h4><h4 id=\"3、-换了工作的城市\"><a href=\"#3、-换了工作的城市\" class=\"headerlink\" title=\"3、 换了工作的城市\"></a>3、 换了工作的城市</h4><h4 id=\"4、告别了好友\"><a href=\"#4、告别了好友\" class=\"headerlink\" title=\"4、告别了好友\"></a>4、告别了好友</h4><h4 id=\"5、见了阔怕已久的朋友\"><a href=\"#5、见了阔怕已久的朋友\" class=\"headerlink\" title=\"5、见了阔怕已久的朋友\"></a>5、见了阔怕已久的朋友</h4><h4 id=\"6、又一次决定换工作\"><a href=\"#6、又一次决定换工作\" class=\"headerlink\" title=\"6、又一次决定换工作\"></a>6、又一次决定换工作</h4><ul>\n<li>面试了一个环境可能更好的工作</li>\n</ul>\n<h3 id=\"一、我换工作这件事\"><a href=\"#一、我换工作这件事\" class=\"headerlink\" title=\"一、我换工作这件事\"></a>一、我换工作这件事</h3><p>先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。</p>\n&ensp;&ensp;离开我的上一个岗位的原因颇多,当然究其原因，我觉得`马老板`说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\n&ensp;&ensp;新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。\n\n<h3 id=\"二、离开济南\"><a href=\"#二、离开济南\" class=\"headerlink\" title=\"二、离开济南\"></a>二、离开济南</h3><p>&ensp;&ensp;我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。<br>&ensp;&ensp;若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息……<br>&ensp;&ensp;我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以<code>成都</code>应该是个不错的选择，我开始面试，将目标公司地域选到了成都…..<br>&ensp;&ensp;然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。<br>&ensp;&ensp;然后我来了<code>北京</code>…..,只能说，造化弄人。</p>\n<h3 id=\"三、告别好友\"><a href=\"#三、告别好友\" class=\"headerlink\" title=\"三、告别好友\"></a>三、告别好友</h3><p>&ensp;&ensp;我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的<code>二哥</code>还有<code>杨哥</code>,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。<br>&ensp;&ensp;从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。</p>\n<h3 id=\"四、见了好久不见的朋友\"><a href=\"#四、见了好久不见的朋友\" class=\"headerlink\" title=\"四、见了好久不见的朋友\"></a>四、见了好久不见的朋友</h3><p>&ensp;&ensp;2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。<br>&ensp;&ensp;有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。<br>&ensp;&ensp;同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。</p>\n<h3 id=\"五、又一次决定换工作\"><a href=\"#五、又一次决定换工作\" class=\"headerlink\" title=\"五、又一次决定换工作\"></a>五、又一次决定换工作</h3><p>&ensp;&ensp;决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。<br>&ensp;&ensp;又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！</p>\n"},{"title":"Bucket Sort and Cardinality sort","date":"2021-11-07T13:34:19.000Z","_content":"\n### 桶排序\n\n- `T(N,M) = O(M+N)`,M 个桶的情况\n  - N >> M的时候是相对教优秀的算法\n  - M >> N ???\n\n- 假设我们有N = 10个整数，N ∈ [0,999],(此时 M = 1000)；我们便不能在线性时间下完成排序。\n\n### 基数排序：按照数字的进制排序（10）\n\n- example: \n- input: 64 8 216 512 27 729 0 1 343 125 \n  - 使用次位优先(Least Significant Digit)\n  - 先按照个位数将元素放到对应的桶Pass1\n  - 按照十位放到对应的桶中\n\n| Bucket |            0             |            1             |            2             |             3              |             4             |             5              | 6                          |             7             |            8             |             9              |\n| :----: | :----------------------: | :----------------------: | :----------------------: | :------------------------: | :-----------------------: | :------------------------: | -------------------------- | :-----------------------: | :----------------------: | :------------------------: |\n| Pass 1(个位) | <font color=red>0</font> | <font color=red>1</font> | 51<font color=red>2</font> | 34<font color=red>3</font> | 6<font color=red>4</font> | 12<font color=red>5</font> | 21<font color=red>6</font> | 2<font color=red>7</font> | <font color=red>8</font> | 72<font color=red>9</font> |\n| Pass 2(十位) |         0<br>1<br>8         | 512<br>216 | 125<br>27<br>729 |                            |            343            |                            | 64<br>                     |                           |                          |                            |\n| Pass 3 (百位) | 0<br/>1<br/>8<br/>27<br/>64 | 125 | 216 |            343             |                           |            512             |                            |            729            |                          |                            |\n\n- 最终的顺序，分别从每个桶中顺序读取即可。\n\n#### 时间复杂度： `T= O(P(N+B))`\n\n- 较好情况：取决于基数-多少个桶 (B << N时差不多是一个线性复杂度的算法)\n\n","source":"_posts/Bucket-Sort.md","raw":"---\ntitle: Bucket Sort and Cardinality sort\ndate: 2021-11-07 21:34:19\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n### 桶排序\n\n- `T(N,M) = O(M+N)`,M 个桶的情况\n  - N >> M的时候是相对教优秀的算法\n  - M >> N ???\n\n- 假设我们有N = 10个整数，N ∈ [0,999],(此时 M = 1000)；我们便不能在线性时间下完成排序。\n\n### 基数排序：按照数字的进制排序（10）\n\n- example: \n- input: 64 8 216 512 27 729 0 1 343 125 \n  - 使用次位优先(Least Significant Digit)\n  - 先按照个位数将元素放到对应的桶Pass1\n  - 按照十位放到对应的桶中\n\n| Bucket |            0             |            1             |            2             |             3              |             4             |             5              | 6                          |             7             |            8             |             9              |\n| :----: | :----------------------: | :----------------------: | :----------------------: | :------------------------: | :-----------------------: | :------------------------: | -------------------------- | :-----------------------: | :----------------------: | :------------------------: |\n| Pass 1(个位) | <font color=red>0</font> | <font color=red>1</font> | 51<font color=red>2</font> | 34<font color=red>3</font> | 6<font color=red>4</font> | 12<font color=red>5</font> | 21<font color=red>6</font> | 2<font color=red>7</font> | <font color=red>8</font> | 72<font color=red>9</font> |\n| Pass 2(十位) |         0<br>1<br>8         | 512<br>216 | 125<br>27<br>729 |                            |            343            |                            | 64<br>                     |                           |                          |                            |\n| Pass 3 (百位) | 0<br/>1<br/>8<br/>27<br/>64 | 125 | 216 |            343             |                           |            512             |                            |            729            |                          |                            |\n\n- 最终的顺序，分别从每个桶中顺序读取即可。\n\n#### 时间复杂度： `T= O(P(N+B))`\n\n- 较好情况：取决于基数-多少个桶 (B << N时差不多是一个线性复杂度的算法)\n\n","slug":"Bucket-Sort","published":1,"updated":"2021-11-07T16:10:02.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h3u0003q0uu4ni49jxd","content":"<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><ul>\n<li><p><code>T(N,M) = O(M+N)</code>,M 个桶的情况</p>\n<ul>\n<li>N &gt;&gt; M的时候是相对教优秀的算法</li>\n<li>M &gt;&gt; N ???</li>\n</ul>\n</li>\n<li><p>假设我们有N = 10个整数，N ∈ [0,999],(此时 M = 1000)；我们便不能在线性时间下完成排序。</p>\n</li>\n</ul>\n<h3 id=\"基数排序：按照数字的进制排序（10）\"><a href=\"#基数排序：按照数字的进制排序（10）\" class=\"headerlink\" title=\"基数排序：按照数字的进制排序（10）\"></a>基数排序：按照数字的进制排序（10）</h3><ul>\n<li>example: </li>\n<li>input: 64 8 216 512 27 729 0 1 343 125 <ul>\n<li>使用次位优先(Least Significant Digit)</li>\n<li>先按照个位数将元素放到对应的桶Pass1</li>\n<li>按照十位放到对应的桶中</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Bucket</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th>6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Pass 1(个位)</td>\n<td align=\"center\"><font color=\"red\">0</font></td>\n<td align=\"center\"><font color=\"red\">1</font></td>\n<td align=\"center\">51<font color=\"red\">2</font></td>\n<td align=\"center\">34<font color=\"red\">3</font></td>\n<td align=\"center\">6<font color=\"red\">4</font></td>\n<td align=\"center\">12<font color=\"red\">5</font></td>\n<td>21<font color=\"red\">6</font></td>\n<td align=\"center\">2<font color=\"red\">7</font></td>\n<td align=\"center\"><font color=\"red\">8</font></td>\n<td align=\"center\">72<font color=\"red\">9</font></td>\n</tr>\n<tr>\n<td align=\"center\">Pass 2(十位)</td>\n<td align=\"center\">0<br>1<br>8</td>\n<td align=\"center\">512<br>216</td>\n<td align=\"center\">125<br>27<br>729</td>\n<td align=\"center\"></td>\n<td align=\"center\">343</td>\n<td align=\"center\"></td>\n<td>64<br></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">Pass 3 (百位)</td>\n<td align=\"center\">0<br>1<br>8<br>27<br>64</td>\n<td align=\"center\">125</td>\n<td align=\"center\">216</td>\n<td align=\"center\">343</td>\n<td align=\"center\"></td>\n<td align=\"center\">512</td>\n<td></td>\n<td align=\"center\">729</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>最终的顺序，分别从每个桶中顺序读取即可。</li>\n</ul>\n<h4 id=\"时间复杂度：-T-O-P-N-B\"><a href=\"#时间复杂度：-T-O-P-N-B\" class=\"headerlink\" title=\"时间复杂度： T= O(P(N+B))\"></a>时间复杂度： <code>T= O(P(N+B))</code></h4><ul>\n<li>较好情况：取决于基数-多少个桶 (B &lt;&lt; N时差不多是一个线性复杂度的算法)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><ul>\n<li><p><code>T(N,M) = O(M+N)</code>,M 个桶的情况</p>\n<ul>\n<li>N &gt;&gt; M的时候是相对教优秀的算法</li>\n<li>M &gt;&gt; N ???</li>\n</ul>\n</li>\n<li><p>假设我们有N = 10个整数，N ∈ [0,999],(此时 M = 1000)；我们便不能在线性时间下完成排序。</p>\n</li>\n</ul>\n<h3 id=\"基数排序：按照数字的进制排序（10）\"><a href=\"#基数排序：按照数字的进制排序（10）\" class=\"headerlink\" title=\"基数排序：按照数字的进制排序（10）\"></a>基数排序：按照数字的进制排序（10）</h3><ul>\n<li>example: </li>\n<li>input: 64 8 216 512 27 729 0 1 343 125 <ul>\n<li>使用次位优先(Least Significant Digit)</li>\n<li>先按照个位数将元素放到对应的桶Pass1</li>\n<li>按照十位放到对应的桶中</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Bucket</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n<th align=\"center\">4</th>\n<th align=\"center\">5</th>\n<th>6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">9</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Pass 1(个位)</td>\n<td align=\"center\"><font color=\"red\">0</font></td>\n<td align=\"center\"><font color=\"red\">1</font></td>\n<td align=\"center\">51<font color=\"red\">2</font></td>\n<td align=\"center\">34<font color=\"red\">3</font></td>\n<td align=\"center\">6<font color=\"red\">4</font></td>\n<td align=\"center\">12<font color=\"red\">5</font></td>\n<td>21<font color=\"red\">6</font></td>\n<td align=\"center\">2<font color=\"red\">7</font></td>\n<td align=\"center\"><font color=\"red\">8</font></td>\n<td align=\"center\">72<font color=\"red\">9</font></td>\n</tr>\n<tr>\n<td align=\"center\">Pass 2(十位)</td>\n<td align=\"center\">0<br>1<br>8</td>\n<td align=\"center\">512<br>216</td>\n<td align=\"center\">125<br>27<br>729</td>\n<td align=\"center\"></td>\n<td align=\"center\">343</td>\n<td align=\"center\"></td>\n<td>64<br></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">Pass 3 (百位)</td>\n<td align=\"center\">0<br>1<br>8<br>27<br>64</td>\n<td align=\"center\">125</td>\n<td align=\"center\">216</td>\n<td align=\"center\">343</td>\n<td align=\"center\"></td>\n<td align=\"center\">512</td>\n<td></td>\n<td align=\"center\">729</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>最终的顺序，分别从每个桶中顺序读取即可。</li>\n</ul>\n<h4 id=\"时间复杂度：-T-O-P-N-B\"><a href=\"#时间复杂度：-T-O-P-N-B\" class=\"headerlink\" title=\"时间复杂度： T= O(P(N+B))\"></a>时间复杂度： <code>T= O(P(N+B))</code></h4><ul>\n<li>较好情况：取决于基数-多少个桶 (B &lt;&lt; N时差不多是一个线性复杂度的算法)</li>\n</ul>\n"},{"title":"Bug奇遇记-uint16_t","date":"2021-03-19T12:47:11.000Z","_content":"\n### uint16_t \n\n- 标准定义中：\n\n```c++\ntypedef unsigned short  uint16_t; // max == _UI16_MAX 0xffffu \n```\n\n![uint16_t](https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png \"uint16\")\n\n#### 问题：\n\n- <font color=red>这是一个粗心的问题</font>\n\n在我正在实现的功能中有一个数据遍历的部分，我使用了`uint16_t`类型作为索引的类型，但是`uint16_t`数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！\n\n---\n\n### 正确的结果展示：\n\n![lum_2](https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png \"result\")\n\n\n\n![right result](https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png \"Result\")\n\n","source":"_posts/Bug奇遇记-uint16-t.md","raw":"---\ntitle: Bug奇遇记-uint16_t\ndate: 2021-03-19 20:47:11\ncategories:\n- works\n- GF\n- data type\n- bugs\ntags:\n - cpp\n - osg\n---\n\n### uint16_t \n\n- 标准定义中：\n\n```c++\ntypedef unsigned short  uint16_t; // max == _UI16_MAX 0xffffu \n```\n\n![uint16_t](https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png \"uint16\")\n\n#### 问题：\n\n- <font color=red>这是一个粗心的问题</font>\n\n在我正在实现的功能中有一个数据遍历的部分，我使用了`uint16_t`类型作为索引的类型，但是`uint16_t`数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！\n\n---\n\n### 正确的结果展示：\n\n![lum_2](https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png \"result\")\n\n\n\n![right result](https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png \"Result\")\n\n","slug":"Bug奇遇记-uint16-t","published":1,"updated":"2021-07-26T14:10:04.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h3y0007q0uu4z0e3trk","content":"<h3 id=\"uint16-t\"><a href=\"#uint16-t\" class=\"headerlink\" title=\"uint16_t\"></a>uint16_t</h3><ul>\n<li>标准定义中：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  <span class=\"keyword\">uint16_t</span>; <span class=\"comment\">// max == _UI16_MAX 0xffffu </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png\" alt=\"uint16_t\" title=\"uint16\"></p>\n<h4 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h4><ul>\n<li><font color=\"red\">这是一个粗心的问题</font></li>\n</ul>\n<p>在我正在实现的功能中有一个数据遍历的部分，我使用了<code>uint16_t</code>类型作为索引的类型，但是<code>uint16_t</code>数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！</p>\n<hr>\n<h3 id=\"正确的结果展示：\"><a href=\"#正确的结果展示：\" class=\"headerlink\" title=\"正确的结果展示：\"></a>正确的结果展示：</h3><p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png\" alt=\"lum_2\" title=\"result\"></p>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png\" alt=\"right result\" title=\"Result\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"uint16-t\"><a href=\"#uint16-t\" class=\"headerlink\" title=\"uint16_t\"></a>uint16_t</h3><ul>\n<li>标准定义中：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  <span class=\"keyword\">uint16_t</span>; <span class=\"comment\">// max == _UI16_MAX 0xffffu </span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/uint16_t.png\" alt=\"uint16_t\" title=\"uint16\"></p>\n<h4 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h4><ul>\n<li><font color=\"red\">这是一个粗心的问题</font></li>\n</ul>\n<p>在我正在实现的功能中有一个数据遍历的部分，我使用了<code>uint16_t</code>类型作为索引的类型，但是<code>uint16_t</code>数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！</p>\n<hr>\n<h3 id=\"正确的结果展示：\"><a href=\"#正确的结果展示：\" class=\"headerlink\" title=\"正确的结果展示：\"></a>正确的结果展示：</h3><p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_2.png\" alt=\"lum_2\" title=\"result\"></p>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/lum_arrow_1.png\" alt=\"right result\" title=\"Result\"></p>\n"},{"title":"Dynamic drawing of osg vertex buffer objects","date":"2021-11-06T16:36:24.000Z","_content":"\n### `Dynamic drawing of osg vertex buffer objects`\n\n- 使用`显示列表`绘制图形在速度上并没有`vertex buffer object`那么快，所以在更高的`osg`的版本中，推荐使用`vertex buffer object`\n\n- 在使用`vertex buffer object`的情况下，动态更新绘制的数据\n\n- 代码实现：\n```C++\n// 首先- 创建完成 osg::Geometry\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;\n// 关闭显示列表 并使用vbo(vertex buffer object)\ngeom->setUseDisplayLists(false);\ngeom->setUseVertexBufferObject(true);\n// 修改几何体的绘制数据的类型 \ngeom->setDataVariance(osg::Object::DataVariance::DYNAMIC);\n//================================================================\n// 更新操作 \n// 先获取顶点数组 \nauto varray = dynamic_cast<osg::Vec3Array>(geom->getVertexArray());\n// 需改顶点数据\n// ---------------------你可以想数组中插入顶点-----------------------------------\n// 调用 dirty函数，告诉osg::Geometry你修改了顶点\nvarray->dirty();\n// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))\n// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) \nauto pri_set = geom->getPrimitiveSet(0);\n// void  setNumInstances (int n) \npri_set->setNumInstances(修改后的顶点个数)；\npri_set->dirty();\n// 更新几何体\ngeom->dirty();\n```\n\n","source":"_posts/Dynamic-drawing-of-osg-vertex-buffer-objects.md","raw":"---\ntitle: Dynamic drawing of osg vertex buffer objects\ndate: 2021-11-07 00:36:24\ncategories: \n- works\n- HJ\n- OSG\ntags: \n- cpp\n- osg\n---\n\n### `Dynamic drawing of osg vertex buffer objects`\n\n- 使用`显示列表`绘制图形在速度上并没有`vertex buffer object`那么快，所以在更高的`osg`的版本中，推荐使用`vertex buffer object`\n\n- 在使用`vertex buffer object`的情况下，动态更新绘制的数据\n\n- 代码实现：\n```C++\n// 首先- 创建完成 osg::Geometry\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;\n// 关闭显示列表 并使用vbo(vertex buffer object)\ngeom->setUseDisplayLists(false);\ngeom->setUseVertexBufferObject(true);\n// 修改几何体的绘制数据的类型 \ngeom->setDataVariance(osg::Object::DataVariance::DYNAMIC);\n//================================================================\n// 更新操作 \n// 先获取顶点数组 \nauto varray = dynamic_cast<osg::Vec3Array>(geom->getVertexArray());\n// 需改顶点数据\n// ---------------------你可以想数组中插入顶点-----------------------------------\n// 调用 dirty函数，告诉osg::Geometry你修改了顶点\nvarray->dirty();\n// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))\n// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) \nauto pri_set = geom->getPrimitiveSet(0);\n// void  setNumInstances (int n) \npri_set->setNumInstances(修改后的顶点个数)；\npri_set->dirty();\n// 更新几何体\ngeom->dirty();\n```\n\n","slug":"Dynamic-drawing-of-osg-vertex-buffer-objects","published":1,"updated":"2021-11-07T07:42:59.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h400009q0uu43q2gvi1","content":"<h3 id=\"Dynamic-drawing-of-osg-vertex-buffer-objects\"><a href=\"#Dynamic-drawing-of-osg-vertex-buffer-objects\" class=\"headerlink\" title=\"Dynamic drawing of osg vertex buffer objects\"></a><code>Dynamic drawing of osg vertex buffer objects</code></h3><ul>\n<li><p>使用<code>显示列表</code>绘制图形在速度上并没有<code>vertex buffer object</code>那么快，所以在更高的<code>osg</code>的版本中，推荐使用<code>vertex buffer object</code></p>\n</li>\n<li><p>在使用<code>vertex buffer object</code>的情况下，动态更新绘制的数据</p>\n</li>\n<li><p>代码实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先- 创建完成 osg::Geometry</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;</span><br><span class=\"line\"><span class=\"comment\">// 关闭显示列表 并使用vbo(vertex buffer object)</span></span><br><span class=\"line\">geom-&gt;setUseDisplayLists(<span class=\"literal\">false</span>);</span><br><span class=\"line\">geom-&gt;setUseVertexBufferObject(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 修改几何体的绘制数据的类型 </span></span><br><span class=\"line\">geom-&gt;setDataVariance(osg::Object::DataVariance::DYNAMIC);</span><br><span class=\"line\"><span class=\"comment\">//================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 更新操作 </span></span><br><span class=\"line\"><span class=\"comment\">// 先获取顶点数组 </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> varray = <span class=\"keyword\">dynamic_cast</span>&lt;osg::Vec3Array&gt;(geom-&gt;getVertexArray());</span><br><span class=\"line\"><span class=\"comment\">// 需改顶点数据</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------你可以想数组中插入顶点-----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 调用 dirty函数，告诉osg::Geometry你修改了顶点</span></span><br><span class=\"line\">varray-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))</span></span><br><span class=\"line\"><span class=\"comment\">// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pri_set = geom-&gt;getPrimitiveSet(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// void  setNumInstances (int n) </span></span><br><span class=\"line\">pri_set-&gt;setNumInstances(修改后的顶点个数)；</span><br><span class=\"line\">pri_set-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 更新几何体</span></span><br><span class=\"line\">geom-&gt;dirty();</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Dynamic-drawing-of-osg-vertex-buffer-objects\"><a href=\"#Dynamic-drawing-of-osg-vertex-buffer-objects\" class=\"headerlink\" title=\"Dynamic drawing of osg vertex buffer objects\"></a><code>Dynamic drawing of osg vertex buffer objects</code></h3><ul>\n<li><p>使用<code>显示列表</code>绘制图形在速度上并没有<code>vertex buffer object</code>那么快，所以在更高的<code>osg</code>的版本中，推荐使用<code>vertex buffer object</code></p>\n</li>\n<li><p>在使用<code>vertex buffer object</code>的情况下，动态更新绘制的数据</p>\n</li>\n<li><p>代码实现：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先- 创建完成 osg::Geometry</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;</span><br><span class=\"line\"><span class=\"comment\">// 关闭显示列表 并使用vbo(vertex buffer object)</span></span><br><span class=\"line\">geom-&gt;setUseDisplayLists(<span class=\"literal\">false</span>);</span><br><span class=\"line\">geom-&gt;setUseVertexBufferObject(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 修改几何体的绘制数据的类型 </span></span><br><span class=\"line\">geom-&gt;setDataVariance(osg::Object::DataVariance::DYNAMIC);</span><br><span class=\"line\"><span class=\"comment\">//================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 更新操作 </span></span><br><span class=\"line\"><span class=\"comment\">// 先获取顶点数组 </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> varray = <span class=\"keyword\">dynamic_cast</span>&lt;osg::Vec3Array&gt;(geom-&gt;getVertexArray());</span><br><span class=\"line\"><span class=\"comment\">// 需改顶点数据</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------你可以想数组中插入顶点-----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 调用 dirty函数，告诉osg::Geometry你修改了顶点</span></span><br><span class=\"line\">varray-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))</span></span><br><span class=\"line\"><span class=\"comment\">// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pri_set = geom-&gt;getPrimitiveSet(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// void  setNumInstances (int n) </span></span><br><span class=\"line\">pri_set-&gt;setNumInstances(修改后的顶点个数)；</span><br><span class=\"line\">pri_set-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 更新几何体</span></span><br><span class=\"line\">geom-&gt;dirty();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Games202-ShadowMap","date":"2021-12-13T14:25:25.000Z","_content":"\n## Shadow Map\n\n- 记录一下关于`Games202`的学习\n\n#### shadow map\n\n- 实现：通过比较当前的`point`,在光源空间的的深度与深度图中记录的深度的大小，决定当前的`point`是否在阴影中\n\n- 如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png)\n\n上图来自`Games202`的课件：\n\n- 阴影图`shadow map`记录了相机在光照位置下的最近最近深度。\n\n- 关于计算当前vertex point 是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-`lightPVM`)，用于将顶点转换到光空间。\n\n- 在`Games202`的作业1中，我们需要使用提供的matrix的接口处理矩阵。\n\n  ```javascript\n  mat.translate() // 设置矩阵的移动 \n  mat4.scale      // 设置矩阵的缩放\n  \n  mat4.lookAt(); // 生成的视图矩阵\n  mat4.ortho();  // 平行投影\n  \n  mat4.multiply(); // 矩阵的乘法\n  ```\n\n  [gl-matrix文档](https://www.icode9.com/content-4-956693.html)\n\n- 深度比较：\n\n  ```glsl\n  sampler2D shadowMap;   // 你的深度图\n  mat4 lightPVM;         // 光空间的变换矩阵\n  vec4 vertexPosition;   // 渲染的顶点坐标\n  \n  // 1： 将顶点变换到光空间 \n  vec4 vertex_light = lightPVM * vertexPosition;\n  // 2: 透视除法将顶点变换到NDC坐标\n  vec3 ndc_pos = vertex_light.xyz / vertex_light.w;\n  // 3: 将深度变到 0-1\n  ndc_pos = ndc_pos * 0.5 + 0.5；\n  // 4：获取深度图中记录的深度\n  // 5: 获取当前点在光空间下的实际深度\n  // 6: 比较两个深度的大小    \n  // 7：返回当前点是否在阴影中    \n  ```\n\n  \n\n- 最终效果\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png)\n","source":"_posts/Games202-ShadowMap.md","raw":"---\ntitle: Games202-ShadowMap\ndate: 2021-12-13 22:25:25\ncategories:\n- Computer Graph\ntags:\n- Games202\n- Shadow\n---\n\n## Shadow Map\n\n- 记录一下关于`Games202`的学习\n\n#### shadow map\n\n- 实现：通过比较当前的`point`,在光源空间的的深度与深度图中记录的深度的大小，决定当前的`point`是否在阴影中\n\n- 如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png)\n\n上图来自`Games202`的课件：\n\n- 阴影图`shadow map`记录了相机在光照位置下的最近最近深度。\n\n- 关于计算当前vertex point 是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-`lightPVM`)，用于将顶点转换到光空间。\n\n- 在`Games202`的作业1中，我们需要使用提供的matrix的接口处理矩阵。\n\n  ```javascript\n  mat.translate() // 设置矩阵的移动 \n  mat4.scale      // 设置矩阵的缩放\n  \n  mat4.lookAt(); // 生成的视图矩阵\n  mat4.ortho();  // 平行投影\n  \n  mat4.multiply(); // 矩阵的乘法\n  ```\n\n  [gl-matrix文档](https://www.icode9.com/content-4-956693.html)\n\n- 深度比较：\n\n  ```glsl\n  sampler2D shadowMap;   // 你的深度图\n  mat4 lightPVM;         // 光空间的变换矩阵\n  vec4 vertexPosition;   // 渲染的顶点坐标\n  \n  // 1： 将顶点变换到光空间 \n  vec4 vertex_light = lightPVM * vertexPosition;\n  // 2: 透视除法将顶点变换到NDC坐标\n  vec3 ndc_pos = vertex_light.xyz / vertex_light.w;\n  // 3: 将深度变到 0-1\n  ndc_pos = ndc_pos * 0.5 + 0.5；\n  // 4：获取深度图中记录的深度\n  // 5: 获取当前点在光空间下的实际深度\n  // 6: 比较两个深度的大小    \n  // 7：返回当前点是否在阴影中    \n  ```\n\n  \n\n- 最终效果\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png)\n","slug":"Games202-ShadowMap","published":1,"updated":"2021-12-13T15:18:35.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h41000aq0uu6698eod4","content":"<h2 id=\"Shadow-Map\"><a href=\"#Shadow-Map\" class=\"headerlink\" title=\"Shadow Map\"></a>Shadow Map</h2><ul>\n<li>记录一下关于<code>Games202</code>的学习</li>\n</ul>\n<h4 id=\"shadow-map\"><a href=\"#shadow-map\" class=\"headerlink\" title=\"shadow map\"></a>shadow map</h4><ul>\n<li><p>实现：通过比较当前的<code>point</code>,在光源空间的的深度与深度图中记录的深度的大小，决定当前的<code>point</code>是否在阴影中</p>\n</li>\n<li><p>如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png\"></p>\n</li>\n</ul>\n<p>上图来自<code>Games202</code>的课件：</p>\n<ul>\n<li><p>阴影图<code>shadow map</code>记录了相机在光照位置下的最近最近深度。</p>\n</li>\n<li><p>关于计算当前vertex point 是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-<code>lightPVM</code>)，用于将顶点转换到光空间。</p>\n</li>\n<li><p>在<code>Games202</code>的作业1中，我们需要使用提供的matrix的接口处理矩阵。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mat.translate() <span class=\"comment\">// 设置矩阵的移动 </span></span><br><span class=\"line\">mat4.scale      <span class=\"comment\">// 设置矩阵的缩放</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.lookAt(); <span class=\"comment\">// 生成的视图矩阵</span></span><br><span class=\"line\">mat4.ortho();  <span class=\"comment\">// 平行投影</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.multiply(); <span class=\"comment\">// 矩阵的乘法</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.icode9.com/content-4-956693.html\">gl-matrix文档</a></p>\n</li>\n<li><p>深度比较：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">sampler2D</span> shadowMap;   <span class=\"comment\">// 你的深度图</span></span><br><span class=\"line\"><span class=\"type\">mat4</span> lightPVM;         <span class=\"comment\">// 光空间的变换矩阵</span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertexPosition;   <span class=\"comment\">// 渲染的顶点坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1： 将顶点变换到光空间 </span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertex_light = lightPVM * vertexPosition;</span><br><span class=\"line\"><span class=\"comment\">// 2: 透视除法将顶点变换到NDC坐标</span></span><br><span class=\"line\"><span class=\"type\">vec3</span> ndc_pos = vertex_light.xyz / vertex_light.w;</span><br><span class=\"line\"><span class=\"comment\">// 3: 将深度变到 0-1</span></span><br><span class=\"line\">ndc_pos = ndc_pos * <span class=\"number\">0.5</span> + <span class=\"number\">0.5</span>；</span><br><span class=\"line\"><span class=\"comment\">// 4：获取深度图中记录的深度</span></span><br><span class=\"line\"><span class=\"comment\">// 5: 获取当前点在光空间下的实际深度</span></span><br><span class=\"line\"><span class=\"comment\">// 6: 比较两个深度的大小    </span></span><br><span class=\"line\"><span class=\"comment\">// 7：返回当前点是否在阴影中    </span></span><br></pre></td></tr></table></figure></li>\n<li><p>最终效果</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Shadow-Map\"><a href=\"#Shadow-Map\" class=\"headerlink\" title=\"Shadow Map\"></a>Shadow Map</h2><ul>\n<li>记录一下关于<code>Games202</code>的学习</li>\n</ul>\n<h4 id=\"shadow-map\"><a href=\"#shadow-map\" class=\"headerlink\" title=\"shadow map\"></a>shadow map</h4><ul>\n<li><p>实现：通过比较当前的<code>point</code>,在光源空间的的深度与深度图中记录的深度的大小，决定当前的<code>point</code>是否在阴影中</p>\n</li>\n<li><p>如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png\"></p>\n</li>\n</ul>\n<p>上图来自<code>Games202</code>的课件：</p>\n<ul>\n<li><p>阴影图<code>shadow map</code>记录了相机在光照位置下的最近最近深度。</p>\n</li>\n<li><p>关于计算当前vertex point 是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-<code>lightPVM</code>)，用于将顶点转换到光空间。</p>\n</li>\n<li><p>在<code>Games202</code>的作业1中，我们需要使用提供的matrix的接口处理矩阵。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mat.translate() <span class=\"comment\">// 设置矩阵的移动 </span></span><br><span class=\"line\">mat4.scale      <span class=\"comment\">// 设置矩阵的缩放</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.lookAt(); <span class=\"comment\">// 生成的视图矩阵</span></span><br><span class=\"line\">mat4.ortho();  <span class=\"comment\">// 平行投影</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.multiply(); <span class=\"comment\">// 矩阵的乘法</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.icode9.com/content-4-956693.html\">gl-matrix文档</a></p>\n</li>\n<li><p>深度比较：</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">sampler2D</span> shadowMap;   <span class=\"comment\">// 你的深度图</span></span><br><span class=\"line\"><span class=\"type\">mat4</span> lightPVM;         <span class=\"comment\">// 光空间的变换矩阵</span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertexPosition;   <span class=\"comment\">// 渲染的顶点坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1： 将顶点变换到光空间 </span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertex_light = lightPVM * vertexPosition;</span><br><span class=\"line\"><span class=\"comment\">// 2: 透视除法将顶点变换到NDC坐标</span></span><br><span class=\"line\"><span class=\"type\">vec3</span> ndc_pos = vertex_light.xyz / vertex_light.w;</span><br><span class=\"line\"><span class=\"comment\">// 3: 将深度变到 0-1</span></span><br><span class=\"line\">ndc_pos = ndc_pos * <span class=\"number\">0.5</span> + <span class=\"number\">0.5</span>；</span><br><span class=\"line\"><span class=\"comment\">// 4：获取深度图中记录的深度</span></span><br><span class=\"line\"><span class=\"comment\">// 5: 获取当前点在光空间下的实际深度</span></span><br><span class=\"line\"><span class=\"comment\">// 6: 比较两个深度的大小    </span></span><br><span class=\"line\"><span class=\"comment\">// 7：返回当前点是否在阴影中    </span></span><br></pre></td></tr></table></figure></li>\n<li><p>最终效果</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png\"></p>\n"},{"title":"Heap","date":"2021-10-24T07:55:06.000Z","_content":"\n## 堆\n\n#### 优先队列(`Pripority Queue`)\n- 特殊的 \"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。\n- 使用数组构建：\n  - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入数组的尾部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;从数组中删除元素，需要将元素移动位置：`T=O(N)`\n- 链表构建：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入链表的头部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;删除元素：`T=O(1)`\n- 有序数组：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N) or O(log2(N))`\n   &ensp;&ensp;&ensp;&ensp;移动元素并插入`T=O(N)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素：`T=O(1)`\n- 有序链表：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N)`\n   &ensp;&ensp;&ensp;&ensp;插入`T=O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素(或者首元素)：`T=O(1)`\n\n#### 最大堆 - 完全二叉树（大顶堆）\n\n- 根元素是当前树中最大的\n\n##### 1、堆的创建 -- 创建空堆\n\n```C++\ntypedef strut HeapStruct * MaxHeap;\nstruct HeadStruct{\n    ElementType * Elements;   // 存储元素的数组 \n    int Size;                 // 当前元素个数\n    int Capacity;             // 堆的最大容量\n}\n\n// 创建堆\nMaxHeap create(int MaxSize)\n{\n    MaxHeap H = malloc(sizeof(struct HeapStruct));\n    H->Elements = malloc((MaxSize+1) * sizeof(ElementType));\n    H->size = 0;\n    H->Capactity = MaxSize;\n    H->Elements[0] = MaxData;  // O号位置存储的是哨兵 不是个元素 \n\treturn H;\n}\n\n```\n\n\n\n##### 2，堆的插入\n\n```C++ \nvoid Insert(MaxHeap H,ElementType item)\n{\n    int i;\n    if(isFull(H))\n    {\n        std::cout<<\"最大堆已经满了\"<<std::endl;\n    }\n    i = ++H->Size;  // i等于 插入元素后的堆中的最后一个元素的下标\n    // 交换节点的位置 \n    for(;H->Elements[i/2] < item; i = i/2) // 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值\n    {\n        H->Elements[i] = H->Elements[i/2];  // 覆盖结果\n    }\n    H->Elements[i] = item;\n}\n\n```\n\n##### 3、堆的删除\n\n```C++ \n// 取出根节点\n// 将最后一个元素放到根节点(保留树的特性)\n// 修改使其具有最大（最小）堆的特性\n\nEleementType deleteMax(MaxHeap H)\n{\n    int parent,child;\n    ElementType MaxChild,temp;\n    if(IsEmpty(H))\n    {\n        std::cout<<\"堆为空\"<<std::endl;\n        return ;\n    }\n    MaxItem = H->Elements[1]; // 取出根的最大值 \n    // 取出堆中最后一个元素， 并将Size - 1\n    temp = H->Elements[H->Size --];\n    // 调整数据的大小关系 \n    for(parent = 1; parent*2 < H->Size;parent = child)  // 是不是存在左孩子 \n    {\n        child = parent * 2;\n        // 比较左右孩子的大小\n        if((child != H->Size)) && (H->Elements[child] < H->Elements[child+1]))  // 当前child不是最后一个元素 \n        {\n            child++; \n        }\n        // 不满足交换条件 - 结束循环\n        if(temp > H->Elements[child])\n        {\n            break;\n        }\n        else\n        {\n            // 交换元素 \n            H->Elements[parent] = H->Elements[child];\n            \n        }\n    }\n    // 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可\n    H->Elements[parent] = temp;\n    return MaxItem;\n}\n\n```\n\n##### 4、最大堆的建立\n\n&ensp;&ensp;建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中\n\n&ensp;&ensp;1、通过插入操作，将N个元素一个一个的插入到空堆中去：`T = O(NlogN)`\n\n&ensp;&ensp;2、线性时间复杂度下建立最大堆\n\n​\t&ensp;&ensp;1、将元素安顺序输入，先构建完全二叉树（下标为1开始）\n\n&ensp;\t&ensp;2、调整元素位置，使其满足最大堆\n\n<a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap C++ 实现  </a>\n\n#### 最小堆- 完全二叉树（小顶堆）\n\n- 可以参照最大堆写\n\n","source":"_posts/Heap.md","raw":"---\ntitle: Heap \ndate: 2021-10-24 15:55:06\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## 堆\n\n#### 优先队列(`Pripority Queue`)\n- 特殊的 \"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。\n- 使用数组构建：\n  - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入数组的尾部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;从数组中删除元素，需要将元素移动位置：`T=O(N)`\n- 链表构建：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入链表的头部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;删除元素：`T=O(1)`\n- 有序数组：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N) or O(log2(N))`\n   &ensp;&ensp;&ensp;&ensp;移动元素并插入`T=O(N)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素：`T=O(1)`\n- 有序链表：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N)`\n   &ensp;&ensp;&ensp;&ensp;插入`T=O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素(或者首元素)：`T=O(1)`\n\n#### 最大堆 - 完全二叉树（大顶堆）\n\n- 根元素是当前树中最大的\n\n##### 1、堆的创建 -- 创建空堆\n\n```C++\ntypedef strut HeapStruct * MaxHeap;\nstruct HeadStruct{\n    ElementType * Elements;   // 存储元素的数组 \n    int Size;                 // 当前元素个数\n    int Capacity;             // 堆的最大容量\n}\n\n// 创建堆\nMaxHeap create(int MaxSize)\n{\n    MaxHeap H = malloc(sizeof(struct HeapStruct));\n    H->Elements = malloc((MaxSize+1) * sizeof(ElementType));\n    H->size = 0;\n    H->Capactity = MaxSize;\n    H->Elements[0] = MaxData;  // O号位置存储的是哨兵 不是个元素 \n\treturn H;\n}\n\n```\n\n\n\n##### 2，堆的插入\n\n```C++ \nvoid Insert(MaxHeap H,ElementType item)\n{\n    int i;\n    if(isFull(H))\n    {\n        std::cout<<\"最大堆已经满了\"<<std::endl;\n    }\n    i = ++H->Size;  // i等于 插入元素后的堆中的最后一个元素的下标\n    // 交换节点的位置 \n    for(;H->Elements[i/2] < item; i = i/2) // 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值\n    {\n        H->Elements[i] = H->Elements[i/2];  // 覆盖结果\n    }\n    H->Elements[i] = item;\n}\n\n```\n\n##### 3、堆的删除\n\n```C++ \n// 取出根节点\n// 将最后一个元素放到根节点(保留树的特性)\n// 修改使其具有最大（最小）堆的特性\n\nEleementType deleteMax(MaxHeap H)\n{\n    int parent,child;\n    ElementType MaxChild,temp;\n    if(IsEmpty(H))\n    {\n        std::cout<<\"堆为空\"<<std::endl;\n        return ;\n    }\n    MaxItem = H->Elements[1]; // 取出根的最大值 \n    // 取出堆中最后一个元素， 并将Size - 1\n    temp = H->Elements[H->Size --];\n    // 调整数据的大小关系 \n    for(parent = 1; parent*2 < H->Size;parent = child)  // 是不是存在左孩子 \n    {\n        child = parent * 2;\n        // 比较左右孩子的大小\n        if((child != H->Size)) && (H->Elements[child] < H->Elements[child+1]))  // 当前child不是最后一个元素 \n        {\n            child++; \n        }\n        // 不满足交换条件 - 结束循环\n        if(temp > H->Elements[child])\n        {\n            break;\n        }\n        else\n        {\n            // 交换元素 \n            H->Elements[parent] = H->Elements[child];\n            \n        }\n    }\n    // 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可\n    H->Elements[parent] = temp;\n    return MaxItem;\n}\n\n```\n\n##### 4、最大堆的建立\n\n&ensp;&ensp;建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中\n\n&ensp;&ensp;1、通过插入操作，将N个元素一个一个的插入到空堆中去：`T = O(NlogN)`\n\n&ensp;&ensp;2、线性时间复杂度下建立最大堆\n\n​\t&ensp;&ensp;1、将元素安顺序输入，先构建完全二叉树（下标为1开始）\n\n&ensp;\t&ensp;2、调整元素位置，使其满足最大堆\n\n<a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap C++ 实现  </a>\n\n#### 最小堆- 完全二叉树（小顶堆）\n\n- 可以参照最大堆写\n\n","slug":"Heap","published":1,"updated":"2021-10-25T14:17:38.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h43000eq0uuhhto7ogc","content":"<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><h4 id=\"优先队列-Pripority-Queue\"><a href=\"#优先队列-Pripority-Queue\" class=\"headerlink\" title=\"优先队列(Pripority Queue)\"></a>优先队列(<code>Pripority Queue</code>)</h4><ul>\n<li>特殊的 “队列”,取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。</li>\n<li>使用数组构建：<ul>\n<li>插入：<br>&ensp;&ensp;&ensp;&ensp;&ensp;总是插入数组的尾部<code>T = O(1)</code></li>\n<li>删除：<br> &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：<code>T=O(N)</code><br>  &ensp;&ensp;&ensp;&ensp;&ensp;从数组中删除元素，需要将元素移动位置：<code>T=O(N)</code></li>\n</ul>\n</li>\n<li>链表构建：<ul>\n<li>插入：<br>&ensp;&ensp;&ensp;&ensp;&ensp;总是插入链表的头部<code>T = O(1)</code></li>\n<li>删除：<br> &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：<code>T=O(N)</code><br>  &ensp;&ensp;&ensp;&ensp;&ensp;删除元素：<code>T=O(1)</code></li>\n</ul>\n</li>\n<li>有序数组：<ul>\n<li>插入：<br>&ensp;&ensp;&ensp;&ensp;找到合适的位置:<code>T = O(N) or O(log2(N))</code><br>&ensp;&ensp;&ensp;&ensp;移动元素并插入<code>T=O(N)</code></li>\n<li>删除：<br> &ensp;&ensp;&ensp;&ensp;删除最后一个元素：<code>T=O(1)</code></li>\n</ul>\n</li>\n<li>有序链表：<ul>\n<li>插入：<br>&ensp;&ensp;&ensp;&ensp;找到合适的位置:<code>T = O(N)</code><br>&ensp;&ensp;&ensp;&ensp;插入<code>T=O(1)</code></li>\n<li>删除：<br> &ensp;&ensp;&ensp;&ensp;删除最后一个元素(或者首元素)：<code>T=O(1)</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"最大堆-完全二叉树（大顶堆）\"><a href=\"#最大堆-完全二叉树（大顶堆）\" class=\"headerlink\" title=\"最大堆 - 完全二叉树（大顶堆）\"></a>最大堆 - 完全二叉树（大顶堆）</h4><ul>\n<li>根元素是当前树中最大的</li>\n</ul>\n<h5 id=\"1、堆的创建-–-创建空堆\"><a href=\"#1、堆的创建-–-创建空堆\" class=\"headerlink\" title=\"1、堆的创建 – 创建空堆\"></a>1、堆的创建 – 创建空堆</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> strut HeapStruct * MaxHeap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeadStruct</span>&#123;</span></span><br><span class=\"line\">    ElementType * Elements;   <span class=\"comment\">// 存储元素的数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size;                 <span class=\"comment\">// 当前元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Capacity;             <span class=\"comment\">// 堆的最大容量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建堆</span></span><br><span class=\"line\"><span class=\"function\">MaxHeap <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> MaxSize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MaxHeap H = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct HeapStruct));</span><br><span class=\"line\">    H-&gt;Elements = <span class=\"built_in\">malloc</span>((MaxSize+<span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(ElementType));</span><br><span class=\"line\">    H-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    H-&gt;Capactity = MaxSize;</span><br><span class=\"line\">    H-&gt;Elements[<span class=\"number\">0</span>] = MaxData;  <span class=\"comment\">// O号位置存储的是哨兵 不是个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> H;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2，堆的插入\"><a href=\"#2，堆的插入\" class=\"headerlink\" title=\"2，堆的插入\"></a>2，堆的插入</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(MaxHeap H,ElementType item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isFull(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;最大堆已经满了&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = ++H-&gt;Size;  <span class=\"comment\">// i等于 插入元素后的堆中的最后一个元素的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 交换节点的位置 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;H-&gt;Elements[i/<span class=\"number\">2</span>] &lt; item; i = i/<span class=\"number\">2</span>) <span class=\"comment\">// 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        H-&gt;Elements[i] = H-&gt;Elements[i/<span class=\"number\">2</span>];  <span class=\"comment\">// 覆盖结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    H-&gt;Elements[i] = item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、堆的删除\"><a href=\"#3、堆的删除\" class=\"headerlink\" title=\"3、堆的删除\"></a>3、堆的删除</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取出根节点</span></span><br><span class=\"line\"><span class=\"comment\">// 将最后一个元素放到根节点(保留树的特性)</span></span><br><span class=\"line\"><span class=\"comment\">// 修改使其具有最大（最小）堆的特性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EleementType <span class=\"title\">deleteMax</span><span class=\"params\">(MaxHeap H)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent,child;</span><br><span class=\"line\">    ElementType MaxChild,temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(IsEmpty(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;堆为空&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxItem = H-&gt;Elements[<span class=\"number\">1</span>]; <span class=\"comment\">// 取出根的最大值 </span></span><br><span class=\"line\">    <span class=\"comment\">// 取出堆中最后一个元素， 并将Size - 1</span></span><br><span class=\"line\">    temp = H-&gt;Elements[H-&gt;Size --];</span><br><span class=\"line\">    <span class=\"comment\">// 调整数据的大小关系 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(parent = <span class=\"number\">1</span>; parent*<span class=\"number\">2</span> &lt; H-&gt;Size;parent = child)  <span class=\"comment\">// 是不是存在左孩子 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        child = parent * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 比较左右孩子的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((child != H-&gt;Size)) &amp;&amp; (H-&gt;Elements[child] &lt; H-&gt;Elements[child+<span class=\"number\">1</span>]))  <span class=\"comment\">// 当前child不是最后一个元素 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            child++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不满足交换条件 - 结束循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp &gt; H-&gt;Elements[child])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            H-&gt;Elements[parent] = H-&gt;Elements[child];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可</span></span><br><span class=\"line\">    H-&gt;Elements[parent] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaxItem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、最大堆的建立\"><a href=\"#4、最大堆的建立\" class=\"headerlink\" title=\"4、最大堆的建立\"></a>4、最大堆的建立</h5><p>&ensp;&ensp;建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中</p>\n<p>&ensp;&ensp;1、通过插入操作，将N个元素一个一个的插入到空堆中去：<code>T = O(NlogN)</code></p>\n<p>&ensp;&ensp;2、线性时间复杂度下建立最大堆</p>\n<p>​    &ensp;&ensp;1、将元素安顺序输入，先构建完全二叉树（下标为1开始）</p>\n<p>&ensp;    &ensp;2、调整元素位置，使其满足最大堆</p>\n<p><a href=\"https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap\" style=\"color:red\">Heap C++ 实现  </a></p>\n<h4 id=\"最小堆-完全二叉树（小顶堆）\"><a href=\"#最小堆-完全二叉树（小顶堆）\" class=\"headerlink\" title=\"最小堆- 完全二叉树（小顶堆）\"></a>最小堆- 完全二叉树（小顶堆）</h4><ul>\n<li>可以参照最大堆写</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><h4 id=\"优先队列-Pripority-Queue\"><a href=\"#优先队列-Pripority-Queue\" class=\"headerlink\" title=\"优先队列(Pripority Queue)\"></a>优先队列(<code>Pripority Queue</code>)</h4><ul>\n<li>特殊的 “队列”,取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。</li>\n<li>使用数组构建：<ul>\n<li>插入：<br>&ensp;&ensp;&ensp;&ensp;&ensp;总是插入数组的尾部<code>T = O(1)</code></li>\n<li>删除：<br> &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：<code>T=O(N)</code><br>  &ensp;&ensp;&ensp;&ensp;&ensp;从数组中删除元素，需要将元素移动位置：<code>T=O(N)</code></li>\n</ul>\n</li>\n<li>链表构建：<ul>\n<li>插入：<br>&ensp;&ensp;&ensp;&ensp;&ensp;总是插入链表的头部<code>T = O(1)</code></li>\n<li>删除：<br> &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：<code>T=O(N)</code><br>  &ensp;&ensp;&ensp;&ensp;&ensp;删除元素：<code>T=O(1)</code></li>\n</ul>\n</li>\n<li>有序数组：<ul>\n<li>插入：<br>&ensp;&ensp;&ensp;&ensp;找到合适的位置:<code>T = O(N) or O(log2(N))</code><br>&ensp;&ensp;&ensp;&ensp;移动元素并插入<code>T=O(N)</code></li>\n<li>删除：<br> &ensp;&ensp;&ensp;&ensp;删除最后一个元素：<code>T=O(1)</code></li>\n</ul>\n</li>\n<li>有序链表：<ul>\n<li>插入：<br>&ensp;&ensp;&ensp;&ensp;找到合适的位置:<code>T = O(N)</code><br>&ensp;&ensp;&ensp;&ensp;插入<code>T=O(1)</code></li>\n<li>删除：<br> &ensp;&ensp;&ensp;&ensp;删除最后一个元素(或者首元素)：<code>T=O(1)</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"最大堆-完全二叉树（大顶堆）\"><a href=\"#最大堆-完全二叉树（大顶堆）\" class=\"headerlink\" title=\"最大堆 - 完全二叉树（大顶堆）\"></a>最大堆 - 完全二叉树（大顶堆）</h4><ul>\n<li>根元素是当前树中最大的</li>\n</ul>\n<h5 id=\"1、堆的创建-–-创建空堆\"><a href=\"#1、堆的创建-–-创建空堆\" class=\"headerlink\" title=\"1、堆的创建 – 创建空堆\"></a>1、堆的创建 – 创建空堆</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> strut HeapStruct * MaxHeap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeadStruct</span>&#123;</span></span><br><span class=\"line\">    ElementType * Elements;   <span class=\"comment\">// 存储元素的数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size;                 <span class=\"comment\">// 当前元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Capacity;             <span class=\"comment\">// 堆的最大容量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建堆</span></span><br><span class=\"line\"><span class=\"function\">MaxHeap <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> MaxSize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MaxHeap H = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct HeapStruct));</span><br><span class=\"line\">    H-&gt;Elements = <span class=\"built_in\">malloc</span>((MaxSize+<span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(ElementType));</span><br><span class=\"line\">    H-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    H-&gt;Capactity = MaxSize;</span><br><span class=\"line\">    H-&gt;Elements[<span class=\"number\">0</span>] = MaxData;  <span class=\"comment\">// O号位置存储的是哨兵 不是个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> H;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2，堆的插入\"><a href=\"#2，堆的插入\" class=\"headerlink\" title=\"2，堆的插入\"></a>2，堆的插入</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(MaxHeap H,ElementType item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isFull(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;最大堆已经满了&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = ++H-&gt;Size;  <span class=\"comment\">// i等于 插入元素后的堆中的最后一个元素的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 交换节点的位置 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;H-&gt;Elements[i/<span class=\"number\">2</span>] &lt; item; i = i/<span class=\"number\">2</span>) <span class=\"comment\">// 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        H-&gt;Elements[i] = H-&gt;Elements[i/<span class=\"number\">2</span>];  <span class=\"comment\">// 覆盖结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    H-&gt;Elements[i] = item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3、堆的删除\"><a href=\"#3、堆的删除\" class=\"headerlink\" title=\"3、堆的删除\"></a>3、堆的删除</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取出根节点</span></span><br><span class=\"line\"><span class=\"comment\">// 将最后一个元素放到根节点(保留树的特性)</span></span><br><span class=\"line\"><span class=\"comment\">// 修改使其具有最大（最小）堆的特性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EleementType <span class=\"title\">deleteMax</span><span class=\"params\">(MaxHeap H)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent,child;</span><br><span class=\"line\">    ElementType MaxChild,temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(IsEmpty(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;堆为空&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxItem = H-&gt;Elements[<span class=\"number\">1</span>]; <span class=\"comment\">// 取出根的最大值 </span></span><br><span class=\"line\">    <span class=\"comment\">// 取出堆中最后一个元素， 并将Size - 1</span></span><br><span class=\"line\">    temp = H-&gt;Elements[H-&gt;Size --];</span><br><span class=\"line\">    <span class=\"comment\">// 调整数据的大小关系 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(parent = <span class=\"number\">1</span>; parent*<span class=\"number\">2</span> &lt; H-&gt;Size;parent = child)  <span class=\"comment\">// 是不是存在左孩子 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        child = parent * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 比较左右孩子的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((child != H-&gt;Size)) &amp;&amp; (H-&gt;Elements[child] &lt; H-&gt;Elements[child+<span class=\"number\">1</span>]))  <span class=\"comment\">// 当前child不是最后一个元素 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            child++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不满足交换条件 - 结束循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp &gt; H-&gt;Elements[child])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            H-&gt;Elements[parent] = H-&gt;Elements[child];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可</span></span><br><span class=\"line\">    H-&gt;Elements[parent] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaxItem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4、最大堆的建立\"><a href=\"#4、最大堆的建立\" class=\"headerlink\" title=\"4、最大堆的建立\"></a>4、最大堆的建立</h5><p>&ensp;&ensp;建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中</p>\n<p>&ensp;&ensp;1、通过插入操作，将N个元素一个一个的插入到空堆中去：<code>T = O(NlogN)</code></p>\n<p>&ensp;&ensp;2、线性时间复杂度下建立最大堆</p>\n<p>​    &ensp;&ensp;1、将元素安顺序输入，先构建完全二叉树（下标为1开始）</p>\n<p>&ensp;    &ensp;2、调整元素位置，使其满足最大堆</p>\n<p><a href=\"https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap\" style=\"color:red\">Heap C++ 实现  </a></p>\n<h4 id=\"最小堆-完全二叉树（小顶堆）\"><a href=\"#最小堆-完全二叉树（小顶堆）\" class=\"headerlink\" title=\"最小堆- 完全二叉树（小顶堆）\"></a>最小堆- 完全二叉树（小顶堆）</h4><ul>\n<li>可以参照最大堆写</li>\n</ul>\n"},{"title":"Multi KeyWord Sort","date":"2021-11-07T14:18:51.000Z","_content":"\n### 多关键字排序\n\n- 扑克牌的例子\n\n- 一副扑克牌是按照两种顺序排的：\n  - K0,花色：梅花 < 方块 < 红桃 < 黑桃\n  - k1，面值: 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < J < Q < K < A\n- 主位优先：（Most Significant Digit）\n  - 先用四个花色建桶，然后使用面值建桶\n\n#### 一个更好的方法：\n\n- 依旧使用次位优先：\n\n  - 先使用面值建桶\n\n  - 然后按照大小将结果合并，使用花色建桶。\n\n  - 最终的输出结果便是有序的\n\n    \n","source":"_posts/Multi-KeyWord-Sort.md","raw":"---\ntitle: Multi KeyWord Sort\ndate: 2021-11-07 22:18:51\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n### 多关键字排序\n\n- 扑克牌的例子\n\n- 一副扑克牌是按照两种顺序排的：\n  - K0,花色：梅花 < 方块 < 红桃 < 黑桃\n  - k1，面值: 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < J < Q < K < A\n- 主位优先：（Most Significant Digit）\n  - 先用四个花色建桶，然后使用面值建桶\n\n#### 一个更好的方法：\n\n- 依旧使用次位优先：\n\n  - 先使用面值建桶\n\n  - 然后按照大小将结果合并，使用花色建桶。\n\n  - 最终的输出结果便是有序的\n\n    \n","slug":"Multi-KeyWord-Sort","published":1,"updated":"2021-11-07T16:09:56.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h44000fq0uu5x5n33bb","content":"<h3 id=\"多关键字排序\"><a href=\"#多关键字排序\" class=\"headerlink\" title=\"多关键字排序\"></a>多关键字排序</h3><ul>\n<li><p>扑克牌的例子</p>\n</li>\n<li><p>一副扑克牌是按照两种顺序排的：</p>\n<ul>\n<li>K0,花色：梅花 &lt; 方块 &lt; 红桃 &lt; 黑桃</li>\n<li>k1，面值: 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10 &lt; J &lt; Q &lt; K &lt; A</li>\n</ul>\n</li>\n<li><p>主位优先：（Most Significant Digit）</p>\n<ul>\n<li>先用四个花色建桶，然后使用面值建桶</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"一个更好的方法：\"><a href=\"#一个更好的方法：\" class=\"headerlink\" title=\"一个更好的方法：\"></a>一个更好的方法：</h4><ul>\n<li><p>依旧使用次位优先：</p>\n<ul>\n<li><p>先使用面值建桶</p>\n</li>\n<li><p>然后按照大小将结果合并，使用花色建桶。</p>\n</li>\n<li><p>最终的输出结果便是有序的</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"多关键字排序\"><a href=\"#多关键字排序\" class=\"headerlink\" title=\"多关键字排序\"></a>多关键字排序</h3><ul>\n<li><p>扑克牌的例子</p>\n</li>\n<li><p>一副扑克牌是按照两种顺序排的：</p>\n<ul>\n<li>K0,花色：梅花 &lt; 方块 &lt; 红桃 &lt; 黑桃</li>\n<li>k1，面值: 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10 &lt; J &lt; Q &lt; K &lt; A</li>\n</ul>\n</li>\n<li><p>主位优先：（Most Significant Digit）</p>\n<ul>\n<li>先用四个花色建桶，然后使用面值建桶</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"一个更好的方法：\"><a href=\"#一个更好的方法：\" class=\"headerlink\" title=\"一个更好的方法：\"></a>一个更好的方法：</h4><ul>\n<li><p>依旧使用次位优先：</p>\n<ul>\n<li><p>先使用面值建桶</p>\n</li>\n<li><p>然后按照大小将结果合并，使用花色建桶。</p>\n</li>\n<li><p>最终的输出结果便是有序的</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"OSG-HUD","date":"2021-07-26T14:40:11.000Z","_content":"\n# OSG-HUD\n\n- <p>\"HUD\"在渲染的场景中算是比较常见的存在: 游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...</p>\n\n<b style=\"color:red\">如何创建HUD ？</b> \n\n<p>本质上说，HUD就是一个相机( 在`OSG`中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行</p>\n\n<b style=\"color:red\">实现要点，如下：</b>\n\n- 关闭节点的光照，保证整个视口显示的场景的亮度是一样的。\n- 关闭深度测试\n- 调整渲染的顺序为最后渲染，让`HUD`显示在整个场景的最前方\n- 设置参考帧为绝对参考帧\n- 设置变换矩阵,不受父节点的影响\n- 设置投影矩阵(平行投影或者透视),设置视口的大小。\n\n\n\n## Create HUD\n\n### 1、创建相机节点\n\n```C++\nosg::ref_ptr<osg::Camera> hud_camera = new osg::Camera;   // 创建相机的节点\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;      // 创建绘制的节点(也可以是文字)\n```\n\n### 2、设置投影矩阵\n\n```C++\nhud_camera->setProjectionMatrixAsOrtho2D(-3, 4, -3, 4, -1.0, 100);  // 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小\n```\n\n### 3、设置视口大小(ViewPort)\n\n```C++\n// void setViewport(osg::Viewport* viewport);\n// void setViewport(int x,int y,int width,int height);\nhud_camera->setviewport();  // 两种方式都是可以的 \n```\n\n### 4、设置渲染的顺序\n\n```C++\nhud_camera->setRenderOrder(osg::Camera::POST_RENDER);\n```\n\n### 5、设置参考帧\n\n```C++\nhud_camera->setReferenceFrame(osg::Transform::ABSOLUTE_RF);\n```\n\n### 6、设置不受父节点的影响\n\n```C++\nhud_camera->setViewMatrix(osg::Matrix::identity());\n```\n\n### 7、设置不获取焦点\n\n```C++\nhud_camera->setAllowEventFocus(false);\n```\n\n### 8、设置节点的更新回调\n\n```C++\n// void setUpdateCallback(Callback* nc);\n// 需要重写一个节点的更新回调 修改节点的视图矩阵 \n// 设置相机的三个参数  \n// 视点 相机的位置 相机的向上方向\nhud_camera->setUpdateCallback();\n```\n\n## 挂载节点\n\n### 1、将前面创建的几何节点挂载到 相机上\n\n```C++\nosg::ref_ptr<osg::Geode> node = new osg::Geode;\nnode->addChild(geom.get());\nhud_camera->addChild(node.get());\n```\n\n### 2、设置节点的属性\n\n- 关闭光照 深度测试 & 打开混溶\n\n```C++\nauto states = node->getOrCreateStateSet();\nstates->setMode(GL_LIGHTING, osg::StateAttribute::ON);   //关闭灯光\nstates->setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);//关闭深度测试\nstates->setMode(GL_BLEND, osg::StateAttribute::ON);  \n```\n\n\n\n","source":"_posts/OSG-HUD.md","raw":"---\ntitle: OSG-HUD\ndate: 2021-07-26 22:40:11\ncategories:\n - works\n - GF\ntags:\n- cpp\n- osg\n---\n\n# OSG-HUD\n\n- <p>\"HUD\"在渲染的场景中算是比较常见的存在: 游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...</p>\n\n<b style=\"color:red\">如何创建HUD ？</b> \n\n<p>本质上说，HUD就是一个相机( 在`OSG`中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行</p>\n\n<b style=\"color:red\">实现要点，如下：</b>\n\n- 关闭节点的光照，保证整个视口显示的场景的亮度是一样的。\n- 关闭深度测试\n- 调整渲染的顺序为最后渲染，让`HUD`显示在整个场景的最前方\n- 设置参考帧为绝对参考帧\n- 设置变换矩阵,不受父节点的影响\n- 设置投影矩阵(平行投影或者透视),设置视口的大小。\n\n\n\n## Create HUD\n\n### 1、创建相机节点\n\n```C++\nosg::ref_ptr<osg::Camera> hud_camera = new osg::Camera;   // 创建相机的节点\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;      // 创建绘制的节点(也可以是文字)\n```\n\n### 2、设置投影矩阵\n\n```C++\nhud_camera->setProjectionMatrixAsOrtho2D(-3, 4, -3, 4, -1.0, 100);  // 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小\n```\n\n### 3、设置视口大小(ViewPort)\n\n```C++\n// void setViewport(osg::Viewport* viewport);\n// void setViewport(int x,int y,int width,int height);\nhud_camera->setviewport();  // 两种方式都是可以的 \n```\n\n### 4、设置渲染的顺序\n\n```C++\nhud_camera->setRenderOrder(osg::Camera::POST_RENDER);\n```\n\n### 5、设置参考帧\n\n```C++\nhud_camera->setReferenceFrame(osg::Transform::ABSOLUTE_RF);\n```\n\n### 6、设置不受父节点的影响\n\n```C++\nhud_camera->setViewMatrix(osg::Matrix::identity());\n```\n\n### 7、设置不获取焦点\n\n```C++\nhud_camera->setAllowEventFocus(false);\n```\n\n### 8、设置节点的更新回调\n\n```C++\n// void setUpdateCallback(Callback* nc);\n// 需要重写一个节点的更新回调 修改节点的视图矩阵 \n// 设置相机的三个参数  \n// 视点 相机的位置 相机的向上方向\nhud_camera->setUpdateCallback();\n```\n\n## 挂载节点\n\n### 1、将前面创建的几何节点挂载到 相机上\n\n```C++\nosg::ref_ptr<osg::Geode> node = new osg::Geode;\nnode->addChild(geom.get());\nhud_camera->addChild(node.get());\n```\n\n### 2、设置节点的属性\n\n- 关闭光照 深度测试 & 打开混溶\n\n```C++\nauto states = node->getOrCreateStateSet();\nstates->setMode(GL_LIGHTING, osg::StateAttribute::ON);   //关闭灯光\nstates->setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);//关闭深度测试\nstates->setMode(GL_BLEND, osg::StateAttribute::ON);  \n```\n\n\n\n","slug":"OSG-HUD","published":1,"updated":"2021-07-26T14:50:44.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h45000iq0uud8smhkaf","content":"<h1 id=\"OSG-HUD\"><a href=\"#OSG-HUD\" class=\"headerlink\" title=\"OSG-HUD\"></a>OSG-HUD</h1><ul>\n<li><p>\"HUD\"在渲染的场景中算是比较常见的存在: 游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...</p></li>\n</ul>\n<p><b style=\"color:red\">如何创建HUD ？</b> </p>\n<p>本质上说，HUD就是一个相机( 在`OSG`中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行</p>\n\n<p><b style=\"color:red\">实现要点，如下：</b></p>\n<ul>\n<li>关闭节点的光照，保证整个视口显示的场景的亮度是一样的。</li>\n<li>关闭深度测试</li>\n<li>调整渲染的顺序为最后渲染，让<code>HUD</code>显示在整个场景的最前方</li>\n<li>设置参考帧为绝对参考帧</li>\n<li>设置变换矩阵,不受父节点的影响</li>\n<li>设置投影矩阵(平行投影或者透视),设置视口的大小。</li>\n</ul>\n<h2 id=\"Create-HUD\"><a href=\"#Create-HUD\" class=\"headerlink\" title=\"Create HUD\"></a>Create HUD</h2><h3 id=\"1、创建相机节点\"><a href=\"#1、创建相机节点\" class=\"headerlink\" title=\"1、创建相机节点\"></a>1、创建相机节点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Camera&gt; hud_camera = <span class=\"keyword\">new</span> osg::Camera;   <span class=\"comment\">// 创建相机的节点</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;      <span class=\"comment\">// 创建绘制的节点(也可以是文字)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、设置投影矩阵\"><a href=\"#2、设置投影矩阵\" class=\"headerlink\" title=\"2、设置投影矩阵\"></a>2、设置投影矩阵</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setProjectionMatrixAsOrtho2D(<span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-1.0</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、设置视口大小-ViewPort\"><a href=\"#3、设置视口大小-ViewPort\" class=\"headerlink\" title=\"3、设置视口大小(ViewPort)\"></a>3、设置视口大小(ViewPort)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setViewport(osg::Viewport* viewport);</span></span><br><span class=\"line\"><span class=\"comment\">// void setViewport(int x,int y,int width,int height);</span></span><br><span class=\"line\">hud_camera-&gt;setviewport();  <span class=\"comment\">// 两种方式都是可以的 </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、设置渲染的顺序\"><a href=\"#4、设置渲染的顺序\" class=\"headerlink\" title=\"4、设置渲染的顺序\"></a>4、设置渲染的顺序</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setRenderOrder(osg::Camera::POST_RENDER);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、设置参考帧\"><a href=\"#5、设置参考帧\" class=\"headerlink\" title=\"5、设置参考帧\"></a>5、设置参考帧</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setReferenceFrame(osg::Transform::ABSOLUTE_RF);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、设置不受父节点的影响\"><a href=\"#6、设置不受父节点的影响\" class=\"headerlink\" title=\"6、设置不受父节点的影响\"></a>6、设置不受父节点的影响</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setViewMatrix(osg::Matrix::identity());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、设置不获取焦点\"><a href=\"#7、设置不获取焦点\" class=\"headerlink\" title=\"7、设置不获取焦点\"></a>7、设置不获取焦点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setAllowEventFocus(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、设置节点的更新回调\"><a href=\"#8、设置节点的更新回调\" class=\"headerlink\" title=\"8、设置节点的更新回调\"></a>8、设置节点的更新回调</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setUpdateCallback(Callback* nc);</span></span><br><span class=\"line\"><span class=\"comment\">// 需要重写一个节点的更新回调 修改节点的视图矩阵 </span></span><br><span class=\"line\"><span class=\"comment\">// 设置相机的三个参数  </span></span><br><span class=\"line\"><span class=\"comment\">// 视点 相机的位置 相机的向上方向</span></span><br><span class=\"line\">hud_camera-&gt;setUpdateCallback();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"挂载节点\"><a href=\"#挂载节点\" class=\"headerlink\" title=\"挂载节点\"></a>挂载节点</h2><h3 id=\"1、将前面创建的几何节点挂载到-相机上\"><a href=\"#1、将前面创建的几何节点挂载到-相机上\" class=\"headerlink\" title=\"1、将前面创建的几何节点挂载到 相机上\"></a>1、将前面创建的几何节点挂载到 相机上</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Geode&gt; node = <span class=\"keyword\">new</span> osg::Geode;</span><br><span class=\"line\">node-&gt;addChild(geom.get());</span><br><span class=\"line\">hud_camera-&gt;addChild(node.get());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、设置节点的属性\"><a href=\"#2、设置节点的属性\" class=\"headerlink\" title=\"2、设置节点的属性\"></a>2、设置节点的属性</h3><ul>\n<li>关闭光照 深度测试 &amp; 打开混溶</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> states = node-&gt;getOrCreateStateSet();</span><br><span class=\"line\">states-&gt;setMode(GL_LIGHTING, osg::StateAttribute::ON);   <span class=\"comment\">//关闭灯光</span></span><br><span class=\"line\">states-&gt;setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);<span class=\"comment\">//关闭深度测试</span></span><br><span class=\"line\">states-&gt;setMode(GL_BLEND, osg::StateAttribute::ON);  </span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"OSG-HUD\"><a href=\"#OSG-HUD\" class=\"headerlink\" title=\"OSG-HUD\"></a>OSG-HUD</h1><ul>\n<li><p>\"HUD\"在渲染的场景中算是比较常见的存在: 游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...</p></li>\n</ul>\n<p><b style=\"color:red\">如何创建HUD ？</b> </p>\n<p>本质上说，HUD就是一个相机( 在`OSG`中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行</p>\n\n<p><b style=\"color:red\">实现要点，如下：</b></p>\n<ul>\n<li>关闭节点的光照，保证整个视口显示的场景的亮度是一样的。</li>\n<li>关闭深度测试</li>\n<li>调整渲染的顺序为最后渲染，让<code>HUD</code>显示在整个场景的最前方</li>\n<li>设置参考帧为绝对参考帧</li>\n<li>设置变换矩阵,不受父节点的影响</li>\n<li>设置投影矩阵(平行投影或者透视),设置视口的大小。</li>\n</ul>\n<h2 id=\"Create-HUD\"><a href=\"#Create-HUD\" class=\"headerlink\" title=\"Create HUD\"></a>Create HUD</h2><h3 id=\"1、创建相机节点\"><a href=\"#1、创建相机节点\" class=\"headerlink\" title=\"1、创建相机节点\"></a>1、创建相机节点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Camera&gt; hud_camera = <span class=\"keyword\">new</span> osg::Camera;   <span class=\"comment\">// 创建相机的节点</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;      <span class=\"comment\">// 创建绘制的节点(也可以是文字)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、设置投影矩阵\"><a href=\"#2、设置投影矩阵\" class=\"headerlink\" title=\"2、设置投影矩阵\"></a>2、设置投影矩阵</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setProjectionMatrixAsOrtho2D(<span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-1.0</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、设置视口大小-ViewPort\"><a href=\"#3、设置视口大小-ViewPort\" class=\"headerlink\" title=\"3、设置视口大小(ViewPort)\"></a>3、设置视口大小(ViewPort)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setViewport(osg::Viewport* viewport);</span></span><br><span class=\"line\"><span class=\"comment\">// void setViewport(int x,int y,int width,int height);</span></span><br><span class=\"line\">hud_camera-&gt;setviewport();  <span class=\"comment\">// 两种方式都是可以的 </span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、设置渲染的顺序\"><a href=\"#4、设置渲染的顺序\" class=\"headerlink\" title=\"4、设置渲染的顺序\"></a>4、设置渲染的顺序</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setRenderOrder(osg::Camera::POST_RENDER);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、设置参考帧\"><a href=\"#5、设置参考帧\" class=\"headerlink\" title=\"5、设置参考帧\"></a>5、设置参考帧</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setReferenceFrame(osg::Transform::ABSOLUTE_RF);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、设置不受父节点的影响\"><a href=\"#6、设置不受父节点的影响\" class=\"headerlink\" title=\"6、设置不受父节点的影响\"></a>6、设置不受父节点的影响</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setViewMatrix(osg::Matrix::identity());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、设置不获取焦点\"><a href=\"#7、设置不获取焦点\" class=\"headerlink\" title=\"7、设置不获取焦点\"></a>7、设置不获取焦点</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setAllowEventFocus(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、设置节点的更新回调\"><a href=\"#8、设置节点的更新回调\" class=\"headerlink\" title=\"8、设置节点的更新回调\"></a>8、设置节点的更新回调</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setUpdateCallback(Callback* nc);</span></span><br><span class=\"line\"><span class=\"comment\">// 需要重写一个节点的更新回调 修改节点的视图矩阵 </span></span><br><span class=\"line\"><span class=\"comment\">// 设置相机的三个参数  </span></span><br><span class=\"line\"><span class=\"comment\">// 视点 相机的位置 相机的向上方向</span></span><br><span class=\"line\">hud_camera-&gt;setUpdateCallback();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"挂载节点\"><a href=\"#挂载节点\" class=\"headerlink\" title=\"挂载节点\"></a>挂载节点</h2><h3 id=\"1、将前面创建的几何节点挂载到-相机上\"><a href=\"#1、将前面创建的几何节点挂载到-相机上\" class=\"headerlink\" title=\"1、将前面创建的几何节点挂载到 相机上\"></a>1、将前面创建的几何节点挂载到 相机上</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Geode&gt; node = <span class=\"keyword\">new</span> osg::Geode;</span><br><span class=\"line\">node-&gt;addChild(geom.get());</span><br><span class=\"line\">hud_camera-&gt;addChild(node.get());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、设置节点的属性\"><a href=\"#2、设置节点的属性\" class=\"headerlink\" title=\"2、设置节点的属性\"></a>2、设置节点的属性</h3><ul>\n<li>关闭光照 深度测试 &amp; 打开混溶</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> states = node-&gt;getOrCreateStateSet();</span><br><span class=\"line\">states-&gt;setMode(GL_LIGHTING, osg::StateAttribute::ON);   <span class=\"comment\">//关闭灯光</span></span><br><span class=\"line\">states-&gt;setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);<span class=\"comment\">//关闭深度测试</span></span><br><span class=\"line\">states-&gt;setMode(GL_BLEND, osg::StateAttribute::ON);  </span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"OSG踩坑记-模型共享&模型颜色修改","date":"2021-03-20T12:54:22.000Z","_content":"\n###  简单概述\n\n在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。\n\n### 伪代码：\n\n#### 1、读入模型\n\n```c++\n// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。\n// 使用osg自带读取模型的函数读取模型\n// 推荐使用 osg 的智能指针\n// 此处使用一个 内嵌的几何体 代替模型 \n\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry; \n// osg 的智能指针采用引用计数的方式决定当前对象是否释放\n```\n\n#### 2、计算对模型的旋转、缩放、平移的操作矩阵\n\n```C++\n// osg 有专门用户模型操作的类  osg::MatrixTransform \n// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 \nosg::ref_ptr<osg::MatrixTransform> trans = new osg::MatrixTransform;\n// 对于模型的操作，有PVM矩阵的意思 \n\n// 创建旋转矩阵 \nosg::Matrix matrix_rotate;\n// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  \nmatrix_rotate.makeRotate(osg::vec3(0,0,1),osg::vec3(1,0,0));  // 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向\n// 你也可以直接选择使用\nosg::Matrix::rotate(osg::Vec3(),osg::Vec3()); // 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵\n\n// ==============================================================================================\n// 也可以直接 设置最终的变换矩阵 \ntrans->setMatrix(matrix_rotate * osg::Martix::scale(1.0,1.0,1.0) * osg::translate(osg::Vec3()));\n// trans 已经存储了 我们对于模型的操作 \n```\n\n#### 3、对trans节点设置材料等属性 \n\n```C++\n// 创建材质对象\nosg::Material* mat = new osg::Material();\nmat->setColorMode(osg::Material::ColorMode::DIFFUSE);   // 设置绘制颜色的模式 \nmat->setDiffuse(osg::Material::FRONT, osg::Vec4());      // 设置此种模式下的颜色 \n\ntrans->getOrCreateStateSet()->setAttribute(mat);        // 将材质设置给 节点 \n```\n\n#### 4、将对象作为节点添加\n\n```C++\ntrans.addchild(geom.get());\n```\n\n#### 5、将操作节点添加到绘制的根节点或者是其他的叶节点\n\n```C++\n// ......\n```\n\n","source":"_posts/OSG踩坑记-模型共享-模型颜色修改.md","raw":"---\ntitle: OSG踩坑记-模型共享&模型颜色修改\ndate: 2021-03-20 20:54:22\ncategories: \n- works\n- GF\n- OSG\ntags: \n- cpp\n- osg\n---\n\n###  简单概述\n\n在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。\n\n### 伪代码：\n\n#### 1、读入模型\n\n```c++\n// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。\n// 使用osg自带读取模型的函数读取模型\n// 推荐使用 osg 的智能指针\n// 此处使用一个 内嵌的几何体 代替模型 \n\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry; \n// osg 的智能指针采用引用计数的方式决定当前对象是否释放\n```\n\n#### 2、计算对模型的旋转、缩放、平移的操作矩阵\n\n```C++\n// osg 有专门用户模型操作的类  osg::MatrixTransform \n// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 \nosg::ref_ptr<osg::MatrixTransform> trans = new osg::MatrixTransform;\n// 对于模型的操作，有PVM矩阵的意思 \n\n// 创建旋转矩阵 \nosg::Matrix matrix_rotate;\n// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  \nmatrix_rotate.makeRotate(osg::vec3(0,0,1),osg::vec3(1,0,0));  // 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向\n// 你也可以直接选择使用\nosg::Matrix::rotate(osg::Vec3(),osg::Vec3()); // 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵\n\n// ==============================================================================================\n// 也可以直接 设置最终的变换矩阵 \ntrans->setMatrix(matrix_rotate * osg::Martix::scale(1.0,1.0,1.0) * osg::translate(osg::Vec3()));\n// trans 已经存储了 我们对于模型的操作 \n```\n\n#### 3、对trans节点设置材料等属性 \n\n```C++\n// 创建材质对象\nosg::Material* mat = new osg::Material();\nmat->setColorMode(osg::Material::ColorMode::DIFFUSE);   // 设置绘制颜色的模式 \nmat->setDiffuse(osg::Material::FRONT, osg::Vec4());      // 设置此种模式下的颜色 \n\ntrans->getOrCreateStateSet()->setAttribute(mat);        // 将材质设置给 节点 \n```\n\n#### 4、将对象作为节点添加\n\n```C++\ntrans.addchild(geom.get());\n```\n\n#### 5、将操作节点添加到绘制的根节点或者是其他的叶节点\n\n```C++\n// ......\n```\n\n","slug":"OSG踩坑记-模型共享-模型颜色修改","published":1,"updated":"2021-03-21T07:20:00.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h47000jq0uu48ivh6gr","content":"<h3 id=\"简单概述\"><a href=\"#简单概述\" class=\"headerlink\" title=\"简单概述\"></a>简单概述</h3><p>在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。</p>\n<h3 id=\"伪代码：\"><a href=\"#伪代码：\" class=\"headerlink\" title=\"伪代码：\"></a>伪代码：</h3><h4 id=\"1、读入模型\"><a href=\"#1、读入模型\" class=\"headerlink\" title=\"1、读入模型\"></a>1、读入模型</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。</span></span><br><span class=\"line\"><span class=\"comment\">// 使用osg自带读取模型的函数读取模型</span></span><br><span class=\"line\"><span class=\"comment\">// 推荐使用 osg 的智能指针</span></span><br><span class=\"line\"><span class=\"comment\">// 此处使用一个 内嵌的几何体 代替模型 </span></span><br><span class=\"line\"></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry; </span><br><span class=\"line\"><span class=\"comment\">// osg 的智能指针采用引用计数的方式决定当前对象是否释放</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、计算对模型的旋转、缩放、平移的操作矩阵\"><a href=\"#2、计算对模型的旋转、缩放、平移的操作矩阵\" class=\"headerlink\" title=\"2、计算对模型的旋转、缩放、平移的操作矩阵\"></a>2、计算对模型的旋转、缩放、平移的操作矩阵</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osg 有专门用户模型操作的类  osg::MatrixTransform </span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 </span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::MatrixTransform&gt; trans = <span class=\"keyword\">new</span> osg::MatrixTransform;</span><br><span class=\"line\"><span class=\"comment\">// 对于模型的操作，有PVM矩阵的意思 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建旋转矩阵 </span></span><br><span class=\"line\">osg::Matrix matrix_rotate;</span><br><span class=\"line\"><span class=\"comment\">// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  </span></span><br><span class=\"line\">matrix_rotate.makeRotate(osg::vec3(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>),osg::vec3(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));  <span class=\"comment\">// 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向</span></span><br><span class=\"line\"><span class=\"comment\">// 你也可以直接选择使用</span></span><br><span class=\"line\">osg::Matrix::rotate(osg::Vec3(),osg::Vec3()); <span class=\"comment\">// 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==============================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接 设置最终的变换矩阵 </span></span><br><span class=\"line\">trans-&gt;setMatrix(matrix_rotate * osg::Martix::scale(<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>) * osg::translate(osg::Vec3()));</span><br><span class=\"line\"><span class=\"comment\">// trans 已经存储了 我们对于模型的操作 </span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、对trans节点设置材料等属性\"><a href=\"#3、对trans节点设置材料等属性\" class=\"headerlink\" title=\"3、对trans节点设置材料等属性\"></a>3、对trans节点设置材料等属性</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建材质对象</span></span><br><span class=\"line\">osg::Material* mat = <span class=\"keyword\">new</span> osg::Material();</span><br><span class=\"line\">mat-&gt;setColorMode(osg::Material::ColorMode::DIFFUSE);   <span class=\"comment\">// 设置绘制颜色的模式 </span></span><br><span class=\"line\">mat-&gt;setDiffuse(osg::Material::FRONT, osg::Vec4());      <span class=\"comment\">// 设置此种模式下的颜色 </span></span><br><span class=\"line\"></span><br><span class=\"line\">trans-&gt;getOrCreateStateSet()-&gt;setAttribute(mat);        <span class=\"comment\">// 将材质设置给 节点 </span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、将对象作为节点添加\"><a href=\"#4、将对象作为节点添加\" class=\"headerlink\" title=\"4、将对象作为节点添加\"></a>4、将对象作为节点添加</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trans.addchild(geom.get());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、将操作节点添加到绘制的根节点或者是其他的叶节点\"><a href=\"#5、将操作节点添加到绘制的根节点或者是其他的叶节点\" class=\"headerlink\" title=\"5、将操作节点添加到绘制的根节点或者是其他的叶节点\"></a>5、将操作节点添加到绘制的根节点或者是其他的叶节点</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ......</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单概述\"><a href=\"#简单概述\" class=\"headerlink\" title=\"简单概述\"></a>简单概述</h3><p>在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。</p>\n<h3 id=\"伪代码：\"><a href=\"#伪代码：\" class=\"headerlink\" title=\"伪代码：\"></a>伪代码：</h3><h4 id=\"1、读入模型\"><a href=\"#1、读入模型\" class=\"headerlink\" title=\"1、读入模型\"></a>1、读入模型</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。</span></span><br><span class=\"line\"><span class=\"comment\">// 使用osg自带读取模型的函数读取模型</span></span><br><span class=\"line\"><span class=\"comment\">// 推荐使用 osg 的智能指针</span></span><br><span class=\"line\"><span class=\"comment\">// 此处使用一个 内嵌的几何体 代替模型 </span></span><br><span class=\"line\"></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry; </span><br><span class=\"line\"><span class=\"comment\">// osg 的智能指针采用引用计数的方式决定当前对象是否释放</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、计算对模型的旋转、缩放、平移的操作矩阵\"><a href=\"#2、计算对模型的旋转、缩放、平移的操作矩阵\" class=\"headerlink\" title=\"2、计算对模型的旋转、缩放、平移的操作矩阵\"></a>2、计算对模型的旋转、缩放、平移的操作矩阵</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osg 有专门用户模型操作的类  osg::MatrixTransform </span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 </span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::MatrixTransform&gt; trans = <span class=\"keyword\">new</span> osg::MatrixTransform;</span><br><span class=\"line\"><span class=\"comment\">// 对于模型的操作，有PVM矩阵的意思 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建旋转矩阵 </span></span><br><span class=\"line\">osg::Matrix matrix_rotate;</span><br><span class=\"line\"><span class=\"comment\">// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  </span></span><br><span class=\"line\">matrix_rotate.makeRotate(osg::vec3(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>),osg::vec3(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));  <span class=\"comment\">// 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向</span></span><br><span class=\"line\"><span class=\"comment\">// 你也可以直接选择使用</span></span><br><span class=\"line\">osg::Matrix::rotate(osg::Vec3(),osg::Vec3()); <span class=\"comment\">// 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==============================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接 设置最终的变换矩阵 </span></span><br><span class=\"line\">trans-&gt;setMatrix(matrix_rotate * osg::Martix::scale(<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>) * osg::translate(osg::Vec3()));</span><br><span class=\"line\"><span class=\"comment\">// trans 已经存储了 我们对于模型的操作 </span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、对trans节点设置材料等属性\"><a href=\"#3、对trans节点设置材料等属性\" class=\"headerlink\" title=\"3、对trans节点设置材料等属性\"></a>3、对trans节点设置材料等属性</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建材质对象</span></span><br><span class=\"line\">osg::Material* mat = <span class=\"keyword\">new</span> osg::Material();</span><br><span class=\"line\">mat-&gt;setColorMode(osg::Material::ColorMode::DIFFUSE);   <span class=\"comment\">// 设置绘制颜色的模式 </span></span><br><span class=\"line\">mat-&gt;setDiffuse(osg::Material::FRONT, osg::Vec4());      <span class=\"comment\">// 设置此种模式下的颜色 </span></span><br><span class=\"line\"></span><br><span class=\"line\">trans-&gt;getOrCreateStateSet()-&gt;setAttribute(mat);        <span class=\"comment\">// 将材质设置给 节点 </span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、将对象作为节点添加\"><a href=\"#4、将对象作为节点添加\" class=\"headerlink\" title=\"4、将对象作为节点添加\"></a>4、将对象作为节点添加</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trans.addchild(geom.get());</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、将操作节点添加到绘制的根节点或者是其他的叶节点\"><a href=\"#5、将操作节点添加到绘制的根节点或者是其他的叶节点\" class=\"headerlink\" title=\"5、将操作节点添加到绘制的根节点或者是其他的叶节点\"></a>5、将操作节点添加到绘制的根节点或者是其他的叶节点</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ......</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"OSG踩坑记-默认光源","date":"2021-04-03T16:10:50.000Z","mathjax":true,"_content":"\n### OSG-Viewer默认光源\n\n```C++\nosg::Node->getOrCreateStateSet()->setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    // 法线随着模型大小变化而变化。\nosg::Node->getOrCreateStateSet()->setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); // 关闭节点光源 并遵从父节点的光照设置\n```\n\n---\n\n##### `不指定法向` -- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化 </font> \n\n### Viewer 默认光源的使用\n\n#### 1、设置光照的相关的信息 \n\n- `osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配`\n\n- 你需要设置的信息包括: ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。\n\n> 设置光照  -- <font color=Green>衰减公式</font>\n> $$\n> F = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\n> $$\n>\n\n```C++ \n\t// 1. 获取缺省的光照\n\tosg::Light *light = viewer->getLight(); // 从当前的查看器 获取光照设置 \n\tlight->setAmbient(osg::Vec4(0.4, 0.4, 0.4, 1.0));   // 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);\n\tlight->setDiffuse(osg::Vec4(0.5, 0.5, 0.5, 1.0));   // 漫反射   直接来源于光源\n\tlight->setSpecular(osg::Vec4(0.2, 0.2, 0.2, 1.0));  // specular   高光 此处给的很低  \n\t// 由于此处我们使用的是平行光\n\tosg::Vec4 lightpos(x, y, z, 0.0f);   // 记住: 平行光的位置的最后一个分量必须是 0 \n\tlight->setPosition(lightpos);        // 设置光照位置 \n\t// 光照方向设置\n\t// 需要用到高度角和方位角 -- 计算一个你需要方向 \n\t\n\n\t// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减\n\tlight->setConstantAttenuation(1.0f);\n\tlight->setLinearAttenuation(0.0f);\n\tlight->setQuadraticAttenuation(0.f);\n```\n\n<font color=red> 产生平行光，位置分量的第四分量必须是0 </font>\n\n#### 2、对节点设置好材料属性\n\n- 材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。","source":"_posts/OSG踩坑记-默认光源.md","raw":"---\ntitle: OSG踩坑记-默认光源\ndate: 2021-04-04 00:10:50\ncategories: \n- works\n- GF\n- OSG\ntags:\n- cpp\n- osg\nmathjax: true\n---\n\n### OSG-Viewer默认光源\n\n```C++\nosg::Node->getOrCreateStateSet()->setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    // 法线随着模型大小变化而变化。\nosg::Node->getOrCreateStateSet()->setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); // 关闭节点光源 并遵从父节点的光照设置\n```\n\n---\n\n##### `不指定法向` -- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化 </font> \n\n### Viewer 默认光源的使用\n\n#### 1、设置光照的相关的信息 \n\n- `osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配`\n\n- 你需要设置的信息包括: ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。\n\n> 设置光照  -- <font color=Green>衰减公式</font>\n> $$\n> F = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\n> $$\n>\n\n```C++ \n\t// 1. 获取缺省的光照\n\tosg::Light *light = viewer->getLight(); // 从当前的查看器 获取光照设置 \n\tlight->setAmbient(osg::Vec4(0.4, 0.4, 0.4, 1.0));   // 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);\n\tlight->setDiffuse(osg::Vec4(0.5, 0.5, 0.5, 1.0));   // 漫反射   直接来源于光源\n\tlight->setSpecular(osg::Vec4(0.2, 0.2, 0.2, 1.0));  // specular   高光 此处给的很低  \n\t// 由于此处我们使用的是平行光\n\tosg::Vec4 lightpos(x, y, z, 0.0f);   // 记住: 平行光的位置的最后一个分量必须是 0 \n\tlight->setPosition(lightpos);        // 设置光照位置 \n\t// 光照方向设置\n\t// 需要用到高度角和方位角 -- 计算一个你需要方向 \n\t\n\n\t// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减\n\tlight->setConstantAttenuation(1.0f);\n\tlight->setLinearAttenuation(0.0f);\n\tlight->setQuadraticAttenuation(0.f);\n```\n\n<font color=red> 产生平行光，位置分量的第四分量必须是0 </font>\n\n#### 2、对节点设置好材料属性\n\n- 材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。","slug":"OSG踩坑记-默认光源","published":1,"updated":"2021-04-03T16:21:37.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4b000nq0uugo27c7gm","content":"<h3 id=\"OSG-Viewer默认光源\"><a href=\"#OSG-Viewer默认光源\" class=\"headerlink\" title=\"OSG-Viewer默认光源\"></a>OSG-Viewer默认光源</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    <span class=\"comment\">// 法线随着模型大小变化而变化。</span></span><br><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); <span class=\"comment\">// 关闭节点光源 并遵从父节点的光照设置</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"不指定法向-–-仍然可以看到-光照效果-但是无法看到明暗变化\"><a href=\"#不指定法向-–-仍然可以看到-光照效果-但是无法看到明暗变化\" class=\"headerlink\" title=\"不指定法向 – 仍然可以看到 光照效果 但是无法看到明暗变化 \"></a><code>不指定法向</code> – <font color=\"red\">仍然可以看到 光照效果 但是无法看到明暗变化 </font></h5><h3 id=\"Viewer-默认光源的使用\"><a href=\"#Viewer-默认光源的使用\" class=\"headerlink\" title=\"Viewer 默认光源的使用\"></a>Viewer 默认光源的使用</h3><h4 id=\"1、设置光照的相关的信息\"><a href=\"#1、设置光照的相关的信息\" class=\"headerlink\" title=\"1、设置光照的相关的信息\"></a>1、设置光照的相关的信息</h4><ul>\n<li><p><code>osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配</code></p>\n</li>\n<li><p>你需要设置的信息包括: ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。</p>\n</li>\n</ul>\n<blockquote>\n<p>设置光照  – <font color=\"Green\">衰减公式</font><br>$$<br>F = \\frac{1}{(k_c + k_l<em>d + k_q</em>d^2)}<br>$$</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取缺省的光照</span></span><br><span class=\"line\">osg::Light *light = viewer-&gt;getLight(); <span class=\"comment\">// 从当前的查看器 获取光照设置 </span></span><br><span class=\"line\">light-&gt;setAmbient(osg::Vec4(<span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);</span></span><br><span class=\"line\">light-&gt;setDiffuse(osg::Vec4(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 漫反射   直接来源于光源</span></span><br><span class=\"line\">light-&gt;setSpecular(osg::Vec4(<span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">1.0</span>));  <span class=\"comment\">// specular   高光 此处给的很低  </span></span><br><span class=\"line\"><span class=\"comment\">// 由于此处我们使用的是平行光</span></span><br><span class=\"line\"><span class=\"function\">osg::Vec4 <span class=\"title\">lightpos</span><span class=\"params\">(x, y, z, <span class=\"number\">0.0f</span>)</span></span>;   <span class=\"comment\">// 记住: 平行光的位置的最后一个分量必须是 0 </span></span><br><span class=\"line\">light-&gt;setPosition(lightpos);        <span class=\"comment\">// 设置光照位置 </span></span><br><span class=\"line\"><span class=\"comment\">// 光照方向设置</span></span><br><span class=\"line\"><span class=\"comment\">// 需要用到高度角和方位角 -- 计算一个你需要方向 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减</span></span><br><span class=\"line\">light-&gt;setConstantAttenuation(<span class=\"number\">1.0f</span>);</span><br><span class=\"line\">light-&gt;setLinearAttenuation(<span class=\"number\">0.0f</span>);</span><br><span class=\"line\">light-&gt;setQuadraticAttenuation(<span class=\"number\">0.f</span>);</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\"> 产生平行光，位置分量的第四分量必须是0 </font></p>\n<h4 id=\"2、对节点设置好材料属性\"><a href=\"#2、对节点设置好材料属性\" class=\"headerlink\" title=\"2、对节点设置好材料属性\"></a>2、对节点设置好材料属性</h4><ul>\n<li>材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"OSG-Viewer默认光源\"><a href=\"#OSG-Viewer默认光源\" class=\"headerlink\" title=\"OSG-Viewer默认光源\"></a>OSG-Viewer默认光源</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    <span class=\"comment\">// 法线随着模型大小变化而变化。</span></span><br><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); <span class=\"comment\">// 关闭节点光源 并遵从父节点的光照设置</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"不指定法向-–-仍然可以看到-光照效果-但是无法看到明暗变化\"><a href=\"#不指定法向-–-仍然可以看到-光照效果-但是无法看到明暗变化\" class=\"headerlink\" title=\"不指定法向 – 仍然可以看到 光照效果 但是无法看到明暗变化 \"></a><code>不指定法向</code> – <font color=\"red\">仍然可以看到 光照效果 但是无法看到明暗变化 </font></h5><h3 id=\"Viewer-默认光源的使用\"><a href=\"#Viewer-默认光源的使用\" class=\"headerlink\" title=\"Viewer 默认光源的使用\"></a>Viewer 默认光源的使用</h3><h4 id=\"1、设置光照的相关的信息\"><a href=\"#1、设置光照的相关的信息\" class=\"headerlink\" title=\"1、设置光照的相关的信息\"></a>1、设置光照的相关的信息</h4><ul>\n<li><p><code>osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配</code></p>\n</li>\n<li><p>你需要设置的信息包括: ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。</p>\n</li>\n</ul>\n<blockquote>\n<p>设置光照  – <font color=\"Green\">衰减公式</font><br>$$<br>F = \\frac{1}{(k_c + k_l<em>d + k_q</em>d^2)}<br>$$</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取缺省的光照</span></span><br><span class=\"line\">osg::Light *light = viewer-&gt;getLight(); <span class=\"comment\">// 从当前的查看器 获取光照设置 </span></span><br><span class=\"line\">light-&gt;setAmbient(osg::Vec4(<span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);</span></span><br><span class=\"line\">light-&gt;setDiffuse(osg::Vec4(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 漫反射   直接来源于光源</span></span><br><span class=\"line\">light-&gt;setSpecular(osg::Vec4(<span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">1.0</span>));  <span class=\"comment\">// specular   高光 此处给的很低  </span></span><br><span class=\"line\"><span class=\"comment\">// 由于此处我们使用的是平行光</span></span><br><span class=\"line\"><span class=\"function\">osg::Vec4 <span class=\"title\">lightpos</span><span class=\"params\">(x, y, z, <span class=\"number\">0.0f</span>)</span></span>;   <span class=\"comment\">// 记住: 平行光的位置的最后一个分量必须是 0 </span></span><br><span class=\"line\">light-&gt;setPosition(lightpos);        <span class=\"comment\">// 设置光照位置 </span></span><br><span class=\"line\"><span class=\"comment\">// 光照方向设置</span></span><br><span class=\"line\"><span class=\"comment\">// 需要用到高度角和方位角 -- 计算一个你需要方向 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减</span></span><br><span class=\"line\">light-&gt;setConstantAttenuation(<span class=\"number\">1.0f</span>);</span><br><span class=\"line\">light-&gt;setLinearAttenuation(<span class=\"number\">0.0f</span>);</span><br><span class=\"line\">light-&gt;setQuadraticAttenuation(<span class=\"number\">0.f</span>);</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\"> 产生平行光，位置分量的第四分量必须是0 </font></p>\n<h4 id=\"2、对节点设置好材料属性\"><a href=\"#2、对节点设置好材料属性\" class=\"headerlink\" title=\"2、对节点设置好材料属性\"></a>2、对节点设置好材料属性</h4><ul>\n<li>材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。</li>\n</ul>\n"},{"title":"Physical Sort","date":"2021-11-07T10:05:13.000Z","_content":"\n### 物理排序\n\n- 我们从上一节的知识开始 {% post_link  Table-Sort 表排序 %}，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求\n- 排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成\n\n|   A   |           A[0]           |           A[1]           |            A[2]             |           A[3]           |           A[4]            |           A[5]           |           A[6]            |           A[7]            |           A[8]            |              A[9]              |\n| :---: | :----------------------: | :----------------------: | :-------------------------: | :----------------------: | :-----------------------: | :----------------------: | :-----------------------: | :-----------------------: | :-----------------------: | :----------------------------: |\n|  Key  |            f             |            d             |              c              |            a             |             g             |            b             |             h             |             e             |             i             |               u                |\n| table |            0             |            1             |              2              |            3             |             4             |            5             |             6             |             7             |             8             |               9                |\n|  环   | <font color=red>3</font> | <font color=red>5</font> | <font color=yellow>2</font> | <font color=red>1</font> | <font color=blue>7</font> | <font color=red>0</font> | <font color=blue>4</font> | <font color=blue>6</font> | <font color=pink>8</font> | <font color=\"#32FF00\">9</font> |\n\n- 我们从`table[0]= 3` 开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环\n\n  ```C++ \n  // table[0] -> table[3] -> table[1] -> table[0]\n  // 上述序列构成了一个环\n  ```\n\n- 排序，按环处理：\n\n  - 首先，取一个临时变量`temp`随机存储，环中的任意一个元素，以A[0]为例：\n\n    ```C++ \n    temp  = f;  // 此时A[0] 为空 \n    ```\n\n  - 将table中的元素放到`A[0],A[0] = A[table[0]];`\n  \n  - |    A    |           A[0]           |           A[1]           | A[2] |           A[3]           | A[4] |           A[5]           | A[6] | A[7] | A[8] | A[9] |\n    | :-----: | :----------------------: | :----------------------: | :--: | :----------------------: | :--: | :----------------------: | :--: | :--: | :--: | :--: |\n    |   Key   |            f             |            d             |  c   |            a             |  g   |            b             |  h   |  e   |  i   |  u   |\n    |  table  |            0             |            1             |  2   |            3             |  4   |            5             |  6   |  7   |  8   |  9   |\n    |   环    | <font color=red>3</font> | <font color=red>5</font> |      | <font color=red>1</font> |      | <font color=red>0</font> |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |                          |      |           null           |      |                          |      |      |      |      |\n    |  table  |            0             |                          |      |            1             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |           null           |      |            d             |      |                          |      |      |      |      |\n    |  table  |            0             |            5             |      |            3             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |           null           |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            0             |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |            f             |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            5             |      |      |      |      |\n    \n  - 判断环结束：\n  \n    - `table[i] == i`，此时环结束\n  \n- 复杂度分析：\n\n  - 最好： 初始的时候都有序\n  - 最坏：两本书(a,b)发生交换，需要三个步骤：\n    - 两本书发生交换：\n      - 取出一本(a)，temp\n      - a = b;\n      - b = temp;\n    - 存在[N/2]个环，每个环两个元素，需要[3N/2]此移动\n  - `T = O(mN)`,m是每个元素A的复制时间\n","source":"_posts/Physical-Sort.md","raw":"---\ntitle: Physical Sort\ndate: 2021-11-07 18:05:13\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n### 物理排序\n\n- 我们从上一节的知识开始 {% post_link  Table-Sort 表排序 %}，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求\n- 排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成\n\n|   A   |           A[0]           |           A[1]           |            A[2]             |           A[3]           |           A[4]            |           A[5]           |           A[6]            |           A[7]            |           A[8]            |              A[9]              |\n| :---: | :----------------------: | :----------------------: | :-------------------------: | :----------------------: | :-----------------------: | :----------------------: | :-----------------------: | :-----------------------: | :-----------------------: | :----------------------------: |\n|  Key  |            f             |            d             |              c              |            a             |             g             |            b             |             h             |             e             |             i             |               u                |\n| table |            0             |            1             |              2              |            3             |             4             |            5             |             6             |             7             |             8             |               9                |\n|  环   | <font color=red>3</font> | <font color=red>5</font> | <font color=yellow>2</font> | <font color=red>1</font> | <font color=blue>7</font> | <font color=red>0</font> | <font color=blue>4</font> | <font color=blue>6</font> | <font color=pink>8</font> | <font color=\"#32FF00\">9</font> |\n\n- 我们从`table[0]= 3` 开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环\n\n  ```C++ \n  // table[0] -> table[3] -> table[1] -> table[0]\n  // 上述序列构成了一个环\n  ```\n\n- 排序，按环处理：\n\n  - 首先，取一个临时变量`temp`随机存储，环中的任意一个元素，以A[0]为例：\n\n    ```C++ \n    temp  = f;  // 此时A[0] 为空 \n    ```\n\n  - 将table中的元素放到`A[0],A[0] = A[table[0]];`\n  \n  - |    A    |           A[0]           |           A[1]           | A[2] |           A[3]           | A[4] |           A[5]           | A[6] | A[7] | A[8] | A[9] |\n    | :-----: | :----------------------: | :----------------------: | :--: | :----------------------: | :--: | :----------------------: | :--: | :--: | :--: | :--: |\n    |   Key   |            f             |            d             |  c   |            a             |  g   |            b             |  h   |  e   |  i   |  u   |\n    |  table  |            0             |            1             |  2   |            3             |  4   |            5             |  6   |  7   |  8   |  9   |\n    |   环    | <font color=red>3</font> | <font color=red>5</font> |      | <font color=red>1</font> |      | <font color=red>0</font> |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |                          |      |           null           |      |                          |      |      |      |      |\n    |  table  |            0             |                          |      |            1             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |           null           |      |            d             |      |                          |      |      |      |      |\n    |  table  |            0             |            5             |      |            3             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |           null           |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            0             |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |            f             |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            5             |      |      |      |      |\n    \n  - 判断环结束：\n  \n    - `table[i] == i`，此时环结束\n  \n- 复杂度分析：\n\n  - 最好： 初始的时候都有序\n  - 最坏：两本书(a,b)发生交换，需要三个步骤：\n    - 两本书发生交换：\n      - 取出一本(a)，temp\n      - a = b;\n      - b = temp;\n    - 存在[N/2]个环，每个环两个元素，需要[3N/2]此移动\n  - `T = O(mN)`,m是每个元素A的复制时间\n","slug":"Physical-Sort","published":1,"updated":"2021-11-07T13:24:45.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4c000qq0uuavurandw","content":"<h3 id=\"物理排序\"><a href=\"#物理排序\" class=\"headerlink\" title=\"物理排序\"></a>物理排序</h3><ul>\n<li>我们从上一节的知识开始 <a href=\"/2021/11/07/Table-Sort/\" title=\"表排序\">表排序</a>，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求</li>\n<li>排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">A[0]</th>\n<th align=\"center\">A[1]</th>\n<th align=\"center\">A[2]</th>\n<th align=\"center\">A[3]</th>\n<th align=\"center\">A[4]</th>\n<th align=\"center\">A[5]</th>\n<th align=\"center\">A[6]</th>\n<th align=\"center\">A[7]</th>\n<th align=\"center\">A[8]</th>\n<th align=\"center\">A[9]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Key</td>\n<td align=\"center\">f</td>\n<td align=\"center\">d</td>\n<td align=\"center\">c</td>\n<td align=\"center\">a</td>\n<td align=\"center\">g</td>\n<td align=\"center\">b</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">环</td>\n<td align=\"center\"><font color=\"red\">3</font></td>\n<td align=\"center\"><font color=\"red\">5</font></td>\n<td align=\"center\"><font color=\"yellow\">2</font></td>\n<td align=\"center\"><font color=\"red\">1</font></td>\n<td align=\"center\"><font color=\"blue\">7</font></td>\n<td align=\"center\"><font color=\"red\">0</font></td>\n<td align=\"center\"><font color=\"blue\">4</font></td>\n<td align=\"center\"><font color=\"blue\">6</font></td>\n<td align=\"center\"><font color=\"pink\">8</font></td>\n<td align=\"center\"><font color=\"#32FF00\">9</font></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>我们从<code>table[0]= 3</code> 开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// table[0] -&gt; table[3] -&gt; table[1] -&gt; table[0]</span></span><br><span class=\"line\"><span class=\"comment\">// 上述序列构成了一个环</span></span><br></pre></td></tr></table></figure></li>\n<li><p>排序，按环处理：</p>\n<ul>\n<li><p>首先，取一个临时变量<code>temp</code>随机存储，环中的任意一个元素，以A[0]为例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp  = f;  <span class=\"comment\">// 此时A[0] 为空 </span></span><br></pre></td></tr></table></figure></li>\n<li><p>将table中的元素放到<code>A[0],A[0] = A[table[0]];</code></p>\n</li>\n<li><table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">A[0]</th>\n<th align=\"center\">A[1]</th>\n<th align=\"center\">A[2]</th>\n<th align=\"center\">A[3]</th>\n<th align=\"center\">A[4]</th>\n<th align=\"center\">A[5]</th>\n<th align=\"center\">A[6]</th>\n<th align=\"center\">A[7]</th>\n<th align=\"center\">A[8]</th>\n<th align=\"center\">A[9]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Key</td>\n<td align=\"center\">f</td>\n<td align=\"center\">d</td>\n<td align=\"center\">c</td>\n<td align=\"center\">a</td>\n<td align=\"center\">g</td>\n<td align=\"center\">b</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">环</td>\n<td align=\"center\"><font color=\"red\">3</font></td>\n<td align=\"center\"><font color=\"red\">5</font></td>\n<td align=\"center\"></td>\n<td align=\"center\"><font color=\"red\">1</font></td>\n<td align=\"center\"></td>\n<td align=\"center\"><font color=\"red\">0</font></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">new key</td>\n<td align=\"center\">a</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">null</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">new key</td>\n<td align=\"center\">a</td>\n<td align=\"center\">null</td>\n<td align=\"center\"></td>\n<td align=\"center\">d</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">5</td>\n<td align=\"center\"></td>\n<td align=\"center\">3</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">new key</td>\n<td align=\"center\">a</td>\n<td align=\"center\">b</td>\n<td align=\"center\"></td>\n<td align=\"center\">d</td>\n<td align=\"center\"></td>\n<td align=\"center\">null</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n<td align=\"center\">3</td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">new key</td>\n<td align=\"center\">a</td>\n<td align=\"center\">b</td>\n<td align=\"center\"></td>\n<td align=\"center\">d</td>\n<td align=\"center\"></td>\n<td align=\"center\">f</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n<td align=\"center\">3</td>\n<td align=\"center\"></td>\n<td align=\"center\">5</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>判断环结束：</p>\n<ul>\n<li><code>table[i] == i</code>，此时环结束</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>复杂度分析：</p>\n<ul>\n<li>最好： 初始的时候都有序</li>\n<li>最坏：两本书(a,b)发生交换，需要三个步骤：<ul>\n<li>两本书发生交换：<ul>\n<li>取出一本(a)，temp</li>\n<li>a = b;</li>\n<li>b = temp;</li>\n</ul>\n</li>\n<li>存在[N/2]个环，每个环两个元素，需要[3N/2]此移动</li>\n</ul>\n</li>\n<li><code>T = O(mN)</code>,m是每个元素A的复制时间</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"物理排序\"><a href=\"#物理排序\" class=\"headerlink\" title=\"物理排序\"></a>物理排序</h3><ul>\n<li>我们从上一节的知识开始 <a href=\"/2021/11/07/Table-Sort/\" title=\"表排序\">表排序</a>，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求</li>\n<li>排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">A[0]</th>\n<th align=\"center\">A[1]</th>\n<th align=\"center\">A[2]</th>\n<th align=\"center\">A[3]</th>\n<th align=\"center\">A[4]</th>\n<th align=\"center\">A[5]</th>\n<th align=\"center\">A[6]</th>\n<th align=\"center\">A[7]</th>\n<th align=\"center\">A[8]</th>\n<th align=\"center\">A[9]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Key</td>\n<td align=\"center\">f</td>\n<td align=\"center\">d</td>\n<td align=\"center\">c</td>\n<td align=\"center\">a</td>\n<td align=\"center\">g</td>\n<td align=\"center\">b</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">环</td>\n<td align=\"center\"><font color=\"red\">3</font></td>\n<td align=\"center\"><font color=\"red\">5</font></td>\n<td align=\"center\"><font color=\"yellow\">2</font></td>\n<td align=\"center\"><font color=\"red\">1</font></td>\n<td align=\"center\"><font color=\"blue\">7</font></td>\n<td align=\"center\"><font color=\"red\">0</font></td>\n<td align=\"center\"><font color=\"blue\">4</font></td>\n<td align=\"center\"><font color=\"blue\">6</font></td>\n<td align=\"center\"><font color=\"pink\">8</font></td>\n<td align=\"center\"><font color=\"#32FF00\">9</font></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>我们从<code>table[0]= 3</code> 开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// table[0] -&gt; table[3] -&gt; table[1] -&gt; table[0]</span></span><br><span class=\"line\"><span class=\"comment\">// 上述序列构成了一个环</span></span><br></pre></td></tr></table></figure></li>\n<li><p>排序，按环处理：</p>\n<ul>\n<li><p>首先，取一个临时变量<code>temp</code>随机存储，环中的任意一个元素，以A[0]为例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp  = f;  <span class=\"comment\">// 此时A[0] 为空 </span></span><br></pre></td></tr></table></figure></li>\n<li><p>将table中的元素放到<code>A[0],A[0] = A[table[0]];</code></p>\n</li>\n<li><table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">A[0]</th>\n<th align=\"center\">A[1]</th>\n<th align=\"center\">A[2]</th>\n<th align=\"center\">A[3]</th>\n<th align=\"center\">A[4]</th>\n<th align=\"center\">A[5]</th>\n<th align=\"center\">A[6]</th>\n<th align=\"center\">A[7]</th>\n<th align=\"center\">A[8]</th>\n<th align=\"center\">A[9]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Key</td>\n<td align=\"center\">f</td>\n<td align=\"center\">d</td>\n<td align=\"center\">c</td>\n<td align=\"center\">a</td>\n<td align=\"center\">g</td>\n<td align=\"center\">b</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">环</td>\n<td align=\"center\"><font color=\"red\">3</font></td>\n<td align=\"center\"><font color=\"red\">5</font></td>\n<td align=\"center\"></td>\n<td align=\"center\"><font color=\"red\">1</font></td>\n<td align=\"center\"></td>\n<td align=\"center\"><font color=\"red\">0</font></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">new key</td>\n<td align=\"center\">a</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">null</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">new key</td>\n<td align=\"center\">a</td>\n<td align=\"center\">null</td>\n<td align=\"center\"></td>\n<td align=\"center\">d</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">5</td>\n<td align=\"center\"></td>\n<td align=\"center\">3</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">new key</td>\n<td align=\"center\">a</td>\n<td align=\"center\">b</td>\n<td align=\"center\"></td>\n<td align=\"center\">d</td>\n<td align=\"center\"></td>\n<td align=\"center\">null</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n<td align=\"center\">3</td>\n<td align=\"center\"></td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">new key</td>\n<td align=\"center\">a</td>\n<td align=\"center\">b</td>\n<td align=\"center\"></td>\n<td align=\"center\">d</td>\n<td align=\"center\"></td>\n<td align=\"center\">f</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\"></td>\n<td align=\"center\">3</td>\n<td align=\"center\"></td>\n<td align=\"center\">5</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</li>\n<li><p>判断环结束：</p>\n<ul>\n<li><code>table[i] == i</code>，此时环结束</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>复杂度分析：</p>\n<ul>\n<li>最好： 初始的时候都有序</li>\n<li>最坏：两本书(a,b)发生交换，需要三个步骤：<ul>\n<li>两本书发生交换：<ul>\n<li>取出一本(a)，temp</li>\n<li>a = b;</li>\n<li>b = temp;</li>\n</ul>\n</li>\n<li>存在[N/2]个环，每个环两个元素，需要[3N/2]此移动</li>\n</ul>\n</li>\n<li><code>T = O(mN)</code>,m是每个元素A的复制时间</li>\n</ul>\n</li>\n</ul>\n"},{"title":"QuickSort","date":"2021-10-28T14:28:59.000Z","_content":"\n## Quick Sort\n\n#### 1、快速排序概述\n\n- 快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。\n\n- 伪码实现\n\n```C++ \nvoid QuickSort(ElementType A[],int N)\n{\n    if(N < 2)\n    {\n        return ; //数据有序 不需要排序\n    }\n    // 计算主元 -- 将数据分组\n    pivot = {A|A中的一个元素}\n    将A（S）分成两个独立的子集{A[] \\ pivot}；\n    A1 = {a∈S|a < pivot};\n    A2 = {a∈S|a > pivot};\n    // 递归调用QuickSort\n}\n```\n\n#### 2、选主元\n\n- 选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。\n\n- 下面介绍一种主元的选取方法：\n\n  - 取头，中，尾的中位数\n\n  - 伪码描述：\n  ```C++\n  ElementType Media3(ElementType A[],int left,int right)\n  {\n      int center = (left + right) / 2;\n      \n      // 如果坐标的比中间的大\n      if(A[left] > A[center])\n      {\n          Swap(&A[left],&A[center]);  // 交换 左中的值 \n          //此后 A[center] > A[left]\n      }\n      // 交换后的左 依旧大于右边\n      if(A[left] > A[right])\n      {\n           Swap(&A[left],&A[right]); \n      }\n      if(A[center] > A[right])\n      {\n           Swap(&A[center],&A[right]); \n      }\n      // A[right] > A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素\n      swap(&A[center],&A[right - 1]);\n      \n      return A[rigjt -1 ];  // 返回我们得到的主元 \n  }\n  ```\n\n#### 3、子集划分\n\n- 每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。\n\n#### 4、算法实现\n\n```C++ \nvoid QuickSort(ElementType A[], int left,int right)\n{\n    if(Cutoff <= right - left)\n    {\n        // 主元\n        poivt = Media3(A,left,right);\n        int i = left;        // i 当前指向第一个元素的位置 \n        int j = right - 1;   // J 指向主元的位置 \n        for(;;)\n        {\n            while(A[++i] < poivt){}\n            while(A[--j] > poivt){}\n            if(i < j)\n            {\n                swap(&A[i],A[j]);\n            }\n            else\n            {\n                break;\n            }\n        }\n        swap(&A[i],&A[right - 1]);\n        // 递归 \n        QuickSort(A,left,i-1);\n        QuickSort(A,i,right);\n    }\n    else\n    {\n        Insert_selection(A+left,right - left + 1);\n    }\n    \n}\n\n```\n\n","source":"_posts/QuickSort.md","raw":"---\ntitle: QuickSort\ndate: 2021-10-28 22:28:59\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## Quick Sort\n\n#### 1、快速排序概述\n\n- 快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。\n\n- 伪码实现\n\n```C++ \nvoid QuickSort(ElementType A[],int N)\n{\n    if(N < 2)\n    {\n        return ; //数据有序 不需要排序\n    }\n    // 计算主元 -- 将数据分组\n    pivot = {A|A中的一个元素}\n    将A（S）分成两个独立的子集{A[] \\ pivot}；\n    A1 = {a∈S|a < pivot};\n    A2 = {a∈S|a > pivot};\n    // 递归调用QuickSort\n}\n```\n\n#### 2、选主元\n\n- 选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。\n\n- 下面介绍一种主元的选取方法：\n\n  - 取头，中，尾的中位数\n\n  - 伪码描述：\n  ```C++\n  ElementType Media3(ElementType A[],int left,int right)\n  {\n      int center = (left + right) / 2;\n      \n      // 如果坐标的比中间的大\n      if(A[left] > A[center])\n      {\n          Swap(&A[left],&A[center]);  // 交换 左中的值 \n          //此后 A[center] > A[left]\n      }\n      // 交换后的左 依旧大于右边\n      if(A[left] > A[right])\n      {\n           Swap(&A[left],&A[right]); \n      }\n      if(A[center] > A[right])\n      {\n           Swap(&A[center],&A[right]); \n      }\n      // A[right] > A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素\n      swap(&A[center],&A[right - 1]);\n      \n      return A[rigjt -1 ];  // 返回我们得到的主元 \n  }\n  ```\n\n#### 3、子集划分\n\n- 每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。\n\n#### 4、算法实现\n\n```C++ \nvoid QuickSort(ElementType A[], int left,int right)\n{\n    if(Cutoff <= right - left)\n    {\n        // 主元\n        poivt = Media3(A,left,right);\n        int i = left;        // i 当前指向第一个元素的位置 \n        int j = right - 1;   // J 指向主元的位置 \n        for(;;)\n        {\n            while(A[++i] < poivt){}\n            while(A[--j] > poivt){}\n            if(i < j)\n            {\n                swap(&A[i],A[j]);\n            }\n            else\n            {\n                break;\n            }\n        }\n        swap(&A[i],&A[right - 1]);\n        // 递归 \n        QuickSort(A,left,i-1);\n        QuickSort(A,i,right);\n    }\n    else\n    {\n        Insert_selection(A+left,right - left + 1);\n    }\n    \n}\n\n```\n\n","slug":"QuickSort","published":1,"updated":"2021-11-05T15:58:40.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4d000vq0uu8aft6xmi","content":"<h2 id=\"Quick-Sort\"><a href=\"#Quick-Sort\" class=\"headerlink\" title=\"Quick Sort\"></a>Quick Sort</h2><h4 id=\"1、快速排序概述\"><a href=\"#1、快速排序概述\" class=\"headerlink\" title=\"1、快速排序概述\"></a>1、快速排序概述</h4><ul>\n<li><p>快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。</p>\n</li>\n<li><p>伪码实现</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ; <span class=\"comment\">//数据有序 不需要排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算主元 -- 将数据分组</span></span><br><span class=\"line\">    pivot = &#123;A|A中的一个元素&#125;</span><br><span class=\"line\">    将A（S）分成两个独立的子集&#123;A[] \\ pivot&#125;；</span><br><span class=\"line\">    A1 = &#123;a∈S|a &lt; pivot&#125;;</span><br><span class=\"line\">    A2 = &#123;a∈S|a &gt; pivot&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 递归调用QuickSort</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、选主元\"><a href=\"#2、选主元\" class=\"headerlink\" title=\"2、选主元\"></a>2、选主元</h4><ul>\n<li><p>选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。</p>\n</li>\n<li><p>下面介绍一种主元的选取方法：</p>\n<ul>\n<li><p>取头，中，尾的中位数</p>\n</li>\n<li><p>伪码描述：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ElementType <span class=\"title\">Media3</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果坐标的比中间的大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[center])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Swap(&amp;A[left],&amp;A[center]);  <span class=\"comment\">// 交换 左中的值 </span></span><br><span class=\"line\">        <span class=\"comment\">//此后 A[center] &gt; A[left]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换后的左 依旧大于右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[left],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[center] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[center],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A[right] &gt; A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素</span></span><br><span class=\"line\">    swap(&amp;A[center],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A[rigjt <span class=\"number\">-1</span> ];  <span class=\"comment\">// 返回我们得到的主元 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、子集划分\"><a href=\"#3、子集划分\" class=\"headerlink\" title=\"3、子集划分\"></a>3、子集划分</h4><ul>\n<li>每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。</li>\n</ul>\n<h4 id=\"4、算法实现\"><a href=\"#4、算法实现\" class=\"headerlink\" title=\"4、算法实现\"></a>4、算法实现</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Cutoff &lt;= right - left)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主元</span></span><br><span class=\"line\">        poivt = Media3(A,left,right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;        <span class=\"comment\">// i 当前指向第一个元素的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right - <span class=\"number\">1</span>;   <span class=\"comment\">// J 指向主元的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[++i] &lt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[--j] &gt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(&amp;A[i],A[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(&amp;A[i],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// 递归 </span></span><br><span class=\"line\">        QuickSort(A,left,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        QuickSort(A,i,right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Insert_selection(A+left,right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Quick-Sort\"><a href=\"#Quick-Sort\" class=\"headerlink\" title=\"Quick Sort\"></a>Quick Sort</h2><h4 id=\"1、快速排序概述\"><a href=\"#1、快速排序概述\" class=\"headerlink\" title=\"1、快速排序概述\"></a>1、快速排序概述</h4><ul>\n<li><p>快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。</p>\n</li>\n<li><p>伪码实现</p>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ; <span class=\"comment\">//数据有序 不需要排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算主元 -- 将数据分组</span></span><br><span class=\"line\">    pivot = &#123;A|A中的一个元素&#125;</span><br><span class=\"line\">    将A（S）分成两个独立的子集&#123;A[] \\ pivot&#125;；</span><br><span class=\"line\">    A1 = &#123;a∈S|a &lt; pivot&#125;;</span><br><span class=\"line\">    A2 = &#123;a∈S|a &gt; pivot&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 递归调用QuickSort</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、选主元\"><a href=\"#2、选主元\" class=\"headerlink\" title=\"2、选主元\"></a>2、选主元</h4><ul>\n<li><p>选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。</p>\n</li>\n<li><p>下面介绍一种主元的选取方法：</p>\n<ul>\n<li><p>取头，中，尾的中位数</p>\n</li>\n<li><p>伪码描述：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ElementType <span class=\"title\">Media3</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果坐标的比中间的大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[center])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Swap(&amp;A[left],&amp;A[center]);  <span class=\"comment\">// 交换 左中的值 </span></span><br><span class=\"line\">        <span class=\"comment\">//此后 A[center] &gt; A[left]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换后的左 依旧大于右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[left],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[center] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[center],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A[right] &gt; A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素</span></span><br><span class=\"line\">    swap(&amp;A[center],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A[rigjt <span class=\"number\">-1</span> ];  <span class=\"comment\">// 返回我们得到的主元 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、子集划分\"><a href=\"#3、子集划分\" class=\"headerlink\" title=\"3、子集划分\"></a>3、子集划分</h4><ul>\n<li>每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。</li>\n</ul>\n<h4 id=\"4、算法实现\"><a href=\"#4、算法实现\" class=\"headerlink\" title=\"4、算法实现\"></a>4、算法实现</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Cutoff &lt;= right - left)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主元</span></span><br><span class=\"line\">        poivt = Media3(A,left,right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;        <span class=\"comment\">// i 当前指向第一个元素的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right - <span class=\"number\">1</span>;   <span class=\"comment\">// J 指向主元的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[++i] &lt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[--j] &gt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(&amp;A[i],A[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(&amp;A[i],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// 递归 </span></span><br><span class=\"line\">        QuickSort(A,left,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        QuickSort(A,i,right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Insert_selection(A+left,right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Selection_sort","date":"2021-10-25T14:25:09.000Z","_content":"\n## 选择排序  \n\n- 选择排序，每次从无序的数据中选择一个`最大的`或者是`最小的`,放到合适的位置。\n\n- 代码实现：\n\n    ```C++ \n    // 这里为了使用最大堆-我们倒着排序 \n    void Selection_Sort(ElementType A[], int N)\n    {  \n        for(auto i = N-1;i >= 0；i--)\n        {\n        \t  max_postion = scanForMax(A,0,i); //获取最大元素的下标 \n              swap(&A[i],&A[max_position]);    // 交换元素    \n        }\n    }\n    ```\n\n- `scanForMax`\n  - 查找当前无序元素中最大的元素，并返回元素的下标\n    - 常规下，直接对数组元素进行扫描，时间复杂度`O(N)`,整个算法的时间复杂度`T=O(N^2)`\n    - 优化方案：如何快速找到最大值 -- 最大堆or最小堆。\n\n","source":"_posts/Selection-sort.md","raw":"---\ntitle: Selection_sort\ndate: 2021-10-25 22:25:09\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## 选择排序  \n\n- 选择排序，每次从无序的数据中选择一个`最大的`或者是`最小的`,放到合适的位置。\n\n- 代码实现：\n\n    ```C++ \n    // 这里为了使用最大堆-我们倒着排序 \n    void Selection_Sort(ElementType A[], int N)\n    {  \n        for(auto i = N-1;i >= 0；i--)\n        {\n        \t  max_postion = scanForMax(A,0,i); //获取最大元素的下标 \n              swap(&A[i],&A[max_position]);    // 交换元素    \n        }\n    }\n    ```\n\n- `scanForMax`\n  - 查找当前无序元素中最大的元素，并返回元素的下标\n    - 常规下，直接对数组元素进行扫描，时间复杂度`O(N)`,整个算法的时间复杂度`T=O(N^2)`\n    - 优化方案：如何快速找到最大值 -- 最大堆or最小堆。\n\n","slug":"Selection-sort","published":1,"updated":"2021-10-25T14:45:40.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4e000xq0uub40ahlpe","content":"<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><ul>\n<li><p>选择排序，每次从无序的数据中选择一个<code>最大的</code>或者是<code>最小的</code>,放到合适的位置。</p>\n</li>\n<li><p>代码实现：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里为了使用最大堆-我们倒着排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Selection_Sort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = N<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>；i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t  max_postion = scanForMax(A,<span class=\"number\">0</span>,i); <span class=\"comment\">//获取最大元素的下标 </span></span><br><span class=\"line\">          swap(&amp;A[i],&amp;A[max_position]);    <span class=\"comment\">// 交换元素    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>scanForMax</code></p>\n<ul>\n<li>查找当前无序元素中最大的元素，并返回元素的下标<ul>\n<li>常规下，直接对数组元素进行扫描，时间复杂度<code>O(N)</code>,整个算法的时间复杂度<code>T=O(N^2)</code></li>\n<li>优化方案：如何快速找到最大值 – 最大堆or最小堆。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><ul>\n<li><p>选择排序，每次从无序的数据中选择一个<code>最大的</code>或者是<code>最小的</code>,放到合适的位置。</p>\n</li>\n<li><p>代码实现：</p>\n  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里为了使用最大堆-我们倒着排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Selection_Sort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = N<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>；i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t  max_postion = scanForMax(A,<span class=\"number\">0</span>,i); <span class=\"comment\">//获取最大元素的下标 </span></span><br><span class=\"line\">          swap(&amp;A[i],&amp;A[max_position]);    <span class=\"comment\">// 交换元素    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><code>scanForMax</code></p>\n<ul>\n<li>查找当前无序元素中最大的元素，并返回元素的下标<ul>\n<li>常规下，直接对数组元素进行扫描，时间复杂度<code>O(N)</code>,整个算法的时间复杂度<code>T=O(N^2)</code></li>\n<li>优化方案：如何快速找到最大值 – 最大堆or最小堆。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Shell-Sort","date":"2021-10-26T12:25:46.000Z","_content":"\n###  希尔排序\n\n- 希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\n  - `DK[i-1]`有序后，执行`DK[i]`的排序后，`DK[i-1]`依旧是有序的\n\n#### 1、原始的希尔排序\n\n- `DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)`\n\n```C++\nvoid Shell_sort(ElementTypes A[], int N)\n{\n    int D;  // 当前次序的间隔\n    int P,i;\n    ElementType temp;\n    for(P=N/2;D>0;D/=2) // 间隔的变换\n    {\n        // 插入排序 \n        for(P = D; P<N; P++)\n        {\n        \ttemp = A[P];  // 当前要插入的元素 \n            for(i = P; i >= D && A[i-D] > temp;i -= D)  // 和已经有序的元素进行比较\n            // 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动\n            {\n                A[i] = A[i-D];\n            }\n            A[i] = temp;  // temp 放到正确位置\n        }\n    }\n}\n\n```\n\n- 复杂度分析： 当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到`O(N^2)`。\n\n","source":"_posts/Shell-Sort.md","raw":"---\ntitle: Shell-Sort\ndate: 2021-10-26 20:25:46\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n###  希尔排序\n\n- 希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\n  - `DK[i-1]`有序后，执行`DK[i]`的排序后，`DK[i-1]`依旧是有序的\n\n#### 1、原始的希尔排序\n\n- `DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)`\n\n```C++\nvoid Shell_sort(ElementTypes A[], int N)\n{\n    int D;  // 当前次序的间隔\n    int P,i;\n    ElementType temp;\n    for(P=N/2;D>0;D/=2) // 间隔的变换\n    {\n        // 插入排序 \n        for(P = D; P<N; P++)\n        {\n        \ttemp = A[P];  // 当前要插入的元素 \n            for(i = P; i >= D && A[i-D] > temp;i -= D)  // 和已经有序的元素进行比较\n            // 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动\n            {\n                A[i] = A[i-D];\n            }\n            A[i] = temp;  // temp 放到正确位置\n        }\n    }\n}\n\n```\n\n- 复杂度分析： 当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到`O(N^2)`。\n\n","slug":"Shell-Sort","published":1,"updated":"2021-10-26T13:41:47.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4g0011q0uu2kq0534y","content":"<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><ul>\n<li>希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序<ul>\n<li><code>DK[i-1]</code>有序后，执行<code>DK[i]</code>的排序后，<code>DK[i-1]</code>依旧是有序的</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1、原始的希尔排序\"><a href=\"#1、原始的希尔排序\" class=\"headerlink\" title=\"1、原始的希尔排序\"></a>1、原始的希尔排序</h4><ul>\n<li><code>DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Shell_sort</span><span class=\"params\">(ElementTypes A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D;  <span class=\"comment\">// 当前次序的间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> P,i;</span><br><span class=\"line\">    ElementType temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(P=N/<span class=\"number\">2</span>;D&gt;<span class=\"number\">0</span>;D/=<span class=\"number\">2</span>) <span class=\"comment\">// 间隔的变换</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入排序 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(P = D; P&lt;N; P++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \ttemp = A[P];  <span class=\"comment\">// 当前要插入的元素 </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i = P; i &gt;= D &amp;&amp; A[i-D] &gt; temp;i -= D)  <span class=\"comment\">// 和已经有序的元素进行比较</span></span><br><span class=\"line\">            <span class=\"comment\">// 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                A[i] = A[i-D];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[i] = temp;  <span class=\"comment\">// temp 放到正确位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复杂度分析： 当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到<code>O(N^2)</code>。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><ul>\n<li>希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序<ul>\n<li><code>DK[i-1]</code>有序后，执行<code>DK[i]</code>的排序后，<code>DK[i-1]</code>依旧是有序的</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1、原始的希尔排序\"><a href=\"#1、原始的希尔排序\" class=\"headerlink\" title=\"1、原始的希尔排序\"></a>1、原始的希尔排序</h4><ul>\n<li><code>DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)</code></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Shell_sort</span><span class=\"params\">(ElementTypes A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D;  <span class=\"comment\">// 当前次序的间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> P,i;</span><br><span class=\"line\">    ElementType temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(P=N/<span class=\"number\">2</span>;D&gt;<span class=\"number\">0</span>;D/=<span class=\"number\">2</span>) <span class=\"comment\">// 间隔的变换</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入排序 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(P = D; P&lt;N; P++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \ttemp = A[P];  <span class=\"comment\">// 当前要插入的元素 </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i = P; i &gt;= D &amp;&amp; A[i-D] &gt; temp;i -= D)  <span class=\"comment\">// 和已经有序的元素进行比较</span></span><br><span class=\"line\">            <span class=\"comment\">// 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                A[i] = A[i-D];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[i] = temp;  <span class=\"comment\">// temp 放到正确位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复杂度分析： 当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到<code>O(N^2)</code>。</li>\n</ul>\n"},{"title":"Table-Sort","date":"2021-11-06T16:30:03.000Z","_content":"\n### 表排序\n\n- 某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\n  - 定义一个指针数组作为\"表\"（table）\n- 概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\n  - 我们定义一个新的部分`table`记录数组中每个元素的下标\n\n| A | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7]  | A[8] | A[9] |\n|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|  Key  | f | d | c | a | g | b | h | e | i | u |\n| table | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\n  - - 初始状态下，`table[index]` 等于A 的`index`\n    - 然后我们同通过任意一种排序比较`A[table]`对应的关键字的大小，从而交换`table`中的值——排序\n\n- 排序结果 -- 使用插入排序\n\n  |     A      | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9] |\n  | :--------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n  |    Key     |  f   |  d   |  c   |  a   |  g   |  b   |  h   |  e   |  i   |  u   |\n  |   table    |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |\n  | 第零次插入 |  0   |      |      |      |      |      |      |      |      |      |\n  | 第一次插入 |  1   |  0   |      |      |      |      |      |      |      |      |\n  | 第二次插入 |  2   |  1   |  0   |      |      |      |      |      |      |      |\n  | 第三次插入 |  3   |  2   |  1   |  0   |      |      |      |      |      |      |\n  | 第四次插入 |  3   |  2   |  1   |  0   |  4   |      |      |      |      |      |\n  | 第五次插入 |  3   |  5   |  2   |  1   |  0   |  4   |      |      |      |      |\n  | 第六次插入 |  3   |  5   |  2   |  1   |  0   |  4   |  6   |      |      |      |\n  | 第七次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |      |      |\n  | 第八次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |      |\n  | 第九次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n  |   table    |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n\n- 到此，上述表变得有序：\n- 正确的输出结果是:\n  - `A[table[0]],A[table[0]]........`\n\n","source":"_posts/Table-Sort.md","raw":"---\ntitle: Table-Sort\ndate: 2021-11-07 00:30:03\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n### 表排序\n\n- 某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\n  - 定义一个指针数组作为\"表\"（table）\n- 概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\n  - 我们定义一个新的部分`table`记录数组中每个元素的下标\n\n| A | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7]  | A[8] | A[9] |\n|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|  Key  | f | d | c | a | g | b | h | e | i | u |\n| table | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\n  - - 初始状态下，`table[index]` 等于A 的`index`\n    - 然后我们同通过任意一种排序比较`A[table]`对应的关键字的大小，从而交换`table`中的值——排序\n\n- 排序结果 -- 使用插入排序\n\n  |     A      | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9] |\n  | :--------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n  |    Key     |  f   |  d   |  c   |  a   |  g   |  b   |  h   |  e   |  i   |  u   |\n  |   table    |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |\n  | 第零次插入 |  0   |      |      |      |      |      |      |      |      |      |\n  | 第一次插入 |  1   |  0   |      |      |      |      |      |      |      |      |\n  | 第二次插入 |  2   |  1   |  0   |      |      |      |      |      |      |      |\n  | 第三次插入 |  3   |  2   |  1   |  0   |      |      |      |      |      |      |\n  | 第四次插入 |  3   |  2   |  1   |  0   |  4   |      |      |      |      |      |\n  | 第五次插入 |  3   |  5   |  2   |  1   |  0   |  4   |      |      |      |      |\n  | 第六次插入 |  3   |  5   |  2   |  1   |  0   |  4   |  6   |      |      |      |\n  | 第七次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |      |      |\n  | 第八次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |      |\n  | 第九次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n  |   table    |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n\n- 到此，上述表变得有序：\n- 正确的输出结果是:\n  - `A[table[0]],A[table[0]]........`\n\n","slug":"Table-Sort","published":1,"updated":"2021-11-07T10:01:16.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4i0014q0uuant0hbit","content":"<h3 id=\"表排序\"><a href=\"#表排序\" class=\"headerlink\" title=\"表排序\"></a>表排序</h3><ul>\n<li>某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。<ul>\n<li>定义一个指针数组作为”表”（table）</li>\n</ul>\n</li>\n<li>概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。<ul>\n<li>我们定义一个新的部分<code>table</code>记录数组中每个元素的下标</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">A[0]</th>\n<th align=\"center\">A[1]</th>\n<th align=\"center\">A[2]</th>\n<th align=\"center\">A[3]</th>\n<th align=\"center\">A[4]</th>\n<th align=\"center\">A[5]</th>\n<th align=\"center\">A[6]</th>\n<th align=\"center\">A[7]</th>\n<th align=\"center\">A[8]</th>\n<th align=\"center\">A[9]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Key</td>\n<td align=\"center\">f</td>\n<td align=\"center\">d</td>\n<td align=\"center\">c</td>\n<td align=\"center\">a</td>\n<td align=\"center\">g</td>\n<td align=\"center\">b</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>初始状态下，<code>table[index]</code> 等于A 的<code>index</code></li>\n<li>然后我们同通过任意一种排序比较<code>A[table]</code>对应的关键字的大小，从而交换<code>table</code>中的值——排序</li>\n</ul>\n</li>\n<li><p>排序结果 – 使用插入排序</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">A[0]</th>\n<th align=\"center\">A[1]</th>\n<th align=\"center\">A[2]</th>\n<th align=\"center\">A[3]</th>\n<th align=\"center\">A[4]</th>\n<th align=\"center\">A[5]</th>\n<th align=\"center\">A[6]</th>\n<th align=\"center\">A[7]</th>\n<th align=\"center\">A[8]</th>\n<th align=\"center\">A[9]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Key</td>\n<td align=\"center\">f</td>\n<td align=\"center\">d</td>\n<td align=\"center\">c</td>\n<td align=\"center\">a</td>\n<td align=\"center\">g</td>\n<td align=\"center\">b</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">第零次插入</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第一次插入</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第二次插入</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第三次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第四次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第五次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第六次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第七次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第八次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\">8</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第九次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>到此，上述表变得有序：</p>\n</li>\n<li><p>正确的输出结果是:</p>\n<ul>\n<li><code>A[table[0]],A[table[0]]........</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"表排序\"><a href=\"#表排序\" class=\"headerlink\" title=\"表排序\"></a>表排序</h3><ul>\n<li>某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。<ul>\n<li>定义一个指针数组作为”表”（table）</li>\n</ul>\n</li>\n<li>概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。<ul>\n<li>我们定义一个新的部分<code>table</code>记录数组中每个元素的下标</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">A[0]</th>\n<th align=\"center\">A[1]</th>\n<th align=\"center\">A[2]</th>\n<th align=\"center\">A[3]</th>\n<th align=\"center\">A[4]</th>\n<th align=\"center\">A[5]</th>\n<th align=\"center\">A[6]</th>\n<th align=\"center\">A[7]</th>\n<th align=\"center\">A[8]</th>\n<th align=\"center\">A[9]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Key</td>\n<td align=\"center\">f</td>\n<td align=\"center\">d</td>\n<td align=\"center\">c</td>\n<td align=\"center\">a</td>\n<td align=\"center\">g</td>\n<td align=\"center\">b</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n</tbody></table>\n<ul>\n<li><ul>\n<li>初始状态下，<code>table[index]</code> 等于A 的<code>index</code></li>\n<li>然后我们同通过任意一种排序比较<code>A[table]</code>对应的关键字的大小，从而交换<code>table</code>中的值——排序</li>\n</ul>\n</li>\n<li><p>排序结果 – 使用插入排序</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">A</th>\n<th align=\"center\">A[0]</th>\n<th align=\"center\">A[1]</th>\n<th align=\"center\">A[2]</th>\n<th align=\"center\">A[3]</th>\n<th align=\"center\">A[4]</th>\n<th align=\"center\">A[5]</th>\n<th align=\"center\">A[6]</th>\n<th align=\"center\">A[7]</th>\n<th align=\"center\">A[8]</th>\n<th align=\"center\">A[9]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Key</td>\n<td align=\"center\">f</td>\n<td align=\"center\">d</td>\n<td align=\"center\">c</td>\n<td align=\"center\">a</td>\n<td align=\"center\">g</td>\n<td align=\"center\">b</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n<td align=\"center\">u</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n<td align=\"center\">4</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n<td align=\"center\">7</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">第零次插入</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第一次插入</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第二次插入</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第三次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第四次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第五次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第六次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第七次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第八次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\">8</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">第九次插入</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">6</td>\n<td align=\"center\">8</td>\n<td align=\"center\">9</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>到此，上述表变得有序：</p>\n</li>\n<li><p>正确的输出结果是:</p>\n<ul>\n<li><code>A[table[0]],A[table[0]]........</code></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Boy","date":"2021-03-16T13:53:58.000Z","_content":"\n####  About this Blog\n\n- 个人博客，分享我的日常与一些工作内容\n\n","source":"_posts/baozi.md","raw":"---\ntitle: \"Boy\"\ndate: 2021-03-16 21:53:58\ncategories:\n- bun\n- life\ntags:\n - intraduce\n---\n\n####  About this Blog\n\n- 个人博客，分享我的日常与一些工作内容\n\n","slug":"baozi","published":1,"updated":"2021-03-18T15:31:02.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4p0018q0uu6gg84khm","content":"<h4 id=\"About-this-Blog\"><a href=\"#About-this-Blog\" class=\"headerlink\" title=\"About this Blog\"></a>About this Blog</h4><ul>\n<li>个人博客，分享我的日常与一些工作内容</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"About-this-Blog\"><a href=\"#About-this-Blog\" class=\"headerlink\" title=\"About this Blog\"></a>About this Blog</h4><ul>\n<li>个人博客，分享我的日常与一些工作内容</li>\n</ul>\n"},{"title":"简单排序-冒泡&插入","date":"2021-10-19T15:41:14.000Z","_content":"\n## 简单排序:\n\n- 冒泡排序\n- 插入排序\n\n上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。\n\n在常规的排序算法中：我们默认的顺序是从小到大\n\n#### 1、冒泡排序\n\n&ensp;&ensp;原理： 冒泡排序是一个两重的`for`循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。\n\n- C++实现 -- 初始版本\n\n```c++\nvoid swap(int * a,int * b)；\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素 \n            }\n        }\n    }\n}\n\nvoid swap(int * a,int * b)\n{\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n```\n\n- 优化版本\n\n如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：\n\n```C++\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n    bool flag = false;       // 标识数组是否有序\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素\n                flag = true;\n            }\n        }\n        if(!flag)  // 满足退出条件 结束循环\n        {\n            break; \n        }\n    }\n}\n```\n- 结果展示\n  - 输入与数据：`int a[7] = {3,1,2,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png)\n\n- 复杂度分析 - 优化版本\n\n最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历`flag`变量会触发循环结束，复杂度：\n\n<center>T = O(N)</center>\n\n最坏情况：元素逆序，需要遍历比较所有的元素\n\n<center>T = O(N^2)</center>\n\n#### 2、插入排序\n\n插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。\n\n- C++实现 \n\n  ```C++\n  void Insertion_Sort(ElementType A[],int N)\n  {\n      int p,i，tmp;\n      for(p = 1;p < N;p++)\n      {\n          tmp = A[p];  // 获取插入的元素 \n          for(i = p;i > 0 && A[i - 1] > tmp;i--) // A[i-1]表示的是有序序列中的最大元素\n          {\n              A[i] = A[i-1];\n          }\n          // 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：\n          A[i] = tmp;\n      }\n  }\n  ```\n\n- 结果展示\n\n  - 输入与数据：`int a[7] = {3,1,1,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png)\n\n- 复杂度分析：\n\n  最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：\n\n  <center>T = O(N)</center>\n\n  最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：\n\n  <center>T = O(N^2)</center>\n\n#### 补充说明：\n\n- 时间复杂度下界\n\n&ensp;&ensp;&ensp;&ensp;概念：对于下边`i<j`如果A[i] > A[j]，则称`(i,j)`是一对逆序对<font color=red>逆序对(inversion)</font>\n\n- 在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font>\n\n<center>插入排序：T(N,I) = O(N+I)</center>\n\n- 对于N个不同元素组成的序列，平均具有`N(N-1)/4`个逆序对。\n\n- 对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐`Ω(N^2)`\n\n基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。\n\n### 下面将会介绍，希尔排序！\n\n","source":"_posts/sort-bubble-insertion.md","raw":"---\ntitle: 简单排序-冒泡&插入\ndate: 2021-10-19 23:41:14\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## 简单排序:\n\n- 冒泡排序\n- 插入排序\n\n上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。\n\n在常规的排序算法中：我们默认的顺序是从小到大\n\n#### 1、冒泡排序\n\n&ensp;&ensp;原理： 冒泡排序是一个两重的`for`循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。\n\n- C++实现 -- 初始版本\n\n```c++\nvoid swap(int * a,int * b)；\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素 \n            }\n        }\n    }\n}\n\nvoid swap(int * a,int * b)\n{\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n```\n\n- 优化版本\n\n如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：\n\n```C++\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n    bool flag = false;       // 标识数组是否有序\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素\n                flag = true;\n            }\n        }\n        if(!flag)  // 满足退出条件 结束循环\n        {\n            break; \n        }\n    }\n}\n```\n- 结果展示\n  - 输入与数据：`int a[7] = {3,1,2,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png)\n\n- 复杂度分析 - 优化版本\n\n最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历`flag`变量会触发循环结束，复杂度：\n\n<center>T = O(N)</center>\n\n最坏情况：元素逆序，需要遍历比较所有的元素\n\n<center>T = O(N^2)</center>\n\n#### 2、插入排序\n\n插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。\n\n- C++实现 \n\n  ```C++\n  void Insertion_Sort(ElementType A[],int N)\n  {\n      int p,i，tmp;\n      for(p = 1;p < N;p++)\n      {\n          tmp = A[p];  // 获取插入的元素 \n          for(i = p;i > 0 && A[i - 1] > tmp;i--) // A[i-1]表示的是有序序列中的最大元素\n          {\n              A[i] = A[i-1];\n          }\n          // 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：\n          A[i] = tmp;\n      }\n  }\n  ```\n\n- 结果展示\n\n  - 输入与数据：`int a[7] = {3,1,1,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png)\n\n- 复杂度分析：\n\n  最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：\n\n  <center>T = O(N)</center>\n\n  最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：\n\n  <center>T = O(N^2)</center>\n\n#### 补充说明：\n\n- 时间复杂度下界\n\n&ensp;&ensp;&ensp;&ensp;概念：对于下边`i<j`如果A[i] > A[j]，则称`(i,j)`是一对逆序对<font color=red>逆序对(inversion)</font>\n\n- 在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font>\n\n<center>插入排序：T(N,I) = O(N+I)</center>\n\n- 对于N个不同元素组成的序列，平均具有`N(N-1)/4`个逆序对。\n\n- 对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐`Ω(N^2)`\n\n基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。\n\n### 下面将会介绍，希尔排序！\n\n","slug":"sort-bubble-insertion","published":1,"updated":"2021-10-21T14:57:15.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4s001cq0uuergqgfo4","content":"<h2 id=\"简单排序\"><a href=\"#简单排序\" class=\"headerlink\" title=\"简单排序:\"></a>简单排序:</h2><ul>\n<li>冒泡排序</li>\n<li>插入排序</li>\n</ul>\n<p>上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。</p>\n<p>在常规的排序算法中：我们默认的顺序是从小到大</p>\n<h4 id=\"1、冒泡排序\"><a href=\"#1、冒泡排序\" class=\"headerlink\" title=\"1、冒泡排序\"></a>1、冒泡排序</h4><p>&ensp;&ensp;原理： 冒泡排序是一个两重的<code>for</code>循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。</p>\n<ul>\n<li>C++实现 – 初始版本</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap(int * a,int * b)；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> * a,<span class=\"keyword\">int</span> * b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">    *b ^= *a;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优化版本</li>\n</ul>\n<p>如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;       <span class=\"comment\">// 标识数组是否有序</span></span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素</span></span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)  <span class=\"comment\">// 满足退出条件 结束循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果展示<ul>\n<li>输入与数据：<code>int a[7] = &#123;3,1,2,98,30,8,90&#125;;</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png\"></p>\n<ul>\n<li>复杂度分析 - 优化版本</li>\n</ul>\n<p>最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历<code>flag</code>变量会触发循环结束，复杂度：</p>\n<center>T = O(N)</center>\n\n<p>最坏情况：元素逆序，需要遍历比较所有的元素</p>\n<center>T = O(N^2)</center>\n\n<h4 id=\"2、插入排序\"><a href=\"#2、插入排序\" class=\"headerlink\" title=\"2、插入排序\"></a>2、插入排序</h4><p>插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。</p>\n<ul>\n<li><p>C++实现 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertion_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p,i，tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = <span class=\"number\">1</span>;p &lt; N;p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = A[p];  <span class=\"comment\">// 获取插入的元素 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = p;i &gt; <span class=\"number\">0</span> &amp;&amp; A[i - <span class=\"number\">1</span>] &gt; tmp;i--) <span class=\"comment\">// A[i-1]表示的是有序序列中的最大元素</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            A[i] = A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：</span></span><br><span class=\"line\">        A[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>结果展示</p>\n<ul>\n<li>输入与数据：<code>int a[7] = &#123;3,1,1,98,30,8,90&#125;;</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png\"></p>\n<ul>\n<li><p>复杂度分析：</p>\n<p>最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：</p>\n<center>T = O(N)</center>\n\n<p>最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：</p>\n<center>T = O(N^2)</center></li>\n</ul>\n<h4 id=\"补充说明：\"><a href=\"#补充说明：\" class=\"headerlink\" title=\"补充说明：\"></a>补充说明：</h4><ul>\n<li>时间复杂度下界</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;概念：对于下边<code>i&lt;j</code>如果A[i] &gt; A[j]，则称<code>(i,j)</code>是一对逆序对<font color=\"red\">逆序对(inversion)</font></p>\n<ul>\n<li>在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=\"red\">如果序列基本有序，那么插入排序简单且高效</font></li>\n</ul>\n<center>插入排序：T(N,I) = O(N+I)</center>\n\n<ul>\n<li><p>对于N个不同元素组成的序列，平均具有<code>N(N-1)/4</code>个逆序对。</p>\n</li>\n<li><p>对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐<code>Ω(N^2)</code></p>\n</li>\n</ul>\n<p>基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。</p>\n<h3 id=\"下面将会介绍，希尔排序！\"><a href=\"#下面将会介绍，希尔排序！\" class=\"headerlink\" title=\"下面将会介绍，希尔排序！\"></a>下面将会介绍，希尔排序！</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单排序\"><a href=\"#简单排序\" class=\"headerlink\" title=\"简单排序:\"></a>简单排序:</h2><ul>\n<li>冒泡排序</li>\n<li>插入排序</li>\n</ul>\n<p>上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。</p>\n<p>在常规的排序算法中：我们默认的顺序是从小到大</p>\n<h4 id=\"1、冒泡排序\"><a href=\"#1、冒泡排序\" class=\"headerlink\" title=\"1、冒泡排序\"></a>1、冒泡排序</h4><p>&ensp;&ensp;原理： 冒泡排序是一个两重的<code>for</code>循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。</p>\n<ul>\n<li>C++实现 – 初始版本</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap(int * a,int * b)；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> * a,<span class=\"keyword\">int</span> * b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">    *b ^= *a;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优化版本</li>\n</ul>\n<p>如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;       <span class=\"comment\">// 标识数组是否有序</span></span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素</span></span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)  <span class=\"comment\">// 满足退出条件 结束循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结果展示<ul>\n<li>输入与数据：<code>int a[7] = &#123;3,1,2,98,30,8,90&#125;;</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png\"></p>\n<ul>\n<li>复杂度分析 - 优化版本</li>\n</ul>\n<p>最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历<code>flag</code>变量会触发循环结束，复杂度：</p>\n<center>T = O(N)</center>\n\n<p>最坏情况：元素逆序，需要遍历比较所有的元素</p>\n<center>T = O(N^2)</center>\n\n<h4 id=\"2、插入排序\"><a href=\"#2、插入排序\" class=\"headerlink\" title=\"2、插入排序\"></a>2、插入排序</h4><p>插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。</p>\n<ul>\n<li><p>C++实现 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertion_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p,i，tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = <span class=\"number\">1</span>;p &lt; N;p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = A[p];  <span class=\"comment\">// 获取插入的元素 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = p;i &gt; <span class=\"number\">0</span> &amp;&amp; A[i - <span class=\"number\">1</span>] &gt; tmp;i--) <span class=\"comment\">// A[i-1]表示的是有序序列中的最大元素</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            A[i] = A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：</span></span><br><span class=\"line\">        A[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>结果展示</p>\n<ul>\n<li>输入与数据：<code>int a[7] = &#123;3,1,1,98,30,8,90&#125;;</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png\"></p>\n<ul>\n<li><p>复杂度分析：</p>\n<p>最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：</p>\n<center>T = O(N)</center>\n\n<p>最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：</p>\n<center>T = O(N^2)</center></li>\n</ul>\n<h4 id=\"补充说明：\"><a href=\"#补充说明：\" class=\"headerlink\" title=\"补充说明：\"></a>补充说明：</h4><ul>\n<li>时间复杂度下界</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;概念：对于下边<code>i&lt;j</code>如果A[i] &gt; A[j]，则称<code>(i,j)</code>是一对逆序对<font color=\"red\">逆序对(inversion)</font></p>\n<ul>\n<li>在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=\"red\">如果序列基本有序，那么插入排序简单且高效</font></li>\n</ul>\n<center>插入排序：T(N,I) = O(N+I)</center>\n\n<ul>\n<li><p>对于N个不同元素组成的序列，平均具有<code>N(N-1)/4</code>个逆序对。</p>\n</li>\n<li><p>对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐<code>Ω(N^2)</code></p>\n</li>\n</ul>\n<p>基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。</p>\n<h3 id=\"下面将会介绍，希尔排序！\"><a href=\"#下面将会介绍，希尔排序！\" class=\"headerlink\" title=\"下面将会介绍，希尔排序！\"></a>下面将会介绍，希尔排序！</h3>"},{"title":"归并排序","date":"2021-10-26T15:53:24.000Z","_content":"\n## 归并排序\n\n- 归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。\n\n#### 1、有序子列的归并 - 伪代码 \n\n```C++ \n// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置\nvoid Merge(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n    // 将有序的元素写回到A中\n    for(int i =0;i < NumElements;i++,RightEnd--)\n    {\n        A[RightEnd] = tempA[RightEnd];\n    }\n}\n\n```\n\n#### 2、归并的实现 - 递归\n\n- 归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：\n\n```C++ \nvoid Msort(ElementType A[],ElementType tempA[],int L,int RightEnd)\n{\n    int center;  // 每次将元素对半砍开 \n    if(L < RightEnd)\n    {\n        center = (L + RightEnd) / 2;          // 中间位置的元素\n        MSort(A,tempA,L,center);              //左半部分 \n        MSort(A,tempA,center+1，RightEnd);    //右半部分 \n    \tMerge(A,tempA,L,center+1,RightEnd);   // 合并两部分 \n    }\n}\n```\n\n#### 2、归并的实现 - 非递归\n\n```C++ \nvoid Merge_Sort(ElementType A[],int N)\n{\n    int length = 1;   // 最开始 有序子列的长度\n    ElementType * tempA;   // 一个辅助交换的和A等大小的空间\n    tempA = new ElementType[N];\n    if(tempA != nullptr)\n    {\n        while(length < N)  // 随着有序子列的扩大，最终一定大于等于N\n        {\n            Merge_pass(A,tempA,N,length);\n            length *= 2;\n            Merge_pass(tempA,A,N,length);\n            length *= 2;\n        }\n        delete [] tempA;\n    }\n    else\n    {\n        std::cout<<\"error\"<<std::endl;\n    }\n}\n\n// 源元素位置 目标元素位置 元素个数 有序子列的大小\nvoid Merge_pass(ElementType A,ElementType tempA,int N,int length)\n{\n    for(i = 0;i <= N - 2*length;i += 2*length)   // 2*length 每次合并的元素的个数 \n    {\n        Merge_(A,tempA,i,i+length,i+2*length - 1);  // 合并\n    }\n    if(i+legnth < N)  // 剩下的元素个数 > length, 表示还可以进行一次合并： 一组的个数\n    {\n        // 此时最后被合并的数据 个数 < 2*length \n\t\tMerge_(A,tempA,i,i+length,N - 1);  // 合并\n    }\n    else\n    {\n        // 合并最后部分的元素\n        for(j = i; j < N;j++)\n        {\n            tempA[j] = A[j];\n        }\n    }\n}\n\nvoid Merge_(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n}\n```\n\n","source":"_posts/归并排序.md","raw":"---\ntitle: 归并排序\ndate: 2021-10-26 23:53:24\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n## 归并排序\n\n- 归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。\n\n#### 1、有序子列的归并 - 伪代码 \n\n```C++ \n// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置\nvoid Merge(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n    // 将有序的元素写回到A中\n    for(int i =0;i < NumElements;i++,RightEnd--)\n    {\n        A[RightEnd] = tempA[RightEnd];\n    }\n}\n\n```\n\n#### 2、归并的实现 - 递归\n\n- 归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：\n\n```C++ \nvoid Msort(ElementType A[],ElementType tempA[],int L,int RightEnd)\n{\n    int center;  // 每次将元素对半砍开 \n    if(L < RightEnd)\n    {\n        center = (L + RightEnd) / 2;          // 中间位置的元素\n        MSort(A,tempA,L,center);              //左半部分 \n        MSort(A,tempA,center+1，RightEnd);    //右半部分 \n    \tMerge(A,tempA,L,center+1,RightEnd);   // 合并两部分 \n    }\n}\n```\n\n#### 2、归并的实现 - 非递归\n\n```C++ \nvoid Merge_Sort(ElementType A[],int N)\n{\n    int length = 1;   // 最开始 有序子列的长度\n    ElementType * tempA;   // 一个辅助交换的和A等大小的空间\n    tempA = new ElementType[N];\n    if(tempA != nullptr)\n    {\n        while(length < N)  // 随着有序子列的扩大，最终一定大于等于N\n        {\n            Merge_pass(A,tempA,N,length);\n            length *= 2;\n            Merge_pass(tempA,A,N,length);\n            length *= 2;\n        }\n        delete [] tempA;\n    }\n    else\n    {\n        std::cout<<\"error\"<<std::endl;\n    }\n}\n\n// 源元素位置 目标元素位置 元素个数 有序子列的大小\nvoid Merge_pass(ElementType A,ElementType tempA,int N,int length)\n{\n    for(i = 0;i <= N - 2*length;i += 2*length)   // 2*length 每次合并的元素的个数 \n    {\n        Merge_(A,tempA,i,i+length,i+2*length - 1);  // 合并\n    }\n    if(i+legnth < N)  // 剩下的元素个数 > length, 表示还可以进行一次合并： 一组的个数\n    {\n        // 此时最后被合并的数据 个数 < 2*length \n\t\tMerge_(A,tempA,i,i+length,N - 1);  // 合并\n    }\n    else\n    {\n        // 合并最后部分的元素\n        for(j = i; j < N;j++)\n        {\n            tempA[j] = A[j];\n        }\n    }\n}\n\nvoid Merge_(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n}\n```\n\n","slug":"归并排序","published":1,"updated":"2021-10-27T15:40:29.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4t001gq0uua7nvhhn4","content":"<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><ul>\n<li>归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。</li>\n</ul>\n<h4 id=\"1、有序子列的归并-伪代码\"><a href=\"#1、有序子列的归并-伪代码\" class=\"headerlink\" title=\"1、有序子列的归并 - 伪代码\"></a>1、有序子列的归并 - 伪代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将有序的元素写回到A中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i &lt; NumElements;i++,RightEnd--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A[RightEnd] = tempA[RightEnd];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、归并的实现-递归\"><a href=\"#2、归并的实现-递归\" class=\"headerlink\" title=\"2、归并的实现 - 递归\"></a>2、归并的实现 - 递归</h4><ul>\n<li>归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Msort</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center;  <span class=\"comment\">// 每次将元素对半砍开 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt; RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        center = (L + RightEnd) / <span class=\"number\">2</span>;          <span class=\"comment\">// 中间位置的元素</span></span><br><span class=\"line\">        MSort(A,tempA,L,center);              <span class=\"comment\">//左半部分 </span></span><br><span class=\"line\">        MSort(A,tempA,center+<span class=\"number\">1</span>，RightEnd);    <span class=\"comment\">//右半部分 </span></span><br><span class=\"line\">    \tMerge(A,tempA,L,center+<span class=\"number\">1</span>,RightEnd);   <span class=\"comment\">// 合并两部分 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、归并的实现-非递归\"><a href=\"#2、归并的实现-非递归\" class=\"headerlink\" title=\"2、归并的实现 - 非递归\"></a>2、归并的实现 - 非递归</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">1</span>;   <span class=\"comment\">// 最开始 有序子列的长度</span></span><br><span class=\"line\">    ElementType * tempA;   <span class=\"comment\">// 一个辅助交换的和A等大小的空间</span></span><br><span class=\"line\">    tempA = <span class=\"keyword\">new</span> ElementType[N];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tempA != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(length &lt; N)  <span class=\"comment\">// 随着有序子列的扩大，最终一定大于等于N</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Merge_pass(A,tempA,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            Merge_pass(tempA,A,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] tempA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;error&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源元素位置 目标元素位置 元素个数 有序子列的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_pass</span><span class=\"params\">(ElementType A,ElementType tempA,<span class=\"keyword\">int</span> N,<span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt;= N - <span class=\"number\">2</span>*length;i += <span class=\"number\">2</span>*length)   <span class=\"comment\">// 2*length 每次合并的元素的个数 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Merge_(A,tempA,i,i+length,i+<span class=\"number\">2</span>*length - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+legnth &lt; N)  <span class=\"comment\">// 剩下的元素个数 &gt; length, 表示还可以进行一次合并： 一组的个数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此时最后被合并的数据 个数 &lt; 2*length </span></span><br><span class=\"line\">\t\tMerge_(A,tempA,i,i+length,N - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 合并最后部分的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i; j &lt; N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[j] = A[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><ul>\n<li>归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。</li>\n</ul>\n<h4 id=\"1、有序子列的归并-伪代码\"><a href=\"#1、有序子列的归并-伪代码\" class=\"headerlink\" title=\"1、有序子列的归并 - 伪代码\"></a>1、有序子列的归并 - 伪代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将有序的元素写回到A中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i &lt; NumElements;i++,RightEnd--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A[RightEnd] = tempA[RightEnd];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、归并的实现-递归\"><a href=\"#2、归并的实现-递归\" class=\"headerlink\" title=\"2、归并的实现 - 递归\"></a>2、归并的实现 - 递归</h4><ul>\n<li>归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Msort</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center;  <span class=\"comment\">// 每次将元素对半砍开 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt; RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        center = (L + RightEnd) / <span class=\"number\">2</span>;          <span class=\"comment\">// 中间位置的元素</span></span><br><span class=\"line\">        MSort(A,tempA,L,center);              <span class=\"comment\">//左半部分 </span></span><br><span class=\"line\">        MSort(A,tempA,center+<span class=\"number\">1</span>，RightEnd);    <span class=\"comment\">//右半部分 </span></span><br><span class=\"line\">    \tMerge(A,tempA,L,center+<span class=\"number\">1</span>,RightEnd);   <span class=\"comment\">// 合并两部分 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、归并的实现-非递归\"><a href=\"#2、归并的实现-非递归\" class=\"headerlink\" title=\"2、归并的实现 - 非递归\"></a>2、归并的实现 - 非递归</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">1</span>;   <span class=\"comment\">// 最开始 有序子列的长度</span></span><br><span class=\"line\">    ElementType * tempA;   <span class=\"comment\">// 一个辅助交换的和A等大小的空间</span></span><br><span class=\"line\">    tempA = <span class=\"keyword\">new</span> ElementType[N];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tempA != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(length &lt; N)  <span class=\"comment\">// 随着有序子列的扩大，最终一定大于等于N</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Merge_pass(A,tempA,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            Merge_pass(tempA,A,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] tempA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;error&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源元素位置 目标元素位置 元素个数 有序子列的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_pass</span><span class=\"params\">(ElementType A,ElementType tempA,<span class=\"keyword\">int</span> N,<span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt;= N - <span class=\"number\">2</span>*length;i += <span class=\"number\">2</span>*length)   <span class=\"comment\">// 2*length 每次合并的元素的个数 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Merge_(A,tempA,i,i+length,i+<span class=\"number\">2</span>*length - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+legnth &lt; N)  <span class=\"comment\">// 剩下的元素个数 &gt; length, 表示还可以进行一次合并： 一组的个数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此时最后被合并的数据 个数 &lt; 2*length </span></span><br><span class=\"line\">\t\tMerge_(A,tempA,i,i+length,N - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 合并最后部分的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i; j &lt; N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[j] = A[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"微信多开","date":"2022-02-28T14:11:02.000Z","_content":"\n## 微信多开的小技巧 - Windows\n\n- 首先，需要你知道你机器上安装微信 - 请记录它的安装位置\n\n- 一般情况下，如果你不做任何修改的话，它会在`C:\\Program Files (x86)\\Tencent\\WeChat`这个目录下：\n&ensp;&ensp; ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png \"微信安装位置\")\n\n- 然后，打开你机器上任意的一个文本编辑器，输入如下内容：\n\n- 需要多开多少个微信，你便将如下命令输入重复写多少次。\n\n    ```bash\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    \n    # 请将上面的路径换成你机器上安装微信的路径\n    # 上面表示的是同时开两个微信程序\n    # 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别\n    \n    ```\n\n- 然后将文件保存，文件后缀为`.bat`,这是`cmd`识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png \"微信多开效果图\")\n\n","source":"_posts/微信多开.md","raw":"---\ntitle: 微信多开\ndate: 2022-02-28 22:11:02\ncategories:\n- Tips\ntags:\n- windows\n---\n\n## 微信多开的小技巧 - Windows\n\n- 首先，需要你知道你机器上安装微信 - 请记录它的安装位置\n\n- 一般情况下，如果你不做任何修改的话，它会在`C:\\Program Files (x86)\\Tencent\\WeChat`这个目录下：\n&ensp;&ensp; ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png \"微信安装位置\")\n\n- 然后，打开你机器上任意的一个文本编辑器，输入如下内容：\n\n- 需要多开多少个微信，你便将如下命令输入重复写多少次。\n\n    ```bash\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    \n    # 请将上面的路径换成你机器上安装微信的路径\n    # 上面表示的是同时开两个微信程序\n    # 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别\n    \n    ```\n\n- 然后将文件保存，文件后缀为`.bat`,这是`cmd`识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png \"微信多开效果图\")\n\n","slug":"微信多开","published":1,"updated":"2022-02-28T14:36:10.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4v001kq0uu2md9hlf7","content":"<h2 id=\"微信多开的小技巧-Windows\"><a href=\"#微信多开的小技巧-Windows\" class=\"headerlink\" title=\"微信多开的小技巧 - Windows\"></a>微信多开的小技巧 - Windows</h2><ul>\n<li><p>首先，需要你知道你机器上安装微信 - 请记录它的安装位置</p>\n</li>\n<li><p>一般情况下，如果你不做任何修改的话，它会在<code>C:\\Program Files (x86)\\Tencent\\WeChat</code>这个目录下：<br>&ensp;&ensp; <img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png\" title=\"微信安装位置\"></p>\n</li>\n<li><p>然后，打开你机器上任意的一个文本编辑器，输入如下内容：</p>\n</li>\n<li><p>需要多开多少个微信，你便将如下命令输入重复写多少次。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start D:\\&quot;Program Files (x86)<span class=\"string\">&quot;\\Tencent\\WeChat\\WeChat.exe</span></span><br><span class=\"line\"><span class=\"string\">start D:\\&quot;Program Files (x86)&quot;</span>\\Tencent\\WeChat\\WeChat.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请将上面的路径换成你机器上安装微信的路径</span></span><br><span class=\"line\"><span class=\"comment\"># 上面表示的是同时开两个微信程序</span></span><br><span class=\"line\"><span class=\"comment\"># 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>然后将文件保存，文件后缀为<code>.bat</code>,这是<code>cmd</code>识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。</p>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png\" title=\"微信多开效果图\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"微信多开的小技巧-Windows\"><a href=\"#微信多开的小技巧-Windows\" class=\"headerlink\" title=\"微信多开的小技巧 - Windows\"></a>微信多开的小技巧 - Windows</h2><ul>\n<li><p>首先，需要你知道你机器上安装微信 - 请记录它的安装位置</p>\n</li>\n<li><p>一般情况下，如果你不做任何修改的话，它会在<code>C:\\Program Files (x86)\\Tencent\\WeChat</code>这个目录下：<br>&ensp;&ensp; <img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png\" title=\"微信安装位置\"></p>\n</li>\n<li><p>然后，打开你机器上任意的一个文本编辑器，输入如下内容：</p>\n</li>\n<li><p>需要多开多少个微信，你便将如下命令输入重复写多少次。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start D:\\&quot;Program Files (x86)<span class=\"string\">&quot;\\Tencent\\WeChat\\WeChat.exe</span></span><br><span class=\"line\"><span class=\"string\">start D:\\&quot;Program Files (x86)&quot;</span>\\Tencent\\WeChat\\WeChat.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请将上面的路径换成你机器上安装微信的路径</span></span><br><span class=\"line\"><span class=\"comment\"># 上面表示的是同时开两个微信程序</span></span><br><span class=\"line\"><span class=\"comment\"># 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>然后将文件保存，文件后缀为<code>.bat</code>,这是<code>cmd</code>识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。</p>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png\" title=\"微信多开效果图\"></p>\n</li>\n</ul>\n"},{"title":"记一次总结","date":"2021-10-17T07:25:40.000Z","_content":"\n### \n\n`前记：`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG)\n\n&ensp;&ensp;&ensp;&ensp;从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。\n\n&ensp; &ensp;&ensp;&ensp;新工作是关于```C++　&　OSG```的，做一个仿真软件，主要负责一些关于`osg`的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：\n\n- `Qt`编写整个软件的界面\n- `osg`负责整个3D图形的展示\n\n&ensp; 关于这个项目遇到的一些问题：\n\n-   `osg`编译劝退\t\n\n&ensp;&ensp;&ensp;&ensp;讲真，`osg`的库的编译相当劝退，各种库的依赖关系，以及`VS`的工具链的选择，以及部分库的调试模式的选择。\n\n这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。\n\n- `osg`与`Qt`的集成\n\n&ensp;&ensp;&ensp;&ensp;要求你先编译`osg`然后才能编译，`osgQt`在`osg3.4`之后的版本中便被从原来的库中剔除，需要自己单独编译，\n\n同时`Qt4.0`的版本与`5.0`的版本编译使用的`Qt`的类也存在一些区别。\n\n当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：\n\n- 在于不同的团队合作的时候，如何扯皮！\n\n\n\n","source":"_posts/记一次总结.md","raw":"---\ntitle: 记一次总结\ndate: 2021-10-17 15:25:40\ntags:\n- conclusion\ncategories:\n- works\n- HJ\n---\n\n### \n\n`前记：`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG)\n\n&ensp;&ensp;&ensp;&ensp;从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。\n\n&ensp; &ensp;&ensp;&ensp;新工作是关于```C++　&　OSG```的，做一个仿真软件，主要负责一些关于`osg`的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：\n\n- `Qt`编写整个软件的界面\n- `osg`负责整个3D图形的展示\n\n&ensp; 关于这个项目遇到的一些问题：\n\n-   `osg`编译劝退\t\n\n&ensp;&ensp;&ensp;&ensp;讲真，`osg`的库的编译相当劝退，各种库的依赖关系，以及`VS`的工具链的选择，以及部分库的调试模式的选择。\n\n这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。\n\n- `osg`与`Qt`的集成\n\n&ensp;&ensp;&ensp;&ensp;要求你先编译`osg`然后才能编译，`osgQt`在`osg3.4`之后的版本中便被从原来的库中剔除，需要自己单独编译，\n\n同时`Qt4.0`的版本与`5.0`的版本编译使用的`Qt`的类也存在一些区别。\n\n当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：\n\n- 在于不同的团队合作的时候，如何扯皮！\n\n\n\n","slug":"记一次总结","published":1,"updated":"2021-10-17T09:04:08.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4w001nq0uu7l0ihmzc","content":"<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><p><code>前记：</code></p>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG\"></p>\n<p>&ensp;&ensp;&ensp;&ensp;从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。</p>\n<p>&ensp; &ensp;&ensp;&ensp;新工作是关于<code>C++　&amp;　OSG</code>的，做一个仿真软件，主要负责一些关于<code>osg</code>的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：</p>\n<ul>\n<li><code>Qt</code>编写整个软件的界面</li>\n<li><code>osg</code>负责整个3D图形的展示</li>\n</ul>\n<p>&ensp; 关于这个项目遇到的一些问题：</p>\n<ul>\n<li>  <code>osg</code>编译劝退    </li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;讲真，<code>osg</code>的库的编译相当劝退，各种库的依赖关系，以及<code>VS</code>的工具链的选择，以及部分库的调试模式的选择。</p>\n<p>这里推荐<a ref=\"https://freesouth.blog.csdn.net/\">杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。</p>\n<ul>\n<li><code>osg</code>与<code>Qt</code>的集成</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;要求你先编译<code>osg</code>然后才能编译，<code>osgQt</code>在<code>osg3.4</code>之后的版本中便被从原来的库中剔除，需要自己单独编译，</p>\n<p>同时<code>Qt4.0</code>的版本与<code>5.0</code>的版本编译使用的<code>Qt</code>的类也存在一些区别。</p>\n<p>当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：</p>\n<ul>\n<li>在于不同的团队合作的时候，如何扯皮！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id><a href=\"#\" class=\"headerlink\" title></a></h3><p><code>前记：</code></p>\n<p><img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG\"></p>\n<p>&ensp;&ensp;&ensp;&ensp;从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。</p>\n<p>&ensp; &ensp;&ensp;&ensp;新工作是关于<code>C++　&amp;　OSG</code>的，做一个仿真软件，主要负责一些关于<code>osg</code>的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：</p>\n<ul>\n<li><code>Qt</code>编写整个软件的界面</li>\n<li><code>osg</code>负责整个3D图形的展示</li>\n</ul>\n<p>&ensp; 关于这个项目遇到的一些问题：</p>\n<ul>\n<li>  <code>osg</code>编译劝退    </li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;讲真，<code>osg</code>的库的编译相当劝退，各种库的依赖关系，以及<code>VS</code>的工具链的选择，以及部分库的调试模式的选择。</p>\n<p>这里推荐<a ref=\"https://freesouth.blog.csdn.net/\">杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。</p>\n<ul>\n<li><code>osg</code>与<code>Qt</code>的集成</li>\n</ul>\n<p>&ensp;&ensp;&ensp;&ensp;要求你先编译<code>osg</code>然后才能编译，<code>osgQt</code>在<code>osg3.4</code>之后的版本中便被从原来的库中剔除，需要自己单独编译，</p>\n<p>同时<code>Qt4.0</code>的版本与<code>5.0</code>的版本编译使用的<code>Qt</code>的类也存在一些区别。</p>\n<p>当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：</p>\n<ul>\n<li>在于不同的团队合作的时候，如何扯皮！</li>\n</ul>\n"},{"title":"记一次面试","date":"2022-01-15T16:51:02.000Z","_content":"\n## 记一次面试:\n\n&ensp;&ensp;距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\n&ensp;&ensp;这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是`CAD`方向，大概都是渲染相关的，所以还是符合我的逾期。\n\n\n## Start Interview:\n\n- 首先这是一个`Cpp`&`图形`的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是`CPP`和`图形学`开发经验, 可以预见大概的问题就是`Cpp`和图形相关的知识。\n\n---\n\n\n### 第一次面试\n\n#### 关于简历中提到的之前的项目\n\n- 部分和之前项目相关的问题\n- 一些技术上的解决方案\n- ......\n\n#### CPP的新的语言特性\n\n- `C++11`的新语言特性 - 比较常用的\n  - 智能指针\n  - `auto`自动类型推导\n  - 标准库的多线程\n  - `lambda`表达式\n\n- 一些指针和引用相关的问题\n  - 指针是什么？\n  - 引用是什么？\n  - 两者的区别？\n  - 内存分区的相关问题，如：\n    - 常量在程序中的的存储位置\n    - 静态变量在什么位置\n    - ......\n\n#### 图形相关的问题\n\n- 图形管线的问题\n  - 坐标变换相关的问题\n    - 投影\n    - 视图\n\n- 一些渲染上面的解决方案\n  - 大数据量的绘制\n\n### 第二次面试\n\n&ensp;&ensp;第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：\n\n- 个人介绍\t\n  - 基本信息\n  - 求学经历\n  - ......\n\n- 工作经历\n  - 项目经历\n\n- 未来的规划\n  - 职业规划\n  - 个人规划\n\n- 个人爱好\n\n&ensp;.......\n\n&ensp;&ensp;后面部分就是关于这个介绍的提问了，无关痛痒。\n\n&ensp;&ensp;一周以后......，在我以为黄了的时候，竟然通过了。\n\n&ensp;&ensp;感谢！\n\n","source":"_posts/记一次面试-1.md","raw":"---\ntitle: 记一次面试\ndate: 2022-01-16 00:51:02\ncategories:\n  - works\n  - interview\ntags:\n  - openGL\t\n  - cpp\n  - computer graphics\n---\n\n## 记一次面试:\n\n&ensp;&ensp;距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\n&ensp;&ensp;这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是`CAD`方向，大概都是渲染相关的，所以还是符合我的逾期。\n\n\n## Start Interview:\n\n- 首先这是一个`Cpp`&`图形`的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是`CPP`和`图形学`开发经验, 可以预见大概的问题就是`Cpp`和图形相关的知识。\n\n---\n\n\n### 第一次面试\n\n#### 关于简历中提到的之前的项目\n\n- 部分和之前项目相关的问题\n- 一些技术上的解决方案\n- ......\n\n#### CPP的新的语言特性\n\n- `C++11`的新语言特性 - 比较常用的\n  - 智能指针\n  - `auto`自动类型推导\n  - 标准库的多线程\n  - `lambda`表达式\n\n- 一些指针和引用相关的问题\n  - 指针是什么？\n  - 引用是什么？\n  - 两者的区别？\n  - 内存分区的相关问题，如：\n    - 常量在程序中的的存储位置\n    - 静态变量在什么位置\n    - ......\n\n#### 图形相关的问题\n\n- 图形管线的问题\n  - 坐标变换相关的问题\n    - 投影\n    - 视图\n\n- 一些渲染上面的解决方案\n  - 大数据量的绘制\n\n### 第二次面试\n\n&ensp;&ensp;第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：\n\n- 个人介绍\t\n  - 基本信息\n  - 求学经历\n  - ......\n\n- 工作经历\n  - 项目经历\n\n- 未来的规划\n  - 职业规划\n  - 个人规划\n\n- 个人爱好\n\n&ensp;.......\n\n&ensp;&ensp;后面部分就是关于这个介绍的提问了，无关痛痒。\n\n&ensp;&ensp;一周以后......，在我以为黄了的时候，竟然通过了。\n\n&ensp;&ensp;感谢！\n\n","slug":"记一次面试-1","published":1,"updated":"2022-02-28T14:04:30.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h4y001sq0uu92zd5sbb","content":"<h2 id=\"记一次面试\"><a href=\"#记一次面试\" class=\"headerlink\" title=\"记一次面试:\"></a>记一次面试:</h2><p>&ensp;&ensp;距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了…….<br>&ensp;&ensp;这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是<code>CAD</code>方向，大概都是渲染相关的，所以还是符合我的逾期。</p>\n<h2 id=\"Start-Interview\"><a href=\"#Start-Interview\" class=\"headerlink\" title=\"Start Interview:\"></a>Start Interview:</h2><ul>\n<li>首先这是一个<code>Cpp</code>&amp;<code>图形</code>的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是<code>CPP</code>和<code>图形学</code>开发经验, 可以预见大概的问题就是<code>Cpp</code>和图形相关的知识。</li>\n</ul>\n<hr>\n<h3 id=\"第一次面试\"><a href=\"#第一次面试\" class=\"headerlink\" title=\"第一次面试\"></a>第一次面试</h3><h4 id=\"关于简历中提到的之前的项目\"><a href=\"#关于简历中提到的之前的项目\" class=\"headerlink\" title=\"关于简历中提到的之前的项目\"></a>关于简历中提到的之前的项目</h4><ul>\n<li>部分和之前项目相关的问题</li>\n<li>一些技术上的解决方案</li>\n<li>……</li>\n</ul>\n<h4 id=\"CPP的新的语言特性\"><a href=\"#CPP的新的语言特性\" class=\"headerlink\" title=\"CPP的新的语言特性\"></a>CPP的新的语言特性</h4><ul>\n<li><p><code>C++11</code>的新语言特性 - 比较常用的</p>\n<ul>\n<li>智能指针</li>\n<li><code>auto</code>自动类型推导</li>\n<li>标准库的多线程</li>\n<li><code>lambda</code>表达式</li>\n</ul>\n</li>\n<li><p>一些指针和引用相关的问题</p>\n<ul>\n<li>指针是什么？</li>\n<li>引用是什么？</li>\n<li>两者的区别？</li>\n<li>内存分区的相关问题，如：<ul>\n<li>常量在程序中的的存储位置</li>\n<li>静态变量在什么位置</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"图形相关的问题\"><a href=\"#图形相关的问题\" class=\"headerlink\" title=\"图形相关的问题\"></a>图形相关的问题</h4><ul>\n<li><p>图形管线的问题</p>\n<ul>\n<li>坐标变换相关的问题<ul>\n<li>投影</li>\n<li>视图</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>一些渲染上面的解决方案</p>\n<ul>\n<li>大数据量的绘制</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第二次面试\"><a href=\"#第二次面试\" class=\"headerlink\" title=\"第二次面试\"></a>第二次面试</h3><p>&ensp;&ensp;第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：</p>\n<ul>\n<li><p>个人介绍    </p>\n<ul>\n<li>基本信息</li>\n<li>求学经历</li>\n<li>……</li>\n</ul>\n</li>\n<li><p>工作经历</p>\n<ul>\n<li>项目经历</li>\n</ul>\n</li>\n<li><p>未来的规划</p>\n<ul>\n<li>职业规划</li>\n<li>个人规划</li>\n</ul>\n</li>\n<li><p>个人爱好</p>\n</li>\n</ul>\n<p>&ensp;…….</p>\n<p>&ensp;&ensp;后面部分就是关于这个介绍的提问了，无关痛痒。</p>\n<p>&ensp;&ensp;一周以后……，在我以为黄了的时候，竟然通过了。</p>\n<p>&ensp;&ensp;感谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记一次面试\"><a href=\"#记一次面试\" class=\"headerlink\" title=\"记一次面试:\"></a>记一次面试:</h2><p>&ensp;&ensp;距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了…….<br>&ensp;&ensp;这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是<code>CAD</code>方向，大概都是渲染相关的，所以还是符合我的逾期。</p>\n<h2 id=\"Start-Interview\"><a href=\"#Start-Interview\" class=\"headerlink\" title=\"Start Interview:\"></a>Start Interview:</h2><ul>\n<li>首先这是一个<code>Cpp</code>&amp;<code>图形</code>的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是<code>CPP</code>和<code>图形学</code>开发经验, 可以预见大概的问题就是<code>Cpp</code>和图形相关的知识。</li>\n</ul>\n<hr>\n<h3 id=\"第一次面试\"><a href=\"#第一次面试\" class=\"headerlink\" title=\"第一次面试\"></a>第一次面试</h3><h4 id=\"关于简历中提到的之前的项目\"><a href=\"#关于简历中提到的之前的项目\" class=\"headerlink\" title=\"关于简历中提到的之前的项目\"></a>关于简历中提到的之前的项目</h4><ul>\n<li>部分和之前项目相关的问题</li>\n<li>一些技术上的解决方案</li>\n<li>……</li>\n</ul>\n<h4 id=\"CPP的新的语言特性\"><a href=\"#CPP的新的语言特性\" class=\"headerlink\" title=\"CPP的新的语言特性\"></a>CPP的新的语言特性</h4><ul>\n<li><p><code>C++11</code>的新语言特性 - 比较常用的</p>\n<ul>\n<li>智能指针</li>\n<li><code>auto</code>自动类型推导</li>\n<li>标准库的多线程</li>\n<li><code>lambda</code>表达式</li>\n</ul>\n</li>\n<li><p>一些指针和引用相关的问题</p>\n<ul>\n<li>指针是什么？</li>\n<li>引用是什么？</li>\n<li>两者的区别？</li>\n<li>内存分区的相关问题，如：<ul>\n<li>常量在程序中的的存储位置</li>\n<li>静态变量在什么位置</li>\n<li>……</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"图形相关的问题\"><a href=\"#图形相关的问题\" class=\"headerlink\" title=\"图形相关的问题\"></a>图形相关的问题</h4><ul>\n<li><p>图形管线的问题</p>\n<ul>\n<li>坐标变换相关的问题<ul>\n<li>投影</li>\n<li>视图</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>一些渲染上面的解决方案</p>\n<ul>\n<li>大数据量的绘制</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第二次面试\"><a href=\"#第二次面试\" class=\"headerlink\" title=\"第二次面试\"></a>第二次面试</h3><p>&ensp;&ensp;第二次面试倒是没有什么技术相关的问题，两个老师，一个人士，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：</p>\n<ul>\n<li><p>个人介绍    </p>\n<ul>\n<li>基本信息</li>\n<li>求学经历</li>\n<li>……</li>\n</ul>\n</li>\n<li><p>工作经历</p>\n<ul>\n<li>项目经历</li>\n</ul>\n</li>\n<li><p>未来的规划</p>\n<ul>\n<li>职业规划</li>\n<li>个人规划</li>\n</ul>\n</li>\n<li><p>个人爱好</p>\n</li>\n</ul>\n<p>&ensp;…….</p>\n<p>&ensp;&ensp;后面部分就是关于这个介绍的提问了，无关痛痒。</p>\n<p>&ensp;&ensp;一周以后……，在我以为黄了的时候，竟然通过了。</p>\n<p>&ensp;&ensp;感谢！</p>\n"},{"title":"记一次面试","date":"2021-07-27T12:31:46.000Z","_content":"\n*和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......*\n\t目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的`C++ & Qt`，按照面试官的说法，这是一个纯`Qt`的岗位，所以接下来的问题大概全部是和`Qt`相关的，当然也会有部分C++的问题在其中。\n\n<font style=\"color:pink\">废话不多说，我们进入正题：</font>\n\n## C++部分的问题：\n\n- 第一部分是关于C++这门语言的，面向对象是什么？\n\n  ```C++\n   // OOP\n   // 封装,继承,多态\n  ```\n\n- 对于多态的理解?\n\n  ```C++ \n  // 首先是如何实现多态？\n  1. 多态发生在继承关系中。\n  2. 需要重写虚函数。\n  3. 父类的指针指向子类的对象。\n  4. 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。\n  ```\nexample：\n  ```C++\nclass A\n  {\n  public:\n      A(){std::cout<<\"A\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_A\"<<std::endl;\n      }\n  private:\n      int menber;\n  \n  };\n  \n  class B: public A\n  {\n  public:\n      B():A(){std::cout<<\"B\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_B\"<<std::endl;\n      }\n  };\n  \n  class D: public A\n  {\n  public:\n      D():A(){std::cout<<\"D\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_D\"<<std::endl;\n      }\n  };\n  \n  int main()\n  {\n      A * a = new A;\n      B * b = new B;\n      D * d = new D;\n  \n      A * ptr = b;\n      ptr->function_virtual();\n  \n      ptr = a;\n      ptr->function_virtual();\n  \n      ptr = d;\n      ptr->function_virtual();\n  \t\n      return 0;\n  }\n  \n  ```\n\t<font style=\"color:red\">结果如下：</font>\n\t![polymorphism](https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png \"polymorphism\")\n\n\n- 多态的实现 -- <font style=\"color:red\">虚函数表</font>\n\n  - 验证虚函数表：\n\n    ```C++\n    // 一个简单的C 不带有虚函数 \n    class C\n    {\n    public:\n        C(){std::cout<<\"C\"<<std::endl;}\n    private:\n        long long member;\n    };\n    ```\n\t<font style=\"color:red\">输出结果:</font> ![virtual_table](https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png \"virtual table 1\")\n  \t\n  \t![virtual table 2](https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png \"virtual table 2\")\n  \t\n  \t- 上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。\n\n---\n\n## Qt部分\n\n- 元对象系统\n- 窗口刷新机制\n- 内存托管(删除机制)\n- Qquick\n- Qt的布局\n\n\n\n## OPENGL部分\n\n- 缓冲(双缓冲)\n\n- 着色器程序(语言)\n\n  ","source":"_posts/记一次面试.md","raw":"---\ntitle: 记一次面试\ndate: 2021-07-27 20:31:46\ntags:\n---\n\n*和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......*\n\t目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的`C++ & Qt`，按照面试官的说法，这是一个纯`Qt`的岗位，所以接下来的问题大概全部是和`Qt`相关的，当然也会有部分C++的问题在其中。\n\n<font style=\"color:pink\">废话不多说，我们进入正题：</font>\n\n## C++部分的问题：\n\n- 第一部分是关于C++这门语言的，面向对象是什么？\n\n  ```C++\n   // OOP\n   // 封装,继承,多态\n  ```\n\n- 对于多态的理解?\n\n  ```C++ \n  // 首先是如何实现多态？\n  1. 多态发生在继承关系中。\n  2. 需要重写虚函数。\n  3. 父类的指针指向子类的对象。\n  4. 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。\n  ```\nexample：\n  ```C++\nclass A\n  {\n  public:\n      A(){std::cout<<\"A\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_A\"<<std::endl;\n      }\n  private:\n      int menber;\n  \n  };\n  \n  class B: public A\n  {\n  public:\n      B():A(){std::cout<<\"B\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_B\"<<std::endl;\n      }\n  };\n  \n  class D: public A\n  {\n  public:\n      D():A(){std::cout<<\"D\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_D\"<<std::endl;\n      }\n  };\n  \n  int main()\n  {\n      A * a = new A;\n      B * b = new B;\n      D * d = new D;\n  \n      A * ptr = b;\n      ptr->function_virtual();\n  \n      ptr = a;\n      ptr->function_virtual();\n  \n      ptr = d;\n      ptr->function_virtual();\n  \t\n      return 0;\n  }\n  \n  ```\n\t<font style=\"color:red\">结果如下：</font>\n\t![polymorphism](https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png \"polymorphism\")\n\n\n- 多态的实现 -- <font style=\"color:red\">虚函数表</font>\n\n  - 验证虚函数表：\n\n    ```C++\n    // 一个简单的C 不带有虚函数 \n    class C\n    {\n    public:\n        C(){std::cout<<\"C\"<<std::endl;}\n    private:\n        long long member;\n    };\n    ```\n\t<font style=\"color:red\">输出结果:</font> ![virtual_table](https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png \"virtual table 1\")\n  \t\n  \t![virtual table 2](https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png \"virtual table 2\")\n  \t\n  \t- 上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。\n\n---\n\n## Qt部分\n\n- 元对象系统\n- 窗口刷新机制\n- 内存托管(删除机制)\n- Qquick\n- Qt的布局\n\n\n\n## OPENGL部分\n\n- 缓冲(双缓冲)\n\n- 着色器程序(语言)\n\n  ","slug":"记一次面试","published":1,"updated":"2021-07-27T13:59:56.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h51001vq0uu60zj2bz8","content":"<p><em>和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作……</em><br>    目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的<code>C++ &amp; Qt</code>，按照面试官的说法，这是一个纯<code>Qt</code>的岗位，所以接下来的问题大概全部是和<code>Qt</code>相关的，当然也会有部分C++的问题在其中。</p>\n<p><font style=\"color:pink\">废话不多说，我们进入正题：</font></p>\n<h2 id=\"C-部分的问题：\"><a href=\"#C-部分的问题：\" class=\"headerlink\" title=\"C++部分的问题：\"></a>C++部分的问题：</h2><ul>\n<li><p>第一部分是关于C++这门语言的，面向对象是什么？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OOP</span></span><br><span class=\"line\"><span class=\"comment\">// 封装,继承,多态</span></span><br></pre></td></tr></table></figure></li>\n<li><p>对于多态的理解?</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先是如何实现多态？</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 多态发生在继承关系中。</span><br><span class=\"line\"><span class=\"number\">2.</span> 需要重写虚函数。</span><br><span class=\"line\"><span class=\"number\">3.</span> 父类的指针指向子类的对象。</span><br><span class=\"line\"><span class=\"number\">4.</span> 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。</span><br></pre></td></tr></table></figure>\n<p>example：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> menber;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      B():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      D():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      A * a = <span class=\"keyword\">new</span> A;</span><br><span class=\"line\">      B * b = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">      D * d = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">  </span><br><span class=\"line\">      A * ptr = b;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = a;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = d;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  \t</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<p>  <font style=\"color:red\">结果如下：</font><br>  <img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png\" alt=\"polymorphism\" title=\"polymorphism\"></p>\n</li>\n</ul>\n<ul>\n<li><p>多态的实现 – <font style=\"color:red\">虚函数表</font></p>\n<ul>\n<li><p>验证虚函数表：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的C 不带有虚函数 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    C()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;C&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> member;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><font style=\"color:red\">输出结果:</font> <img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png\" alt=\"virtual_table\" title=\"virtual table 1\"></p>\n<p>  <img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png\" alt=\"virtual table 2\" title=\"virtual table 2\"></p>\n<ul>\n<li>上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Qt部分\"><a href=\"#Qt部分\" class=\"headerlink\" title=\"Qt部分\"></a>Qt部分</h2><ul>\n<li>元对象系统</li>\n<li>窗口刷新机制</li>\n<li>内存托管(删除机制)</li>\n<li>Qquick</li>\n<li>Qt的布局</li>\n</ul>\n<h2 id=\"OPENGL部分\"><a href=\"#OPENGL部分\" class=\"headerlink\" title=\"OPENGL部分\"></a>OPENGL部分</h2><ul>\n<li><p>缓冲(双缓冲)</p>\n</li>\n<li><p>着色器程序(语言)</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><em>和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作……</em><br>    目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的<code>C++ &amp; Qt</code>，按照面试官的说法，这是一个纯<code>Qt</code>的岗位，所以接下来的问题大概全部是和<code>Qt</code>相关的，当然也会有部分C++的问题在其中。</p>\n<p><font style=\"color:pink\">废话不多说，我们进入正题：</font></p>\n<h2 id=\"C-部分的问题：\"><a href=\"#C-部分的问题：\" class=\"headerlink\" title=\"C++部分的问题：\"></a>C++部分的问题：</h2><ul>\n<li><p>第一部分是关于C++这门语言的，面向对象是什么？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OOP</span></span><br><span class=\"line\"><span class=\"comment\">// 封装,继承,多态</span></span><br></pre></td></tr></table></figure></li>\n<li><p>对于多态的理解?</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先是如何实现多态？</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 多态发生在继承关系中。</span><br><span class=\"line\"><span class=\"number\">2.</span> 需要重写虚函数。</span><br><span class=\"line\"><span class=\"number\">3.</span> 父类的指针指向子类的对象。</span><br><span class=\"line\"><span class=\"number\">4.</span> 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。</span><br></pre></td></tr></table></figure>\n<p>example：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> menber;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      B():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      D():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      A * a = <span class=\"keyword\">new</span> A;</span><br><span class=\"line\">      B * b = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">      D * d = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">  </span><br><span class=\"line\">      A * ptr = b;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = a;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = d;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  \t</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<p>  <font style=\"color:red\">结果如下：</font><br>  <img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/polymorphism.png\" alt=\"polymorphism\" title=\"polymorphism\"></p>\n</li>\n</ul>\n<ul>\n<li><p>多态的实现 – <font style=\"color:red\">虚函数表</font></p>\n<ul>\n<li><p>验证虚函数表：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的C 不带有虚函数 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    C()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;C&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> member;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><font style=\"color:red\">输出结果:</font> <img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_1.png\" alt=\"virtual_table\" title=\"virtual table 1\"></p>\n<p>  <img src=\"https://raw.githubusercontent.com/CuntBoy/images/main/virtual_table_2.png\" alt=\"virtual table 2\" title=\"virtual table 2\"></p>\n<ul>\n<li>上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Qt部分\"><a href=\"#Qt部分\" class=\"headerlink\" title=\"Qt部分\"></a>Qt部分</h2><ul>\n<li>元对象系统</li>\n<li>窗口刷新机制</li>\n<li>内存托管(删除机制)</li>\n<li>Qquick</li>\n<li>Qt的布局</li>\n</ul>\n<h2 id=\"OPENGL部分\"><a href=\"#OPENGL部分\" class=\"headerlink\" title=\"OPENGL部分\"></a>OPENGL部分</h2><ul>\n<li><p>缓冲(双缓冲)</p>\n</li>\n<li><p>着色器程序(语言)</p>\n</li>\n</ul>\n"},{"title":"迟到的毕业总结","date":"2021-03-18T15:59:55.000Z","_content":"\n <font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！\n\n​\t离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。\n\n对于大学，我仿佛有千言万语，却是欲语还休 。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！\n\n\n\n待续。。。\n\n---\n\n\n\n`2021-7-26`\n\n​\t下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\n当然一切都会是新的，我也是。\n\n​\t祝愿我将迎接新的美好，朋友我来了！\n\n","source":"_posts/迟到的毕业总结.md","raw":"---\ntitle: 迟到的毕业总结\ndate: 2021-03-18 23:59:55\ncategories:\n- bun\n- university \ntags:\n - university \n - conclusion\n---\n\n <font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！\n\n​\t离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。\n\n对于大学，我仿佛有千言万语，却是欲语还休 。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！\n\n\n\n待续。。。\n\n---\n\n\n\n`2021-7-26`\n\n​\t下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\n当然一切都会是新的，我也是。\n\n​\t祝愿我将迎接新的美好，朋友我来了！\n\n","slug":"迟到的毕业总结","published":1,"updated":"2021-07-26T15:27:23.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5z64h540020q0uu4a5kftzf","content":"<p> <font color=\"red\">2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</p>\n<p>​    离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。</p>\n<p>对于大学，我仿佛有千言万语，却是欲语还休 。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！</p>\n<p>待续。。。</p>\n<hr>\n<p><code>2021-7-26</code></p>\n<p>​    下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。<br>当然一切都会是新的，我也是。</p>\n<p>​    祝愿我将迎接新的美好，朋友我来了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p> <font color=\"red\">2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</p>\n<p>​    离开前，大家都像是急于归乡的游子，对身后的这个城市不存半点留恋。</p>\n<p>对于大学，我仿佛有千言万语，却是欲语还休 。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！</p>\n<p>待续。。。</p>\n<hr>\n<p><code>2021-7-26</code></p>\n<p>​    下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。<br>当然一切都会是新的，我也是。</p>\n<p>​    祝愿我将迎接新的美好，朋友我来了！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5z64h43000eq0uuhhto7ogc","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h48000kq0uuctxo8a3j"},{"post_id":"cl5z64h3u0003q0uu4ni49jxd","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h4b000oq0uuc66mddi8"},{"post_id":"cl5z64h44000fq0uu5x5n33bb","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h4c000rq0uu8he775g9"},{"post_id":"cl5z64h4c000qq0uuavurandw","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h4h0012q0uu7qoa6n6k"},{"post_id":"cl5z64h4d000vq0uu8aft6xmi","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h4i0015q0uue2731873"},{"post_id":"cl5z64h3q0001q0uug10cfnkg","category_id":"cl5z64h3w0004q0uu2bgxe5up","_id":"cl5z64h4q0019q0uu547qa3zo"},{"post_id":"cl5z64h3q0001q0uug10cfnkg","category_id":"cl5z64h4d000tq0uu436wbfx4","_id":"cl5z64h4s001dq0uu0wwobt52"},{"post_id":"cl5z64h4e000xq0uub40ahlpe","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h4t001hq0uu23sm98tc"},{"post_id":"cl5z64h4g0011q0uu2kq0534y","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h4v001lq0uu0sy3h946"},{"post_id":"cl5z64h4i0014q0uuant0hbit","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h4x001oq0uudju7hfed"},{"post_id":"cl5z64h41000aq0uu6698eod4","category_id":"cl5z64h4g000zq0uugids5alp","_id":"cl5z64h50001tq0uud19zesxk"},{"post_id":"cl5z64h4p0018q0uu6gg84khm","category_id":"cl5z64h3w0004q0uu2bgxe5up","_id":"cl5z64h52001wq0uu3uad1wlk"},{"post_id":"cl5z64h4p0018q0uu6gg84khm","category_id":"cl5z64h4d000tq0uu436wbfx4","_id":"cl5z64h550021q0uu3aq12df3"},{"post_id":"cl5z64h4s001cq0uuergqgfo4","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h550023q0uua2s3aohy"},{"post_id":"cl5z64h45000iq0uud8smhkaf","category_id":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h570027q0uu8oh69rms"},{"post_id":"cl5z64h45000iq0uud8smhkaf","category_id":"cl5z64h4r001aq0uu9p0n6gt5","_id":"cl5z64h570029q0uucbjvgfvn"},{"post_id":"cl5z64h4t001gq0uua7nvhhn4","category_id":"cl5z64h41000bq0uu248551dz","_id":"cl5z64h58002dq0uu7cfn37ku"},{"post_id":"cl5z64h4v001kq0uu2md9hlf7","category_id":"cl5z64h57002bq0uu82oi0ve0","_id":"cl5z64h5a002lq0uu903j1tfm"},{"post_id":"cl5z64h4w001nq0uu7l0ihmzc","category_id":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h5d002uq0uu542ecjfh"},{"post_id":"cl5z64h4w001nq0uu7l0ihmzc","category_id":"cl5z64h560024q0uu12vjb4nt","_id":"cl5z64h5f002xq0uueyhf6b6j"},{"post_id":"cl5z64h4y001sq0uu92zd5sbb","category_id":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h5f0030q0uug24l3gui"},{"post_id":"cl5z64h4y001sq0uu92zd5sbb","category_id":"cl5z64h5c002qq0uuhabfauw7","_id":"cl5z64h5g0033q0uu15ijb0m5"},{"post_id":"cl5z64h47000jq0uu48ivh6gr","category_id":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h5h0036q0uu8p1qddj4"},{"post_id":"cl5z64h47000jq0uu48ivh6gr","category_id":"cl5z64h4r001aq0uu9p0n6gt5","_id":"cl5z64h5i0039q0uu4wi5127f"},{"post_id":"cl5z64h47000jq0uu48ivh6gr","category_id":"cl5z64h5e002vq0uu53mu05ai","_id":"cl5z64h5j003cq0uuc0uj06p3"},{"post_id":"cl5z64h540020q0uu4a5kftzf","category_id":"cl5z64h3w0004q0uu2bgxe5up","_id":"cl5z64h5j003fq0uub9yi6oif"},{"post_id":"cl5z64h540020q0uu4a5kftzf","category_id":"cl5z64h5f0031q0uu7b121nzp","_id":"cl5z64h5j003hq0uu0erdcyqt"},{"post_id":"cl5z64h4b000nq0uugo27c7gm","category_id":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h5k003lq0uu75xb1lp2"},{"post_id":"cl5z64h4b000nq0uugo27c7gm","category_id":"cl5z64h4r001aq0uu9p0n6gt5","_id":"cl5z64h5k003nq0uu3pgqfama"},{"post_id":"cl5z64h4b000nq0uugo27c7gm","category_id":"cl5z64h5e002vq0uu53mu05ai","_id":"cl5z64h5l003qq0uu8gt8cdnb"},{"post_id":"cl5z64h400009q0uu43q2gvi1","category_id":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h5l003sq0uu1fij3qd7"},{"post_id":"cl5z64h400009q0uu43q2gvi1","category_id":"cl5z64h560024q0uu12vjb4nt","_id":"cl5z64h5m003uq0uuh0qp50d7"},{"post_id":"cl5z64h400009q0uu43q2gvi1","category_id":"cl5z64h5j003eq0uucn06d2mt","_id":"cl5z64h5n003wq0uufil7563s"},{"post_id":"cl5z64h3y0007q0uu4z0e3trk","category_id":"cl5z64h45000gq0uuf4u33n9q","_id":"cl5z64h5n003yq0uu4iofbdyj"},{"post_id":"cl5z64h3y0007q0uu4z0e3trk","category_id":"cl5z64h4r001aq0uu9p0n6gt5","_id":"cl5z64h5n003zq0uu3idsgm41"},{"post_id":"cl5z64h3y0007q0uu4z0e3trk","category_id":"cl5z64h59002hq0uu75sg1z6t","_id":"cl5z64h5n0040q0uu1zc80htd"},{"post_id":"cl5z64h3y0007q0uu4z0e3trk","category_id":"cl5z64h5k003kq0uuf2ue3f3j","_id":"cl5z64h5n0041q0uu0h3856qk"}],"PostTag":[{"post_id":"cl5z64h3q0001q0uug10cfnkg","tag_id":"cl5z64h3x0005q0uu0yzmbktk","_id":"cl5z64h43000dq0uuddmhbj3e"},{"post_id":"cl5z64h3u0003q0uu4ni49jxd","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h4c000pq0uudzjv5q3h"},{"post_id":"cl5z64h3u0003q0uu4ni49jxd","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h4d000sq0uu2fpg1x5k"},{"post_id":"cl5z64h4c000qq0uuavurandw","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h4e000wq0uu3v2396n5"},{"post_id":"cl5z64h4c000qq0uuavurandw","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h4g000yq0uu56cs003q"},{"post_id":"cl5z64h4d000vq0uu8aft6xmi","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h4i0013q0uu9abu9yrw"},{"post_id":"cl5z64h4d000vq0uu8aft6xmi","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h4o0016q0uuhdvwbhgd"},{"post_id":"cl5z64h3y0007q0uu4z0e3trk","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h4r001bq0uu360v4819"},{"post_id":"cl5z64h3y0007q0uu4z0e3trk","tag_id":"cl5z64h4d000uq0uu6vumhovd","_id":"cl5z64h4s001eq0uuatrxe4rd"},{"post_id":"cl5z64h4e000xq0uub40ahlpe","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h4u001jq0uuhxla3pa9"},{"post_id":"cl5z64h4e000xq0uub40ahlpe","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h4w001mq0uuh1nw0ksy"},{"post_id":"cl5z64h4g0011q0uu2kq0534y","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h4y001rq0uu874f1vfx"},{"post_id":"cl5z64h4g0011q0uu2kq0534y","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h51001uq0uuhm0s3z0u"},{"post_id":"cl5z64h4i0014q0uuant0hbit","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h54001zq0uucqz4d0pn"},{"post_id":"cl5z64h4i0014q0uuant0hbit","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h550022q0uu46lza30z"},{"post_id":"cl5z64h400009q0uu43q2gvi1","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h570026q0uu6fbqd4xz"},{"post_id":"cl5z64h400009q0uu43q2gvi1","tag_id":"cl5z64h4d000uq0uu6vumhovd","_id":"cl5z64h570028q0uue43f0imd"},{"post_id":"cl5z64h4s001cq0uuergqgfo4","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h58002cq0uu9gfibyca"},{"post_id":"cl5z64h4s001cq0uuergqgfo4","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h58002eq0uu4gocdhm6"},{"post_id":"cl5z64h4t001gq0uua7nvhhn4","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h59002gq0uu33pn48c2"},{"post_id":"cl5z64h4t001gq0uua7nvhhn4","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h5a002iq0uu92y9hvg5"},{"post_id":"cl5z64h41000aq0uu6698eod4","tag_id":"cl5z64h4t001fq0uu2q1ha9fx","_id":"cl5z64h5a002kq0uuc71c32dg"},{"post_id":"cl5z64h41000aq0uu6698eod4","tag_id":"cl5z64h4x001pq0uu8sim62mr","_id":"cl5z64h5b002nq0uu3j4sajyf"},{"post_id":"cl5z64h43000eq0uuhhto7ogc","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h5c002pq0uudhzr4hu2"},{"post_id":"cl5z64h43000eq0uuhhto7ogc","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h5d002rq0uu8vqj4f34"},{"post_id":"cl5z64h44000fq0uu5x5n33bb","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h5d002tq0uu9w1964xc"},{"post_id":"cl5z64h44000fq0uu5x5n33bb","tag_id":"cl5z64h45000hq0uucgdkhwzw","_id":"cl5z64h5f002wq0uufzgv0mfk"},{"post_id":"cl5z64h45000iq0uud8smhkaf","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h5f002yq0uu3pkd43oi"},{"post_id":"cl5z64h45000iq0uud8smhkaf","tag_id":"cl5z64h4d000uq0uu6vumhovd","_id":"cl5z64h5g0032q0uu5jlg4rjg"},{"post_id":"cl5z64h47000jq0uu48ivh6gr","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h5g0034q0uudkuh2k7p"},{"post_id":"cl5z64h47000jq0uu48ivh6gr","tag_id":"cl5z64h4d000uq0uu6vumhovd","_id":"cl5z64h5h0037q0uuhdyx5td5"},{"post_id":"cl5z64h4b000nq0uugo27c7gm","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h5i003aq0uubuo16llo"},{"post_id":"cl5z64h4b000nq0uugo27c7gm","tag_id":"cl5z64h4d000uq0uu6vumhovd","_id":"cl5z64h5j003dq0uu3wpn28px"},{"post_id":"cl5z64h4p0018q0uu6gg84khm","tag_id":"cl5z64h5c002oq0uu7mzp6lfp","_id":"cl5z64h5j003gq0uu54697av7"},{"post_id":"cl5z64h4v001kq0uu2md9hlf7","tag_id":"cl5z64h5d002sq0uucm7t3wnf","_id":"cl5z64h5j003jq0uubp4b319i"},{"post_id":"cl5z64h4w001nq0uu7l0ihmzc","tag_id":"cl5z64h5f002zq0uuc2kvaahr","_id":"cl5z64h5k003mq0uu9a0t4pdb"},{"post_id":"cl5z64h4y001sq0uu92zd5sbb","tag_id":"cl5z64h5g0035q0uu7pked35o","_id":"cl5z64h5k003oq0uuc0a45et6"},{"post_id":"cl5z64h4y001sq0uu92zd5sbb","tag_id":"cl5z64h42000cq0uue9aggtwi","_id":"cl5z64h5l003rq0uu9nqug7a8"},{"post_id":"cl5z64h4y001sq0uu92zd5sbb","tag_id":"cl5z64h5i003bq0uu3hy6d6a9","_id":"cl5z64h5l003tq0uuha5k2b07"},{"post_id":"cl5z64h540020q0uu4a5kftzf","tag_id":"cl5z64h5j003iq0uu4adfhbys","_id":"cl5z64h5m003vq0uu8zs9af7g"},{"post_id":"cl5z64h540020q0uu4a5kftzf","tag_id":"cl5z64h5f002zq0uuc2kvaahr","_id":"cl5z64h5n003xq0uu2cblcwxo"}],"Tag":[{"name":"mylife","_id":"cl5z64h3x0005q0uu0yzmbktk"},{"name":"cpp","_id":"cl5z64h42000cq0uue9aggtwi"},{"name":"sort","_id":"cl5z64h45000hq0uucgdkhwzw"},{"name":"osg","_id":"cl5z64h4d000uq0uu6vumhovd"},{"name":"Games202","_id":"cl5z64h4t001fq0uu2q1ha9fx"},{"name":"Shadow","_id":"cl5z64h4x001pq0uu8sim62mr"},{"name":"intraduce","_id":"cl5z64h5c002oq0uu7mzp6lfp"},{"name":"windows","_id":"cl5z64h5d002sq0uucm7t3wnf"},{"name":"conclusion","_id":"cl5z64h5f002zq0uuc2kvaahr"},{"name":"openGL","_id":"cl5z64h5g0035q0uu7pked35o"},{"name":"computer graphics","_id":"cl5z64h5i003bq0uu3hy6d6a9"},{"name":"university","_id":"cl5z64h5j003iq0uu4adfhbys"}]}}