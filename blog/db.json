{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"9198ffd83e0d8aa2ea2bb40dea5654d0fa6523a4","modified":1659026243051},{"_id":"source/_posts/2021年终总结.md","hash":"bc26410ae8b6a17476bd33847c5fe9b8fe2c7d5e","modified":1661096096725},{"_id":"source/_posts/2022半年总结.md","hash":"ce9d93c33c40759910f2b4b4645fd7c1a133294a","modified":1666536118859},{"_id":"source/_posts/Bucket-Sort.md","hash":"10b631558e62ccb8fa0070c76587c8dcea844307","modified":1661096096733},{"_id":"source/_posts/Bug奇遇记-uint16-t.md","hash":"1705a46d072751f86633c90cc1010a55eb6db3f1","modified":1661442337169},{"_id":"source/_posts/AABB与Ray求交.md","hash":"b91b374ec7fb64488f5b48c9195f8d07b995b806","modified":1666536118934},{"_id":"source/_posts/AABB与Triangle求交.md","hash":"6e571bc8472a7a79b38f151c3fd46ed7771b05c5","modified":1666536119400},{"_id":"source/_posts/Bit-manipulation.md","hash":"2d70535a5b79907ddf9ab6195323fed2809eeaa4","modified":1661096096731},{"_id":"source/_posts/Dynamic-drawing-of-osg-vertex-buffer-objects.md","hash":"433a39503e6cb413417c3013074bfe27c5c5a575","modified":1661096096740},{"_id":"source/_posts/IBL.md","hash":"2f0192f4b43ec6bd49208630290e9e900c95d34d","modified":1663516557570},{"_id":"source/_posts/Cplusplus-key-words-extern.md","hash":"fe7fd95e0fb2dc5627a26596f313d4b5563ea261","modified":1661096096737},{"_id":"source/_posts/Games202-ShadowMap.md","hash":"a2206d8530f47fd5daedc089fc49ca6da4ad985d","modified":1661096096742},{"_id":"source/_posts/Multi-KeyWord-Sort.md","hash":"ec2e1119694be4fb78fe6c13d7f0fd468afbfbb0","modified":1661096096749},{"_id":"source/_posts/Git常用命令-上.md","hash":"baac4b8a7e5d066922f1f16709f40c31ea98bb08","modified":1661096096744},{"_id":"source/_posts/OSG-HUD.md","hash":"53b9f64039b054532fd0914b1754fa7f176b4493","modified":1661096096752},{"_id":"source/_posts/OBB与OBB求交.md","hash":"bf279639468b722679da9992200d21fd01cf701c","modified":1664116149106},{"_id":"source/_posts/OBB与Ray求交.md","hash":"8e2e0c6ba79e7f4426f3033f73134c45e3d12a89","modified":1666536119457},{"_id":"source/_posts/OpenGL-Move-Scene.md","hash":"3bf81a6d6669cbf127634b9e33aa8ed5feb24177","modified":1661096096758},{"_id":"source/_posts/OSG踩坑记-默认光源.md","hash":"b08c605222a21dded8a97053cc9a2e1da8eb6014","modified":1661096096756},{"_id":"source/_posts/OpenGL-Scene-ZoomIn-ZoomOut.md","hash":"7e00eff034c554a587b8ad4c7edcc09e2f5df077","modified":1661096096760},{"_id":"source/_posts/OpenGL的手动初始化.md","hash":"a3dc685574e989c4abfe50de23994c2816e9bb11","modified":1667489717851},{"_id":"source/_posts/OSG踩坑记-模型共享-模型颜色修改.md","hash":"f5212fdaea70c7cc7d102a607f72069050221d34","modified":1661096096753},{"_id":"source/_posts/Qt-OpenGL-Antialiasing-MSAA.md","hash":"63a1a61d37dcb7ccfe1af3ee5160fae14b92ba66","modified":1661096096768},{"_id":"source/_posts/OpenGL-parallel-projection-graphics-do-not-scale-with-the-window.md","hash":"0c94a90630adeb7597bbfd8e3a07141934c033bc","modified":1661096096762},{"_id":"source/_posts/Qt-Signals-And-Slots.md","hash":"a9ef0cb888422c802d79e5d1b5e0b89e19cdf90e","modified":1661096096769},{"_id":"source/_posts/Shell-Sort.md","hash":"fd7d2cd5123e347929b5df57e4d05face9795bb1","modified":1661096096776},{"_id":"source/_posts/Selection-sort.md","hash":"96c98fda11fc69d50daae5c38553378e2985c36d","modified":1661096096774},{"_id":"source/_posts/Smartpointer.md","hash":"1376f940c57a41e53d8464f0449417fe5b62b6d4","modified":1661096096779},{"_id":"source/_posts/Heap.md","hash":"a1eeab3a3bf1a91930839bee56454f9fb5894714","modified":1661096096747},{"_id":"source/_posts/Physical-Sort.md","hash":"6b6a6f34c51746728d8cfce355127320d3ea00c4","modified":1661096096764},{"_id":"source/_posts/baozi.md","hash":"5d35f358532c8edc852becd7e5b093ca02364dc9","modified":1661096096786},{"_id":"source/_posts/cmake-文件操作.md","hash":"6c5c57ff7494c06accebef899ada6a5462aa81ca","modified":1664551956615},{"_id":"source/_posts/View-Camera-Transformation.md","hash":"54fb3bafaaf4d9cd47411cdb9ac06d65061ffa22","modified":1661168771143},{"_id":"source/_posts/sort-bubble-insertion.md","hash":"86eb3b9d53c329552a7bc0ae7893d2daf720d6fb","modified":1661096097256},{"_id":"source/_posts/vector-dot-product.md","hash":"90de4dfae9c81d27940b4fe5781f1b7290f010cc","modified":1661168771145},{"_id":"source/_posts/射线与平面相交计算.md","hash":"a62b72868fe8ce63494cb91c99b8be3a9f7a6df6","modified":1672671513247},{"_id":"source/_posts/多重继承.md","hash":"4d36864bb984cae7de8c5b66cb2016f6b636b765","modified":1662570807464},{"_id":"source/_posts/Table-Sort.md","hash":"1fad42bd2b70cc712e7d6300da394cfdbf38f633","modified":1661096096782},{"_id":"source/_posts/构造函数私有化.md","hash":"e65592b39dbe63ad32749f508bc977d72d022aea","modified":1662570807466},{"_id":"source/_posts/归并排序.md","hash":"6a9f5af9a2299c563d8c321fc98adc9c0ad6a977","modified":1661096097380},{"_id":"source/_posts/微信多开.md","hash":"96f1f6ac6ff3c3043558e4c13ea3cd516b17649c","modified":1661096097382},{"_id":"source/_posts/QuickSort.md","hash":"4cb00ff0395ff97b01cf3c1b03fdf136afafc168","modified":1662629565957},{"_id":"source/_posts/记一次面试_CAD渲染.md","hash":"03f99e58dafe41f509a64a71d042160ae492a620","modified":1661096097387},{"_id":"source/_posts/模型变换-模型矩阵计算.md","hash":"58105ea827e5dc5dcc23c37c3c6abed9cf5091f5","modified":1664638532871},{"_id":"source/_posts/记一次总结_第一次换工作.md","hash":"f7960212fbf9e50be02773def6617c2f4635b592","modified":1661442337241},{"_id":"source/_posts/迟到的毕业总结.md","hash":"e240103cafee62eeeb18dc3f9dd49e94e0185e3e","modified":1661096097514},{"_id":"source/_posts/记一次面试_Qt.md","hash":"e5c8ec9061aabc408512cf57ba59617897153857","modified":1661442337243},{"_id":"source/about/index.md","hash":"dfc323e17cd451ff7adbf9b48a23e4d3f603ede5","modified":1659026243286},{"_id":"source/categories/index.md","hash":"dce67d215b637f3039704dc93afaa34c423551bf","modified":1659026243349},{"_id":"source/home/index.md","hash":"25354fdfed06ef466fda8e55d910fdc4b2dabeea","modified":1659026243396},{"_id":"source/tags/index.md","hash":"b3b96db4d1bb3f15c19cdc74e601c93924275b88","modified":1659026243427},{"_id":"source/_posts/设计模式-工厂模式.md","hash":"07ad382fbf2e1f687450f37c79f2968fe60611dd","modified":1663515096496},{"_id":"source/_posts/透视矩阵计算.md","hash":"ce1befb002f1df9647bf31e2904b8e7b8981ba69","modified":1664116149110},{"_id":"source/_posts/设计模式-单例模式.md","hash":"595577be58e6016dc4758e7047854f9a82f6dacc","modified":1663255744374},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1659119942577},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1659119942599},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1659119954413},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1659119954923},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1659119954856},{"_id":"themes/next/_config.yml","hash":"9d2c646cd31731e67a5f988bd457dd7f492afa37","modified":1660578416453},{"_id":"themes/next/_vendors.yml","hash":"744b7e015dac09d34ee7ae60e1570fcc4fc54f29","modified":1660576462726},{"_id":"themes/next/package.json","hash":"551566b5f907c0442c599133dc92ae99bda4d28a","modified":1660576462730},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1659119954939},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1659119956926},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1659119954460},{"_id":"themes/next/.githooks/install.js","hash":"305c2a269818466eed9e381b866c6cd1ad7f8afd","modified":1659119954444},{"_id":"source/uploads/wechat-qcode.jpg","hash":"5e32da2bbb5828e9050d948db5f9f36731ecfccc","modified":1659026243505},{"_id":"themes/next/README.md","hash":"9b0af190c8265911c379ba9c7b453c8a7f1501c8","modified":1659119954923},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1659119954553},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1659119954553},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1659119954601},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1659119954632},{"_id":"themes/next/.github/release-drafter.yml","hash":"de38f816e3023e0a5c1fd1f3c2b626f78bc35246","modified":1659119954679},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1659119954632},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1659119954923},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1659119954491},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1659119955003},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1659119955020},{"_id":"themes/next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1659119955020},{"_id":"themes/next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1659119955020},{"_id":"themes/next/languages/bn.yml","hash":"842adcbab6a56762521a02f8b1d8c49c10e02a80","modified":1659119955020},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1659119955036},{"_id":"themes/next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1659119955112},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1659119955005},{"_id":"themes/next/languages/es.yml","hash":"21676d658d309eb90342a924e106645611c937bc","modified":1659119955112},{"_id":"themes/next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1659119955112},{"_id":"themes/next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1659119955133},{"_id":"themes/next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1659119955128},{"_id":"themes/next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1659119955136},{"_id":"themes/next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1659119955141},{"_id":"themes/next/languages/ko.yml","hash":"a4b607d38fb77f083235a0ecb2384cfdd3542bde","modified":1659119955144},{"_id":"themes/next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1659119955144},{"_id":"themes/next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1659119955144},{"_id":"themes/next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1659119955144},{"_id":"themes/next/languages/tk.yml","hash":"bf61562ac892231bd28f23a2a5597ee98fb05aa6","modified":1659119955160},{"_id":"themes/next/languages/ru.yml","hash":"837bb39651769244b19ce458053757d429869764","modified":1659119955160},{"_id":"themes/next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1659119955160},{"_id":"themes/next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1659119955160},{"_id":"themes/next/languages/zh-CN.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1659119955176},{"_id":"themes/next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1659119955160},{"_id":"themes/next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1659119955160},{"_id":"themes/next/languages/zh-tw.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1659119955176},{"_id":"themes/next/layout/_layout.njk","hash":"2842f3e9fdde5bbd14cac89629221e68d80c8ea1","modified":1659119955176},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1659119956832},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1659119956832},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1659119956832},{"_id":"themes/next/languages/zh-hk.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1659119955176},{"_id":"themes/next/layout/page.njk","hash":"fddfdee95f5da86eab8a85d6eb1901996d2153cf","modified":1659119956879},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1659119956879},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1659119956926},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1659119960485},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1659119954507},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1659119954507},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"b87ffaf40820461159c891d0d41c87e00e312ff3","modified":1659119954679},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1659119954538},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"bfea9b04e3ea7da31a2095277c4c23ae6bd14baa","modified":1659119954726},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1659119954538},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1659119954821},{"_id":"themes/next/.github/workflows/linter.yml","hash":"4c63c396416457c5c8bc593c72b56070630a0f12","modified":1659119954773},{"_id":"themes/next/.github/workflows/lock.yml","hash":"58eca481fd71088a8ae1dbc04645bcfc03460b87","modified":1659119954773},{"_id":"themes/next/.github/workflows/tester.yml","hash":"dda18899fe62652c633f60c300a93df18f58862f","modified":1659119954856},{"_id":"themes/next/docs/ru/README.md","hash":"ce247fb6ba20c607be42957ff38f2dd6d71c12a4","modified":1659119955005},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1659119955005},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1659119955191},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1659119955005},{"_id":"themes/next/layout/_macro/post.njk","hash":"ce639fff96aabea825d48fc2d928e07039bacb22","modified":1659119955191},{"_id":"themes/next/docs/zh-CN/README.md","hash":"fc077960de61db02072573dd330ba2ca3ae9d4de","modified":1659119955005},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"beebc98f60b41f35bc3f687956a65f81f3145709","modified":1659283054848},{"_id":"themes/next/layout/_partials/footer.njk","hash":"d31906d34aa62f8ede6e75060b472d84481747d9","modified":1659123369238},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1659119955317},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1659119955496},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1659119955191},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1659119955755},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1659119955755},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1659119955818},{"_id":"themes/next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1659119956385},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1659119956344},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1659119956502},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1659119956548},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1659119956586},{"_id":"themes/next/scripts/events/index.js","hash":"e1c366efdab730a7791099115698c97b31b5ff78","modified":1659119956974},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1659119957271},{"_id":"themes/next/scripts/filters/post.js","hash":"1ca7885ce5024bfda13e28e605a33ba335b8aea0","modified":1659119957286},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1659119957255},{"_id":"themes/next/scripts/filters/minify.js","hash":"81edb9cfda491b860ebeb5645c1f5349ccacfbec","modified":1659119957286},{"_id":"themes/next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1659119957286},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1659119957286},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1659119957286},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"ad764d48715c5da87d33f048ad5f1ae8b4e2eb52","modified":1659119957333},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1659119957349},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1659119957349},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1659119957412},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1659119957454},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1659119957520},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1659119957494},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1659119957521},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1659119957524},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1659119957564},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1659119957564},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1659119957607},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1659119957607},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1659119957662},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1659119957662},{"_id":"themes/next/source/css/_mixins.styl","hash":"74cf298800fa560e1521d1875f60b5097a5c3b4d","modified":1659119959320},{"_id":"themes/next/source/css/main.styl","hash":"38b8a12681a3a04bed02aa1659054912ed6def11","modified":1659119959742},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1659119957710},{"_id":"themes/next/source/css/noscript.styl","hash":"68ae8709206919fdfe1166a440d7626843fcb33a","modified":1659119959742},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1659119093025},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1659119093041},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1659119093186},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1659119954491},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1659119959804},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1659119959789},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1659119954999},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1659119959898},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1659119959851},{"_id":"themes/next/source/js/motion.js","hash":"cce4f3cc59e76f899f3c1d9a7c53a33cf693d507","modified":1659119959898},{"_id":"themes/next/source/js/next-boot.js","hash":"da11083557070d947da48d29d2d60988c8d628e9","modified":1659119959898},{"_id":"themes/next/source/js/utils.js","hash":"8abd170f5d3c2399b8012fb08b22dbf4cef2e89f","modified":1659119960440},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1659119960444},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1659119959898},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1659119960446},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1659119959836},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1659119960483},{"_id":"themes/next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1659119959898},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1659119959836},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1659119960530},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1659119960571},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1659119960613},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1659119960525},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1659119960643},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1659119960527},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1659119960568},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1659119960736},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1659119960641},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1659119960685},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1659119955191},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"3ff7e251bf99a275cd5dfda1b3e51f773c5f7b05","modified":1659119955207},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1659119960684},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1659119955207},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1659119955207},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1659119955238},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1659119955254},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1659119955285},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1659119955348},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1659119955348},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1659119955379},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1659119955437},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1659119955465},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1659119955538},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1659119955590},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1659119955540},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1659119955614},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"17e03b61e20a5cb4195f0e0d75261ce61a1cddc4","modified":1659119955614},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1659119955614},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1659119955661},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1659119955708},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1659119955740},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1659119960733},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c5c38b4fb137cc799a6ec31f391d1efc12234c8c","modified":1659119955755},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1659119955849},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1659119955896},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1659119955881},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1659119955928},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1659119956000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1659119956137},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"eef710e9be20e7fed7573d0824feaa4eb1cf2737","modified":1659119955959},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1659119956165},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1659119960779},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1659119956252},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1659119956193},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1659119956223},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1659119956273},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1659119956302},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1659119956419},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1659119956463},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1659119956416},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1659119956047},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1659119956086},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1659119956115},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1659119956616},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1659119956666},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1659119956724},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1659119956694},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1659119956775},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1659119956753},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1659119956801},{"_id":"themes/next/scripts/events/lib/config.js","hash":"f5374bfea5dd7cc9b71ed5eec8541fe141aba459","modified":1660578452141},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1659119956974},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1659119956974},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1659119956974},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"a96050b0a9bcb49f1f6897660efc77991024790a","modified":1659119956989},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"17fbc99521440a5d6c32ac991ba2038a12f86b31","modified":1659119956989},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"65825c37e473c942095df05183424003d7263df5","modified":1659119956989},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1659119956989},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1659119957036},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1659119957099},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1659119957036},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1659119957036},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1659119957130},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1659119957177},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"dc9289f2cc912599fdd82aa52a19feedc8048fd9","modified":1659119959300},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1659119957224},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1659119959695},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1659119959726},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1659119959742},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1659119960273},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1659119959679},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1659119959679},{"_id":"themes/next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1659119960320},{"_id":"themes/next/source/js/schemes/muse.js","hash":"714acb6317cc0d4c5aca26d974c536e37bb9ce1b","modified":1659119959898},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1659119957710},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"991c1f80995cec418dc00d3d6b13e2d911ac9894","modified":1659119957710},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1659119958144},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1659119960211},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1659119958573},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1659119958900},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1659119958902},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1659119958949},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1659119958612},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1659119958991},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1659119959033},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1659119959035},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1659119960320},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1659119959038},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1659119959257},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1659119959366},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1659119959336},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1659119959398},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1659119959445},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1659119959476},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1659119959320},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1659119959320},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1659119959507},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"4a454bcadd9de7d73172abd3276943e8626657be","modified":1659119959398},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"ec5d4e8ffe74722a092a69ace2f8dec7776466a8","modified":1659119959507},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1659119959554},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1659119959585},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1659119959601},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1659119959601},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1659119959601},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1659119959648},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1659119959507},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1659119959914},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1659119959617},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1659119959945},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1659119959992},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1659119960023},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1659119960070},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1659119960039},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1659119959945},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1659119960117},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1659119960070},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1659119960164},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1659119960179},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1659119960226},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1659119960273},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1659119960385},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1659119960070},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1659119960382},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1659119960117},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1659119960396},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1659119957772},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1659119957838},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1659119957807},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1659119957869},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"3272f3373fa7c3910852124bc5e43e90e3470ff8","modified":1659119960389},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1659119957869},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"268e0a4cf638b9ce4db07268031ab34c5f31ac65","modified":1659119957916},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1659119957901},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1659119957919},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1659119957920},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1659119957970},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1659119960391},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1659119958031},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1659119957973},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1659119958034},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"e9fffe2a14751e86aed5e84a5e96514413eac2dc","modified":1659119960394},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1659119958093},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1659119958090},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1659119958178},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"0c4c5e39f8ac12febaa0f4ff7265151e139edad8","modified":1659119958271},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1659119958232},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1659119958180},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1659119958299},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1659119958330},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1659119958357},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1659119958360},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1659119958411},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f465cc1bfe98e3f2b33f5b696d4870c8dc56da6b","modified":1659119958464},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1659119958462},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1659119958506},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1659119958508},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1659119958615},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1659119958509},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1659119958673},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1659119958617},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"02b6d1a53f7a02c6b0929b11f3ab904b5b873a0e","modified":1659119958408},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1659119958712},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1659119958740},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1659119958771},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1659119958817},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1659119958814},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1659119958870},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1659119958820},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1659119958989},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1659119959081},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1659119959111},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1659119959129},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1659119959149},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1659119959173},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1659119959172},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1659119959218},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1659119956645},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1659119959215},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f71b2022094c5bc8c74b4ed049639f7262e0b182","modified":1659119959254},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"047bf8176ea24e277b1a4f6e6ad599033f1d1a44","modified":1659119958988},{"_id":"themes/next/source/images/background.jpg","hash":"977631c766110769f406e77354d0a6eafd4c8455","modified":1659119093041},{"_id":"themes/next/source/images/avatar.png","hash":"8ca60887b36d4595133f0a9feffac27468381e6a","modified":1659120506016},{"_id":"public/atom.xml","hash":"86bfc598b1105413a836e4e0d1cc241a03287c24","modified":1672672060873},{"_id":"public/search.xml","hash":"f125c06f17bb77aa99dbf57dd7338164b817c2a5","modified":1672672060873},{"_id":"public/sitemap.xml","hash":"851cc5423e212105ebda613ce6a9378e4ea2302b","modified":1672672060873},{"_id":"public/about/index.html","hash":"fa4232a37b55248141bd64a08e851d6daf23497f","modified":1672672060873},{"_id":"public/home/index.html","hash":"19400c018b40eb7f2b839acd3de70a568281a58d","modified":1672672060873},{"_id":"public/tags/index.html","hash":"f44514052b0fe98ff79574f4c86034629ce79640","modified":1672672060873},{"_id":"public/2022/11/03/OpenGL的手动初始化/index.html","hash":"5cecd2d769c3fe8917140ea79871620b6440bec3","modified":1672672060873},{"_id":"public/archives/2021/03/index.html","hash":"88eb7fd4ec70697bb3ccb3b18c75ed83f3d1c329","modified":1672672060873},{"_id":"public/archives/2021/04/index.html","hash":"a60df3b5131bc0a4cb758a4d23c4a4575c3e445d","modified":1672672060873},{"_id":"public/archives/2021/07/index.html","hash":"9a482311f59eaeaa3c3418ab47d74baef414364b","modified":1672672060873},{"_id":"public/archives/2021/11/index.html","hash":"1771713c18e2e26c790d50900cbb50ea5e47009a","modified":1672672060873},{"_id":"public/archives/2021/12/index.html","hash":"b4d0e4bda946e6cc407268c759810d982ba807be","modified":1672672060873},{"_id":"public/archives/2022/01/index.html","hash":"659b721d5b02a04f99c1b8fb4a2ac61d96f3b939","modified":1672672060873},{"_id":"public/archives/2022/02/index.html","hash":"0ab10560aed6c42313ab0d79cabc51c5c3af26e9","modified":1672672060873},{"_id":"public/archives/2022/07/index.html","hash":"2946604e090915efa45079f3e37f84d2acb2208f","modified":1672672060873},{"_id":"public/archives/2022/08/page/2/index.html","hash":"223aabd9fd35b723c0778783498eef1f153a3de9","modified":1672672060873},{"_id":"public/archives/2022/10/index.html","hash":"bbbe60e12671cdd78ce29023980c82cef30270af","modified":1672672060873},{"_id":"public/archives/2022/11/index.html","hash":"74a366382ca1f6aa379cae5abe4abe4c6bcf2185","modified":1672672060873},{"_id":"public/categories/bun/index.html","hash":"7af7b194e6e9cd9b80e751d33e6453961eb2d0e3","modified":1672672060873},{"_id":"public/categories/Algorithm/page/2/index.html","hash":"92e8e25469e54ef8d70f79c268930a9e0778ee37","modified":1672672060873},{"_id":"public/categories/bun/life/index.html","hash":"ef9bf20353aae10f26ee83c15e0d95d6c05bf01e","modified":1672672060873},{"_id":"public/categories/cpp/index.html","hash":"7001f43996517403c96a9fa80656c5acbf7b3bde","modified":1672672060873},{"_id":"public/categories/Algorithm/Computer-Graphics/index.html","hash":"5f90f38120bc9285e4c9c1b5fe2c662ad81ad5d5","modified":1672672060873},{"_id":"public/categories/Coding/index.html","hash":"e9291f9134d331a0825aa8d473547d6fc2bae93d","modified":1672672060873},{"_id":"public/categories/Computer-Graph/index.html","hash":"dc3b79a0528cb44780f8064b7d49ddf1a5086e92","modified":1672672060873},{"_id":"public/categories/rendering/index.html","hash":"aecb55b2117c0e65b786a33b8f05e17e022f4f8d","modified":1672672060873},{"_id":"public/categories/works/GF/index.html","hash":"482f8955160880616b9bc48167ce15bf35638403","modified":1672672060873},{"_id":"public/categories/works/HJ/index.html","hash":"8af2c423327ee1a00f2861ce9b75365462a05cb0","modified":1672672060873},{"_id":"public/categories/works/SCUU/index.html","hash":"ac3667a3bbdd8abe9be90e327e61e95ec9d0bf2c","modified":1672672060873},{"_id":"public/categories/develop/index.html","hash":"af68ec6c993e4d9e486f72e2809ab3ddee040f05","modified":1672672060873},{"_id":"public/categories/study/index.html","hash":"76b94afb79336f3d3d8c77383834972e6e0f610e","modified":1672672060873},{"_id":"public/categories/CMake/index.html","hash":"a79ede2336b30c6e2b9a77ef8c629e2572723ed2","modified":1672672060873},{"_id":"public/categories/works/SCU/index.html","hash":"4d3417a758de1756e73d9167cc44d4394082125d","modified":1672672060873},{"_id":"public/categories/index.html","hash":"024f62adfc58b18c433338800a05d257ebce735a","modified":1672672060873},{"_id":"public/2022/10/25/射线与平面相交计算/index.html","hash":"eccd711f76143c1fee27323b48d281adf0f0379c","modified":1672672060873},{"_id":"public/2022/09/10/模型变换-模型矩阵计算/index.html","hash":"9e0bebbed23b581296d0835434fb847922dde1d3","modified":1672672060873},{"_id":"public/2022/09/14/AABB与Ray求交/index.html","hash":"9578e13bb81571a989a04db0a13e1ed93da47ba6","modified":1672672060873},{"_id":"public/2022/09/10/cmake-文件操作/index.html","hash":"02fbcb1e98dd00c6a1a54eef91d54ea52c49dccc","modified":1672672060873},{"_id":"public/2022/09/08/透视矩阵计算/index.html","hash":"bcaea4e3ecd48d785054ae8e43f74d67f305a1f5","modified":1672672060873},{"_id":"public/2022/09/08/AABB与Triangle求交/index.html","hash":"83800dcbe3839f5b924f5c254e92f75a3d84ee86","modified":1672672060873},{"_id":"public/2022/09/08/OBB与Ray求交/index.html","hash":"52b44e40cb0265fc241927d21b86ba2fb394fd8c","modified":1672672060873},{"_id":"public/2022/09/08/OBB与OBB求交/index.html","hash":"53633b2536df862bebf17cd0eeb3dc31bee7424c","modified":1672672060873},{"_id":"public/2022/09/08/IBL/index.html","hash":"163512efe02feb9a6ed88cac171c5213df0346e3","modified":1672672060873},{"_id":"public/2022/08/29/构造函数私有化/index.html","hash":"4259e9cb8692eb851295bf06f828fdcc4e401f8f","modified":1672672060873},{"_id":"public/2022/08/19/设计模式-单例模式/index.html","hash":"da5df783c4cdcd64e43d4ec5493f8e3afccd1a28","modified":1672672060873},{"_id":"public/2022/08/19/设计模式-工厂模式/index.html","hash":"238162997e6088999553c5a9fa807b69b7880da2","modified":1672672060873},{"_id":"public/2022/08/19/多重继承/index.html","hash":"3adc2ed97dfe11639736538c6e01efd77399c268","modified":1672672060873},{"_id":"public/2022/08/19/View-Camera-Transformation/index.html","hash":"4e242fa5f9824dbc0f3b90a5507f9951777c89d8","modified":1672672060873},{"_id":"public/2022/08/14/2022半年总结/index.html","hash":"957daafa3e080cf3e8257788d1fd8c7d2d3e382c","modified":1672672060873},{"_id":"public/2022/08/08/Cplusplus-key-words-extern/index.html","hash":"8742b33ef27cfffd4ae25b775e7bde2c8dab8805","modified":1672672060873},{"_id":"public/2022/08/04/OpenGL-parallel-projection-graphics-do-not-scale-with-the-window/index.html","hash":"c23416d5d9b9bc4176be79465620fa7bc181a4e3","modified":1672672060873},{"_id":"public/2022/08/03/OpenGL-Move-Scene/index.html","hash":"2b27ea7165ef784f805794ed190ecfdc84db6301","modified":1672672060873},{"_id":"public/2022/08/03/OpenGL-Scene-ZoomIn-ZoomOut/index.html","hash":"e6a3b9b0168fca26de42b9d36383dadb444c1a6b","modified":1672672060873},{"_id":"public/2022/08/02/Qt-OpenGL-Antialiasing-MSAA/index.html","hash":"559171d2a13838637d442c34442ab89678d04220","modified":1672672060873},{"_id":"public/2022/08/01/Smartpointer/index.html","hash":"a9d5a54f06ff2e30069c739ddbbeb40808036b8f","modified":1672672060873},{"_id":"public/2022/07/29/Qt-Signals-And-Slots/index.html","hash":"b39cdb42567e2c30a88b3601209e8ef427725c9b","modified":1672672060873},{"_id":"public/2022/07/29/Bit-manipulation/index.html","hash":"f10893a147a44a3602eb7c86c1756a7b2a4af27f","modified":1672672060873},{"_id":"public/2022/07/28/vector-dot-product/index.html","hash":"053c8d3c00b5496f6d5b6239881355c5e3d1d535","modified":1672672060873},{"_id":"public/2022/07/24/Git常用命令-上/index.html","hash":"d563d56064d71b0cdc2b6a0a8275fa2e5d31208f","modified":1672672060873},{"_id":"public/2022/02/28/微信多开/index.html","hash":"9021d6d1fdb1fc3e07a567c5b6c74eb818d87da2","modified":1672672060873},{"_id":"public/2022/01/16/记一次面试_CAD渲染/index.html","hash":"33dc652ce690ccec7e384c5658bcb7912efb09d3","modified":1672672060873},{"_id":"public/2022/01/16/2021年终总结/index.html","hash":"b60d76f2111f09a3bb690e5b45364bda08c7dfd6","modified":1672672060873},{"_id":"public/2021/11/07/Multi-KeyWord-Sort/index.html","hash":"0929b84ea92e4921aaa35d92a9d183e5c6a20191","modified":1672672060873},{"_id":"public/2021/12/13/Games202-ShadowMap/index.html","hash":"55183a7bc8c41ceefdf5f5dd4baa98c705b4c4a8","modified":1672672060873},{"_id":"public/2021/11/07/Bucket-Sort/index.html","hash":"a7aaac6f7bc266344718440b1d161c17d9b1f5e8","modified":1672672060873},{"_id":"public/2021/11/07/Physical-Sort/index.html","hash":"7c5ba41baca1258440afaea99d832afc663fa9f3","modified":1672672060873},{"_id":"public/2021/11/07/Dynamic-drawing-of-osg-vertex-buffer-objects/index.html","hash":"41d2f2ae707112b27a3d4aee19ee6f005fc9ce77","modified":1672672060873},{"_id":"public/2021/11/07/Table-Sort/index.html","hash":"38993b094d8b433fa455d88139c8c1c53142ae27","modified":1672672060873},{"_id":"public/2021/10/28/QuickSort/index.html","hash":"331d2a91e87d6adebd66369a5650b0c2acf1c15c","modified":1672672060873},{"_id":"public/2021/10/26/归并排序/index.html","hash":"5c5335f61068610a863f0cff46e043e7206a9875","modified":1672672060873},{"_id":"public/2021/10/26/Shell-Sort/index.html","hash":"fa9336b57715bc2d552f61d68de0d392c38b65aa","modified":1672672060873},{"_id":"public/2021/10/25/Selection-sort/index.html","hash":"4d8bce4cadb5586d1f18500249f0c4cac66c4f85","modified":1672672060873},{"_id":"public/2021/10/24/Heap/index.html","hash":"9bffc592787ae257992cef4238642023dd11d120","modified":1672672060873},{"_id":"public/2021/10/17/记一次总结_第一次换工作/index.html","hash":"8cc841b29c7c81223bdf22cdffb3fb5f4ddd0eb1","modified":1672672060873},{"_id":"public/2021/07/27/记一次面试_Qt/index.html","hash":"b3e808633c578ee1f861e2c8d0e10a95955d7eb0","modified":1672672060873},{"_id":"public/2021/07/26/OSG-HUD/index.html","hash":"1141abd349c810f41e932460f044b41d1253356b","modified":1672672060873},{"_id":"public/2021/04/04/OSG踩坑记-默认光源/index.html","hash":"049a402a9da3e9d2539a275c5baa1158c9586c7c","modified":1672672060873},{"_id":"public/2021/10/19/sort-bubble-insertion/index.html","hash":"bb9cb10dad07d96f405241e8de41aa29651fce46","modified":1672672060873},{"_id":"public/2021/03/20/OSG踩坑记-模型共享-模型颜色修改/index.html","hash":"443f1401d17f7f0177e0ab2254bb885db8a05d78","modified":1672672060873},{"_id":"public/2021/03/19/Bug奇遇记-uint16-t/index.html","hash":"835d4e95e9bdb123ca1b67372184adfd4189b723","modified":1672672060873},{"_id":"public/2021/03/18/迟到的毕业总结/index.html","hash":"288c80b46c132214b53aed020d1d197907b1f5cf","modified":1672672060873},{"_id":"public/2021/03/16/baozi/index.html","hash":"adee7003609efa145de08d08395c4d716305a60c","modified":1672672060873},{"_id":"public/archives/index.html","hash":"47fb7c4a5fec5122f7efbc05a50b671837e75ec0","modified":1672672060873},{"_id":"public/archives/page/2/index.html","hash":"2f685333d8ee80ea861a9f01959f78fe2c7894b2","modified":1672672060873},{"_id":"public/archives/page/3/index.html","hash":"3dcbbecb91eca43131bd690e92685c940bdbf5f8","modified":1672672060873},{"_id":"public/archives/page/4/index.html","hash":"2dbe5e40aff8ab96beaa9bdc04b39647e7d2bf85","modified":1672672060873},{"_id":"public/archives/page/5/index.html","hash":"ca5ebdb31df415e080cf2d28634ba65b423233c9","modified":1672672060873},{"_id":"public/archives/2021/index.html","hash":"d59d16df3f3d315d5c18386f999691a43cc8861e","modified":1672672060873},{"_id":"public/archives/2021/page/2/index.html","hash":"e323ec25c2e79d5e7b10614b880a2e91faa1c44b","modified":1672672060873},{"_id":"public/archives/2021/10/index.html","hash":"b2b109616265f237179975aed1a33126d1f2d72f","modified":1672672060873},{"_id":"public/archives/2022/index.html","hash":"9479ccee713c76b1827d0a71c6dbbb71f256c2e7","modified":1672672060873},{"_id":"public/archives/2022/page/2/index.html","hash":"fcbffda2fef1312cbc8c63c6b3d53f2ea7112335","modified":1672672060873},{"_id":"public/archives/2022/page/3/index.html","hash":"574e2023618b21d892c4e87f3ff90d16ab36eb4b","modified":1672672060873},{"_id":"public/archives/2022/08/index.html","hash":"fa8b8d517148f80af38321adc4cc20beb397fb96","modified":1672672060873},{"_id":"public/archives/2022/09/index.html","hash":"ca6c1f3c4bc23042fd0ca8c2f2cc611ef8335985","modified":1672672060873},{"_id":"public/index.html","hash":"06ae6191fc1d261801dd22162b2d8ed8ad26c5e4","modified":1672672060873},{"_id":"public/page/2/index.html","hash":"9aaceca6b878770736df8dd86e25ccafc03ba399","modified":1672672060873},{"_id":"public/page/4/index.html","hash":"0afc87655d9c4fc6f3a842b6960b905baff5082d","modified":1672672060873},{"_id":"public/page/3/index.html","hash":"72af143d3b2fe6dc85646753f6376e34c1b047fe","modified":1672672060873},{"_id":"public/page/5/index.html","hash":"a203e3c5b09437b82cf432fb56190d36bdb66341","modified":1672672060873},{"_id":"public/categories/Algorithm/index.html","hash":"4e629ca2990133a5214fc22061cb99ddaf258c03","modified":1672672060873},{"_id":"public/categories/works/index.html","hash":"6c32eeb8b35039207a63359451087b7c76d4fba9","modified":1672672060873},{"_id":"public/categories/Math/index.html","hash":"2bca33137b6530b1db046f8e0407a28a17bebf92","modified":1672672060873},{"_id":"public/categories/Tips/index.html","hash":"2557dcd044d5a56a18af85b92184058e13ce365d","modified":1672672060873},{"_id":"public/categories/Computer-Graphics/index.html","hash":"4ed6659e77a3bb7db91c48fa9e982de4d5108f0e","modified":1672672060873},{"_id":"public/categories/works/interview/index.html","hash":"32ead50c92e826ecb76932a322481f8b8d41e917","modified":1672672060873},{"_id":"public/categories/works/GF/data-type/index.html","hash":"7e14b586151d59ea2bbc60645823c29fe63e2790","modified":1672672060873},{"_id":"public/categories/Design-Patterns/index.html","hash":"f90800cd89e89d27d9f647030050f8d8f781b3e7","modified":1672672060873},{"_id":"public/categories/works/GF/OSG/index.html","hash":"8f42f2875258cadf6dcbd995c010e66f92402f62","modified":1672672060873},{"_id":"public/categories/Computer-Graph/works/index.html","hash":"1662209dfaae9ff470fc251751aec7f06277fcac","modified":1672672060873},{"_id":"public/categories/works/SCUU/Computer-Graph/index.html","hash":"1d6c35f200893ad828743ea6b2224147d4a58503","modified":1672672060873},{"_id":"public/categories/works/HJ/OSG/index.html","hash":"709eeb71beba577b7f9ad79ecb67fa8fb29b30db","modified":1672672060873},{"_id":"public/categories/study/coding/index.html","hash":"89477eb6e913c90c4a96ef8657446cc8d9b34f2f","modified":1672672060873},{"_id":"public/categories/works/SCU/Git/index.html","hash":"469ad7d243876b2c575ed304cd50a6b519e428d1","modified":1672672060873},{"_id":"public/categories/Math/linear-algebra/index.html","hash":"5cf524f1902615d4bcdb66f4d1a8d7b150e7a96a","modified":1672672060873},{"_id":"public/categories/works/GF/data-type/bugs/index.html","hash":"b718dddfdbebb296a4001889edbd7c2a07db7d61","modified":1672672060873},{"_id":"public/categories/Computer-Graph/works/SCUU/index.html","hash":"0ed02243eb86a461dcc086c19342af45f9147c79","modified":1672672060873},{"_id":"public/categories/bun/university/index.html","hash":"9a7ee931cc60ce14d05612fc7f173c561948a658","modified":1672672060873},{"_id":"public/tags/mylife/index.html","hash":"b468cce0c1f0a0779b99d8220ad1bdcd260cc678","modified":1672672060873},{"_id":"public/tags/AABB/index.html","hash":"49c88940fdc79f99de477c80f7244f88ff10906c","modified":1672672060873},{"_id":"public/tags/Intersect/index.html","hash":"7c1a51f8c90974f1b8326b016a5f514d1cf4d391","modified":1672672060873},{"_id":"public/tags/cpp/page/3/index.html","hash":"10fe663edfb4629141756e1bfbdc35cdd6ccaf14","modified":1672672060873},{"_id":"public/tags/osg/index.html","hash":"1a4beb1985548cad702f0c57d31a8b18498fe582","modified":1672672060873},{"_id":"public/tags/key-words/index.html","hash":"adbf219265443d3b56df4611b897915c8bc2d4ab","modified":1672672060873},{"_id":"public/tags/Games202/index.html","hash":"c3dd016985bf23fb94957cbca9fbd208d2daae8b","modified":1672672060873},{"_id":"public/tags/Shadow/index.html","hash":"6ad61967456249b020349d3eddb771a90b1bf2af","modified":1672672060873},{"_id":"public/tags/Git/index.html","hash":"e13c90d05377da3c1b003ba123e572083e16a526","modified":1672672060873},{"_id":"public/tags/OBB/index.html","hash":"6d1278078eede89e2011d7e06e4a93eaa76ada30","modified":1672672060873},{"_id":"public/tags/OpenGL/index.html","hash":"16236381cfcae7e304d19b0b18fca40392282aa9","modified":1672672060873},{"_id":"public/tags/Qt/index.html","hash":"92ab95fa8ab2ae4c6af9de8cf113df58415da419","modified":1672672060873},{"_id":"public/tags/pointer/index.html","hash":"b476ca8eb132990610e475ceccf48d3da46528fa","modified":1672672060873},{"_id":"public/tags/Base/index.html","hash":"6c0e8a50148df5527dec3d6a8bfa4426815a2746","modified":1672672060873},{"_id":"public/tags/intraduce/index.html","hash":"f16a1016b7f7afa7a8d8183a09e3dd44b9e7af40","modified":1672672060873},{"_id":"public/tags/fileSystem/index.html","hash":"dbf521ba7d7d85ea3dc94824814c31c130bef6bd","modified":1672672060873},{"_id":"public/tags/vector/index.html","hash":"172bf9e65e0a60933e2fd390a21616b10fdf1369","modified":1672672060873},{"_id":"public/tags/inherit/index.html","hash":"0fc26c3653c9b1cf5a5ddc872af79f69d960020b","modified":1672672060873},{"_id":"public/tags/windows/index.html","hash":"8dd3a7014cc7953a4efe289570c49bb07ff71073","modified":1672672060873},{"_id":"public/tags/translate/index.html","hash":"e0ef45a6ac161264822ea0058bda1e7ab27d9673","modified":1672672060873},{"_id":"public/tags/conclusion/index.html","hash":"92cb35b1a787aa8347848776301788181aea905e","modified":1672672060873},{"_id":"public/tags/openGL/index.html","hash":"51629d3b83de2b599d9b4d8d44321939e8af280f","modified":1672672060873},{"_id":"public/tags/computer-graphics/index.html","hash":"0b400714a492a2ce5cf0b6ff3994e3505a28bc98","modified":1672672060873},{"_id":"public/tags/university/index.html","hash":"113cab2ea917a64475e7823fbdb3c9370228df53","modified":1672672060873},{"_id":"public/tags/projection/index.html","hash":"55fa14dcbfacbfafa8e5de057856d25ada662b67","modified":1672672060873},{"_id":"public/tags/cpp/index.html","hash":"25cdda13a47c5c11abe7785f1f9240802ddd94c8","modified":1672672060873},{"_id":"public/tags/cpp/page/2/index.html","hash":"c1cb9523a83c64a468a9720bbf0a23f3012036b7","modified":1672672060873},{"_id":"public/tags/sort/index.html","hash":"90660c63c1f732a698fd3fc171b6359deb0f6670","modified":1672672060873},{"_id":"public/CNAME","hash":"9198ffd83e0d8aa2ea2bb40dea5654d0fa6523a4","modified":1672672060873},{"_id":"public/uploads/wechat-qcode.jpg","hash":"5e32da2bbb5828e9050d948db5f9f36731ecfccc","modified":1672672060873},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1672672060873},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1672672060873},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1672672060873},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1672672060873},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1672672060873},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1672672060873},{"_id":"public/css/main.css","hash":"d9d6d0f6901fbfae6b5c3bddd9dee063d3c336ef","modified":1672672060873},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1672672060873},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1672672060873},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1672672060873},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1672672060873},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1672672060873},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1672672060873},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1672672060873},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1672672060873},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1672672060873},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1672672060873},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1672672060873},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1672672060873},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1672672060873},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1672672060873},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1672672060873},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1672672060873},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1672672060873},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1672672060873},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1672672060873},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1672672060873},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1672672060873},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1672672060873},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1672672060873},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1672672060873},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1672672060873},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1672672060873},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1672672060873},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1672672060873},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1672672060873},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1672672060873},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1672672060873},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1672672060873},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1672672060873},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1672672060873},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1672672060873},{"_id":"public/images/background.jpg","hash":"977631c766110769f406e77354d0a6eafd4c8455","modified":1672672060873},{"_id":"public/images/avatar.png","hash":"8ca60887b36d4595133f0a9feffac27468381e6a","modified":1672672060873}],"Category":[{"name":"bun","_id":"clcexrav600047cdaash4ekrt"},{"name":"Algorithm","_id":"clcexravd000g7cdae4wa022x"},{"name":"life","parent":"clcexrav600047cdaash4ekrt","_id":"clcexravg000p7cda4wgr6gwj"},{"name":"works","_id":"clcexravj000z7cdaebhv0ayz"},{"name":"cpp","_id":"clcexravm001d7cdadb7g43a8"},{"name":"Computer Graphics","parent":"clcexravd000g7cdae4wa022x","_id":"clcexravs001t7cdae4en27og"},{"name":"Coding","_id":"clcexravt00207cda8d507v3j"},{"name":"Computer Graph","_id":"clcexravv00287cda787916vv"},{"name":"rendering","_id":"clcexraw0002w7cda7sok1yt6"},{"name":"GF","parent":"clcexravj000z7cdaebhv0ayz","_id":"clcexraw7003t7cdaavnl83cf"},{"name":"HJ","parent":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawc004t7cdadiz82r1o"},{"name":"SCUU","parent":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawc004x7cdag2ce32y4"},{"name":"develop","_id":"clcexrawd00517cdaeuo2hit3"},{"name":"study","_id":"clcexrawd00567cda3oys6pqn"},{"name":"CMake","_id":"clcexrawe005c7cda3tdid2yw"},{"name":"SCU","parent":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawe005f7cdadh64dytj"},{"name":"Math","_id":"clcexrawf005k7cdacegmanf4"},{"name":"Tips","_id":"clcexrawf005o7cda61r1byr6"},{"name":"Computer Graphics","_id":"clcexrawg005v7cda316k7dqo"},{"name":"interview","parent":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawh00647cdaepow8bcl"},{"name":"data type","parent":"clcexraw7003t7cdaavnl83cf","_id":"clcexrawi00697cda9rtq0erg"},{"name":"Design Patterns","_id":"clcexrawi006e7cda3rh7765s"},{"name":"OSG","parent":"clcexraw7003t7cdaavnl83cf","_id":"clcexrawk006i7cda641q2mv1"},{"name":"works","parent":"clcexravv00287cda787916vv","_id":"clcexrawl006p7cda4wi4harg"},{"name":"OSG","parent":"clcexrawc004t7cdadiz82r1o","_id":"clcexrawm00727cda0zf210te"},{"name":"Computer Graph","parent":"clcexrawc004x7cdag2ce32y4","_id":"clcexrawm00737cda5nzmhfcu"},{"name":"coding","parent":"clcexrawd00567cda3oys6pqn","_id":"clcexrawm00757cda84sf2d6i"},{"name":"Git","parent":"clcexrawe005f7cdadh64dytj","_id":"clcexrawm00787cda4bnf287f"},{"name":"linear algebra","parent":"clcexrawf005k7cdacegmanf4","_id":"clcexrawn007b7cdaa8eg1njz"},{"name":"bugs","parent":"clcexrawi00697cda9rtq0erg","_id":"clcexrawo007e7cda53jn9yq5"},{"name":"SCUU","parent":"clcexrawl006p7cda4wi4harg","_id":"clcexrawo007i7cda31gthpdl"},{"name":"university","parent":"clcexrav600047cdaash4ekrt","_id":"clcexrawu00857cda1ubtaeli"}],"Data":[],"Page":[{"title":"About me","date":"2021-03-17T14:19:57.000Z","type":"about","_content":"\n#### Current Status\n\n- 一个无心上班的，三流软件开发人员。\n\n#### Work\n\n- 图形开发（图形展示`2D` & `3D`），桌面软件开发。\n\n#### Work Tags\n\n- `Cpp`、`OSG`、`OpenGL`、`Qt`、`VS`、`Git`、`Math`。","source":"about/index.md","raw":"---\ntitle: \"About me\"\ndate: 2021-03-17 22:19:57\ntype: \"about\"\n---\n\n#### Current Status\n\n- 一个无心上班的，三流软件开发人员。\n\n#### Work\n\n- 图形开发（图形展示`2D` & `3D`），桌面软件开发。\n\n#### Work Tags\n\n- `Cpp`、`OSG`、`OpenGL`、`Qt`、`VS`、`Git`、`Math`。","updated":"2022-07-28T16:37:23.286Z","path":"about/index.html","comments":1,"layout":"page","_id":"clcexrav100007cda59n93eof","content":"<h4 id=\"current-status\">Current Status</h4>\r\n<ul>\r\n<li>一个无心上班的，三流软件开发人员。</li>\r\n</ul>\r\n<h4 id=\"work\">Work</h4>\r\n<ul>\r\n<li>图形开发（图形展示<code>2D</code> &amp;\r\n<code>3D</code>），桌面软件开发。</li>\r\n</ul>\r\n<h4 id=\"work-tags\">Work Tags</h4>\r\n<ul>\r\n<li><code>Cpp</code>、<code>OSG</code>、<code>OpenGL</code>、<code>Qt</code>、<code>VS</code>、<code>Git</code>、<code>Math</code>。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"current-status\">Current Status</h4>\r\n<ul>\r\n<li>一个无心上班的，三流软件开发人员。</li>\r\n</ul>\r\n<h4 id=\"work\">Work</h4>\r\n<ul>\r\n<li>图形开发（图形展示<code>2D</code> &amp;\r\n<code>3D</code>），桌面软件开发。</li>\r\n</ul>\r\n<h4 id=\"work-tags\">Work Tags</h4>\r\n<ul>\r\n<li><code>Cpp</code>、<code>OSG</code>、<code>OpenGL</code>、<code>Qt</code>、<code>VS</code>、<code>Git</code>、<code>Math</code>。</li>\r\n</ul>\r\n"},{"title":"home","date":"2021-03-17T14:45:38.000Z","type":"home","_content":"","source":"home/index.md","raw":"---\ntitle: home\ndate: 2021-03-17 22:45:38\ntype: \"home\"\n---\n","updated":"2022-07-28T16:37:23.396Z","path":"home/index.html","comments":1,"layout":"page","_id":"clcexrav500027cdaheu458fw","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"all of categories","date":"2021-03-17T15:18:00.000Z","type":"categories","comments":0,"layout":"categories","_content":"\n### ","source":"categories/index.md","raw":"---\ntitle: \"all of categories\"\ndate: 2021-03-17 23:18:00\ntype: \"categories\"\ncomments: false\nlayout: \"categories\"\n---\n\n### ","updated":"2022-07-28T16:37:23.349Z","path":"categories/index.html","_id":"clcexrav800067cdadb1v5iui","content":"<h3 id=\"section\"></h3>\r\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"section\"></h3>\r\n"},{"title":"万物皆可贴标签","date":"2021-03-17T14:20:05.000Z","type":"tags","comments":0,"layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 万物皆可贴标签\ndate: 2021-03-17 22:20:05\ntype: \"tags\"\ncomments: false\nlayout: \"tags\"\n---\n\n","updated":"2022-07-28T16:37:23.427Z","path":"tags/index.html","_id":"clcexrav900087cda6ca9aja3","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"}],"Post":[{"title":"起伏的2022(上)","date":"2022-08-14T09:22:51.000Z","_content":"\n<center> <h1>关于我的2022(上)</h1> </center>\n\n<p>\n&ensp;&ensp;2022年发生诸多事情，令人成长的事情居多，在这中间的末尾，却也有足够的惊喜将这一连串的不快掩盖......\n</p>\n\n<!-- more -->\n\n## 2022上，一览\n\n- 辞掉了原来的工作\n  - 离开了北京\n  - 又去见了一些人\n- 来了成都\n- 给自己翻篇\n- 遇到了她\n  - 准备一起写我们的故事\n\n### 离开我不喜欢的北京\n\n#### 辞职那点事\n\n<p>\n&ensp;&ensp;其实之前也算是成都的一家公司，只是有些草率，我的入职合同是通过快递签订的。除了和我一起出差的同事，我并未见过任何一个公司的同事。我以为我的入职之后会是在成都度过，但是事实总是不能遂了人意，我在一直呆在北京，算是出差中，可能是呆的时间有点太长了，我决定要离开了。于是在去年年底的最后一个月开始重新找工作了，依旧是在成都，重新觅一份新的工作，阴差阳错，来了现在的公司，年前的2月，我们结束我们的年假，决定前往北京进行工作最后的工作交接。我深知那一次的离开，我可能再也不会再来北京，离开前总是需要见一些该见的人，就当作是最后的告别。\n</p>\n\n#### 往后不能再见的朋友\n\n<p>\n&ensp;&ensp;记得大一的第一学期的前半程是稍微有些无聊的，我去往那个和我期待中的样子差距颇大的地方，我在颓废中度过了大一第一学期的前半程，可能是接受了现实，我决定改变一下这个现状，于是迈出了我成为程序员得第一步，我找了个学生组织，参与进去。可能是缘分，我遇到好些个有意思的人，在这之中有我的好朋友，也有带我入行的学长，毕业后，学长去了北京。虽然在我本来的计划中，我大概会去北京的，但事情总是不得遂人意，阴差阳错，我没能去了。借此机会，见了这位阔别已久的老朋友，一起聊到凌晨，大家总有各自的生活，所以分别，多少没那么不舍。我相信缘分会拉着我们一次又一次的相遇。\n</p>\n\n<p>\n&ensp;&ensp;那位没能和我们一起拍毕业照的小伙伴，也将见证我的离去，我们是大学同学，男孩子性格的她，和我们最是合得来，一起吃了个饭，记得是我此前没有尝试过的港式，没有什么不舍，惟愿。\n</p>\n\n### 终来成都\n\n#### 新工作\n\n- 还是那个工作，只是换了环境和一波同事，对我来说,差别不大。来时是三月中旬，成都总是那么出人意料，我来时给予我最大的温暖，$ 28^o $的天气，只有感谢，未能有更多言语。\n- 来后三个月的感叹，<code>我好菜呀！！！！！！！</code>\n\n\n### 给自己翻篇\n\n- 经历变得丰富，成长颇多，感谢！\n- 毕业两年！！！！！！！！！！！！！！！！！！！！！！！！！\n\n\n### 遇到她\n\n- 如果我没有离开北京，如果我没有来这里，所以一切都是刚好的样子，感谢缘分让我们相遇。我们很合拍，无论什么。\n- 所以想写新的故事，就我和她，在这个城市的故事。\n  - 所以感谢会会的早餐与陪伴\n\n### Over\n\n- 2022的上半年到我们在一起结束，这是我2022年最开心的时候，感谢缘分，感谢相遇！\n","source":"_posts/2022半年总结.md","raw":"---\ntitle: 起伏的2022(上)\ndate: 2022-08-14 17:22:51\ncategories:\n  - bun\n  - life\ntags:\n- mylife\n---\n\n<center> <h1>关于我的2022(上)</h1> </center>\n\n<p>\n&ensp;&ensp;2022年发生诸多事情，令人成长的事情居多，在这中间的末尾，却也有足够的惊喜将这一连串的不快掩盖......\n</p>\n\n<!-- more -->\n\n## 2022上，一览\n\n- 辞掉了原来的工作\n  - 离开了北京\n  - 又去见了一些人\n- 来了成都\n- 给自己翻篇\n- 遇到了她\n  - 准备一起写我们的故事\n\n### 离开我不喜欢的北京\n\n#### 辞职那点事\n\n<p>\n&ensp;&ensp;其实之前也算是成都的一家公司，只是有些草率，我的入职合同是通过快递签订的。除了和我一起出差的同事，我并未见过任何一个公司的同事。我以为我的入职之后会是在成都度过，但是事实总是不能遂了人意，我在一直呆在北京，算是出差中，可能是呆的时间有点太长了，我决定要离开了。于是在去年年底的最后一个月开始重新找工作了，依旧是在成都，重新觅一份新的工作，阴差阳错，来了现在的公司，年前的2月，我们结束我们的年假，决定前往北京进行工作最后的工作交接。我深知那一次的离开，我可能再也不会再来北京，离开前总是需要见一些该见的人，就当作是最后的告别。\n</p>\n\n#### 往后不能再见的朋友\n\n<p>\n&ensp;&ensp;记得大一的第一学期的前半程是稍微有些无聊的，我去往那个和我期待中的样子差距颇大的地方，我在颓废中度过了大一第一学期的前半程，可能是接受了现实，我决定改变一下这个现状，于是迈出了我成为程序员得第一步，我找了个学生组织，参与进去。可能是缘分，我遇到好些个有意思的人，在这之中有我的好朋友，也有带我入行的学长，毕业后，学长去了北京。虽然在我本来的计划中，我大概会去北京的，但事情总是不得遂人意，阴差阳错，我没能去了。借此机会，见了这位阔别已久的老朋友，一起聊到凌晨，大家总有各自的生活，所以分别，多少没那么不舍。我相信缘分会拉着我们一次又一次的相遇。\n</p>\n\n<p>\n&ensp;&ensp;那位没能和我们一起拍毕业照的小伙伴，也将见证我的离去，我们是大学同学，男孩子性格的她，和我们最是合得来，一起吃了个饭，记得是我此前没有尝试过的港式，没有什么不舍，惟愿。\n</p>\n\n### 终来成都\n\n#### 新工作\n\n- 还是那个工作，只是换了环境和一波同事，对我来说,差别不大。来时是三月中旬，成都总是那么出人意料，我来时给予我最大的温暖，$ 28^o $的天气，只有感谢，未能有更多言语。\n- 来后三个月的感叹，<code>我好菜呀！！！！！！！</code>\n\n\n### 给自己翻篇\n\n- 经历变得丰富，成长颇多，感谢！\n- 毕业两年！！！！！！！！！！！！！！！！！！！！！！！！！\n\n\n### 遇到她\n\n- 如果我没有离开北京，如果我没有来这里，所以一切都是刚好的样子，感谢缘分让我们相遇。我们很合拍，无论什么。\n- 所以想写新的故事，就我和她，在这个城市的故事。\n  - 所以感谢会会的早餐与陪伴\n\n### Over\n\n- 2022的上半年到我们在一起结束，这是我2022年最开心的时候，感谢缘分，感谢相遇！\n","slug":"2022半年总结","published":1,"updated":"2022-10-23T14:41:58.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexrav300017cdaali70euc","content":"<center>\r\n<h1>\r\n关于我的2022(上)\r\n</h1>\r\n</center>\r\n<p>\r\n  2022年发生诸多事情，令人成长的事情居多，在这中间的末尾，却也有足够的惊喜将这一连串的不快掩盖......\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"上一览\">2022上，一览</h2>\r\n<ul>\r\n<li>辞掉了原来的工作\r\n<ul>\r\n<li>离开了北京</li>\r\n<li>又去见了一些人</li>\r\n</ul></li>\r\n<li>来了成都</li>\r\n<li>给自己翻篇</li>\r\n<li>遇到了她\r\n<ul>\r\n<li>准备一起写我们的故事</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"离开我不喜欢的北京\">离开我不喜欢的北京</h3>\r\n<h4 id=\"辞职那点事\">辞职那点事</h4>\r\n<p>\r\n  其实之前也算是成都的一家公司，只是有些草率，我的入职合同是通过快递签订的。除了和我一起出差的同事，我并未见过任何一个公司的同事。我以为我的入职之后会是在成都度过，但是事实总是不能遂了人意，我在一直呆在北京，算是出差中，可能是呆的时间有点太长了，我决定要离开了。于是在去年年底的最后一个月开始重新找工作了，依旧是在成都，重新觅一份新的工作，阴差阳错，来了现在的公司，年前的2月，我们结束我们的年假，决定前往北京进行工作最后的工作交接。我深知那一次的离开，我可能再也不会再来北京，离开前总是需要见一些该见的人，就当作是最后的告别。\r\n</p>\r\n<h4 id=\"往后不能再见的朋友\">往后不能再见的朋友</h4>\r\n<p>\r\n  记得大一的第一学期的前半程是稍微有些无聊的，我去往那个和我期待中的样子差距颇大的地方，我在颓废中度过了大一第一学期的前半程，可能是接受了现实，我决定改变一下这个现状，于是迈出了我成为程序员得第一步，我找了个学生组织，参与进去。可能是缘分，我遇到好些个有意思的人，在这之中有我的好朋友，也有带我入行的学长，毕业后，学长去了北京。虽然在我本来的计划中，我大概会去北京的，但事情总是不得遂人意，阴差阳错，我没能去了。借此机会，见了这位阔别已久的老朋友，一起聊到凌晨，大家总有各自的生活，所以分别，多少没那么不舍。我相信缘分会拉着我们一次又一次的相遇。\r\n</p>\r\n<p>\r\n  那位没能和我们一起拍毕业照的小伙伴，也将见证我的离去，我们是大学同学，男孩子性格的她，和我们最是合得来，一起吃了个饭，记得是我此前没有尝试过的港式，没有什么不舍，惟愿。\r\n</p>\r\n<h3 id=\"终来成都\">终来成都</h3>\r\n<h4 id=\"新工作\">新工作</h4>\r\n<ul>\r\n<li>还是那个工作，只是换了环境和一波同事，对我来说,差别不大。来时是三月中旬，成都总是那么出人意料，我来时给予我最大的温暖，$\r\n28^o $的天气，只有感谢，未能有更多言语。</li>\r\n<li>来后三个月的感叹，<code>我好菜呀！！！！！！！</code></li>\r\n</ul>\r\n<h3 id=\"给自己翻篇\">给自己翻篇</h3>\r\n<ul>\r\n<li>经历变得丰富，成长颇多，感谢！</li>\r\n<li>毕业两年！！！！！！！！！！！！！！！！！！！！！！！！！</li>\r\n</ul>\r\n<h3 id=\"遇到她\">遇到她</h3>\r\n<ul>\r\n<li>如果我没有离开北京，如果我没有来这里，所以一切都是刚好的样子，感谢缘分让我们相遇。我们很合拍，无论什么。</li>\r\n<li>所以想写新的故事，就我和她，在这个城市的故事。\r\n<ul>\r\n<li>所以感谢会会的早餐与陪伴</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"over\">Over</h3>\r\n<ul>\r\n<li>2022的上半年到我们在一起结束，这是我2022年最开心的时候，感谢缘分，感谢相遇！</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<center>\r\n<h1>\r\n关于我的2022(上)\r\n</h1>\r\n</center>\r\n<p>\r\n  2022年发生诸多事情，令人成长的事情居多，在这中间的末尾，却也有足够的惊喜将这一连串的不快掩盖......\r\n</p>","more":"<h2 id=\"上一览\">2022上，一览</h2>\r\n<ul>\r\n<li>辞掉了原来的工作\r\n<ul>\r\n<li>离开了北京</li>\r\n<li>又去见了一些人</li>\r\n</ul></li>\r\n<li>来了成都</li>\r\n<li>给自己翻篇</li>\r\n<li>遇到了她\r\n<ul>\r\n<li>准备一起写我们的故事</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"离开我不喜欢的北京\">离开我不喜欢的北京</h3>\r\n<h4 id=\"辞职那点事\">辞职那点事</h4>\r\n<p>\r\n  其实之前也算是成都的一家公司，只是有些草率，我的入职合同是通过快递签订的。除了和我一起出差的同事，我并未见过任何一个公司的同事。我以为我的入职之后会是在成都度过，但是事实总是不能遂了人意，我在一直呆在北京，算是出差中，可能是呆的时间有点太长了，我决定要离开了。于是在去年年底的最后一个月开始重新找工作了，依旧是在成都，重新觅一份新的工作，阴差阳错，来了现在的公司，年前的2月，我们结束我们的年假，决定前往北京进行工作最后的工作交接。我深知那一次的离开，我可能再也不会再来北京，离开前总是需要见一些该见的人，就当作是最后的告别。\r\n</p>\r\n<h4 id=\"往后不能再见的朋友\">往后不能再见的朋友</h4>\r\n<p>\r\n  记得大一的第一学期的前半程是稍微有些无聊的，我去往那个和我期待中的样子差距颇大的地方，我在颓废中度过了大一第一学期的前半程，可能是接受了现实，我决定改变一下这个现状，于是迈出了我成为程序员得第一步，我找了个学生组织，参与进去。可能是缘分，我遇到好些个有意思的人，在这之中有我的好朋友，也有带我入行的学长，毕业后，学长去了北京。虽然在我本来的计划中，我大概会去北京的，但事情总是不得遂人意，阴差阳错，我没能去了。借此机会，见了这位阔别已久的老朋友，一起聊到凌晨，大家总有各自的生活，所以分别，多少没那么不舍。我相信缘分会拉着我们一次又一次的相遇。\r\n</p>\r\n<p>\r\n  那位没能和我们一起拍毕业照的小伙伴，也将见证我的离去，我们是大学同学，男孩子性格的她，和我们最是合得来，一起吃了个饭，记得是我此前没有尝试过的港式，没有什么不舍，惟愿。\r\n</p>\r\n<h3 id=\"终来成都\">终来成都</h3>\r\n<h4 id=\"新工作\">新工作</h4>\r\n<ul>\r\n<li>还是那个工作，只是换了环境和一波同事，对我来说,差别不大。来时是三月中旬，成都总是那么出人意料，我来时给予我最大的温暖，$\r\n28^o $的天气，只有感谢，未能有更多言语。</li>\r\n<li>来后三个月的感叹，<code>我好菜呀！！！！！！！</code></li>\r\n</ul>\r\n<h3 id=\"给自己翻篇\">给自己翻篇</h3>\r\n<ul>\r\n<li>经历变得丰富，成长颇多，感谢！</li>\r\n<li>毕业两年！！！！！！！！！！！！！！！！！！！！！！！！！</li>\r\n</ul>\r\n<h3 id=\"遇到她\">遇到她</h3>\r\n<ul>\r\n<li>如果我没有离开北京，如果我没有来这里，所以一切都是刚好的样子，感谢缘分让我们相遇。我们很合拍，无论什么。</li>\r\n<li>所以想写新的故事，就我和她，在这个城市的故事。\r\n<ul>\r\n<li>所以感谢会会的早餐与陪伴</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"over\">Over</h3>\r\n<ul>\r\n<li>2022的上半年到我们在一起结束，这是我2022年最开心的时候，感谢缘分，感谢相遇！</li>\r\n</ul>"},{"title":"2021年终总结","date":"2022-01-15T16:43:19.000Z","_content":"\n<p>\n&ensp;&ensp;毕业后的第一年，我开始了自己的苟且与悲歌...\n</p>\n\n<!-- more -->\n\n### 我起伏的2021年:\n\n- 2021年鸡毛蒜皮\n\n....\n\n### 我的关于2021年的大事件：\n\n#### 1、换了工作\n\n#### 2、离开了那个度过了五年的城市\n\n#### 3、 换了工作的城市\n\n#### 4、告别了好友\n\n#### 5、见了阔怕已久的朋友\n\n#### 6、又一次决定换工作 \n\n- 面试了一个环境可能更好的工作\n\n### 一、我换工作这件事\n\n<p>先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。</p>\n&ensp;&ensp;离开我的上一个岗位的原因颇多,当然究其原因，我觉得`马老板`说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\n&ensp;&ensp;新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。\n\n### 二、离开济南\n\n&ensp;&ensp;我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\n&ensp;&ensp;若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\n&ensp;&ensp;我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以`成都`应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\n&ensp;&ensp;然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\n&ensp;&ensp;然后我来了`北京`.....,只能说，造化弄人。\n\n### 三、告别好友\n\n&ensp;&ensp;我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的`二哥`还有`杨哥`,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\n&ensp;&ensp;从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。\n\n### 四、见了好久不见的朋友\n\n&ensp;&ensp;2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\n&ensp;&ensp;有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\n&ensp;&ensp;同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。\n\n### 五、又一次决定换工作\n\n&ensp;&ensp;决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\n&ensp;&ensp;又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！\n\n\n\n","source":"_posts/2021年终总结.md","raw":"---\ntitle: 2021年终总结\ndate: 2022-01-16 00:43:19\ncategories:\n  - bun\n  - life\ntags:\t\n  - mylife\n---\n\n<p>\n&ensp;&ensp;毕业后的第一年，我开始了自己的苟且与悲歌...\n</p>\n\n<!-- more -->\n\n### 我起伏的2021年:\n\n- 2021年鸡毛蒜皮\n\n....\n\n### 我的关于2021年的大事件：\n\n#### 1、换了工作\n\n#### 2、离开了那个度过了五年的城市\n\n#### 3、 换了工作的城市\n\n#### 4、告别了好友\n\n#### 5、见了阔怕已久的朋友\n\n#### 6、又一次决定换工作 \n\n- 面试了一个环境可能更好的工作\n\n### 一、我换工作这件事\n\n<p>先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。</p>\n&ensp;&ensp;离开我的上一个岗位的原因颇多,当然究其原因，我觉得`马老板`说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\n&ensp;&ensp;新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。\n\n### 二、离开济南\n\n&ensp;&ensp;我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\n&ensp;&ensp;若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\n&ensp;&ensp;我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以`成都`应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\n&ensp;&ensp;然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\n&ensp;&ensp;然后我来了`北京`.....,只能说，造化弄人。\n\n### 三、告别好友\n\n&ensp;&ensp;我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的`二哥`还有`杨哥`,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\n&ensp;&ensp;从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。\n\n### 四、见了好久不见的朋友\n\n&ensp;&ensp;2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\n&ensp;&ensp;有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\n&ensp;&ensp;同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。\n\n### 五、又一次决定换工作\n\n&ensp;&ensp;决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\n&ensp;&ensp;又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！\n\n\n\n","slug":"2021年终总结","published":1,"updated":"2022-08-21T15:34:56.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexrav500037cdab8qnhwkt","content":"<p>\r\n  毕业后的第一年，我开始了自己的苟且与悲歌...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"我起伏的2021年\">我起伏的2021年:</h3>\r\n<ul>\r\n<li>2021年鸡毛蒜皮</li>\r\n</ul>\r\n<p>....</p>\r\n<h3 id=\"我的关于2021年的大事件\">我的关于2021年的大事件：</h3>\r\n<h4 id=\"换了工作\">1、换了工作</h4>\r\n<h4 id=\"离开了那个度过了五年的城市\">2、离开了那个度过了五年的城市</h4>\r\n<h4 id=\"换了工作的城市\">3、 换了工作的城市</h4>\r\n<h4 id=\"告别了好友\">4、告别了好友</h4>\r\n<h4 id=\"见了阔怕已久的朋友\">5、见了阔怕已久的朋友</h4>\r\n<h4 id=\"又一次决定换工作\">6、又一次决定换工作</h4>\r\n<ul>\r\n<li>面试了一个环境可能更好的工作</li>\r\n</ul>\r\n<h3 id=\"一我换工作这件事\">一、我换工作这件事</h3>\r\n<p>\r\n先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。\r\n</p>\r\n<p>  离开我的上一个岗位的原因颇多,当然究其原因，我觉得<code>马老板</code>说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\r\n  新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。</p>\r\n<h3 id=\"二离开济南\">二、离开济南</h3>\r\n<p>  我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\r\n  若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\r\n  我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以<code>成都</code>应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\r\n  然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\r\n  然后我来了<code>北京</code>.....,只能说，造化弄人。</p>\r\n<h3 id=\"三告别好友\">三、告别好友</h3>\r\n<p>  我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的<code>二哥</code>还有<code>杨哥</code>,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\r\n  从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。</p>\r\n<h3 id=\"四见了好久不见的朋友\">四、见了好久不见的朋友</h3>\r\n<p>  2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\r\n  有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\r\n  同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。</p>\r\n<h3 id=\"五又一次决定换工作\">五、又一次决定换工作</h3>\r\n<p>  决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\r\n  又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！</p>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  毕业后的第一年，我开始了自己的苟且与悲歌...\r\n</p>","more":"<h3 id=\"我起伏的2021年\">我起伏的2021年:</h3>\r\n<ul>\r\n<li>2021年鸡毛蒜皮</li>\r\n</ul>\r\n<p>....</p>\r\n<h3 id=\"我的关于2021年的大事件\">我的关于2021年的大事件：</h3>\r\n<h4 id=\"换了工作\">1、换了工作</h4>\r\n<h4 id=\"离开了那个度过了五年的城市\">2、离开了那个度过了五年的城市</h4>\r\n<h4 id=\"换了工作的城市\">3、 换了工作的城市</h4>\r\n<h4 id=\"告别了好友\">4、告别了好友</h4>\r\n<h4 id=\"见了阔怕已久的朋友\">5、见了阔怕已久的朋友</h4>\r\n<h4 id=\"又一次决定换工作\">6、又一次决定换工作</h4>\r\n<ul>\r\n<li>面试了一个环境可能更好的工作</li>\r\n</ul>\r\n<h3 id=\"一我换工作这件事\">一、我换工作这件事</h3>\r\n<p>\r\n先我说我自己吧,一个cpp开发人员,大学毕业之后在济南的一家做仿真的公司,做一些图形相关的工作,这就是我的第一份工作。\r\n</p>\r\n<p>  离开我的上一个岗位的原因颇多,当然究其原因，我觉得<code>马老板</code>说的话能够很好的概括我当时的处境， 比较这年头找一份工作很容易，但是找到一份好工作还是比较困难的。\r\n  新工作也是做仿真的,只是方向有所不同,但是对于一个开发人员,又有什么太大的区别呢,毕竟，核心的算法部分会有专门的人负责，而我知识负责一些图形相关的工作，展示一下仿真的结果。</p>\r\n<h3 id=\"二离开济南\">二、离开济南</h3>\r\n<p>  我在这个城市上大学，大学毕业在这里找的工作，也是在这里，度过了我和我对象为期6年的异地恋。\r\n  若是在学校还好，但是在济南生活，我大概是不适合这个城市了，离开济南不一定是因为我要换掉我之前的工作，也可能是由于我想离开这个城市，寻求更好的发展，或者是我本人有更高的追求，我在这个城市呆了很长时间，熟悉这里的大部分东西，这里的风土人情以及这里的那浓郁的不合于我的生活气息......\r\n  我算是个重庆人，也许更适合我的地方是川蜀之地，况且我还比较佛系，所以<code>成都</code>应该是个不错的选择，我开始面试，将目标公司地域选到了成都.....\r\n  然后我选择了一家成都的公司，在一个我去打完疫苗的间隙，足够我用这个时间做很多事情。\r\n  然后我来了<code>北京</code>.....,只能说，造化弄人。</p>\r\n<h3 id=\"三告别好友\">三、告别好友</h3>\r\n<p>  我也算是个热爱生活的人，离别前夕，怎么也会告别这个城市最后的朋友，我们宿舍的<code>二哥</code>还有<code>杨哥</code>,还有隔壁宿舍后面相熟的朋友，大家约在烧烤摊一起畅想了我们的未来的几年。\r\n  从济南公司离职后，去德州见了好久不见的另一个舍友，在那里度过了一个周末，互相倾诉，对于我们彼此的不容易，都是略有耳闻。</p>\r\n<h3 id=\"四见了好久不见的朋友\">四、见了好久不见的朋友</h3>\r\n<p>  2021年8月20日,在北京,我开启了我长达6个月的出差，我刚毕业的时候，我曾经有过想要在北京工作的想法，但是一些原因，我放弃了，同时，也觉得自己以后可能都不会在北京停留，第一次来北京是在16年的时候，我在北京度过了国庆，下了6天雨，这几天北京给我的印象只有雾霾。\r\n  有人说离别是为了更好的相遇，所以，有时候缘分很重要，大学同学毕业前在北京实习，毕业的时候北京疫情，最后的毕业照都是P上去的，28个人唯独缺了他，挺好的，大家又一次重逢。\r\n  同样是在这里，遇到了另一位朋友，亦师亦友，感谢相遇。</p>\r\n<h3 id=\"五又一次决定换工作\">五、又一次决定换工作</h3>\r\n<p>  决定让自己的未来有更多的选择,于是决定做一些尝试，希望能有个好结果。\r\n  又一次选择了面试，结果还挺不错，虽然没能拿到想要的待遇，但是是我喜欢的地点，拥有我喜欢的条件，甚好！！！</p>"},{"title":"AABB与Ray求交","date":"2022-09-14T07:49:17.000Z","mathjax":true,"_content":"\n光先追踪的加速方法就是引入层次结构数据结构，计算光线与层次结构的相交，从而加速光线与场景的求交。\n<!--more-->\n\n## AABB与Ray求交\n\n- 在之前的部分我们说到了关于`OBB`与`Ray`求交的计算<a href=\"./../../08/OBB%E4%B8%8ERay%E6%B1%82%E4%BA%A4/\">jump</a>,AABB算是比较特殊的`OBB`,计算`OBB`与`Ray`的方法可能不在适用于`AABB`与射线的求交计算，当然从原理上来说,这依旧是`Slabs Method`。\n\n### 计算\n\n#### 前置判断\n\n- 考虑射线起点在盒子里面的情况\n- 考虑射线和盒子某个面平行的时候\n\n```C++\nvec3 begin;// 射线的起点\nvec3 u;    // 射线的方向\nstd::array<vec3,3> normals;  // 面的三个法线\nvec3 min,max; // 盒子的边界点\n// 计算是否平行\nfloat del = 1e-6;\nfor(auto i = 0;i < 3;i++)\n{\n    if(u[i] < del)  // 近似为0  向量表示唯一 在这个方向上没有移动表示它和当前轴垂直\n    {\n        // 此时判断射线与盒子的关系\n        // 在盒子内部必然相交\n        if(begin[i] < min[i] || begin[i] > max[i])\n        return false;\n    }\n}\nreturn true;\n```\n\n\n#### 计算每个方向上对应的`slab`与射线的相交情况\n\n- $P = P_0 + t \\dots \\vec{d}$\n  - $\\vec{d}$ - 射线的方向\n\n```C++\nfloat del = 1e-6;\nvec3 begin;// 射线的起点\nvec3 u;    // 射线的方向\nstd::array<vec3,3> normals;  // 面的三个法线\nvec3 min,max; // 盒子的边界点\n\ndouble tMin = DBL_MIN,tMax = DBL_MAX;  // 记录最后获取的结果\n\n\nfor(auto i = 0;i < 3;i++)\n{\n    const dis = 1.0 / u[i];\n    float t_min;\n    float t_max;\n    if(dis >= del)\n    {\n        t_max = = (max[i] - begin[i]) * dis;\n        t_min = = (min[i] - begin[i]) * dis;\n    }\n    else\n    {\n        t_max = = (min[i] - begin[i]) * dis;\n        t_min = = (max[i] - begin[i]) * dis;\n    }\n\n    if(t_max < t_min)\n    {\n        swap(t_max,t_min);\n    }\n    if(tMin > t_min)\n    {\n        tMin = t_min;\n    }\n    if(tMax < t_max)\n    {\n        tMax = t_max;\n    }\n    if(tMin > tMax)\n        return false;\n}\n\nreturn ture;\n\n```\n\n#### 判断\n\n- 返回结果\n","source":"_posts/AABB与Ray求交.md","raw":"---\ntitle: AABB与Ray求交\ndate: 2022-09-14 15:49:17\nmathjax: true\ncategories:\n- Algorithm\n- Computer Graphics\ntags:\n- AABB\n- Intersect\n---\n\n光先追踪的加速方法就是引入层次结构数据结构，计算光线与层次结构的相交，从而加速光线与场景的求交。\n<!--more-->\n\n## AABB与Ray求交\n\n- 在之前的部分我们说到了关于`OBB`与`Ray`求交的计算<a href=\"./../../08/OBB%E4%B8%8ERay%E6%B1%82%E4%BA%A4/\">jump</a>,AABB算是比较特殊的`OBB`,计算`OBB`与`Ray`的方法可能不在适用于`AABB`与射线的求交计算，当然从原理上来说,这依旧是`Slabs Method`。\n\n### 计算\n\n#### 前置判断\n\n- 考虑射线起点在盒子里面的情况\n- 考虑射线和盒子某个面平行的时候\n\n```C++\nvec3 begin;// 射线的起点\nvec3 u;    // 射线的方向\nstd::array<vec3,3> normals;  // 面的三个法线\nvec3 min,max; // 盒子的边界点\n// 计算是否平行\nfloat del = 1e-6;\nfor(auto i = 0;i < 3;i++)\n{\n    if(u[i] < del)  // 近似为0  向量表示唯一 在这个方向上没有移动表示它和当前轴垂直\n    {\n        // 此时判断射线与盒子的关系\n        // 在盒子内部必然相交\n        if(begin[i] < min[i] || begin[i] > max[i])\n        return false;\n    }\n}\nreturn true;\n```\n\n\n#### 计算每个方向上对应的`slab`与射线的相交情况\n\n- $P = P_0 + t \\dots \\vec{d}$\n  - $\\vec{d}$ - 射线的方向\n\n```C++\nfloat del = 1e-6;\nvec3 begin;// 射线的起点\nvec3 u;    // 射线的方向\nstd::array<vec3,3> normals;  // 面的三个法线\nvec3 min,max; // 盒子的边界点\n\ndouble tMin = DBL_MIN,tMax = DBL_MAX;  // 记录最后获取的结果\n\n\nfor(auto i = 0;i < 3;i++)\n{\n    const dis = 1.0 / u[i];\n    float t_min;\n    float t_max;\n    if(dis >= del)\n    {\n        t_max = = (max[i] - begin[i]) * dis;\n        t_min = = (min[i] - begin[i]) * dis;\n    }\n    else\n    {\n        t_max = = (min[i] - begin[i]) * dis;\n        t_min = = (max[i] - begin[i]) * dis;\n    }\n\n    if(t_max < t_min)\n    {\n        swap(t_max,t_min);\n    }\n    if(tMin > t_min)\n    {\n        tMin = t_min;\n    }\n    if(tMax < t_max)\n    {\n        tMax = t_max;\n    }\n    if(tMin > tMax)\n        return false;\n}\n\nreturn ture;\n\n```\n\n#### 判断\n\n- 返回结果\n","slug":"AABB与Ray求交","published":1,"updated":"2022-10-23T14:41:58.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexrav800077cdahpu866qa","content":"<p>光先追踪的加速方法就是引入层次结构数据结构，计算光线与层次结构的相交，从而加速光线与场景的求交。\r\n<span id=\"more\"></span></p>\r\n<h2 id=\"aabb与ray求交\">AABB与Ray求交</h2>\r\n<ul>\r\n<li>在之前的部分我们说到了关于<code>OBB</code>与<code>Ray</code>求交的计算<a href=\"./../../08/OBB%E4%B8%8ERay%E6%B1%82%E4%BA%A4/\">jump</a>,AABB算是比较特殊的<code>OBB</code>,计算<code>OBB</code>与<code>Ray</code>的方法可能不在适用于<code>AABB</code>与射线的求交计算，当然从原理上来说,这依旧是<code>Slabs Method</code>。</li>\r\n</ul>\r\n<h3 id=\"计算\">计算</h3>\r\n<h4 id=\"前置判断\">前置判断</h4>\r\n<ul>\r\n<li>考虑射线起点在盒子里面的情况</li>\r\n<li>考虑射线和盒子某个面平行的时候</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec3 begin;<span class=\"comment\">// 射线的起点</span></span><br><span class=\"line\">vec3 u;    <span class=\"comment\">// 射线的方向</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;vec3,3&gt; normals;  <span class=\"comment\">// 面的三个法线</span></span><br><span class=\"line\">vec3 min,max; <span class=\"comment\">// 盒子的边界点</span></span><br><span class=\"line\"><span class=\"comment\">// 计算是否平行</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> del = <span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u[i] &lt; del)  <span class=\"comment\">// 近似为0  向量表示唯一 在这个方向上没有移动表示它和当前轴垂直</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此时判断射线与盒子的关系</span></span><br><span class=\"line\">        <span class=\"comment\">// 在盒子内部必然相交</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(begin[i] &lt; min[i] || begin[i] &gt; max[i])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"计算每个方向上对应的slab与射线的相交情况\">计算每个方向上对应的<code>slab</code>与射线的相交情况</h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(P = P_0 + t \\dots \\vec{d}\\)</span>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{d}\\)</span> - 射线的方向</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> del = <span class=\"number\">1e-6</span>;</span><br><span class=\"line\">vec3 begin;<span class=\"comment\">// 射线的起点</span></span><br><span class=\"line\">vec3 u;    <span class=\"comment\">// 射线的方向</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;vec3,3&gt; normals;  <span class=\"comment\">// 面的三个法线</span></span><br><span class=\"line\">vec3 min,max; <span class=\"comment\">// 盒子的边界点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> tMin = DBL_MIN,tMax = DBL_MAX;  <span class=\"comment\">// 记录最后获取的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dis = <span class=\"number\">1.0</span> / u[i];</span><br><span class=\"line\">    <span class=\"keyword\">float</span> t_min;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> t_max;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis &gt;= del)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t_max = = (max[i] - begin[i]) * dis;</span><br><span class=\"line\">        t_min = = (min[i] - begin[i]) * dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t_max = = (min[i] - begin[i]) * dis;</span><br><span class=\"line\">        t_min = = (max[i] - begin[i]) * dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t_max &lt; t_min)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        swap(t_max,t_min);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tMin &gt; t_min)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tMin = t_min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tMax &lt; t_max)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tMax = t_max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tMin &gt; tMax)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ture;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"判断\">判断</h4>\r\n<ul>\r\n<li>返回结果</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>光先追踪的加速方法就是引入层次结构数据结构，计算光线与层次结构的相交，从而加速光线与场景的求交。","more":"</p>\r\n<h2 id=\"aabb与ray求交\">AABB与Ray求交</h2>\r\n<ul>\r\n<li>在之前的部分我们说到了关于<code>OBB</code>与<code>Ray</code>求交的计算<a href=\"./../../08/OBB%E4%B8%8ERay%E6%B1%82%E4%BA%A4/\">jump</a>,AABB算是比较特殊的<code>OBB</code>,计算<code>OBB</code>与<code>Ray</code>的方法可能不在适用于<code>AABB</code>与射线的求交计算，当然从原理上来说,这依旧是<code>Slabs Method</code>。</li>\r\n</ul>\r\n<h3 id=\"计算\">计算</h3>\r\n<h4 id=\"前置判断\">前置判断</h4>\r\n<ul>\r\n<li>考虑射线起点在盒子里面的情况</li>\r\n<li>考虑射线和盒子某个面平行的时候</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec3 begin;<span class=\"comment\">// 射线的起点</span></span><br><span class=\"line\">vec3 u;    <span class=\"comment\">// 射线的方向</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;vec3,3&gt; normals;  <span class=\"comment\">// 面的三个法线</span></span><br><span class=\"line\">vec3 min,max; <span class=\"comment\">// 盒子的边界点</span></span><br><span class=\"line\"><span class=\"comment\">// 计算是否平行</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> del = <span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u[i] &lt; del)  <span class=\"comment\">// 近似为0  向量表示唯一 在这个方向上没有移动表示它和当前轴垂直</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此时判断射线与盒子的关系</span></span><br><span class=\"line\">        <span class=\"comment\">// 在盒子内部必然相交</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(begin[i] &lt; min[i] || begin[i] &gt; max[i])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"计算每个方向上对应的slab与射线的相交情况\">计算每个方向上对应的<code>slab</code>与射线的相交情况</h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(P = P_0 + t \\dots \\vec{d}\\)</span>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{d}\\)</span> - 射线的方向</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> del = <span class=\"number\">1e-6</span>;</span><br><span class=\"line\">vec3 begin;<span class=\"comment\">// 射线的起点</span></span><br><span class=\"line\">vec3 u;    <span class=\"comment\">// 射线的方向</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;vec3,3&gt; normals;  <span class=\"comment\">// 面的三个法线</span></span><br><span class=\"line\">vec3 min,max; <span class=\"comment\">// 盒子的边界点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> tMin = DBL_MIN,tMax = DBL_MAX;  <span class=\"comment\">// 记录最后获取的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">3</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dis = <span class=\"number\">1.0</span> / u[i];</span><br><span class=\"line\">    <span class=\"keyword\">float</span> t_min;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> t_max;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis &gt;= del)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t_max = = (max[i] - begin[i]) * dis;</span><br><span class=\"line\">        t_min = = (min[i] - begin[i]) * dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t_max = = (min[i] - begin[i]) * dis;</span><br><span class=\"line\">        t_min = = (max[i] - begin[i]) * dis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t_max &lt; t_min)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        swap(t_max,t_min);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tMin &gt; t_min)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tMin = t_min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tMax &lt; t_max)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tMax = t_max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tMin &gt; tMax)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> ture;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"判断\">判断</h4>\r\n<ul>\r\n<li>返回结果</li>\r\n</ul>"},{"title":"AABB与Triangle求交","date":"2022-09-08T09:49:59.000Z","mathjax":true,"_content":"\n`AABB` 与三角形求交，采用分离轴的方式实现的一种比较优质的方法。\n<!--more-->\n\n## 0. 预备知识\n\n### 点到面的距离方程\n\n### 面的方程\n\n- 定义平面`A`的法向 $\\vec{n}$ `{a,b,c}`,\n- 已知平面行一点$P_0 \\lbrace x_0,y_0,z_0\\rbrace$\n- 任意点 $P$`{x,y,z}`\n- 面方程:\n  - $\\overrightarrow{P - P_0} \\cdot  \\vec{n} = 0$\n\n### 点到面的距离\n\n#### 法向量法\n\n- $\\vec{n}$  - 平面的法向量\n- $d$ - 点到平面的距离\n- $P$ - 平面外一点\n- $A$ - 平面上一点\n- $d = \\vec{n} \\cdot \\vec{PA} $\n  - PA在法向方向上的投影既是点$P$到平面的距离\n\n### 射线的方程\n\n- 射线方程\n  - $O$ 为起点， 沿着方向 $\\vec{d}$\n  - 射线方向上任意一点$P_0$\n  - $P_0 = O + \\vec{d}$\n\n## 三角形与AABB求交\n\n- 我们定义一个轴对齐包围盒\n  - center $c$, `AABB`的中心点\n  - a half vector $\\vec{h}$, 记录盒子的各个轴的方向与在轴所在方向大小\n\n- 一个三角形\n  - $\\Delta u_0u_1u_2$\n\n<img id=AABB&Trangle src=https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/AABB_and_trangle_intersect.png></img>\n\n### 1. 第一步 \n\n- 移动`AABB`与三角形，使`AABB`与原点重合\n\n### 2. 计算测试的轴\n\n- 我们将在原点进行基于分离轴的相交测试，需要测试13根轴。\n\n#### 2.1 `AABB`的面的法线\n\n- $\\vec{e_0}(1,0,0)$\n- $\\vec{e_1}(0,1,0)$\n- $\\vec{e_2}(0,0,1)$\n\n#### 2.2 三角形$\\Delta u_0u_1u_2$的法线\n\n- $\\vec{n}$\n- $\\vec{n} == \\vec{f_0} \\times \\vec{f_1}$\n\n#### 2.3 $a_{ij} = e_i \\times f_j$\n\n- $i,j \\in \\left ( 0,1,2 \\right )$\n- $\\vec{f_0} = \\vec{v_1} - \\vec{v_0}$\n- $\\vec{f_1} = \\vec{v_2} - \\vec{v_1}$\n- $\\vec{f_0} = \\vec{v_0} - \\vec{v_2}$\n\n### 3 分离轴计算\n\n- 一旦找到分离轴算法就会立即停止并且返回一个不相交的结果\n- 如果通过所有的测试并且没有找到分离轴，那么三角形与`AABB box`相交\n\n- 将三角形的顶点投影到每一个分离轴上，然后计算`AABB`在分离轴上的范围,`AABB`被移动到原点，它的投影将会是一个$\\left [ -r,+r\\right ]$对称的\n  - 如果她们在这个分离轴上重合，那么它们投影后的结果也是重合的\n- 只有当所有的分离轴上的测试都通过的时候才能是相交的。\n\n## Code \n\n### define AABB\n\n```C++\nstruct AABB\n{\n    AABB() = default;\n\n    explicit AABB(const glm::vec3 & center,const glm::vec3 & size)\n        : m_center(center)\n        , m_size(size)\n    {\n    }\n\n    void updateTransfrom(const glm::mat4 & model)\n    {\n        m_center = glm::vec3( model * glm::vec4(m_center,1.0));\n    }\n\n    glm::vec3 m_center;\n    glm::vec3 m_size;\n};\n\n```\n\n### define Triangle\n\n```C++\nstruct Triangle\n{\n    /// 注意三角形的顶点顺序为逆时针\n    Triangle(const glm::vec3& p1, const glm::vec3& p2, const glm::vec3& p3, const glm::vec3& normal)\n        : m_p1(p1)\n        , m_p2(p2)\n        , m_p3(p3)\n        , m_normal(glm::normalize(normal))\n    {\n\n\n    }\n\n    Triangle(const glm::vec3& p1, const glm::vec3& p2, const glm::vec3& p3)\n        : m_p1(p1)\n        , m_p2(p2)\n        , m_p3(p3)\n    {\n        /// 计算三角形的法相\n\n        /*\n                p2\n\n          p3           p1\n\n        */\n\n        auto v1 = p3 - p1;\n        auto v2 = p2 - p1;\n        m_normal = glm::normalize(glm::cross(v2, v1));\n\n    }\n\n    void updateTransform(glm::mat4 & model)\n    {\n        m_p1 = vec3(model * glm::vec4(m_p1,1.0));\n        m_p2 = vec3(model * glm::vec4(m_p2,1.0));\n        m_p3 = vec3(model * glm::vec4(m_p3,1.0));\n\n        auto v1 = m_p3 - m_p1;\n        auto v2 = m_p2 - m_p1;\n        m_normal = glm::normalize(glm::cross(v2, v1));\n    }\n\n    glm::vec3 m_p1;\n    glm::vec3 m_p2;\n    glm::vec3 m_p3;\n    glm::vec3 m_normal;\n\n};\n\n```\n\n### 实现\n\n```C++\n// done \nbool IntersectAABBWithTriangle(const AABB &aabb, const Triangle &triangle)\n{\n    // move AABB ro  origin\n    auto box = aabb;\n    auto trans = glm::mat4(1.0);\n    trans = glm::translate(trans,- box.m_center);\n    box.updateTransfrom(trans);\n\n    auto tri = triangle;\n    tri.updateTransform(trans);\n\n    std::array<glm::vec3,13> projectAxis;\n\n    std::array<glm::vec3,3> aabbAxisVector;\n    {\n        aabbAxisVector[0] = glm::vec3(1.0f, 0.0, 0.0);\n        aabbAxisVector[1] = glm::vec3(0.0f, 1.0, 0.0);\n        aabbAxisVector[2] = glm::vec3(0.0f, 0.0, 1.0);\n    }\n\n    std::array<glm::vec3,3> triEdgeVector;\n    {\n        triEdgeVector[0] = tri.m_p2 - tri.m_p1;\n        triEdgeVector[1] = tri.m_p3 - tri.m_p2;\n        triEdgeVector[2] = tri.m_p1 - tri.m_p3;\n    }\n\n    auto triangleNormal = tri.m_normal;\n\n    std::array<glm::vec3,3> aabbFaceNormal;\n    {\n        aabbFaceNormal[0] = glm::vec3(1.0f, 0.0, 0.0);\n        aabbFaceNormal[1] = glm::vec3(0.0f, 1.0, 0.0);\n        aabbFaceNormal[2] = glm::vec3(0.0f, 0.0, 1.0);\n    }\n\n    // 两个图形边的随机组合的叉积也作为一个分离轴\n    for(const auto & i: {0,1,2})\n    {  /// AABB\n        for(const auto & j: {0,1,2})\n        { /// triangle\n            projectAxis[i*3 + j] = glm::normalize(glm::cross(aabbAxisVector[i], triEdgeVector[j]));\n        }\n    }\n\n    // 三角形的法线\n    projectAxis[9] = triangleNormal;\n    for(const auto & index: {0,1,2})\n    {\n        projectAxis[10 + index] = aabbFaceNormal[index];\n    }\n\n    // 计算过程\n    for(const auto & it: projectAxis)\n    {\n        // 投影三角形到分离轴上\n        auto p_0 = glm::dot(it,tri.m_p1);\n        auto p_1 = glm::dot(it,tri.m_p2);\n        auto p_2 = glm::dot(it,tri.m_p3);\n\n        // 计算AABB的Size\n        const auto half = glm::vec3(0.5 * aabb.m_size.x,0.5 * aabb.m_size.y,0.5 * aabb.m_size.z);\n\n        // 计算AABB的投影的结果的范围\n        auto r = half.x * std::abs(dot(aabbAxisVector[0],it)) +\n                half.y * std::abs(dot(aabbAxisVector[1],it)) +\n                half.z * std::abs(dot(aabbAxisVector[2],it));\n\n        // 计算三角形投影结果的范围\n        auto min_p = std::min(std::min(p_0,p_1),p_2);\n        auto max_p = std::max(std::max(p_0,p_1),p_2);\n\n        // 判断是否相交\n        if(min_p > r || max_p < -r)\n            return false;\n    }\n\n    return true;\n}\n```\n","source":"_posts/AABB与Triangle求交.md","raw":"---\ntitle: AABB与Triangle求交\ndate: 2022-09-08 17:49:59\nmathjax: true\ncategories:\n- Algorithm\n- Computer Graphics\ntags:\n- AABB\n- Intersect\n\n---\n\n`AABB` 与三角形求交，采用分离轴的方式实现的一种比较优质的方法。\n<!--more-->\n\n## 0. 预备知识\n\n### 点到面的距离方程\n\n### 面的方程\n\n- 定义平面`A`的法向 $\\vec{n}$ `{a,b,c}`,\n- 已知平面行一点$P_0 \\lbrace x_0,y_0,z_0\\rbrace$\n- 任意点 $P$`{x,y,z}`\n- 面方程:\n  - $\\overrightarrow{P - P_0} \\cdot  \\vec{n} = 0$\n\n### 点到面的距离\n\n#### 法向量法\n\n- $\\vec{n}$  - 平面的法向量\n- $d$ - 点到平面的距离\n- $P$ - 平面外一点\n- $A$ - 平面上一点\n- $d = \\vec{n} \\cdot \\vec{PA} $\n  - PA在法向方向上的投影既是点$P$到平面的距离\n\n### 射线的方程\n\n- 射线方程\n  - $O$ 为起点， 沿着方向 $\\vec{d}$\n  - 射线方向上任意一点$P_0$\n  - $P_0 = O + \\vec{d}$\n\n## 三角形与AABB求交\n\n- 我们定义一个轴对齐包围盒\n  - center $c$, `AABB`的中心点\n  - a half vector $\\vec{h}$, 记录盒子的各个轴的方向与在轴所在方向大小\n\n- 一个三角形\n  - $\\Delta u_0u_1u_2$\n\n<img id=AABB&Trangle src=https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/AABB_and_trangle_intersect.png></img>\n\n### 1. 第一步 \n\n- 移动`AABB`与三角形，使`AABB`与原点重合\n\n### 2. 计算测试的轴\n\n- 我们将在原点进行基于分离轴的相交测试，需要测试13根轴。\n\n#### 2.1 `AABB`的面的法线\n\n- $\\vec{e_0}(1,0,0)$\n- $\\vec{e_1}(0,1,0)$\n- $\\vec{e_2}(0,0,1)$\n\n#### 2.2 三角形$\\Delta u_0u_1u_2$的法线\n\n- $\\vec{n}$\n- $\\vec{n} == \\vec{f_0} \\times \\vec{f_1}$\n\n#### 2.3 $a_{ij} = e_i \\times f_j$\n\n- $i,j \\in \\left ( 0,1,2 \\right )$\n- $\\vec{f_0} = \\vec{v_1} - \\vec{v_0}$\n- $\\vec{f_1} = \\vec{v_2} - \\vec{v_1}$\n- $\\vec{f_0} = \\vec{v_0} - \\vec{v_2}$\n\n### 3 分离轴计算\n\n- 一旦找到分离轴算法就会立即停止并且返回一个不相交的结果\n- 如果通过所有的测试并且没有找到分离轴，那么三角形与`AABB box`相交\n\n- 将三角形的顶点投影到每一个分离轴上，然后计算`AABB`在分离轴上的范围,`AABB`被移动到原点，它的投影将会是一个$\\left [ -r,+r\\right ]$对称的\n  - 如果她们在这个分离轴上重合，那么它们投影后的结果也是重合的\n- 只有当所有的分离轴上的测试都通过的时候才能是相交的。\n\n## Code \n\n### define AABB\n\n```C++\nstruct AABB\n{\n    AABB() = default;\n\n    explicit AABB(const glm::vec3 & center,const glm::vec3 & size)\n        : m_center(center)\n        , m_size(size)\n    {\n    }\n\n    void updateTransfrom(const glm::mat4 & model)\n    {\n        m_center = glm::vec3( model * glm::vec4(m_center,1.0));\n    }\n\n    glm::vec3 m_center;\n    glm::vec3 m_size;\n};\n\n```\n\n### define Triangle\n\n```C++\nstruct Triangle\n{\n    /// 注意三角形的顶点顺序为逆时针\n    Triangle(const glm::vec3& p1, const glm::vec3& p2, const glm::vec3& p3, const glm::vec3& normal)\n        : m_p1(p1)\n        , m_p2(p2)\n        , m_p3(p3)\n        , m_normal(glm::normalize(normal))\n    {\n\n\n    }\n\n    Triangle(const glm::vec3& p1, const glm::vec3& p2, const glm::vec3& p3)\n        : m_p1(p1)\n        , m_p2(p2)\n        , m_p3(p3)\n    {\n        /// 计算三角形的法相\n\n        /*\n                p2\n\n          p3           p1\n\n        */\n\n        auto v1 = p3 - p1;\n        auto v2 = p2 - p1;\n        m_normal = glm::normalize(glm::cross(v2, v1));\n\n    }\n\n    void updateTransform(glm::mat4 & model)\n    {\n        m_p1 = vec3(model * glm::vec4(m_p1,1.0));\n        m_p2 = vec3(model * glm::vec4(m_p2,1.0));\n        m_p3 = vec3(model * glm::vec4(m_p3,1.0));\n\n        auto v1 = m_p3 - m_p1;\n        auto v2 = m_p2 - m_p1;\n        m_normal = glm::normalize(glm::cross(v2, v1));\n    }\n\n    glm::vec3 m_p1;\n    glm::vec3 m_p2;\n    glm::vec3 m_p3;\n    glm::vec3 m_normal;\n\n};\n\n```\n\n### 实现\n\n```C++\n// done \nbool IntersectAABBWithTriangle(const AABB &aabb, const Triangle &triangle)\n{\n    // move AABB ro  origin\n    auto box = aabb;\n    auto trans = glm::mat4(1.0);\n    trans = glm::translate(trans,- box.m_center);\n    box.updateTransfrom(trans);\n\n    auto tri = triangle;\n    tri.updateTransform(trans);\n\n    std::array<glm::vec3,13> projectAxis;\n\n    std::array<glm::vec3,3> aabbAxisVector;\n    {\n        aabbAxisVector[0] = glm::vec3(1.0f, 0.0, 0.0);\n        aabbAxisVector[1] = glm::vec3(0.0f, 1.0, 0.0);\n        aabbAxisVector[2] = glm::vec3(0.0f, 0.0, 1.0);\n    }\n\n    std::array<glm::vec3,3> triEdgeVector;\n    {\n        triEdgeVector[0] = tri.m_p2 - tri.m_p1;\n        triEdgeVector[1] = tri.m_p3 - tri.m_p2;\n        triEdgeVector[2] = tri.m_p1 - tri.m_p3;\n    }\n\n    auto triangleNormal = tri.m_normal;\n\n    std::array<glm::vec3,3> aabbFaceNormal;\n    {\n        aabbFaceNormal[0] = glm::vec3(1.0f, 0.0, 0.0);\n        aabbFaceNormal[1] = glm::vec3(0.0f, 1.0, 0.0);\n        aabbFaceNormal[2] = glm::vec3(0.0f, 0.0, 1.0);\n    }\n\n    // 两个图形边的随机组合的叉积也作为一个分离轴\n    for(const auto & i: {0,1,2})\n    {  /// AABB\n        for(const auto & j: {0,1,2})\n        { /// triangle\n            projectAxis[i*3 + j] = glm::normalize(glm::cross(aabbAxisVector[i], triEdgeVector[j]));\n        }\n    }\n\n    // 三角形的法线\n    projectAxis[9] = triangleNormal;\n    for(const auto & index: {0,1,2})\n    {\n        projectAxis[10 + index] = aabbFaceNormal[index];\n    }\n\n    // 计算过程\n    for(const auto & it: projectAxis)\n    {\n        // 投影三角形到分离轴上\n        auto p_0 = glm::dot(it,tri.m_p1);\n        auto p_1 = glm::dot(it,tri.m_p2);\n        auto p_2 = glm::dot(it,tri.m_p3);\n\n        // 计算AABB的Size\n        const auto half = glm::vec3(0.5 * aabb.m_size.x,0.5 * aabb.m_size.y,0.5 * aabb.m_size.z);\n\n        // 计算AABB的投影的结果的范围\n        auto r = half.x * std::abs(dot(aabbAxisVector[0],it)) +\n                half.y * std::abs(dot(aabbAxisVector[1],it)) +\n                half.z * std::abs(dot(aabbAxisVector[2],it));\n\n        // 计算三角形投影结果的范围\n        auto min_p = std::min(std::min(p_0,p_1),p_2);\n        auto max_p = std::max(std::max(p_0,p_1),p_2);\n\n        // 判断是否相交\n        if(min_p > r || max_p < -r)\n            return false;\n    }\n\n    return true;\n}\n```\n","slug":"AABB与Triangle求交","published":1,"updated":"2022-10-23T14:41:59.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexrav900097cdaf18jaj0v","content":"<p><code>AABB</code>\r\n与三角形求交，采用分离轴的方式实现的一种比较优质的方法。 <span id=\"more\"></span></p>\r\n<h2 id=\"预备知识\">0. 预备知识</h2>\r\n<h3 id=\"点到面的距离方程\">点到面的距离方程</h3>\r\n<h3 id=\"面的方程\">面的方程</h3>\r\n<ul>\r\n<li>定义平面<code>A</code>的法向 <span\r\nclass=\"math inline\">\\(\\vec{n}\\)</span> <code>&#123;a,b,c&#125;</code>,</li>\r\n<li>已知平面行一点<span class=\"math inline\">\\(P_0 \\lbrace\r\nx_0,y_0,z_0\\rbrace\\)</span></li>\r\n<li>任意点 <span\r\nclass=\"math inline\">\\(P\\)</span><code>&#123;x,y,z&#125;</code></li>\r\n<li>面方程:\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\overrightarrow{P - P_0} \\cdot \\vec{n} =\r\n0\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"点到面的距离\">点到面的距离</h3>\r\n<h4 id=\"法向量法\">法向量法</h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n}\\)</span> - 平面的法向量</li>\r\n<li><span class=\"math inline\">\\(d\\)</span> - 点到平面的距离</li>\r\n<li><span class=\"math inline\">\\(P\\)</span> - 平面外一点</li>\r\n<li><span class=\"math inline\">\\(A\\)</span> - 平面上一点</li>\r\n<li>$d = $\r\n<ul>\r\n<li>PA在法向方向上的投影既是点<span\r\nclass=\"math inline\">\\(P\\)</span>到平面的距离</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"射线的方程\">射线的方程</h3>\r\n<ul>\r\n<li>射线方程\r\n<ul>\r\n<li><span class=\"math inline\">\\(O\\)</span> 为起点， 沿着方向 <span\r\nclass=\"math inline\">\\(\\vec{d}\\)</span></li>\r\n<li>射线方向上任意一点<span class=\"math inline\">\\(P_0\\)</span></li>\r\n<li><span class=\"math inline\">\\(P_0 = O + \\vec{d}\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"三角形与aabb求交\">三角形与AABB求交</h2>\r\n<ul>\r\n<li>我们定义一个轴对齐包围盒\r\n<ul>\r\n<li>center <span class=\"math inline\">\\(c\\)</span>,\r\n<code>AABB</code>的中心点</li>\r\n<li>a half vector <span class=\"math inline\">\\(\\vec{h}\\)</span>,\r\n记录盒子的各个轴的方向与在轴所在方向大小</li>\r\n</ul></li>\r\n<li>一个三角形\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\Delta u_0u_1u_2\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<p><img id=AABB&Trangle src=https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/AABB_and_trangle_intersect.png></img></p>\r\n<h3 id=\"第一步\">1. 第一步</h3>\r\n<ul>\r\n<li>移动<code>AABB</code>与三角形，使<code>AABB</code>与原点重合</li>\r\n</ul>\r\n<h3 id=\"计算测试的轴\">2. 计算测试的轴</h3>\r\n<ul>\r\n<li>我们将在原点进行基于分离轴的相交测试，需要测试13根轴。</li>\r\n</ul>\r\n<h4 id=\"aabb的面的法线\">2.1 <code>AABB</code>的面的法线</h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{e_0}(1,0,0)\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{e_1}(0,1,0)\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{e_2}(0,0,1)\\)</span></li>\r\n</ul>\r\n<h4 id=\"三角形delta-u_0u_1u_2的法线\">2.2 三角形<span\r\nclass=\"math inline\">\\(\\Delta u_0u_1u_2\\)</span>的法线</h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n}\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{n} == \\vec{f_0} \\times\r\n\\vec{f_1}\\)</span></li>\r\n</ul>\r\n<h4 id=\"a_ij-e_i-times-f_j\">2.3 <span class=\"math inline\">\\(a_{ij} = e_i\r\n\\times f_j\\)</span></h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(i,j \\in \\left ( 0,1,2 \\right\r\n)\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{f_0} = \\vec{v_1} -\r\n\\vec{v_0}\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{f_1} = \\vec{v_2} -\r\n\\vec{v_1}\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{f_0} = \\vec{v_0} -\r\n\\vec{v_2}\\)</span></li>\r\n</ul>\r\n<h3 id=\"分离轴计算\">3 分离轴计算</h3>\r\n<ul>\r\n<li><p>一旦找到分离轴算法就会立即停止并且返回一个不相交的结果</p></li>\r\n<li><p>如果通过所有的测试并且没有找到分离轴，那么三角形与<code>AABB box</code>相交</p></li>\r\n<li><p>将三角形的顶点投影到每一个分离轴上，然后计算<code>AABB</code>在分离轴上的范围,<code>AABB</code>被移动到原点，它的投影将会是一个<span\r\nclass=\"math inline\">\\(\\left [ -r,+r\\right ]\\)</span>对称的</p>\r\n<ul>\r\n<li>如果她们在这个分离轴上重合，那么它们投影后的结果也是重合的</li>\r\n</ul></li>\r\n<li><p>只有当所有的分离轴上的测试都通过的时候才能是相交的。</p></li>\r\n</ul>\r\n<h2 id=\"code\">Code</h2>\r\n<h3 id=\"define-aabb\">define AABB</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AABB</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    AABB() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">AABB</span><span class=\"params\">(<span class=\"keyword\">const</span> glm::vec3 &amp; center,<span class=\"keyword\">const</span> glm::vec3 &amp; size)</span></span></span><br><span class=\"line\"><span class=\"function\">        : <span class=\"title\">m_center</span><span class=\"params\">(center)</span></span></span><br><span class=\"line\">        , m_size(size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateTransfrom</span><span class=\"params\">(<span class=\"keyword\">const</span> glm::mat4 &amp; model)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        m_center = glm::vec3( model * glm::vec4(m_center,<span class=\"number\">1.0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    glm::vec3 m_center;</span><br><span class=\"line\">    glm::vec3 m_size;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"define-triangle\">define Triangle</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Triangle</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 注意三角形的顶点顺序为逆时针</span></span><br><span class=\"line\">    Triangle(<span class=\"keyword\">const</span> glm::vec3&amp; p1, <span class=\"keyword\">const</span> glm::vec3&amp; p2, <span class=\"keyword\">const</span> glm::vec3&amp; p3, <span class=\"keyword\">const</span> glm::vec3&amp; normal)</span><br><span class=\"line\">        : m_p1(p1)</span><br><span class=\"line\">        , m_p2(p2)</span><br><span class=\"line\">        , m_p3(p3)</span><br><span class=\"line\">        , m_normal(glm::normalize(normal))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Triangle(<span class=\"keyword\">const</span> glm::vec3&amp; p1, <span class=\"keyword\">const</span> glm::vec3&amp; p2, <span class=\"keyword\">const</span> glm::vec3&amp; p3)</span><br><span class=\"line\">        : m_p1(p1)</span><br><span class=\"line\">        , m_p2(p2)</span><br><span class=\"line\">        , m_p3(p3)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 计算三角形的法相</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                p2</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">          p3           p1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> v1 = p3 - p1;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> v2 = p2 - p1;</span><br><span class=\"line\">        m_normal = glm::normalize(glm::cross(v2, v1));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateTransform</span><span class=\"params\">(glm::mat4 &amp; model)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        m_p1 = vec3(model * glm::vec4(m_p1,<span class=\"number\">1.0</span>));</span><br><span class=\"line\">        m_p2 = vec3(model * glm::vec4(m_p2,<span class=\"number\">1.0</span>));</span><br><span class=\"line\">        m_p3 = vec3(model * glm::vec4(m_p3,<span class=\"number\">1.0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> v1 = m_p3 - m_p1;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> v2 = m_p2 - m_p1;</span><br><span class=\"line\">        m_normal = glm::normalize(glm::cross(v2, v1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    glm::vec3 m_p1;</span><br><span class=\"line\">    glm::vec3 m_p2;</span><br><span class=\"line\">    glm::vec3 m_p3;</span><br><span class=\"line\">    glm::vec3 m_normal;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"实现\">实现</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// done </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IntersectAABBWithTriangle</span><span class=\"params\">(<span class=\"keyword\">const</span> AABB &amp;aabb, <span class=\"keyword\">const</span> Triangle &amp;triangle)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// move AABB ro  origin</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> box = aabb;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> trans = glm::mat4(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    trans = glm::translate(trans,- box.m_center);</span><br><span class=\"line\">    box.updateTransfrom(trans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> tri = triangle;</span><br><span class=\"line\">    tri.updateTransform(trans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,13&gt; projectAxis;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,3&gt; aabbAxisVector;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aabbAxisVector[<span class=\"number\">0</span>] = glm::vec3(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">        aabbAxisVector[<span class=\"number\">1</span>] = glm::vec3(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">        aabbAxisVector[<span class=\"number\">2</span>] = glm::vec3(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,3&gt; triEdgeVector;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        triEdgeVector[<span class=\"number\">0</span>] = tri.m_p2 - tri.m_p1;</span><br><span class=\"line\">        triEdgeVector[<span class=\"number\">1</span>] = tri.m_p3 - tri.m_p2;</span><br><span class=\"line\">        triEdgeVector[<span class=\"number\">2</span>] = tri.m_p1 - tri.m_p3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> triangleNormal = tri.m_normal;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,3&gt; aabbFaceNormal;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aabbFaceNormal[<span class=\"number\">0</span>] = glm::vec3(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">        aabbFaceNormal[<span class=\"number\">1</span>] = glm::vec3(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">        aabbFaceNormal[<span class=\"number\">2</span>] = glm::vec3(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 两个图形边的随机组合的叉积也作为一个分离轴</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp; i: &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">    &#123;  <span class=\"comment\">/// AABB</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp; j: &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">        &#123; <span class=\"comment\">/// triangle</span></span><br><span class=\"line\">            projectAxis[i*<span class=\"number\">3</span> + j] = glm::normalize(glm::cross(aabbAxisVector[i], triEdgeVector[j]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 三角形的法线</span></span><br><span class=\"line\">    projectAxis[<span class=\"number\">9</span>] = triangleNormal;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp; index: &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        projectAxis[<span class=\"number\">10</span> + index] = aabbFaceNormal[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp; it: projectAxis)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 投影三角形到分离轴上</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p_0 = glm::dot(it,tri.m_p1);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p_1 = glm::dot(it,tri.m_p2);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p_2 = glm::dot(it,tri.m_p3);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算AABB的Size</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> half = glm::vec3(<span class=\"number\">0.5</span> * aabb.m_size.x,<span class=\"number\">0.5</span> * aabb.m_size.y,<span class=\"number\">0.5</span> * aabb.m_size.z);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算AABB的投影的结果的范围</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = half.x * <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(dot(aabbAxisVector[<span class=\"number\">0</span>],it)) +</span><br><span class=\"line\">                half.y * <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(dot(aabbAxisVector[<span class=\"number\">1</span>],it)) +</span><br><span class=\"line\">                half.z * <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(dot(aabbAxisVector[<span class=\"number\">2</span>],it));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算三角形投影结果的范围</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> min_p = <span class=\"built_in\">std</span>::min(<span class=\"built_in\">std</span>::min(p_0,p_1),p_2);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> max_p = <span class=\"built_in\">std</span>::max(<span class=\"built_in\">std</span>::max(p_0,p_1),p_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否相交</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(min_p &gt; r || max_p &lt; -r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p><code>AABB</code>\r\n与三角形求交，采用分离轴的方式实现的一种比较优质的方法。","more":"</p>\r\n<h2 id=\"预备知识\">0. 预备知识</h2>\r\n<h3 id=\"点到面的距离方程\">点到面的距离方程</h3>\r\n<h3 id=\"面的方程\">面的方程</h3>\r\n<ul>\r\n<li>定义平面<code>A</code>的法向 <span\r\nclass=\"math inline\">\\(\\vec{n}\\)</span> <code>&#123;a,b,c&#125;</code>,</li>\r\n<li>已知平面行一点<span class=\"math inline\">\\(P_0 \\lbrace\r\nx_0,y_0,z_0\\rbrace\\)</span></li>\r\n<li>任意点 <span\r\nclass=\"math inline\">\\(P\\)</span><code>&#123;x,y,z&#125;</code></li>\r\n<li>面方程:\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\overrightarrow{P - P_0} \\cdot \\vec{n} =\r\n0\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"点到面的距离\">点到面的距离</h3>\r\n<h4 id=\"法向量法\">法向量法</h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n}\\)</span> - 平面的法向量</li>\r\n<li><span class=\"math inline\">\\(d\\)</span> - 点到平面的距离</li>\r\n<li><span class=\"math inline\">\\(P\\)</span> - 平面外一点</li>\r\n<li><span class=\"math inline\">\\(A\\)</span> - 平面上一点</li>\r\n<li>$d = $\r\n<ul>\r\n<li>PA在法向方向上的投影既是点<span\r\nclass=\"math inline\">\\(P\\)</span>到平面的距离</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"射线的方程\">射线的方程</h3>\r\n<ul>\r\n<li>射线方程\r\n<ul>\r\n<li><span class=\"math inline\">\\(O\\)</span> 为起点， 沿着方向 <span\r\nclass=\"math inline\">\\(\\vec{d}\\)</span></li>\r\n<li>射线方向上任意一点<span class=\"math inline\">\\(P_0\\)</span></li>\r\n<li><span class=\"math inline\">\\(P_0 = O + \\vec{d}\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"三角形与aabb求交\">三角形与AABB求交</h2>\r\n<ul>\r\n<li>我们定义一个轴对齐包围盒\r\n<ul>\r\n<li>center <span class=\"math inline\">\\(c\\)</span>,\r\n<code>AABB</code>的中心点</li>\r\n<li>a half vector <span class=\"math inline\">\\(\\vec{h}\\)</span>,\r\n记录盒子的各个轴的方向与在轴所在方向大小</li>\r\n</ul></li>\r\n<li>一个三角形\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\Delta u_0u_1u_2\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<p><img id=AABB&Trangle src=https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/AABB_and_trangle_intersect.png></img></p>\r\n<h3 id=\"第一步\">1. 第一步</h3>\r\n<ul>\r\n<li>移动<code>AABB</code>与三角形，使<code>AABB</code>与原点重合</li>\r\n</ul>\r\n<h3 id=\"计算测试的轴\">2. 计算测试的轴</h3>\r\n<ul>\r\n<li>我们将在原点进行基于分离轴的相交测试，需要测试13根轴。</li>\r\n</ul>\r\n<h4 id=\"aabb的面的法线\">2.1 <code>AABB</code>的面的法线</h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{e_0}(1,0,0)\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{e_1}(0,1,0)\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{e_2}(0,0,1)\\)</span></li>\r\n</ul>\r\n<h4 id=\"三角形delta-u_0u_1u_2的法线\">2.2 三角形<span\r\nclass=\"math inline\">\\(\\Delta u_0u_1u_2\\)</span>的法线</h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n}\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{n} == \\vec{f_0} \\times\r\n\\vec{f_1}\\)</span></li>\r\n</ul>\r\n<h4 id=\"a_ij-e_i-times-f_j\">2.3 <span class=\"math inline\">\\(a_{ij} = e_i\r\n\\times f_j\\)</span></h4>\r\n<ul>\r\n<li><span class=\"math inline\">\\(i,j \\in \\left ( 0,1,2 \\right\r\n)\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{f_0} = \\vec{v_1} -\r\n\\vec{v_0}\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{f_1} = \\vec{v_2} -\r\n\\vec{v_1}\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{f_0} = \\vec{v_0} -\r\n\\vec{v_2}\\)</span></li>\r\n</ul>\r\n<h3 id=\"分离轴计算\">3 分离轴计算</h3>\r\n<ul>\r\n<li><p>一旦找到分离轴算法就会立即停止并且返回一个不相交的结果</p></li>\r\n<li><p>如果通过所有的测试并且没有找到分离轴，那么三角形与<code>AABB box</code>相交</p></li>\r\n<li><p>将三角形的顶点投影到每一个分离轴上，然后计算<code>AABB</code>在分离轴上的范围,<code>AABB</code>被移动到原点，它的投影将会是一个<span\r\nclass=\"math inline\">\\(\\left [ -r,+r\\right ]\\)</span>对称的</p>\r\n<ul>\r\n<li>如果她们在这个分离轴上重合，那么它们投影后的结果也是重合的</li>\r\n</ul></li>\r\n<li><p>只有当所有的分离轴上的测试都通过的时候才能是相交的。</p></li>\r\n</ul>\r\n<h2 id=\"code\">Code</h2>\r\n<h3 id=\"define-aabb\">define AABB</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AABB</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    AABB() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">AABB</span><span class=\"params\">(<span class=\"keyword\">const</span> glm::vec3 &amp; center,<span class=\"keyword\">const</span> glm::vec3 &amp; size)</span></span></span><br><span class=\"line\"><span class=\"function\">        : <span class=\"title\">m_center</span><span class=\"params\">(center)</span></span></span><br><span class=\"line\">        , m_size(size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateTransfrom</span><span class=\"params\">(<span class=\"keyword\">const</span> glm::mat4 &amp; model)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        m_center = glm::vec3( model * glm::vec4(m_center,<span class=\"number\">1.0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    glm::vec3 m_center;</span><br><span class=\"line\">    glm::vec3 m_size;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"define-triangle\">define Triangle</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Triangle</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 注意三角形的顶点顺序为逆时针</span></span><br><span class=\"line\">    Triangle(<span class=\"keyword\">const</span> glm::vec3&amp; p1, <span class=\"keyword\">const</span> glm::vec3&amp; p2, <span class=\"keyword\">const</span> glm::vec3&amp; p3, <span class=\"keyword\">const</span> glm::vec3&amp; normal)</span><br><span class=\"line\">        : m_p1(p1)</span><br><span class=\"line\">        , m_p2(p2)</span><br><span class=\"line\">        , m_p3(p3)</span><br><span class=\"line\">        , m_normal(glm::normalize(normal))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Triangle(<span class=\"keyword\">const</span> glm::vec3&amp; p1, <span class=\"keyword\">const</span> glm::vec3&amp; p2, <span class=\"keyword\">const</span> glm::vec3&amp; p3)</span><br><span class=\"line\">        : m_p1(p1)</span><br><span class=\"line\">        , m_p2(p2)</span><br><span class=\"line\">        , m_p3(p3)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 计算三角形的法相</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                p2</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">          p3           p1</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> v1 = p3 - p1;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> v2 = p2 - p1;</span><br><span class=\"line\">        m_normal = glm::normalize(glm::cross(v2, v1));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateTransform</span><span class=\"params\">(glm::mat4 &amp; model)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        m_p1 = vec3(model * glm::vec4(m_p1,<span class=\"number\">1.0</span>));</span><br><span class=\"line\">        m_p2 = vec3(model * glm::vec4(m_p2,<span class=\"number\">1.0</span>));</span><br><span class=\"line\">        m_p3 = vec3(model * glm::vec4(m_p3,<span class=\"number\">1.0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> v1 = m_p3 - m_p1;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> v2 = m_p2 - m_p1;</span><br><span class=\"line\">        m_normal = glm::normalize(glm::cross(v2, v1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    glm::vec3 m_p1;</span><br><span class=\"line\">    glm::vec3 m_p2;</span><br><span class=\"line\">    glm::vec3 m_p3;</span><br><span class=\"line\">    glm::vec3 m_normal;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"实现\">实现</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// done </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IntersectAABBWithTriangle</span><span class=\"params\">(<span class=\"keyword\">const</span> AABB &amp;aabb, <span class=\"keyword\">const</span> Triangle &amp;triangle)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// move AABB ro  origin</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> box = aabb;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> trans = glm::mat4(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    trans = glm::translate(trans,- box.m_center);</span><br><span class=\"line\">    box.updateTransfrom(trans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> tri = triangle;</span><br><span class=\"line\">    tri.updateTransform(trans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,13&gt; projectAxis;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,3&gt; aabbAxisVector;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aabbAxisVector[<span class=\"number\">0</span>] = glm::vec3(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">        aabbAxisVector[<span class=\"number\">1</span>] = glm::vec3(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">        aabbAxisVector[<span class=\"number\">2</span>] = glm::vec3(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,3&gt; triEdgeVector;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        triEdgeVector[<span class=\"number\">0</span>] = tri.m_p2 - tri.m_p1;</span><br><span class=\"line\">        triEdgeVector[<span class=\"number\">1</span>] = tri.m_p3 - tri.m_p2;</span><br><span class=\"line\">        triEdgeVector[<span class=\"number\">2</span>] = tri.m_p1 - tri.m_p3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> triangleNormal = tri.m_normal;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,3&gt; aabbFaceNormal;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aabbFaceNormal[<span class=\"number\">0</span>] = glm::vec3(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">        aabbFaceNormal[<span class=\"number\">1</span>] = glm::vec3(<span class=\"number\">0.0f</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\">        aabbFaceNormal[<span class=\"number\">2</span>] = glm::vec3(<span class=\"number\">0.0f</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 两个图形边的随机组合的叉积也作为一个分离轴</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp; i: &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">    &#123;  <span class=\"comment\">/// AABB</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp; j: &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">        &#123; <span class=\"comment\">/// triangle</span></span><br><span class=\"line\">            projectAxis[i*<span class=\"number\">3</span> + j] = glm::normalize(glm::cross(aabbAxisVector[i], triEdgeVector[j]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 三角形的法线</span></span><br><span class=\"line\">    projectAxis[<span class=\"number\">9</span>] = triangleNormal;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp; index: &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        projectAxis[<span class=\"number\">10</span> + index] = aabbFaceNormal[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 计算过程</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp; it: projectAxis)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 投影三角形到分离轴上</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p_0 = glm::dot(it,tri.m_p1);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p_1 = glm::dot(it,tri.m_p2);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p_2 = glm::dot(it,tri.m_p3);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算AABB的Size</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> half = glm::vec3(<span class=\"number\">0.5</span> * aabb.m_size.x,<span class=\"number\">0.5</span> * aabb.m_size.y,<span class=\"number\">0.5</span> * aabb.m_size.z);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算AABB的投影的结果的范围</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = half.x * <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(dot(aabbAxisVector[<span class=\"number\">0</span>],it)) +</span><br><span class=\"line\">                half.y * <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(dot(aabbAxisVector[<span class=\"number\">1</span>],it)) +</span><br><span class=\"line\">                half.z * <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(dot(aabbAxisVector[<span class=\"number\">2</span>],it));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算三角形投影结果的范围</span></span><br><span class=\"line\">        <span class=\"keyword\">auto</span> min_p = <span class=\"built_in\">std</span>::min(<span class=\"built_in\">std</span>::min(p_0,p_1),p_2);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> max_p = <span class=\"built_in\">std</span>::max(<span class=\"built_in\">std</span>::max(p_0,p_1),p_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断是否相交</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(min_p &gt; r || max_p &lt; -r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Bucket Sort and Cardinality sort","date":"2021-11-07T13:34:19.000Z","_content":"\n<p>\n&ensp;&ensp;桶排序算法介绍...\n\n<!-- more -->\n\n### 桶排序\n\n- `T(N,M) = O(M+N)`,M 个桶的情况\n  - N >> M的时候是相对教优秀的算法\n  - M >> N ???\n\n- 假设我们有N = 10个整数，N ∈ [0,999],(此时 M = 1000)；我们便不能在线性时间下完成排序。\n\n### 基数排序：按照数字的进制排序（10）\n\n- example: \n- input: 64 8 216 512 27 729 0 1 343 125 \n  - 使用次位优先(Least Significant Digit)\n  - 先按照个位数将元素放到对应的桶Pass1\n  - 按照十位放到对应的桶中\n\n| Bucket |            0             |            1             |            2             |             3              |             4             |             5              | 6                          |             7             |            8             |             9              |\n| :----: | :----------------------: | :----------------------: | :----------------------: | :------------------------: | :-----------------------: | :------------------------: | -------------------------- | :-----------------------: | :----------------------: | :------------------------: |\n| Pass 1(个位) | <font color=red>0</font> | <font color=red>1</font> | 51<font color=red>2</font> | 34<font color=red>3</font> | 6<font color=red>4</font> | 12<font color=red>5</font> | 21<font color=red>6</font> | 2<font color=red>7</font> | <font color=red>8</font> | 72<font color=red>9</font> |\n| Pass 2(十位) |         0<br>1<br>8         | 512<br>216 | 125<br>27<br>729 |                            |            343            |                            | 64<br>                     |                           |                          |                            |\n| Pass 3 (百位) | 0<br/>1<br/>8<br/>27<br/>64 | 125 | 216 |            343             |                           |            512             |                            |            729            |                          |                            |\n\n- 最终的顺序，分别从每个桶中顺序读取即可。\n\n#### 时间复杂度： `T= O(P(N+B))`\n\n- 较好情况：取决于基数-多少个桶 (B << N时差不多是一个线性复杂度的算法)\n\n","source":"_posts/Bucket-Sort.md","raw":"---\ntitle: Bucket Sort and Cardinality sort\ndate: 2021-11-07 21:34:19\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;桶排序算法介绍...\n\n<!-- more -->\n\n### 桶排序\n\n- `T(N,M) = O(M+N)`,M 个桶的情况\n  - N >> M的时候是相对教优秀的算法\n  - M >> N ???\n\n- 假设我们有N = 10个整数，N ∈ [0,999],(此时 M = 1000)；我们便不能在线性时间下完成排序。\n\n### 基数排序：按照数字的进制排序（10）\n\n- example: \n- input: 64 8 216 512 27 729 0 1 343 125 \n  - 使用次位优先(Least Significant Digit)\n  - 先按照个位数将元素放到对应的桶Pass1\n  - 按照十位放到对应的桶中\n\n| Bucket |            0             |            1             |            2             |             3              |             4             |             5              | 6                          |             7             |            8             |             9              |\n| :----: | :----------------------: | :----------------------: | :----------------------: | :------------------------: | :-----------------------: | :------------------------: | -------------------------- | :-----------------------: | :----------------------: | :------------------------: |\n| Pass 1(个位) | <font color=red>0</font> | <font color=red>1</font> | 51<font color=red>2</font> | 34<font color=red>3</font> | 6<font color=red>4</font> | 12<font color=red>5</font> | 21<font color=red>6</font> | 2<font color=red>7</font> | <font color=red>8</font> | 72<font color=red>9</font> |\n| Pass 2(十位) |         0<br>1<br>8         | 512<br>216 | 125<br>27<br>729 |                            |            343            |                            | 64<br>                     |                           |                          |                            |\n| Pass 3 (百位) | 0<br/>1<br/>8<br/>27<br/>64 | 125 | 216 |            343             |                           |            512             |                            |            729            |                          |                            |\n\n- 最终的顺序，分别从每个桶中顺序读取即可。\n\n#### 时间复杂度： `T= O(P(N+B))`\n\n- 较好情况：取决于基数-多少个桶 (B << N时差不多是一个线性复杂度的算法)\n\n","slug":"Bucket-Sort","published":1,"updated":"2022-08-21T15:34:56.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexrav9000a7cda7tswdszp","content":"<p>\r\n<p>  桶排序算法介绍...</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"桶排序\">桶排序</h3>\r\n<ul>\r\n<li><code>T(N,M) = O(M+N)</code>,M 个桶的情况\r\n<ul>\r\n<li>N &gt;&gt; M的时候是相对教优秀的算法</li>\r\n<li>M &gt;&gt; N ???</li>\r\n</ul></li>\r\n<li>假设我们有N = 10个整数，N ∈ [0,999],(此时 M =\r\n1000)；我们便不能在线性时间下完成排序。</li>\r\n</ul>\r\n<h3\r\nid=\"基数排序按照数字的进制排序10\">基数排序：按照数字的进制排序（10）</h3>\r\n<ul>\r\n<li>example:</li>\r\n<li>input: 64 8 216 512 27 729 0 1 343 125\r\n<ul>\r\n<li>使用次位优先(Least Significant Digit)</li>\r\n<li>先按照个位数将元素放到对应的桶Pass1</li>\r\n<li>按照十位放到对应的桶中</li>\r\n</ul></li>\r\n</ul>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 2%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">Bucket</th>\r\n<th style=\"text-align: center;\">0</th>\r\n<th style=\"text-align: center;\">1</th>\r\n<th style=\"text-align: center;\">2</th>\r\n<th style=\"text-align: center;\">3</th>\r\n<th style=\"text-align: center;\">4</th>\r\n<th style=\"text-align: center;\">5</th>\r\n<th>6</th>\r\n<th style=\"text-align: center;\">7</th>\r\n<th style=\"text-align: center;\">8</th>\r\n<th style=\"text-align: center;\">9</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Pass 1(个位)</td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\">51<font color=red>2</font></td>\r\n<td style=\"text-align: center;\">34<font color=red>3</font></td>\r\n<td style=\"text-align: center;\">6<font color=red>4</font></td>\r\n<td style=\"text-align: center;\">12<font color=red>5</font></td>\r\n<td>21<font color=red>6</font></td>\r\n<td style=\"text-align: center;\">2<font color=red>7</font></td>\r\n<td style=\"text-align: center;\"><font color=red>8</font></td>\r\n<td style=\"text-align: center;\">72<font color=red>9</font></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Pass 2(十位)</td>\r\n<td style=\"text-align: center;\">0<br>1<br>8</td>\r\n<td style=\"text-align: center;\">512<br>216</td>\r\n<td style=\"text-align: center;\">125<br>27<br>729</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">343</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td>64<br></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Pass 3 (百位)</td>\r\n<td style=\"text-align: center;\">0<br/>1<br/>8<br/>27<br/>64</td>\r\n<td style=\"text-align: center;\">125</td>\r\n<td style=\"text-align: center;\">216</td>\r\n<td style=\"text-align: center;\">343</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">512</td>\r\n<td></td>\r\n<td style=\"text-align: center;\">729</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>最终的顺序，分别从每个桶中顺序读取即可。</li>\r\n</ul>\r\n<h4 id=\"时间复杂度-t-opnb\">时间复杂度： <code>T= O(P(N+B))</code></h4>\r\n<ul>\r\n<li>较好情况：取决于基数-多少个桶 (B &lt;&lt;\r\nN时差不多是一个线性复杂度的算法)</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n<p>  桶排序算法介绍...</p>","more":"<h3 id=\"桶排序\">桶排序</h3>\r\n<ul>\r\n<li><code>T(N,M) = O(M+N)</code>,M 个桶的情况\r\n<ul>\r\n<li>N &gt;&gt; M的时候是相对教优秀的算法</li>\r\n<li>M &gt;&gt; N ???</li>\r\n</ul></li>\r\n<li>假设我们有N = 10个整数，N ∈ [0,999],(此时 M =\r\n1000)；我们便不能在线性时间下完成排序。</li>\r\n</ul>\r\n<h3\r\nid=\"基数排序按照数字的进制排序10\">基数排序：按照数字的进制排序（10）</h3>\r\n<ul>\r\n<li>example:</li>\r\n<li>input: 64 8 216 512 27 729 0 1 343 125\r\n<ul>\r\n<li>使用次位优先(Least Significant Digit)</li>\r\n<li>先按照个位数将元素放到对应的桶Pass1</li>\r\n<li>按照十位放到对应的桶中</li>\r\n</ul></li>\r\n</ul>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 2%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">Bucket</th>\r\n<th style=\"text-align: center;\">0</th>\r\n<th style=\"text-align: center;\">1</th>\r\n<th style=\"text-align: center;\">2</th>\r\n<th style=\"text-align: center;\">3</th>\r\n<th style=\"text-align: center;\">4</th>\r\n<th style=\"text-align: center;\">5</th>\r\n<th>6</th>\r\n<th style=\"text-align: center;\">7</th>\r\n<th style=\"text-align: center;\">8</th>\r\n<th style=\"text-align: center;\">9</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Pass 1(个位)</td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\">51<font color=red>2</font></td>\r\n<td style=\"text-align: center;\">34<font color=red>3</font></td>\r\n<td style=\"text-align: center;\">6<font color=red>4</font></td>\r\n<td style=\"text-align: center;\">12<font color=red>5</font></td>\r\n<td>21<font color=red>6</font></td>\r\n<td style=\"text-align: center;\">2<font color=red>7</font></td>\r\n<td style=\"text-align: center;\"><font color=red>8</font></td>\r\n<td style=\"text-align: center;\">72<font color=red>9</font></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">Pass 2(十位)</td>\r\n<td style=\"text-align: center;\">0<br>1<br>8</td>\r\n<td style=\"text-align: center;\">512<br>216</td>\r\n<td style=\"text-align: center;\">125<br>27<br>729</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">343</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td>64<br></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Pass 3 (百位)</td>\r\n<td style=\"text-align: center;\">0<br/>1<br/>8<br/>27<br/>64</td>\r\n<td style=\"text-align: center;\">125</td>\r\n<td style=\"text-align: center;\">216</td>\r\n<td style=\"text-align: center;\">343</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">512</td>\r\n<td></td>\r\n<td style=\"text-align: center;\">729</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li>最终的顺序，分别从每个桶中顺序读取即可。</li>\r\n</ul>\r\n<h4 id=\"时间复杂度-t-opnb\">时间复杂度： <code>T= O(P(N+B))</code></h4>\r\n<ul>\r\n<li>较好情况：取决于基数-多少个桶 (B &lt;&lt;\r\nN时差不多是一个线性复杂度的算法)</li>\r\n</ul>"},{"title":"Bug奇遇记-uint16_t","date":"2021-03-19T12:47:11.000Z","_content":"\n<p>\n&ensp;&ensp;bug奇遇记之<code>uint16_t</code>...\n</p>\n\n<!-- more -->\n\n### uint16_t \n\n- 标准定义中：\n\n```c++\ntypedef unsigned short  uint16_t; // max == _UI16_MAX 0xffffu \n```\n\n![uint16_t](https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/uint16_t.png \"uint16\")\n\n#### 问题：\n\n- <font color=red>这是一个粗心的问题</font>\n\n在我正在实现的功能中有一个数据遍历的部分，我使用了`uint16_t`类型作为索引的类型，但是`uint16_t`数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！\n\n---\n\n### 正确的结果展示：\n\n![lum_2](https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/lum_arrow_2.png \"result\")\n\n\n\n![right result](https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/lum_arrow_1.png \"Result\")\n\nhttps://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG","source":"_posts/Bug奇遇记-uint16-t.md","raw":"---\ntitle: Bug奇遇记-uint16_t\ndate: 2021-03-19 20:47:11\ncategories:\n- works\n- GF\n- data type\n- bugs\ntags:\n - cpp\n - osg\n---\n\n<p>\n&ensp;&ensp;bug奇遇记之<code>uint16_t</code>...\n</p>\n\n<!-- more -->\n\n### uint16_t \n\n- 标准定义中：\n\n```c++\ntypedef unsigned short  uint16_t; // max == _UI16_MAX 0xffffu \n```\n\n![uint16_t](https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/uint16_t.png \"uint16\")\n\n#### 问题：\n\n- <font color=red>这是一个粗心的问题</font>\n\n在我正在实现的功能中有一个数据遍历的部分，我使用了`uint16_t`类型作为索引的类型，但是`uint16_t`数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！\n\n---\n\n### 正确的结果展示：\n\n![lum_2](https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/lum_arrow_2.png \"result\")\n\n\n\n![right result](https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/lum_arrow_1.png \"Result\")\n\nhttps://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG","slug":"Bug奇遇记-uint16-t","published":1,"updated":"2022-08-25T15:45:37.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravb000e7cda0nfk6io3","content":"<p>\r\n  bug奇遇记之<code>uint16_t</code>...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"uint16_t\">uint16_t</h3>\r\n<ul>\r\n<li>标准定义中：</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  <span class=\"keyword\">uint16_t</span>; <span class=\"comment\">// max == _UI16_MAX 0xffffu </span></span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/uint16_t.png\"\r\ntitle=\"uint16\" alt=\"uint16_t\" />\r\n<figcaption aria-hidden=\"true\">uint16_t</figcaption>\r\n</figure>\r\n<h4 id=\"问题\">问题：</h4>\r\n<ul>\r\n<li><font color=red>这是一个粗心的问题</font></li>\r\n</ul>\r\n<p>在我正在实现的功能中有一个数据遍历的部分，我使用了<code>uint16_t</code>类型作为索引的类型，但是<code>uint16_t</code>数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！</p>\r\n<hr />\r\n<h3 id=\"正确的结果展示\">正确的结果展示：</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/lum_arrow_2.png\"\r\ntitle=\"result\" alt=\"lum_2\" />\r\n<figcaption aria-hidden=\"true\">lum_2</figcaption>\r\n</figure>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/lum_arrow_1.png\"\r\ntitle=\"Result\" alt=\"right result\" />\r\n<figcaption aria-hidden=\"true\">right result</figcaption>\r\n</figure>\r\n<p>https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG</p>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  bug奇遇记之<code>uint16_t</code>...\r\n</p>","more":"<h3 id=\"uint16_t\">uint16_t</h3>\r\n<ul>\r\n<li>标准定义中：</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  <span class=\"keyword\">uint16_t</span>; <span class=\"comment\">// max == _UI16_MAX 0xffffu </span></span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/uint16_t.png\"\r\ntitle=\"uint16\" alt=\"uint16_t\" />\r\n<figcaption aria-hidden=\"true\">uint16_t</figcaption>\r\n</figure>\r\n<h4 id=\"问题\">问题：</h4>\r\n<ul>\r\n<li><font color=red>这是一个粗心的问题</font></li>\r\n</ul>\r\n<p>在我正在实现的功能中有一个数据遍历的部分，我使用了<code>uint16_t</code>类型作为索引的类型，但是<code>uint16_t</code>数据的最大值比较小，所以当基础数据量过大的时候，我们产生的索引会越过索引的最大范围，导致最终得到的索引不是实际需要的索引值，导致我最终绘制的图形不是正确的结果！</p>\r\n<hr />\r\n<h3 id=\"正确的结果展示\">正确的结果展示：</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/lum_arrow_2.png\"\r\ntitle=\"result\" alt=\"lum_2\" />\r\n<figcaption aria-hidden=\"true\">lum_2</figcaption>\r\n</figure>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/bug/uint_16/lum_arrow_1.png\"\r\ntitle=\"Result\" alt=\"right result\" />\r\n<figcaption aria-hidden=\"true\">right result</figcaption>\r\n</figure>\r\n<p>https://raw.githubusercontent.com/CuntBoy/images/main/blog/GF_Workspace.JPG</p>"},{"title":"Cplusplus key words - extern","date":"2022-08-08T03:41:35.000Z","_content":"\n<p>\n&ensp;&ensp;<code>cpp</code>关键词之<code>extern</code>...\n</p>\n\n<!-- more -->\n\n<center><h2> <code>extern</code>关键字</h2></center>\n## `Extern` 初解\n- 关于`extern`关键字可以应用于全局变量、函数或模板声明。它指定符号具有外部链接性质。\n  - 在非const 全局变量声明中， extern 指定变量或函数在另一个转换单元中定义。 extern必须在定义变量的所有文件中应用该变量。\n  - const在变量声明中，它指定变量具有 external 链接。 extern必须应用于所有文件中的所有声明。 默认情况下， (全局 const 变量具有内部链接。)\n  - extern \"C\" 指定函数在别处定义并使用 C 语言调用约定。 extern \"C\"修饰符也可能应用于块中的多个函数声明。\n  - 在模板声明中， extern 指定模板已在其他位置实例化。 extern 告知编译器它可以重复使用另一个实例化，而不是在当前位置创建新实例。 有关此用法 extern的详细信息，请参阅 显式实例化。\n  \n\n## `Extern`的使用\n- 小案例 \n- `extern var` \n\n\n```C++ \n---\n头文件\n---\n#ifndef EXTERN_TEST_H\n#define EXTERN_TEST_H\n/// extern 变量与函数\nextern int extern_text_var;\nextern int add(int x, int y);\n#endif // EXTERN_TEST_H\n```\n\n```C++\n---\ncpp 文件\n--- \n#include \"KeyWordsExtern.h\"\nint extern_text_var = 100;\nint add(int a,int b)\n{\n    return a + b;\n}\n```\n\n```C++\n---\n使用导出变量\n---\n#include \"KeyWordsExtern.h\"\n#include <iostream>\n\nextern int extern_text_var;\n\nvoid printExternVar()\n{\n    std::cout << \"current: \" << extern_text_var << std::endl;\n    extern_text_var = 200;\n\n    std::cout << \"do update: \" <<extern_text_var << std::endl;\n}\n\n```\n\n```C++\n---\nmain.cpp\n---\n\n#include <iostream>\n#include \"TestExtern.h\"\n#include \"KeyWordsExtern.h\"\n\nusing namespace std;\n\nint main()\n{\n    printExternVar();\n    std::cout<<\"add result: \"<<add(10, 30)<<std::endl;\n    return 0;\n}\n\n```\n\n```C++\n---\n输出\n---\ncurrent: 100\ndo update: 200\nadd result: 40\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Cplusplus-key-words-extern.md","raw":"---\ntitle: Cplusplus key words - extern\ndate: 2022-08-08 11:41:35\ncategories:\n- cpp\ntags:\n- key words\n---\n\n<p>\n&ensp;&ensp;<code>cpp</code>关键词之<code>extern</code>...\n</p>\n\n<!-- more -->\n\n<center><h2> <code>extern</code>关键字</h2></center>\n## `Extern` 初解\n- 关于`extern`关键字可以应用于全局变量、函数或模板声明。它指定符号具有外部链接性质。\n  - 在非const 全局变量声明中， extern 指定变量或函数在另一个转换单元中定义。 extern必须在定义变量的所有文件中应用该变量。\n  - const在变量声明中，它指定变量具有 external 链接。 extern必须应用于所有文件中的所有声明。 默认情况下， (全局 const 变量具有内部链接。)\n  - extern \"C\" 指定函数在别处定义并使用 C 语言调用约定。 extern \"C\"修饰符也可能应用于块中的多个函数声明。\n  - 在模板声明中， extern 指定模板已在其他位置实例化。 extern 告知编译器它可以重复使用另一个实例化，而不是在当前位置创建新实例。 有关此用法 extern的详细信息，请参阅 显式实例化。\n  \n\n## `Extern`的使用\n- 小案例 \n- `extern var` \n\n\n```C++ \n---\n头文件\n---\n#ifndef EXTERN_TEST_H\n#define EXTERN_TEST_H\n/// extern 变量与函数\nextern int extern_text_var;\nextern int add(int x, int y);\n#endif // EXTERN_TEST_H\n```\n\n```C++\n---\ncpp 文件\n--- \n#include \"KeyWordsExtern.h\"\nint extern_text_var = 100;\nint add(int a,int b)\n{\n    return a + b;\n}\n```\n\n```C++\n---\n使用导出变量\n---\n#include \"KeyWordsExtern.h\"\n#include <iostream>\n\nextern int extern_text_var;\n\nvoid printExternVar()\n{\n    std::cout << \"current: \" << extern_text_var << std::endl;\n    extern_text_var = 200;\n\n    std::cout << \"do update: \" <<extern_text_var << std::endl;\n}\n\n```\n\n```C++\n---\nmain.cpp\n---\n\n#include <iostream>\n#include \"TestExtern.h\"\n#include \"KeyWordsExtern.h\"\n\nusing namespace std;\n\nint main()\n{\n    printExternVar();\n    std::cout<<\"add result: \"<<add(10, 30)<<std::endl;\n    return 0;\n}\n\n```\n\n```C++\n---\n输出\n---\ncurrent: 100\ndo update: 200\nadd result: 40\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Cplusplus-key-words-extern","published":1,"updated":"2022-08-21T15:34:56.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravc000f7cdadjsd4vph","content":"<p>\r\n  <code>cpp</code>关键词之<code>extern</code>...\r\n</p>\r\n<span id=\"more\"></span>\r\n<center>\r\n<h2>\r\n<code>extern</code>关键字\r\n</h2>\r\n</center>\r\n<h2 id=\"extern-初解\"><code>Extern</code> 初解</h2>\r\n<ul>\r\n<li>关于<code>extern</code>关键字可以应用于全局变量、函数或模板声明。它指定符号具有外部链接性质。\r\n<ul>\r\n<li>在非const 全局变量声明中， extern\r\n指定变量或函数在另一个转换单元中定义。\r\nextern必须在定义变量的所有文件中应用该变量。</li>\r\n<li>const在变量声明中，它指定变量具有 external 链接。\r\nextern必须应用于所有文件中的所有声明。 默认情况下， (全局 const\r\n变量具有内部链接。)</li>\r\n<li>extern \"C\" 指定函数在别处定义并使用 C 语言调用约定。 extern\r\n\"C\"修饰符也可能应用于块中的多个函数声明。</li>\r\n<li>在模板声明中， extern 指定模板已在其他位置实例化。 extern\r\n告知编译器它可以重复使用另一个实例化，而不是在当前位置创建新实例。\r\n有关此用法 extern的详细信息，请参阅 显式实例化。</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"extern的使用\"><code>Extern</code>的使用</h2>\r\n<ul>\r\n<li>小案例</li>\r\n<li><code>extern var</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">头文件</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> EXTERN_TEST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EXTERN_TEST_H</span></span><br><span class=\"line\"><span class=\"comment\">/// extern 变量与函数</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> extern_text_var;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// EXTERN_TEST_H</span></span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">cpp 文件</span><br><span class=\"line\">--- </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;KeyWordsExtern.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> extern_text_var = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">使用导出变量</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;KeyWordsExtern.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> extern_text_var;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printExternVar</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;current: &quot;</span> &lt;&lt; extern_text_var &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    extern_text_var = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;do update: &quot;</span> &lt;&lt;extern_text_var &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">main.cpp</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;TestExtern.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;KeyWordsExtern.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printExternVar();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;add result: &quot;</span>&lt;&lt;add(<span class=\"number\">10</span>, <span class=\"number\">30</span>)&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">输出</span><br><span class=\"line\">---</span><br><span class=\"line\">current: <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> update: <span class=\"number\">200</span></span><br><span class=\"line\">add result: <span class=\"number\">40</span></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>cpp</code>关键词之<code>extern</code>...\r\n</p>","more":"<center>\r\n<h2>\r\n<code>extern</code>关键字\r\n</h2>\r\n</center>\r\n<h2 id=\"extern-初解\"><code>Extern</code> 初解</h2>\r\n<ul>\r\n<li>关于<code>extern</code>关键字可以应用于全局变量、函数或模板声明。它指定符号具有外部链接性质。\r\n<ul>\r\n<li>在非const 全局变量声明中， extern\r\n指定变量或函数在另一个转换单元中定义。\r\nextern必须在定义变量的所有文件中应用该变量。</li>\r\n<li>const在变量声明中，它指定变量具有 external 链接。\r\nextern必须应用于所有文件中的所有声明。 默认情况下， (全局 const\r\n变量具有内部链接。)</li>\r\n<li>extern \"C\" 指定函数在别处定义并使用 C 语言调用约定。 extern\r\n\"C\"修饰符也可能应用于块中的多个函数声明。</li>\r\n<li>在模板声明中， extern 指定模板已在其他位置实例化。 extern\r\n告知编译器它可以重复使用另一个实例化，而不是在当前位置创建新实例。\r\n有关此用法 extern的详细信息，请参阅 显式实例化。</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"extern的使用\"><code>Extern</code>的使用</h2>\r\n<ul>\r\n<li>小案例</li>\r\n<li><code>extern var</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">头文件</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> EXTERN_TEST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EXTERN_TEST_H</span></span><br><span class=\"line\"><span class=\"comment\">/// extern 变量与函数</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> extern_text_var;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// EXTERN_TEST_H</span></span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">cpp 文件</span><br><span class=\"line\">--- </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;KeyWordsExtern.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> extern_text_var = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">使用导出变量</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;KeyWordsExtern.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> extern_text_var;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printExternVar</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;current: &quot;</span> &lt;&lt; extern_text_var &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    extern_text_var = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;do update: &quot;</span> &lt;&lt;extern_text_var &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">main.cpp</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;TestExtern.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;KeyWordsExtern.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printExternVar();</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;add result: &quot;</span>&lt;&lt;add(<span class=\"number\">10</span>, <span class=\"number\">30</span>)&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">输出</span><br><span class=\"line\">---</span><br><span class=\"line\">current: <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> update: <span class=\"number\">200</span></span><br><span class=\"line\">add result: <span class=\"number\">40</span></span><br></pre></td></tr></table></figure>"},{"title":"Dynamic drawing of osg vertex buffer objects","date":"2021-11-06T16:36:24.000Z","_content":"\n### `Dynamic drawing of osg vertex buffer objects`\n\n- 使用`显示列表`绘制图形在速度上并没有`vertex buffer object`那么快，所以在更高的`osg`的版本中，推荐使用`vertex buffer object`\n\n<!-- more -->\n\n- 在使用`vertex buffer object`的情况下，动态更新绘制的数据\n\n- 代码实现：\n```C++\n// 首先- 创建完成 osg::Geometry\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;\n// 关闭显示列表 并使用vbo(vertex buffer object)\ngeom->setUseDisplayLists(false);\ngeom->setUseVertexBufferObject(true);\n// 修改几何体的绘制数据的类型 \ngeom->setDataVariance(osg::Object::DataVariance::DYNAMIC);\n//================================================================\n// 更新操作 \n// 先获取顶点数组 \nauto varray = dynamic_cast<osg::Vec3Array>(geom->getVertexArray());\n// 需改顶点数据\n// ---------------------你可以想数组中插入顶点-----------------------------------\n// 调用 dirty函数，告诉osg::Geometry你修改了顶点\nvarray->dirty();\n// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))\n// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) \nauto pri_set = geom->getPrimitiveSet(0);\n// void  setNumInstances (int n) \npri_set->setNumInstances(修改后的顶点个数)；\npri_set->dirty();\n// 更新几何体\ngeom->dirty();\n```\n\n","source":"_posts/Dynamic-drawing-of-osg-vertex-buffer-objects.md","raw":"---\ntitle: Dynamic drawing of osg vertex buffer objects\ndate: 2021-11-07 00:36:24\ncategories: \n- works\n- HJ\n- OSG\ntags: \n- cpp\n- osg\n---\n\n### `Dynamic drawing of osg vertex buffer objects`\n\n- 使用`显示列表`绘制图形在速度上并没有`vertex buffer object`那么快，所以在更高的`osg`的版本中，推荐使用`vertex buffer object`\n\n<!-- more -->\n\n- 在使用`vertex buffer object`的情况下，动态更新绘制的数据\n\n- 代码实现：\n```C++\n// 首先- 创建完成 osg::Geometry\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;\n// 关闭显示列表 并使用vbo(vertex buffer object)\ngeom->setUseDisplayLists(false);\ngeom->setUseVertexBufferObject(true);\n// 修改几何体的绘制数据的类型 \ngeom->setDataVariance(osg::Object::DataVariance::DYNAMIC);\n//================================================================\n// 更新操作 \n// 先获取顶点数组 \nauto varray = dynamic_cast<osg::Vec3Array>(geom->getVertexArray());\n// 需改顶点数据\n// ---------------------你可以想数组中插入顶点-----------------------------------\n// 调用 dirty函数，告诉osg::Geometry你修改了顶点\nvarray->dirty();\n// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))\n// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) \nauto pri_set = geom->getPrimitiveSet(0);\n// void  setNumInstances (int n) \npri_set->setNumInstances(修改后的顶点个数)；\npri_set->dirty();\n// 更新几何体\ngeom->dirty();\n```\n\n","slug":"Dynamic-drawing-of-osg-vertex-buffer-objects","published":1,"updated":"2022-08-21T15:34:56.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravd000j7cdace96gdq7","content":"<h3\r\nid=\"dynamic-drawing-of-osg-vertex-buffer-objects\"><code>Dynamic drawing of osg vertex buffer objects</code></h3>\r\n<ul>\r\n<li>使用<code>显示列表</code>绘制图形在速度上并没有<code>vertex buffer object</code>那么快，所以在更高的<code>osg</code>的版本中，推荐使用<code>vertex buffer object</code></li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n<ul>\r\n<li><p>在使用<code>vertex buffer object</code>的情况下，动态更新绘制的数据</p></li>\r\n<li><p>代码实现： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先- 创建完成 osg::Geometry</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;</span><br><span class=\"line\"><span class=\"comment\">// 关闭显示列表 并使用vbo(vertex buffer object)</span></span><br><span class=\"line\">geom-&gt;setUseDisplayLists(<span class=\"literal\">false</span>);</span><br><span class=\"line\">geom-&gt;setUseVertexBufferObject(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 修改几何体的绘制数据的类型 </span></span><br><span class=\"line\">geom-&gt;setDataVariance(osg::Object::DataVariance::DYNAMIC);</span><br><span class=\"line\"><span class=\"comment\">//================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 更新操作 </span></span><br><span class=\"line\"><span class=\"comment\">// 先获取顶点数组 </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> varray = <span class=\"keyword\">dynamic_cast</span>&lt;osg::Vec3Array&gt;(geom-&gt;getVertexArray());</span><br><span class=\"line\"><span class=\"comment\">// 需改顶点数据</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------你可以想数组中插入顶点-----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 调用 dirty函数，告诉osg::Geometry你修改了顶点</span></span><br><span class=\"line\">varray-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))</span></span><br><span class=\"line\"><span class=\"comment\">// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pri_set = geom-&gt;getPrimitiveSet(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// void  setNumInstances (int n) </span></span><br><span class=\"line\">pri_set-&gt;setNumInstances(修改后的顶点个数)；</span><br><span class=\"line\">pri_set-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 更新几何体</span></span><br><span class=\"line\">geom-&gt;dirty();</span><br></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<h3\r\nid=\"dynamic-drawing-of-osg-vertex-buffer-objects\"><code>Dynamic drawing of osg vertex buffer objects</code></h3>\r\n<ul>\r\n<li>使用<code>显示列表</code>绘制图形在速度上并没有<code>vertex buffer object</code>那么快，所以在更高的<code>osg</code>的版本中，推荐使用<code>vertex buffer object</code></li>\r\n</ul>","more":"<ul>\r\n<li><p>在使用<code>vertex buffer object</code>的情况下，动态更新绘制的数据</p></li>\r\n<li><p>代码实现： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先- 创建完成 osg::Geometry</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;</span><br><span class=\"line\"><span class=\"comment\">// 关闭显示列表 并使用vbo(vertex buffer object)</span></span><br><span class=\"line\">geom-&gt;setUseDisplayLists(<span class=\"literal\">false</span>);</span><br><span class=\"line\">geom-&gt;setUseVertexBufferObject(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 修改几何体的绘制数据的类型 </span></span><br><span class=\"line\">geom-&gt;setDataVariance(osg::Object::DataVariance::DYNAMIC);</span><br><span class=\"line\"><span class=\"comment\">//================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 更新操作 </span></span><br><span class=\"line\"><span class=\"comment\">// 先获取顶点数组 </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> varray = <span class=\"keyword\">dynamic_cast</span>&lt;osg::Vec3Array&gt;(geom-&gt;getVertexArray());</span><br><span class=\"line\"><span class=\"comment\">// 需改顶点数据</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------你可以想数组中插入顶点-----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 调用 dirty函数，告诉osg::Geometry你修改了顶点</span></span><br><span class=\"line\">varray-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 修改 PrimitiveSet(OpenGL的DrawArray(图元，开始点，绘制个数))</span></span><br><span class=\"line\"><span class=\"comment\">// PrimitiveSet* osg::Geometry::getPrimitiveSet  ( unsigned int  pos ) </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> pri_set = geom-&gt;getPrimitiveSet(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// void  setNumInstances (int n) </span></span><br><span class=\"line\">pri_set-&gt;setNumInstances(修改后的顶点个数)；</span><br><span class=\"line\">pri_set-&gt;dirty();</span><br><span class=\"line\"><span class=\"comment\">// 更新几何体</span></span><br><span class=\"line\">geom-&gt;dirty();</span><br></pre></td></tr></table></figure></p></li>\r\n</ul>"},{"title":"Bit manipulation","date":"2022-07-29T09:24:35.000Z","_content":"### 将二进制数某一位置0，置1，取反\n\n- 用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用\n\n<!-- more -->\n\n\n- 函数实现 \n\n\n#### 1. 将不同进制数转为二进制(非必须) - 我们只是为了显示结果\n- 模拟人的计算过程\n    ```cpp\n    static void showBinary(int d)\n    {\n        using std::cout;\n        using std::endl;\n        using std::array;\n\n        // 存储具体对应的位的值 0 / 1\n        array<int, 32> num;\n        num.fill(0);\n        int flag = 1; // 当前转换的Bit位\n        for (int i = 31; i >= 0; i--)\n        {\n            if (d & flag)\n            {\n                num[i] = 1;\n            }\n            else\n            {\n                num[i] = 0;\n            }\n\n            flag = flag << 1;\n        }\n\n        // 查找第一个不是零的数 \n        int index = 0;\n        #if 1 \n        // 此过程可以省略 做了个显示上的优化\n            for (auto i = 0; i < num.size(); i++)\n            {\n                if (num[i] != 0)\n                {\n\n                    i == 0 ? index = i : index = i - 1;\n                    break;\n                }\n            }\n        #endif \n\n        // 输出转换结果\n        for (auto i = index; i < num.size(); i++)\n        {\n            cout << num[i];\n\n        }\n        cout << endl;\n    }\n\n    ```\n\n#### 某一位置为 0\n- `&`运算的应用\n    ```cpp\n        /// 某一位设置为 0\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2Zero(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // 取反是一个只和取反位数以及之后所有位数相关的操作\n            // 二进制的位数从0开始计算 所以需要 bits - 1 \n            // 1 << (bits(3) - 1) = 4 = 0100 \n            // ~4 = 1011\n            // & 同为 1 则为 1 => 1011 & (任意数字) 第三位等于 0\n            d = d & (~(1 << (bits - 1)));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n    ```\n\n#### 某一位置为 1\n- `|` 运算的应用, 只要有一个是1 结果都是1\n    ```cpp\n        /// 某一位设置为 1\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2One(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // d(16) = 10000 bits = 3\n            // 1 << bits - 1 == 4 = 0100\n            // d | 0100 = 10000 | 0100  = 10100 \n            d = d | (1 << (bits - 1));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n    ```\n\n#### 某一位置取反\n- `^` 异或运算的运用\n    - `^` 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0\n\n    ```cpp\n        /// 某一位取反\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2Negate(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // 转换过程\n            // ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 \n            // d(15) == 1111 bits = 3\n            // 1 << bits - 1 == 0100\n            // 1111\n            // 0100 ^\n            // 1011 \n            d = d ^ (1 << (bits - 1));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n\n    ```\n\n## 参考\n- [1] [Github](https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation \"Github\")","source":"_posts/Bit-manipulation.md","raw":"---\ntitle: Bit manipulation\ndate: 2022-07-29 17:24:35\ncategories:\n- Coding\ntags:\n- cpp\n---\n### 将二进制数某一位置0，置1，取反\n\n- 用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用\n\n<!-- more -->\n\n\n- 函数实现 \n\n\n#### 1. 将不同进制数转为二进制(非必须) - 我们只是为了显示结果\n- 模拟人的计算过程\n    ```cpp\n    static void showBinary(int d)\n    {\n        using std::cout;\n        using std::endl;\n        using std::array;\n\n        // 存储具体对应的位的值 0 / 1\n        array<int, 32> num;\n        num.fill(0);\n        int flag = 1; // 当前转换的Bit位\n        for (int i = 31; i >= 0; i--)\n        {\n            if (d & flag)\n            {\n                num[i] = 1;\n            }\n            else\n            {\n                num[i] = 0;\n            }\n\n            flag = flag << 1;\n        }\n\n        // 查找第一个不是零的数 \n        int index = 0;\n        #if 1 \n        // 此过程可以省略 做了个显示上的优化\n            for (auto i = 0; i < num.size(); i++)\n            {\n                if (num[i] != 0)\n                {\n\n                    i == 0 ? index = i : index = i - 1;\n                    break;\n                }\n            }\n        #endif \n\n        // 输出转换结果\n        for (auto i = index; i < num.size(); i++)\n        {\n            cout << num[i];\n\n        }\n        cout << endl;\n    }\n\n    ```\n\n#### 某一位置为 0\n- `&`运算的应用\n    ```cpp\n        /// 某一位设置为 0\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2Zero(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // 取反是一个只和取反位数以及之后所有位数相关的操作\n            // 二进制的位数从0开始计算 所以需要 bits - 1 \n            // 1 << (bits(3) - 1) = 4 = 0100 \n            // ~4 = 1011\n            // & 同为 1 则为 1 => 1011 & (任意数字) 第三位等于 0\n            d = d & (~(1 << (bits - 1)));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n    ```\n\n#### 某一位置为 1\n- `|` 运算的应用, 只要有一个是1 结果都是1\n    ```cpp\n        /// 某一位设置为 1\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2One(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // d(16) = 10000 bits = 3\n            // 1 << bits - 1 == 4 = 0100\n            // d | 0100 = 10000 | 0100  = 10100 \n            d = d | (1 << (bits - 1));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n    ```\n\n#### 某一位置取反\n- `^` 异或运算的运用\n    - `^` 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0\n\n    ```cpp\n        /// 某一位取反\n        /// d 你要修改的数 \n        /// bits 你要修改的位置\n        template<typename T>\n        T setBit2Negate(T d, int bits)\n        {\n            BitManipulate::showBinary(static_cast<int>(d));\n            // 转换过程\n            // ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 \n            // d(15) == 1111 bits = 3\n            // 1 << bits - 1 == 0100\n            // 1111\n            // 0100 ^\n            // 1011 \n            d = d ^ (1 << (bits - 1));\n            BitManipulate::showBinary(static_cast<int>(d));\n            return d;\n        }\n\n    ```\n\n## 参考\n- [1] [Github](https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation \"Github\")","slug":"Bit-manipulation","published":1,"updated":"2022-08-21T15:34:56.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexrave000k7cdabrrt6l4l","content":"<h3 id=\"将二进制数某一位置0置1取反\">将二进制数某一位置0，置1，取反</h3>\r\n<ul>\r\n<li>用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用</li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n<ul>\r\n<li>函数实现</li>\r\n</ul>\r\n<h4 id=\"将不同进制数转为二进制非必须---我们只是为了显示结果\">1.\r\n将不同进制数转为二进制(非必须) - 我们只是为了显示结果</h4>\r\n<ul>\r\n<li>模拟人的计算过程 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储具体对应的位的值 0 / 1</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 32&gt; num;</span><br><span class=\"line\">    num.fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>; <span class=\"comment\">// 当前转换的Bit位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">31</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d &amp; flag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = flag &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找第一个不是零的数 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1 </span></span><br><span class=\"line\">    <span class=\"comment\">// 此过程可以省略 做了个显示上的优化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; num.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                i == <span class=\"number\">0</span> ? index = i : index = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出转换结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = index; i &lt; num.size(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; num[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置为-0\">某一位置为 0</h4>\r\n<ul>\r\n<li><code>&amp;</code>运算的应用 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位设置为 0</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2Zero</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// 取反是一个只和取反位数以及之后所有位数相关的操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 二进制的位数从0开始计算 所以需要 bits - 1 </span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; (bits(3) - 1) = 4 = 0100 </span></span><br><span class=\"line\">    <span class=\"comment\">// ~4 = 1011</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp; 同为 1 则为 1 =&gt; 1011 &amp; (任意数字) 第三位等于 0</span></span><br><span class=\"line\">    d = d &amp; (~(<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>)));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置为-1\">某一位置为 1</h4>\r\n<ul>\r\n<li><code>|</code> 运算的应用, 只要有一个是1 结果都是1\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位设置为 1</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2One</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// d(16) = 10000 bits = 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; bits - 1 == 4 = 0100</span></span><br><span class=\"line\">    <span class=\"comment\">// d | 0100 = 10000 | 0100  = 10100 </span></span><br><span class=\"line\">    d = d | (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置取反\">某一位置取反</h4>\r\n<ul>\r\n<li><code>^</code> 异或运算的运用\r\n<ul>\r\n<li><code>^</code> 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1 其余的情况都是\r\n0</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位取反</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2Negate</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// 转换过程</span></span><br><span class=\"line\">    <span class=\"comment\">// ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 </span></span><br><span class=\"line\">    <span class=\"comment\">// d(15) == 1111 bits = 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; bits - 1 == 0100</span></span><br><span class=\"line\">    <span class=\"comment\">// 1111</span></span><br><span class=\"line\">    <span class=\"comment\">// 0100 ^</span></span><br><span class=\"line\">    <span class=\"comment\">// 1011 </span></span><br><span class=\"line\">    d = d ^ (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h2 id=\"参考\">参考</h2>\r\n<ul>\r\n<li>[1] <a\r\nhref=\"https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation\"\r\ntitle=\"Github\">Github</a></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<h3 id=\"将二进制数某一位置0置1取反\">将二进制数某一位置0，置1，取反</h3>\r\n<ul>\r\n<li>用位运算可以解决我们的问题,所以下面部分的代码就是一些位运算的简单应用</li>\r\n</ul>","more":"<ul>\r\n<li>函数实现</li>\r\n</ul>\r\n<h4 id=\"将不同进制数转为二进制非必须---我们只是为了显示结果\">1.\r\n将不同进制数转为二进制(非必须) - 我们只是为了显示结果</h4>\r\n<ul>\r\n<li>模拟人的计算过程 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showBinary</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储具体对应的位的值 0 / 1</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 32&gt; num;</span><br><span class=\"line\">    num.fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>; <span class=\"comment\">// 当前转换的Bit位</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">31</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d &amp; flag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        flag = flag &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找第一个不是零的数 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1 </span></span><br><span class=\"line\">    <span class=\"comment\">// 此过程可以省略 做了个显示上的优化</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = <span class=\"number\">0</span>; i &lt; num.size(); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                i == <span class=\"number\">0</span> ? index = i : index = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 输出转换结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i = index; i &lt; num.size(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; num[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置为-0\">某一位置为 0</h4>\r\n<ul>\r\n<li><code>&amp;</code>运算的应用 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位设置为 0</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2Zero</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// 取反是一个只和取反位数以及之后所有位数相关的操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 二进制的位数从0开始计算 所以需要 bits - 1 </span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; (bits(3) - 1) = 4 = 0100 </span></span><br><span class=\"line\">    <span class=\"comment\">// ~4 = 1011</span></span><br><span class=\"line\">    <span class=\"comment\">// &amp; 同为 1 则为 1 =&gt; 1011 &amp; (任意数字) 第三位等于 0</span></span><br><span class=\"line\">    d = d &amp; (~(<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>)));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置为-1\">某一位置为 1</h4>\r\n<ul>\r\n<li><code>|</code> 运算的应用, 只要有一个是1 结果都是1\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位设置为 1</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2One</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// d(16) = 10000 bits = 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; bits - 1 == 4 = 0100</span></span><br><span class=\"line\">    <span class=\"comment\">// d | 0100 = 10000 | 0100  = 10100 </span></span><br><span class=\"line\">    d = d | (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"某一位置取反\">某一位置取反</h4>\r\n<ul>\r\n<li><code>^</code> 异或运算的运用\r\n<ul>\r\n<li><code>^</code> 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1 其余的情况都是\r\n0</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 某一位取反</span></span><br><span class=\"line\"><span class=\"comment\">/// d 你要修改的数 </span></span><br><span class=\"line\"><span class=\"comment\">/// bits 你要修改的位置</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">setBit2Negate</span><span class=\"params\">(T d, <span class=\"keyword\">int</span> bits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"comment\">// 转换过程</span></span><br><span class=\"line\">    <span class=\"comment\">// ^ 异或运算 1 ^ 0 == 1 / 0 ^ 1 == 1  其余的情况都是 0 </span></span><br><span class=\"line\">    <span class=\"comment\">// d(15) == 1111 bits = 3</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 &lt;&lt; bits - 1 == 0100</span></span><br><span class=\"line\">    <span class=\"comment\">// 1111</span></span><br><span class=\"line\">    <span class=\"comment\">// 0100 ^</span></span><br><span class=\"line\">    <span class=\"comment\">// 1011 </span></span><br><span class=\"line\">    d = d ^ (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>));</span><br><span class=\"line\">    BitManipulate::showBinary(<span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h2 id=\"参考\">参考</h2>\r\n<ul>\r\n<li>[1] <a\r\nhref=\"https://gthub.com/Ranbun/blogProjects/tree/main/BitManipulation\"\r\ntitle=\"Github\">Github</a></li>\r\n</ul>"},{"title":"Games202-ShadowMap","date":"2021-12-13T14:25:25.000Z","_content":"\n<p>\n&ensp;&ensp;你该如何渲染阴影...\n</p>\n\n<!-- more -->\n\n## Shadow Map\n\n- 记录一下关于`Games202`的学习\n\n#### shadow map\n\n- 实现：通过比较当前的`point`,在光源空间的的深度与深度图中记录的深度的大小，决定当前的`point`是否在阴影中\n\n- 如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png)\n\n上图来自`Games202`的课件：\n\n- 阴影图`shadow map`记录了相机在光照位置下的最近最近深度。\n\n- 关于计算当前vertex point 是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-`lightPVM`)，用于将顶点转换到光空间。\n\n- 在`Games202`的作业1中，我们需要使用提供的matrix的接口处理矩阵。\n\n  ```javascript\n  mat.translate() // 设置矩阵的移动 \n  mat4.scale      // 设置矩阵的缩放\n  \n  mat4.lookAt(); // 生成的视图矩阵\n  mat4.ortho();  // 平行投影\n  \n  mat4.multiply(); // 矩阵的乘法\n  ```\n\n  [gl-matrix文档](https://www.icode9.com/content-4-956693.html)\n\n- 深度比较：\n\n  ```glsl\n  sampler2D shadowMap;   // 你的深度图\n  mat4 lightPVM;         // 光空间的变换矩阵\n  vec4 vertexPosition;   // 渲染的顶点坐标\n  \n  // 1： 将顶点变换到光空间 \n  vec4 vertex_light = lightPVM * vertexPosition;\n  // 2: 透视除法将顶点变换到NDC坐标\n  vec3 ndc_pos = vertex_light.xyz / vertex_light.w;\n  // 3: 将深度变到 0-1\n  ndc_pos = ndc_pos * 0.5 + 0.5；\n  // 4：获取深度图中记录的深度\n  // 5: 获取当前点在光空间下的实际深度\n  // 6: 比较两个深度的大小    \n  // 7：返回当前点是否在阴影中    \n  ```\n\n  \n\n- 最终效果\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png)\n","source":"_posts/Games202-ShadowMap.md","raw":"---\ntitle: Games202-ShadowMap\ndate: 2021-12-13 22:25:25\ncategories:\n- Computer Graph\ntags:\n- Games202\n- Shadow\n---\n\n<p>\n&ensp;&ensp;你该如何渲染阴影...\n</p>\n\n<!-- more -->\n\n## Shadow Map\n\n- 记录一下关于`Games202`的学习\n\n#### shadow map\n\n- 实现：通过比较当前的`point`,在光源空间的的深度与深度图中记录的深度的大小，决定当前的`point`是否在阴影中\n\n- 如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png)\n\n上图来自`Games202`的课件：\n\n- 阴影图`shadow map`记录了相机在光照位置下的最近最近深度。\n\n- 关于计算当前vertex point 是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-`lightPVM`)，用于将顶点转换到光空间。\n\n- 在`Games202`的作业1中，我们需要使用提供的matrix的接口处理矩阵。\n\n  ```javascript\n  mat.translate() // 设置矩阵的移动 \n  mat4.scale      // 设置矩阵的缩放\n  \n  mat4.lookAt(); // 生成的视图矩阵\n  mat4.ortho();  // 平行投影\n  \n  mat4.multiply(); // 矩阵的乘法\n  ```\n\n  [gl-matrix文档](https://www.icode9.com/content-4-956693.html)\n\n- 深度比较：\n\n  ```glsl\n  sampler2D shadowMap;   // 你的深度图\n  mat4 lightPVM;         // 光空间的变换矩阵\n  vec4 vertexPosition;   // 渲染的顶点坐标\n  \n  // 1： 将顶点变换到光空间 \n  vec4 vertex_light = lightPVM * vertexPosition;\n  // 2: 透视除法将顶点变换到NDC坐标\n  vec3 ndc_pos = vertex_light.xyz / vertex_light.w;\n  // 3: 将深度变到 0-1\n  ndc_pos = ndc_pos * 0.5 + 0.5；\n  // 4：获取深度图中记录的深度\n  // 5: 获取当前点在光空间下的实际深度\n  // 6: 比较两个深度的大小    \n  // 7：返回当前点是否在阴影中    \n  ```\n\n  \n\n- 最终效果\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png)\n","slug":"Games202-ShadowMap","published":1,"updated":"2022-08-21T15:34:56.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravf000n7cda3j266i5a","content":"<p>\r\n  你该如何渲染阴影...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"shadow-map\">Shadow Map</h2>\r\n<ul>\r\n<li>记录一下关于<code>Games202</code>的学习</li>\r\n</ul>\r\n<h4 id=\"shadow-map-1\">shadow map</h4>\r\n<ul>\r\n<li><p>实现：通过比较当前的<code>point</code>,在光源空间的的深度与深度图中记录的深度的大小，决定当前的<code>point</code>是否在阴影中</p></li>\r\n<li><p>如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：</p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png\" /></p></li>\r\n</ul>\r\n<p>上图来自<code>Games202</code>的课件：</p>\r\n<ul>\r\n<li><p>阴影图<code>shadow map</code>记录了相机在光照位置下的最近最近深度。</p></li>\r\n<li><p>关于计算当前vertex point\r\n是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-<code>lightPVM</code>)，用于将顶点转换到光空间。</p></li>\r\n<li><p>在<code>Games202</code>的作业1中，我们需要使用提供的matrix的接口处理矩阵。</p>\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mat.translate() <span class=\"comment\">// 设置矩阵的移动 </span></span><br><span class=\"line\">mat4.scale      <span class=\"comment\">// 设置矩阵的缩放</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.lookAt(); <span class=\"comment\">// 生成的视图矩阵</span></span><br><span class=\"line\">mat4.ortho();  <span class=\"comment\">// 平行投影</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.multiply(); <span class=\"comment\">// 矩阵的乘法</span></span><br></pre></td></tr></table></figure>\r\n<p><a\r\nhref=\"https://www.icode9.com/content-4-956693.html\">gl-matrix文档</a></p></li>\r\n<li><p>深度比较：</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">sampler2D</span> shadowMap;   <span class=\"comment\">// 你的深度图</span></span><br><span class=\"line\"><span class=\"type\">mat4</span> lightPVM;         <span class=\"comment\">// 光空间的变换矩阵</span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertexPosition;   <span class=\"comment\">// 渲染的顶点坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1： 将顶点变换到光空间 </span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertex_light = lightPVM * vertexPosition;</span><br><span class=\"line\"><span class=\"comment\">// 2: 透视除法将顶点变换到NDC坐标</span></span><br><span class=\"line\"><span class=\"type\">vec3</span> ndc_pos = vertex_light.xyz / vertex_light.w;</span><br><span class=\"line\"><span class=\"comment\">// 3: 将深度变到 0-1</span></span><br><span class=\"line\">ndc_pos = ndc_pos * <span class=\"number\">0.5</span> + <span class=\"number\">0.5</span>；</span><br><span class=\"line\"><span class=\"comment\">// 4：获取深度图中记录的深度</span></span><br><span class=\"line\"><span class=\"comment\">// 5: 获取当前点在光空间下的实际深度</span></span><br><span class=\"line\"><span class=\"comment\">// 6: 比较两个深度的大小    </span></span><br><span class=\"line\"><span class=\"comment\">// 7：返回当前点是否在阴影中    </span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>最终效果</p></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png\" /></p>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  你该如何渲染阴影...\r\n</p>","more":"<h2 id=\"shadow-map\">Shadow Map</h2>\r\n<ul>\r\n<li>记录一下关于<code>Games202</code>的学习</li>\r\n</ul>\r\n<h4 id=\"shadow-map-1\">shadow map</h4>\r\n<ul>\r\n<li><p>实现：通过比较当前的<code>point</code>,在光源空间的的深度与深度图中记录的深度的大小，决定当前的<code>point</code>是否在阴影中</p></li>\r\n<li><p>如何获取阴影图：假设相机位置在光源的位置，以此渲染一张纹理，最终得到的这个纹理，每个像素只存储了深度信息，如下：</p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/games202depth_map.png\" /></p></li>\r\n</ul>\r\n<p>上图来自<code>Games202</code>的课件：</p>\r\n<ul>\r\n<li><p>阴影图<code>shadow map</code>记录了相机在光照位置下的最近最近深度。</p></li>\r\n<li><p>关于计算当前vertex point\r\n是否在阴影中的问题，还需要将顶点变换到光照空间也需要一个PVM矩阵(相机位置在光源位置-<code>lightPVM</code>)，用于将顶点转换到光空间。</p></li>\r\n<li><p>在<code>Games202</code>的作业1中，我们需要使用提供的matrix的接口处理矩阵。</p>\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mat.translate() <span class=\"comment\">// 设置矩阵的移动 </span></span><br><span class=\"line\">mat4.scale      <span class=\"comment\">// 设置矩阵的缩放</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.lookAt(); <span class=\"comment\">// 生成的视图矩阵</span></span><br><span class=\"line\">mat4.ortho();  <span class=\"comment\">// 平行投影</span></span><br><span class=\"line\"></span><br><span class=\"line\">mat4.multiply(); <span class=\"comment\">// 矩阵的乘法</span></span><br></pre></td></tr></table></figure>\r\n<p><a\r\nhref=\"https://www.icode9.com/content-4-956693.html\">gl-matrix文档</a></p></li>\r\n<li><p>深度比较：</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">sampler2D</span> shadowMap;   <span class=\"comment\">// 你的深度图</span></span><br><span class=\"line\"><span class=\"type\">mat4</span> lightPVM;         <span class=\"comment\">// 光空间的变换矩阵</span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertexPosition;   <span class=\"comment\">// 渲染的顶点坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1： 将顶点变换到光空间 </span></span><br><span class=\"line\"><span class=\"type\">vec4</span> vertex_light = lightPVM * vertexPosition;</span><br><span class=\"line\"><span class=\"comment\">// 2: 透视除法将顶点变换到NDC坐标</span></span><br><span class=\"line\"><span class=\"type\">vec3</span> ndc_pos = vertex_light.xyz / vertex_light.w;</span><br><span class=\"line\"><span class=\"comment\">// 3: 将深度变到 0-1</span></span><br><span class=\"line\">ndc_pos = ndc_pos * <span class=\"number\">0.5</span> + <span class=\"number\">0.5</span>；</span><br><span class=\"line\"><span class=\"comment\">// 4：获取深度图中记录的深度</span></span><br><span class=\"line\"><span class=\"comment\">// 5: 获取当前点在光空间下的实际深度</span></span><br><span class=\"line\"><span class=\"comment\">// 6: 比较两个深度的大小    </span></span><br><span class=\"line\"><span class=\"comment\">// 7：返回当前点是否在阴影中    </span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>最终效果</p></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/shadow_map_result.png\" /></p>"},{"title":"Git常用命令(上)","date":"2022-07-24T10:25:51.000Z","_content":"\n<p>\n&ensp;&ensp;Git常用命令...\n</p>\n\n<!-- more -->\n\n# Git常用命令\n\n\n### `install Git`\n\n- Git -- [官方网站](https://git-scm.com/)\n\n\n### 常用命令\n\n- 安装完成Git之后的操作 - 指定UserName & Email\n\n    ```git\n    git config --global user.name  \"Your Git UserName\"\n    git config --global user.email \"Your Email Address\"\n    ```\n\n    -  一般时候在你安装完成之后需要做一下这个的配置。\n\n- 生成密钥\n\n    ```git\n    ssh-keygen.exe -t rsa\n    ```\n\n    - 命令提示 \n        ![Image](https://raw.githubusercontent.com/Ranbun/images/main/blog/git/ssh-genkey.png)\n\n    - 然后将你的公钥添加为你所使用的远程管理平台对应SSH Key\n\n- 创建本地版本库\n\n    ```git\n    mkdir repositoryDir  // 创建本地文件夹\n    cd    repositoryDir  // 进入到文件夹\n    git   init           // 初始化为本地仓库 创建.git目录\n    ```\n\n- 添加文件到本地暂存区&提交文件到本地\n\n    ```git\n    git add \"fileName\"       // 提交具体的文件 \n    git add .                // 提交所有修改文件\n    git commit -m  \"备注信息\" // 提交暂存区文件到本地\n    ```\n\n    - `git commit` 命令详解\n        ![git commit](https://raw.githubusercontent.com/Ranbun/images/main/blog/git/git-commit.png)\n\n\n- 版本控制\n\n    ```git\n    git log                      //查看提交历史记录，从最近到最远，可以看到3次\n    git log --pretty=oneline     //加参数，简洁查看\n    git reflog                   //查看每一次修改历史\n    cat \"fileName\"                //查看文件内容 -- linux 命令\n    git status                   //查看工作区中文件当前状态\n    git reset --hard HEAD^(HEAD~100)(commit_id)  //回退版本\n    git checkout -- \"fileName\"         //丢弃工作区的修改，即撤销修改\n    git reset HEAD \"fileName\"          //丢弃暂存区的修改（若已提交，则回退）\n    ```\n\n- 删除文件\n\n    ```git\n    rm \"filename\"   // 删除单个文件 \n    rm -rf *.*      // 强制递归删除所有文件\n    git rm \"filename\"  // 直接删除\n    // 恢复删除的文件\n    git checkout -- \"filename\"\n    ```\n\n- 推送到远程的相关命令\n\n    ```git\n    ssh-keygen -t rsa -C \"前面设置的Email\"     //创建SSH Key 也可以不指定-C与邮件地址\n    git remote add origin \"git的远程仓库地址\"  //关联远程仓库-源\n    git push -u origin main                  //将本地内容推送到远程-第一次强制推送\n    git push origin main                     //将本地内容推送到远程\n    git remote -v                            //查看远程源信息\n    git remote rm origin                     //删除远程源\n    git clone \"远程仓库地址可以是https的也可以是SSH(此时需要配置密钥)\"  //克隆远程仓库\n    git remote                               //查看远程库的信息\n    git remote -v                            //查看远程库的详细信\n    ```\n\n- 分支管理\n\n    ```git\n    // 老版本的 git命令 \n    git checkout -b main        //创建并切换到分支dev\n    == 如下操作\n    git branch   feature        //创建分支main\n    git checkout feature        //切换到分支feature\n    git checkout origin/main    //拉取远程分支并切换\n    // 版本比较新一定的分支管理命令 \n    git switch -c feature       //创建分支feature并切换\n    git switch main             //直接切换到分支main\n    // -----------------------------------------------------------------------\n    git branch                  //查看当前分支\n    git merge  feature          // 合并分支feature到当前分支(记得合并前拉取一下)\n    git branch -d dev           // 删除dev分支 -d 强制删除\n    ```\n\n- 推送到远程\n\n    ```git\n    git push origin main                               //推送分支到远程\n    git checkout -b feature origin/feature                     //创建远程origin的dev分支到本地\n    git pull                                           //拉取远程分支内容\n    git branch --set-upstream-to=origin/main main        //指定本地与远程dev的链接\n    // 另一种合并操作，相比merge不会产生一次额外的提交\n    git rebase                                         //把本地未push的分叉提交历史整理成直线\n    ```\n\n\n\n","source":"_posts/Git常用命令-上.md","raw":"---\ntitle: Git常用命令(上)\ndate: 2022-07-24 18:25:51\ncategories:\n- works\n- SCU\n- Git\ntags:\n- Git\n---\n\n<p>\n&ensp;&ensp;Git常用命令...\n</p>\n\n<!-- more -->\n\n# Git常用命令\n\n\n### `install Git`\n\n- Git -- [官方网站](https://git-scm.com/)\n\n\n### 常用命令\n\n- 安装完成Git之后的操作 - 指定UserName & Email\n\n    ```git\n    git config --global user.name  \"Your Git UserName\"\n    git config --global user.email \"Your Email Address\"\n    ```\n\n    -  一般时候在你安装完成之后需要做一下这个的配置。\n\n- 生成密钥\n\n    ```git\n    ssh-keygen.exe -t rsa\n    ```\n\n    - 命令提示 \n        ![Image](https://raw.githubusercontent.com/Ranbun/images/main/blog/git/ssh-genkey.png)\n\n    - 然后将你的公钥添加为你所使用的远程管理平台对应SSH Key\n\n- 创建本地版本库\n\n    ```git\n    mkdir repositoryDir  // 创建本地文件夹\n    cd    repositoryDir  // 进入到文件夹\n    git   init           // 初始化为本地仓库 创建.git目录\n    ```\n\n- 添加文件到本地暂存区&提交文件到本地\n\n    ```git\n    git add \"fileName\"       // 提交具体的文件 \n    git add .                // 提交所有修改文件\n    git commit -m  \"备注信息\" // 提交暂存区文件到本地\n    ```\n\n    - `git commit` 命令详解\n        ![git commit](https://raw.githubusercontent.com/Ranbun/images/main/blog/git/git-commit.png)\n\n\n- 版本控制\n\n    ```git\n    git log                      //查看提交历史记录，从最近到最远，可以看到3次\n    git log --pretty=oneline     //加参数，简洁查看\n    git reflog                   //查看每一次修改历史\n    cat \"fileName\"                //查看文件内容 -- linux 命令\n    git status                   //查看工作区中文件当前状态\n    git reset --hard HEAD^(HEAD~100)(commit_id)  //回退版本\n    git checkout -- \"fileName\"         //丢弃工作区的修改，即撤销修改\n    git reset HEAD \"fileName\"          //丢弃暂存区的修改（若已提交，则回退）\n    ```\n\n- 删除文件\n\n    ```git\n    rm \"filename\"   // 删除单个文件 \n    rm -rf *.*      // 强制递归删除所有文件\n    git rm \"filename\"  // 直接删除\n    // 恢复删除的文件\n    git checkout -- \"filename\"\n    ```\n\n- 推送到远程的相关命令\n\n    ```git\n    ssh-keygen -t rsa -C \"前面设置的Email\"     //创建SSH Key 也可以不指定-C与邮件地址\n    git remote add origin \"git的远程仓库地址\"  //关联远程仓库-源\n    git push -u origin main                  //将本地内容推送到远程-第一次强制推送\n    git push origin main                     //将本地内容推送到远程\n    git remote -v                            //查看远程源信息\n    git remote rm origin                     //删除远程源\n    git clone \"远程仓库地址可以是https的也可以是SSH(此时需要配置密钥)\"  //克隆远程仓库\n    git remote                               //查看远程库的信息\n    git remote -v                            //查看远程库的详细信\n    ```\n\n- 分支管理\n\n    ```git\n    // 老版本的 git命令 \n    git checkout -b main        //创建并切换到分支dev\n    == 如下操作\n    git branch   feature        //创建分支main\n    git checkout feature        //切换到分支feature\n    git checkout origin/main    //拉取远程分支并切换\n    // 版本比较新一定的分支管理命令 \n    git switch -c feature       //创建分支feature并切换\n    git switch main             //直接切换到分支main\n    // -----------------------------------------------------------------------\n    git branch                  //查看当前分支\n    git merge  feature          // 合并分支feature到当前分支(记得合并前拉取一下)\n    git branch -d dev           // 删除dev分支 -d 强制删除\n    ```\n\n- 推送到远程\n\n    ```git\n    git push origin main                               //推送分支到远程\n    git checkout -b feature origin/feature                     //创建远程origin的dev分支到本地\n    git pull                                           //拉取远程分支内容\n    git branch --set-upstream-to=origin/main main        //指定本地与远程dev的链接\n    // 另一种合并操作，相比merge不会产生一次额外的提交\n    git rebase                                         //把本地未push的分叉提交历史整理成直线\n    ```\n\n\n\n","slug":"Git常用命令-上","published":1,"updated":"2022-08-21T15:34:56.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravg000o7cdafr9e3iv2","content":"<p>\r\n  Git常用命令...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"git常用命令\">Git常用命令</h1>\r\n<h3 id=\"install-git\"><code>install Git</code></h3>\r\n<ul>\r\n<li>Git -- <a href=\"https://git-scm.com/\">官方网站</a></li>\r\n</ul>\r\n<h3 id=\"常用命令\">常用命令</h3>\r\n<ul>\r\n<li><p>安装完成Git之后的操作 - 指定UserName &amp; Email</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name  &quot;Your Git UserName&quot;</span><br><span class=\"line\">git config --global user.email &quot;Your Email Address&quot;</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>一般时候在你安装完成之后需要做一下这个的配置。</li>\r\n</ul></li>\r\n<li><p>生成密钥</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen.exe -t rsa</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li><p>命令提示 <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/git/ssh-genkey.png\"\r\nalt=\"Image\" /></p></li>\r\n<li><p>然后将你的公钥添加为你所使用的远程管理平台对应SSH Key</p></li>\r\n</ul></li>\r\n<li><p>创建本地版本库</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir repositoryDir  &#x2F;&#x2F; 创建本地文件夹</span><br><span class=\"line\">cd    repositoryDir  &#x2F;&#x2F; 进入到文件夹</span><br><span class=\"line\">git   init           &#x2F;&#x2F; 初始化为本地仓库 创建.git目录</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>添加文件到本地暂存区&amp;提交文件到本地</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &quot;fileName&quot;       &#x2F;&#x2F; 提交具体的文件 </span><br><span class=\"line\">git add .                &#x2F;&#x2F; 提交所有修改文件</span><br><span class=\"line\">git commit -m  &quot;备注信息&quot; &#x2F;&#x2F; 提交暂存区文件到本地</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li><code>git commit</code> 命令详解 <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/git/git-commit.png\"\r\nalt=\"git commit\" /></li>\r\n</ul></li>\r\n<li><p>版本控制</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log                      &#x2F;&#x2F;查看提交历史记录，从最近到最远，可以看到3次</span><br><span class=\"line\">git log --pretty&#x3D;oneline     &#x2F;&#x2F;加参数，简洁查看</span><br><span class=\"line\">git reflog                   &#x2F;&#x2F;查看每一次修改历史</span><br><span class=\"line\">cat &quot;fileName&quot;                &#x2F;&#x2F;查看文件内容 -- linux 命令</span><br><span class=\"line\">git status                   &#x2F;&#x2F;查看工作区中文件当前状态</span><br><span class=\"line\">git reset --hard HEAD^(HEAD~100)(commit_id)  &#x2F;&#x2F;回退版本</span><br><span class=\"line\">git checkout -- &quot;fileName&quot;         &#x2F;&#x2F;丢弃工作区的修改，即撤销修改</span><br><span class=\"line\">git reset HEAD &quot;fileName&quot;          &#x2F;&#x2F;丢弃暂存区的修改（若已提交，则回退）</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>删除文件</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm &quot;filename&quot;   &#x2F;&#x2F; 删除单个文件 </span><br><span class=\"line\">rm -rf *.*      &#x2F;&#x2F; 强制递归删除所有文件</span><br><span class=\"line\">git rm &quot;filename&quot;  &#x2F;&#x2F; 直接删除</span><br><span class=\"line\">&#x2F;&#x2F; 恢复删除的文件</span><br><span class=\"line\">git checkout -- &quot;filename&quot;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>推送到远程的相关命令</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;前面设置的Email&quot;     &#x2F;&#x2F;创建SSH Key 也可以不指定-C与邮件地址</span><br><span class=\"line\">git remote add origin &quot;git的远程仓库地址&quot;  &#x2F;&#x2F;关联远程仓库-源</span><br><span class=\"line\">git push -u origin main                  &#x2F;&#x2F;将本地内容推送到远程-第一次强制推送</span><br><span class=\"line\">git push origin main                     &#x2F;&#x2F;将本地内容推送到远程</span><br><span class=\"line\">git remote -v                            &#x2F;&#x2F;查看远程源信息</span><br><span class=\"line\">git remote rm origin                     &#x2F;&#x2F;删除远程源</span><br><span class=\"line\">git clone &quot;远程仓库地址可以是https的也可以是SSH(此时需要配置密钥)&quot;  &#x2F;&#x2F;克隆远程仓库</span><br><span class=\"line\">git remote                               &#x2F;&#x2F;查看远程库的信息</span><br><span class=\"line\">git remote -v                            &#x2F;&#x2F;查看远程库的详细信</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>分支管理</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 老版本的 git命令 </span><br><span class=\"line\">git checkout -b main        &#x2F;&#x2F;创建并切换到分支dev</span><br><span class=\"line\">&#x3D;&#x3D; 如下操作</span><br><span class=\"line\">git branch   feature        &#x2F;&#x2F;创建分支main</span><br><span class=\"line\">git checkout feature        &#x2F;&#x2F;切换到分支feature</span><br><span class=\"line\">git checkout origin&#x2F;main    &#x2F;&#x2F;拉取远程分支并切换</span><br><span class=\"line\">&#x2F;&#x2F; 版本比较新一定的分支管理命令 </span><br><span class=\"line\">git switch -c feature       &#x2F;&#x2F;创建分支feature并切换</span><br><span class=\"line\">git switch main             &#x2F;&#x2F;直接切换到分支main</span><br><span class=\"line\">&#x2F;&#x2F; -----------------------------------------------------------------------</span><br><span class=\"line\">git branch                  &#x2F;&#x2F;查看当前分支</span><br><span class=\"line\">git merge  feature          &#x2F;&#x2F; 合并分支feature到当前分支(记得合并前拉取一下)</span><br><span class=\"line\">git branch -d dev           &#x2F;&#x2F; 删除dev分支 -d 强制删除</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>推送到远程</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin main                               &#x2F;&#x2F;推送分支到远程</span><br><span class=\"line\">git checkout -b feature origin&#x2F;feature                     &#x2F;&#x2F;创建远程origin的dev分支到本地</span><br><span class=\"line\">git pull                                           &#x2F;&#x2F;拉取远程分支内容</span><br><span class=\"line\">git branch --set-upstream-to&#x3D;origin&#x2F;main main        &#x2F;&#x2F;指定本地与远程dev的链接</span><br><span class=\"line\">&#x2F;&#x2F; 另一种合并操作，相比merge不会产生一次额外的提交</span><br><span class=\"line\">git rebase                                         &#x2F;&#x2F;把本地未push的分叉提交历史整理成直线</span><br></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  Git常用命令...\r\n</p>","more":"<h1 id=\"git常用命令\">Git常用命令</h1>\r\n<h3 id=\"install-git\"><code>install Git</code></h3>\r\n<ul>\r\n<li>Git -- <a href=\"https://git-scm.com/\">官方网站</a></li>\r\n</ul>\r\n<h3 id=\"常用命令\">常用命令</h3>\r\n<ul>\r\n<li><p>安装完成Git之后的操作 - 指定UserName &amp; Email</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name  &quot;Your Git UserName&quot;</span><br><span class=\"line\">git config --global user.email &quot;Your Email Address&quot;</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>一般时候在你安装完成之后需要做一下这个的配置。</li>\r\n</ul></li>\r\n<li><p>生成密钥</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen.exe -t rsa</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li><p>命令提示 <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/git/ssh-genkey.png\"\r\nalt=\"Image\" /></p></li>\r\n<li><p>然后将你的公钥添加为你所使用的远程管理平台对应SSH Key</p></li>\r\n</ul></li>\r\n<li><p>创建本地版本库</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir repositoryDir  &#x2F;&#x2F; 创建本地文件夹</span><br><span class=\"line\">cd    repositoryDir  &#x2F;&#x2F; 进入到文件夹</span><br><span class=\"line\">git   init           &#x2F;&#x2F; 初始化为本地仓库 创建.git目录</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>添加文件到本地暂存区&amp;提交文件到本地</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &quot;fileName&quot;       &#x2F;&#x2F; 提交具体的文件 </span><br><span class=\"line\">git add .                &#x2F;&#x2F; 提交所有修改文件</span><br><span class=\"line\">git commit -m  &quot;备注信息&quot; &#x2F;&#x2F; 提交暂存区文件到本地</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li><code>git commit</code> 命令详解 <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/git/git-commit.png\"\r\nalt=\"git commit\" /></li>\r\n</ul></li>\r\n<li><p>版本控制</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log                      &#x2F;&#x2F;查看提交历史记录，从最近到最远，可以看到3次</span><br><span class=\"line\">git log --pretty&#x3D;oneline     &#x2F;&#x2F;加参数，简洁查看</span><br><span class=\"line\">git reflog                   &#x2F;&#x2F;查看每一次修改历史</span><br><span class=\"line\">cat &quot;fileName&quot;                &#x2F;&#x2F;查看文件内容 -- linux 命令</span><br><span class=\"line\">git status                   &#x2F;&#x2F;查看工作区中文件当前状态</span><br><span class=\"line\">git reset --hard HEAD^(HEAD~100)(commit_id)  &#x2F;&#x2F;回退版本</span><br><span class=\"line\">git checkout -- &quot;fileName&quot;         &#x2F;&#x2F;丢弃工作区的修改，即撤销修改</span><br><span class=\"line\">git reset HEAD &quot;fileName&quot;          &#x2F;&#x2F;丢弃暂存区的修改（若已提交，则回退）</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>删除文件</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm &quot;filename&quot;   &#x2F;&#x2F; 删除单个文件 </span><br><span class=\"line\">rm -rf *.*      &#x2F;&#x2F; 强制递归删除所有文件</span><br><span class=\"line\">git rm &quot;filename&quot;  &#x2F;&#x2F; 直接删除</span><br><span class=\"line\">&#x2F;&#x2F; 恢复删除的文件</span><br><span class=\"line\">git checkout -- &quot;filename&quot;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>推送到远程的相关命令</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;前面设置的Email&quot;     &#x2F;&#x2F;创建SSH Key 也可以不指定-C与邮件地址</span><br><span class=\"line\">git remote add origin &quot;git的远程仓库地址&quot;  &#x2F;&#x2F;关联远程仓库-源</span><br><span class=\"line\">git push -u origin main                  &#x2F;&#x2F;将本地内容推送到远程-第一次强制推送</span><br><span class=\"line\">git push origin main                     &#x2F;&#x2F;将本地内容推送到远程</span><br><span class=\"line\">git remote -v                            &#x2F;&#x2F;查看远程源信息</span><br><span class=\"line\">git remote rm origin                     &#x2F;&#x2F;删除远程源</span><br><span class=\"line\">git clone &quot;远程仓库地址可以是https的也可以是SSH(此时需要配置密钥)&quot;  &#x2F;&#x2F;克隆远程仓库</span><br><span class=\"line\">git remote                               &#x2F;&#x2F;查看远程库的信息</span><br><span class=\"line\">git remote -v                            &#x2F;&#x2F;查看远程库的详细信</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>分支管理</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 老版本的 git命令 </span><br><span class=\"line\">git checkout -b main        &#x2F;&#x2F;创建并切换到分支dev</span><br><span class=\"line\">&#x3D;&#x3D; 如下操作</span><br><span class=\"line\">git branch   feature        &#x2F;&#x2F;创建分支main</span><br><span class=\"line\">git checkout feature        &#x2F;&#x2F;切换到分支feature</span><br><span class=\"line\">git checkout origin&#x2F;main    &#x2F;&#x2F;拉取远程分支并切换</span><br><span class=\"line\">&#x2F;&#x2F; 版本比较新一定的分支管理命令 </span><br><span class=\"line\">git switch -c feature       &#x2F;&#x2F;创建分支feature并切换</span><br><span class=\"line\">git switch main             &#x2F;&#x2F;直接切换到分支main</span><br><span class=\"line\">&#x2F;&#x2F; -----------------------------------------------------------------------</span><br><span class=\"line\">git branch                  &#x2F;&#x2F;查看当前分支</span><br><span class=\"line\">git merge  feature          &#x2F;&#x2F; 合并分支feature到当前分支(记得合并前拉取一下)</span><br><span class=\"line\">git branch -d dev           &#x2F;&#x2F; 删除dev分支 -d 强制删除</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>推送到远程</p>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin main                               &#x2F;&#x2F;推送分支到远程</span><br><span class=\"line\">git checkout -b feature origin&#x2F;feature                     &#x2F;&#x2F;创建远程origin的dev分支到本地</span><br><span class=\"line\">git pull                                           &#x2F;&#x2F;拉取远程分支内容</span><br><span class=\"line\">git branch --set-upstream-to&#x3D;origin&#x2F;main main        &#x2F;&#x2F;指定本地与远程dev的链接</span><br><span class=\"line\">&#x2F;&#x2F; 另一种合并操作，相比merge不会产生一次额外的提交</span><br><span class=\"line\">git rebase                                         &#x2F;&#x2F;把本地未push的分叉提交历史整理成直线</span><br></pre></td></tr></table></figure></p></li>\r\n</ul>"},{"title":"IBL","date":"2022-09-07T17:07:45.000Z","_content":"\n基于图像的照明`Image Based Lighting`\n<!--more-->\n\n","source":"_posts/IBL.md","raw":"---\ntitle: IBL\ndate: 2022-09-08 01:07:45\ncategories:\n- rendering\ntags:\n---\n\n基于图像的照明`Image Based Lighting`\n<!--more-->\n\n","slug":"IBL","published":1,"updated":"2022-09-18T15:55:57.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravh000r7cda4byk7f6h","content":"<p>基于图像的照明<code>Image Based Lighting</code> <span id=\"more\"></span></p>\r\n","site":{"data":{}},"excerpt":"<p>基于图像的照明<code>Image Based Lighting</code>","more":"</p>"},{"title":"Multi KeyWord Sort","date":"2021-11-07T14:18:51.000Z","_content":"\n<p>\n&ensp;&ensp;多关键字排序...\n</p>\n\n<!-- more -->\n\n### 多关键字排序\n\n- 扑克牌的例子\n\n- 一副扑克牌是按照两种顺序排的：\n  - K0,花色：梅花 < 方块 < 红桃 < 黑桃\n  - k1，面值: 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < J < Q < K < A\n- 主位优先：（Most Significant Digit）\n  - 先用四个花色建桶，然后使用面值建桶\n\n#### 一个更好的方法：\n\n- 依旧使用次位优先：\n\n  - 先使用面值建桶\n\n  - 然后按照大小将结果合并，使用花色建桶。\n\n  - 最终的输出结果便是有序的\n\n    \n","source":"_posts/Multi-KeyWord-Sort.md","raw":"---\ntitle: Multi KeyWord Sort\ndate: 2021-11-07 22:18:51\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;多关键字排序...\n</p>\n\n<!-- more -->\n\n### 多关键字排序\n\n- 扑克牌的例子\n\n- 一副扑克牌是按照两种顺序排的：\n  - K0,花色：梅花 < 方块 < 红桃 < 黑桃\n  - k1，面值: 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < J < Q < K < A\n- 主位优先：（Most Significant Digit）\n  - 先用四个花色建桶，然后使用面值建桶\n\n#### 一个更好的方法：\n\n- 依旧使用次位优先：\n\n  - 先使用面值建桶\n\n  - 然后按照大小将结果合并，使用花色建桶。\n\n  - 最终的输出结果便是有序的\n\n    \n","slug":"Multi-KeyWord-Sort","published":1,"updated":"2022-08-21T15:34:56.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravh000t7cdahcyj20pq","content":"<p>\r\n  多关键字排序...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"多关键字排序\">多关键字排序</h3>\r\n<ul>\r\n<li><p>扑克牌的例子</p></li>\r\n<li><p>一副扑克牌是按照两种顺序排的：</p>\r\n<ul>\r\n<li>K0,花色：梅花 &lt; 方块 &lt; 红桃 &lt; 黑桃</li>\r\n<li>k1，面值: 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10\r\n&lt; J &lt; Q &lt; K &lt; A</li>\r\n</ul></li>\r\n<li><p>主位优先：（Most Significant Digit）</p>\r\n<ul>\r\n<li>先用四个花色建桶，然后使用面值建桶</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"一个更好的方法\">一个更好的方法：</h4>\r\n<ul>\r\n<li><p>依旧使用次位优先：</p>\r\n<ul>\r\n<li><p>先使用面值建桶</p></li>\r\n<li><p>然后按照大小将结果合并，使用花色建桶。</p></li>\r\n<li><p>最终的输出结果便是有序的</p></li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  多关键字排序...\r\n</p>","more":"<h3 id=\"多关键字排序\">多关键字排序</h3>\r\n<ul>\r\n<li><p>扑克牌的例子</p></li>\r\n<li><p>一副扑克牌是按照两种顺序排的：</p>\r\n<ul>\r\n<li>K0,花色：梅花 &lt; 方块 &lt; 红桃 &lt; 黑桃</li>\r\n<li>k1，面值: 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; 10\r\n&lt; J &lt; Q &lt; K &lt; A</li>\r\n</ul></li>\r\n<li><p>主位优先：（Most Significant Digit）</p>\r\n<ul>\r\n<li>先用四个花色建桶，然后使用面值建桶</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"一个更好的方法\">一个更好的方法：</h4>\r\n<ul>\r\n<li><p>依旧使用次位优先：</p>\r\n<ul>\r\n<li><p>先使用面值建桶</p></li>\r\n<li><p>然后按照大小将结果合并，使用花色建桶。</p></li>\r\n<li><p>最终的输出结果便是有序的</p></li>\r\n</ul></li>\r\n</ul>"},{"title":"OBB与OBB求交","date":"2022-09-08T09:28:20.000Z","mathjax":true,"_content":"\nOBB 全称为 Oriented Bound Box，译为有朝向的包围盒。OBB 常与 AABB(Axis-Aligned Bound Box) 对比：AABB 的边与轴平行，而 OBB 的边则与物体的朝向有关。\n\n<!--more-->\n\n### OBB求交介绍\n\n- 采用分离轴的方式计算\n- 两个凸包多边形，当且仅当存在一条线，这两个多边形在这条线上的投影不相交，则这两个多边形也不相交.\n- 这条线称为`Separating Axis`.垂直`Separating Axis`存在一条`Separating Line`将两个多边形分开。\n\n#### OBB to AABB\n\n- 我们采用一个稍微容易理解的方法完成这种计算 - 将`OBB`转换为`AABB`\n- 然后使用`AABB`o 求交的计算方式去算`OBB`的相交\n\n### `AABB`的定义\n\n- `AABB`既是`Axis-aligned Bounding Box`\n\n<center>\n<img src=https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/define_aabb.png></img>\n</center>\n\n- 简单由定义两个最大最小点完成定义，一个`OBB`也可以描述一个`AABB`\n\n### OBB的定义\n\n- `m_center` 中点位置\n- `size`     盒子的大小(尺寸)\n- $\\vec{u},\\vec{v},\\vec{w}$, 坐标系的轴向(与面的法相一样)\n\n```Cpp\nstruct OBB\n///< 右手系\n{\n    OBB(const vec3 & pos,const vec3 & size)\n        : m_pos(pos)\n        , m_size(size)\n    {\n    }\n\n    OBB(const vec3& pos, const vec3& size, const vec3& u, const vec3& v, const vec3& w)\n        : m_pos(pos)\n        , m_size(size) \n        , m_u(u)\n        , m_v(v)\n        , m_w(w)\n    {\n    }\n\n    vec3 m_pos{0,0,0};   ///< pos \n    vec3 m_size{ 0.5,0.5,0.5 };  ///< 长宽高 x = 长 y = 宽 z = 高\n    vec3 m_u{1,0,0};     ///< x\n    vec3 m_v{0,1,0};     ///< y \n    vec3 m_w{0,0,1};     ///< z \n};\n\n```\n\n### `AABB`求交\n\n- 根据分离轴定理，对于`AABB`我们只需要计算最大最小的点在标准的${\\vec{x},\\vec{y},\\vec{z}}$轴上的投影是否相交即可，实现起来比较简单\n\n#### code\n\n```C++\nbool intersectObbWithObb(OBB &first, OBB &second)\n{\n    auto fRes  = computerOBBIntersecte(first,second);\n    auto sRes = computerOBBIntersecte(second,first);\n    return (fRes&sRes);\n}\n\nbool computerOBBIntersecte(OBB first, OBB second)\n{\n    /// first\n    first.m_trans = glm::translate(glm::mat4(1.0f),-first.m_center);\n    auto rotate = glm::mat4(glm::vec4(first.m_u, 0.0), glm::vec4(first.m_v, 0.0), glm::vec4(first.m_w, 0.0), glm::vec4(0, 0, 0, 1.0));\n    rotate = glm::transpose(rotate);\n    first.m_rotate = rotate;\n\n    // 将第一个matrix变换到第一个变换矩阵描述的空间\n    first.m_center = first.m_rotate * first.m_trans * glm::vec4(first.m_center,1.0);\n    first.m_u = first.m_rotate * first.m_trans * glm::vec4(first.m_u,0.0);\n    first.m_v = first.m_rotate * first.m_trans * glm::vec4(first.m_v,0.0);\n    first.m_w = first.m_rotate * first.m_trans * glm::vec4(first.m_w,0.0);\n\n    // 将 second 变换到对应的空间中\n    auto trans2Origin = glm::translate(glm::mat4(1.0),-second.m_center);\n    second.m_trans = trans2Origin;\n    auto transRestore = glm::translate(glm::mat4(1.0),second.m_center);\n    second.m_center = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_center,1.0);\n    second.m_u = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_u,0.0);\n    second.m_v = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_v,0.0);\n    second.m_w = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_w,0.0);\n\n    /// first Obb max & min position\n    glm::vec3 fMinPos = first.m_center - first.m_size.x/2.0f * first.m_u - first.m_size.y / 2.0f * first.m_v - first.m_size.z/2.0f * first.m_w;\n    glm::vec3 fMaxPos = first.m_center + first.m_size.x/2.0f * first.m_u + first.m_size.y / 2.0f * first.m_v + first.m_size.z/2.0f * first.m_w;\n\n    /// 计算second OBB 的最大最小点\n    std::array<glm::vec3,8> secondPos;\n    {\n        /// 右手系\n        // m_center + vector * size\n        secondPos[0] = second.m_center - second.m_u * second.m_size.x * 0.5f -\n                second.m_v * second.m_size.y * 0.5f -  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[1] = second.m_center - second.m_u * second.m_size.x * 0.5f -\n                       second.m_v * second.m_size.y * 0.5f +  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[2] = second.m_center - second.m_u * second.m_size.x * 0.5f +\n                       second.m_v * second.m_size.y * 0.5f - second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[3] = second.m_center - second.m_u * second.m_size.x * 0.5f +\n                       second.m_v * second.m_size.y * 0.5f +  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[4] = second.m_center + second.m_u * second.m_size.x * 0.5f -\n                       second.m_v * second.m_size.y * 0.5f -  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[5] = second.m_center + second.m_u * second.m_size.x * 0.5f -\n                       second.m_v * second.m_size.y * 0.5f +  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[6] = second.m_center + second.m_u * second.m_size.x * 0.5f +\n                       second.m_v * second.m_size.y * 0.5f - second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[7] = second.m_center + second.m_u * second.m_size.x * 0.5f +\n                       second.m_v * second.m_size.y * 0.5f +  second.m_w * second.m_size.z * 0.5f;\n    }\n\n    glm::vec3 sMinPos{secondPos[0]};\n    glm::vec3 sMaxPos{secondPos[0]};\n\n    for(auto & it : secondPos)\n    {\n        sMinPos.x = sMinPos.x > it.x? it.x:sMinPos.x;\n        sMinPos.y = sMinPos.y > it.y? it.y:sMinPos.y;\n        sMinPos.z = sMinPos.z > it.z? it.z:sMinPos.z;\n\n        sMaxPos.x = sMaxPos.x < it.x? it.x:sMaxPos.x;\n        sMaxPos.y = sMaxPos.y < it.y? it.y:sMaxPos.y;\n        sMaxPos.z = sMaxPos.z < it.z? it.z:sMaxPos.z;\n    }\n\n    /// 计算\n    if(\n        (fMinPos.x > sMaxPos.x || sMinPos.x > fMaxPos.x) ||\n        (fMinPos.y > sMaxPos.y || sMinPos.y > fMaxPos.y) ||\n        (fMinPos.z > sMaxPos.z || sMinPos.z > fMaxPos.z)\n    )\n    {\n        return false;\n    }\n\n    return true;\n}\n```\n\n- 当然也可以直接使用其他的方式计算`OBB`的求交，分离轴使用相对较多，可以直接投影`OBB`的最大最小的点到由`OBB`确定的投影轴上,包含15跟轴\n- `OBB A`的三个轴向,`OBB B`的三个轴向 6 根。\n- 两个`OBB`各自轴向的叉积 => 3*3 = 9。\n","source":"_posts/OBB与OBB求交.md","raw":"---\ntitle: OBB与OBB求交\ndate: 2022-09-08 17:28:20\nmathjax: true\ncategories:\n- Algorithm\n- Computer Graphics\ntags:\n- OBB \n- Intersect\n---\n\nOBB 全称为 Oriented Bound Box，译为有朝向的包围盒。OBB 常与 AABB(Axis-Aligned Bound Box) 对比：AABB 的边与轴平行，而 OBB 的边则与物体的朝向有关。\n\n<!--more-->\n\n### OBB求交介绍\n\n- 采用分离轴的方式计算\n- 两个凸包多边形，当且仅当存在一条线，这两个多边形在这条线上的投影不相交，则这两个多边形也不相交.\n- 这条线称为`Separating Axis`.垂直`Separating Axis`存在一条`Separating Line`将两个多边形分开。\n\n#### OBB to AABB\n\n- 我们采用一个稍微容易理解的方法完成这种计算 - 将`OBB`转换为`AABB`\n- 然后使用`AABB`o 求交的计算方式去算`OBB`的相交\n\n### `AABB`的定义\n\n- `AABB`既是`Axis-aligned Bounding Box`\n\n<center>\n<img src=https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/define_aabb.png></img>\n</center>\n\n- 简单由定义两个最大最小点完成定义，一个`OBB`也可以描述一个`AABB`\n\n### OBB的定义\n\n- `m_center` 中点位置\n- `size`     盒子的大小(尺寸)\n- $\\vec{u},\\vec{v},\\vec{w}$, 坐标系的轴向(与面的法相一样)\n\n```Cpp\nstruct OBB\n///< 右手系\n{\n    OBB(const vec3 & pos,const vec3 & size)\n        : m_pos(pos)\n        , m_size(size)\n    {\n    }\n\n    OBB(const vec3& pos, const vec3& size, const vec3& u, const vec3& v, const vec3& w)\n        : m_pos(pos)\n        , m_size(size) \n        , m_u(u)\n        , m_v(v)\n        , m_w(w)\n    {\n    }\n\n    vec3 m_pos{0,0,0};   ///< pos \n    vec3 m_size{ 0.5,0.5,0.5 };  ///< 长宽高 x = 长 y = 宽 z = 高\n    vec3 m_u{1,0,0};     ///< x\n    vec3 m_v{0,1,0};     ///< y \n    vec3 m_w{0,0,1};     ///< z \n};\n\n```\n\n### `AABB`求交\n\n- 根据分离轴定理，对于`AABB`我们只需要计算最大最小的点在标准的${\\vec{x},\\vec{y},\\vec{z}}$轴上的投影是否相交即可，实现起来比较简单\n\n#### code\n\n```C++\nbool intersectObbWithObb(OBB &first, OBB &second)\n{\n    auto fRes  = computerOBBIntersecte(first,second);\n    auto sRes = computerOBBIntersecte(second,first);\n    return (fRes&sRes);\n}\n\nbool computerOBBIntersecte(OBB first, OBB second)\n{\n    /// first\n    first.m_trans = glm::translate(glm::mat4(1.0f),-first.m_center);\n    auto rotate = glm::mat4(glm::vec4(first.m_u, 0.0), glm::vec4(first.m_v, 0.0), glm::vec4(first.m_w, 0.0), glm::vec4(0, 0, 0, 1.0));\n    rotate = glm::transpose(rotate);\n    first.m_rotate = rotate;\n\n    // 将第一个matrix变换到第一个变换矩阵描述的空间\n    first.m_center = first.m_rotate * first.m_trans * glm::vec4(first.m_center,1.0);\n    first.m_u = first.m_rotate * first.m_trans * glm::vec4(first.m_u,0.0);\n    first.m_v = first.m_rotate * first.m_trans * glm::vec4(first.m_v,0.0);\n    first.m_w = first.m_rotate * first.m_trans * glm::vec4(first.m_w,0.0);\n\n    // 将 second 变换到对应的空间中\n    auto trans2Origin = glm::translate(glm::mat4(1.0),-second.m_center);\n    second.m_trans = trans2Origin;\n    auto transRestore = glm::translate(glm::mat4(1.0),second.m_center);\n    second.m_center = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_center,1.0);\n    second.m_u = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_u,0.0);\n    second.m_v = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_v,0.0);\n    second.m_w = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_w,0.0);\n\n    /// first Obb max & min position\n    glm::vec3 fMinPos = first.m_center - first.m_size.x/2.0f * first.m_u - first.m_size.y / 2.0f * first.m_v - first.m_size.z/2.0f * first.m_w;\n    glm::vec3 fMaxPos = first.m_center + first.m_size.x/2.0f * first.m_u + first.m_size.y / 2.0f * first.m_v + first.m_size.z/2.0f * first.m_w;\n\n    /// 计算second OBB 的最大最小点\n    std::array<glm::vec3,8> secondPos;\n    {\n        /// 右手系\n        // m_center + vector * size\n        secondPos[0] = second.m_center - second.m_u * second.m_size.x * 0.5f -\n                second.m_v * second.m_size.y * 0.5f -  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[1] = second.m_center - second.m_u * second.m_size.x * 0.5f -\n                       second.m_v * second.m_size.y * 0.5f +  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[2] = second.m_center - second.m_u * second.m_size.x * 0.5f +\n                       second.m_v * second.m_size.y * 0.5f - second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[3] = second.m_center - second.m_u * second.m_size.x * 0.5f +\n                       second.m_v * second.m_size.y * 0.5f +  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[4] = second.m_center + second.m_u * second.m_size.x * 0.5f -\n                       second.m_v * second.m_size.y * 0.5f -  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[5] = second.m_center + second.m_u * second.m_size.x * 0.5f -\n                       second.m_v * second.m_size.y * 0.5f +  second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[6] = second.m_center + second.m_u * second.m_size.x * 0.5f +\n                       second.m_v * second.m_size.y * 0.5f - second.m_w * second.m_size.z * 0.5f;\n\n        secondPos[7] = second.m_center + second.m_u * second.m_size.x * 0.5f +\n                       second.m_v * second.m_size.y * 0.5f +  second.m_w * second.m_size.z * 0.5f;\n    }\n\n    glm::vec3 sMinPos{secondPos[0]};\n    glm::vec3 sMaxPos{secondPos[0]};\n\n    for(auto & it : secondPos)\n    {\n        sMinPos.x = sMinPos.x > it.x? it.x:sMinPos.x;\n        sMinPos.y = sMinPos.y > it.y? it.y:sMinPos.y;\n        sMinPos.z = sMinPos.z > it.z? it.z:sMinPos.z;\n\n        sMaxPos.x = sMaxPos.x < it.x? it.x:sMaxPos.x;\n        sMaxPos.y = sMaxPos.y < it.y? it.y:sMaxPos.y;\n        sMaxPos.z = sMaxPos.z < it.z? it.z:sMaxPos.z;\n    }\n\n    /// 计算\n    if(\n        (fMinPos.x > sMaxPos.x || sMinPos.x > fMaxPos.x) ||\n        (fMinPos.y > sMaxPos.y || sMinPos.y > fMaxPos.y) ||\n        (fMinPos.z > sMaxPos.z || sMinPos.z > fMaxPos.z)\n    )\n    {\n        return false;\n    }\n\n    return true;\n}\n```\n\n- 当然也可以直接使用其他的方式计算`OBB`的求交，分离轴使用相对较多，可以直接投影`OBB`的最大最小的点到由`OBB`确定的投影轴上,包含15跟轴\n- `OBB A`的三个轴向,`OBB B`的三个轴向 6 根。\n- 两个`OBB`各自轴向的叉积 => 3*3 = 9。\n","slug":"OBB与OBB求交","published":1,"updated":"2022-09-25T14:29:09.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravi000x7cdaemcd7b6n","content":"<p>OBB 全称为 Oriented Bound Box，译为有朝向的包围盒。OBB 常与\r\nAABB(Axis-Aligned Bound Box) 对比：AABB 的边与轴平行，而 OBB\r\n的边则与物体的朝向有关。</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"obb求交介绍\">OBB求交介绍</h3>\r\n<ul>\r\n<li>采用分离轴的方式计算</li>\r\n<li>两个凸包多边形，当且仅当存在一条线，这两个多边形在这条线上的投影不相交，则这两个多边形也不相交.</li>\r\n<li>这条线称为<code>Separating Axis</code>.垂直<code>Separating Axis</code>存在一条<code>Separating Line</code>将两个多边形分开。</li>\r\n</ul>\r\n<h4 id=\"obb-to-aabb\">OBB to AABB</h4>\r\n<ul>\r\n<li>我们采用一个稍微容易理解的方法完成这种计算 -\r\n将<code>OBB</code>转换为<code>AABB</code></li>\r\n<li>然后使用<code>AABB</code>o\r\n求交的计算方式去算<code>OBB</code>的相交</li>\r\n</ul>\r\n<h3 id=\"aabb的定义\"><code>AABB</code>的定义</h3>\r\n<ul>\r\n<li><code>AABB</code>既是<code>Axis-aligned Bounding Box</code></li>\r\n</ul>\r\n<center>\r\n<img src=https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/define_aabb.png></img>\r\n</center>\r\n<ul>\r\n<li>简单由定义两个最大最小点完成定义，一个<code>OBB</code>也可以描述一个<code>AABB</code></li>\r\n</ul>\r\n<h3 id=\"obb的定义\">OBB的定义</h3>\r\n<ul>\r\n<li><code>m_center</code> 中点位置</li>\r\n<li><code>size</code> 盒子的大小(尺寸)</li>\r\n<li><span class=\"math inline\">\\(\\vec{u},\\vec{v},\\vec{w}\\)</span>,\r\n坐标系的轴向(与面的法相一样)</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">OBB</span></span></span><br><span class=\"line\"><span class=\"class\">///&lt;</span> 右手系</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OBB(<span class=\"keyword\">const</span> vec3 &amp; pos,<span class=\"keyword\">const</span> vec3 &amp; size)</span><br><span class=\"line\">        : m_pos(pos)</span><br><span class=\"line\">        , m_size(size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    OBB(<span class=\"keyword\">const</span> vec3&amp; pos, <span class=\"keyword\">const</span> vec3&amp; size, <span class=\"keyword\">const</span> vec3&amp; u, <span class=\"keyword\">const</span> vec3&amp; v, <span class=\"keyword\">const</span> vec3&amp; w)</span><br><span class=\"line\">        : m_pos(pos)</span><br><span class=\"line\">        , m_size(size) </span><br><span class=\"line\">        , m_u(u)</span><br><span class=\"line\">        , m_v(v)</span><br><span class=\"line\">        , m_w(w)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vec3 m_pos&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;   <span class=\"comment\">///&lt; pos </span></span><br><span class=\"line\">    vec3 m_size&#123; <span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span> &#125;;  <span class=\"comment\">///&lt; 长宽高 x = 长 y = 宽 z = 高</span></span><br><span class=\"line\">    vec3 m_u&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;     <span class=\"comment\">///&lt; x</span></span><br><span class=\"line\">    vec3 m_v&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;;     <span class=\"comment\">///&lt; y </span></span><br><span class=\"line\">    vec3 m_w&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;;     <span class=\"comment\">///&lt; z </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"aabb求交\"><code>AABB</code>求交</h3>\r\n<ul>\r\n<li>根据分离轴定理，对于<code>AABB</code>我们只需要计算最大最小的点在标准的<span\r\nclass=\"math inline\">\\({\\vec{x},\\vec{y},\\vec{z}}\\)</span>轴上的投影是否相交即可，实现起来比较简单</li>\r\n</ul>\r\n<h4 id=\"code\">code</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">intersectObbWithObb</span><span class=\"params\">(OBB &amp;first, OBB &amp;second)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> fRes  = computerOBBIntersecte(first,second);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> sRes = computerOBBIntersecte(second,first);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (fRes&amp;sRes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">computerOBBIntersecte</span><span class=\"params\">(OBB first, OBB second)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// first</span></span><br><span class=\"line\">    first.m_trans = glm::translate(glm::mat4(<span class=\"number\">1.0f</span>),-first.m_center);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> rotate = glm::mat4(glm::vec4(first.m_u, <span class=\"number\">0.0</span>), glm::vec4(first.m_v, <span class=\"number\">0.0</span>), glm::vec4(first.m_w, <span class=\"number\">0.0</span>), glm::vec4(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1.0</span>));</span><br><span class=\"line\">    rotate = glm::transpose(rotate);</span><br><span class=\"line\">    first.m_rotate = rotate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将第一个matrix变换到第一个变换矩阵描述的空间</span></span><br><span class=\"line\">    first.m_center = first.m_rotate * first.m_trans * glm::vec4(first.m_center,<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    first.m_u = first.m_rotate * first.m_trans * glm::vec4(first.m_u,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    first.m_v = first.m_rotate * first.m_trans * glm::vec4(first.m_v,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    first.m_w = first.m_rotate * first.m_trans * glm::vec4(first.m_w,<span class=\"number\">0.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 second 变换到对应的空间中</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> trans2Origin = glm::translate(glm::mat4(<span class=\"number\">1.0</span>),-second.m_center);</span><br><span class=\"line\">    second.m_trans = trans2Origin;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> transRestore = glm::translate(glm::mat4(<span class=\"number\">1.0</span>),second.m_center);</span><br><span class=\"line\">    second.m_center = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_center,<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    second.m_u = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_u,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    second.m_v = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_v,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    second.m_w = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_w,<span class=\"number\">0.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// first Obb max &amp; min position</span></span><br><span class=\"line\">    glm::vec3 fMinPos = first.m_center - first.m_size.x/<span class=\"number\">2.0f</span> * first.m_u - first.m_size.y / <span class=\"number\">2.0f</span> * first.m_v - first.m_size.z/<span class=\"number\">2.0f</span> * first.m_w;</span><br><span class=\"line\">    glm::vec3 fMaxPos = first.m_center + first.m_size.x/<span class=\"number\">2.0f</span> * first.m_u + first.m_size.y / <span class=\"number\">2.0f</span> * first.m_v + first.m_size.z/<span class=\"number\">2.0f</span> * first.m_w;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 计算second OBB 的最大最小点</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,8&gt; secondPos;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 右手系</span></span><br><span class=\"line\">        <span class=\"comment\">// m_center + vector * size</span></span><br><span class=\"line\">        secondPos[<span class=\"number\">0</span>] = second.m_center - second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> -</span><br><span class=\"line\">                second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> -  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">1</span>] = second.m_center - second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> -</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> +  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">2</span>] = second.m_center - second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> +</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> - second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">3</span>] = second.m_center - second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> +</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> +  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">4</span>] = second.m_center + second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> -</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> -  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">5</span>] = second.m_center + second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> -</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> +  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">6</span>] = second.m_center + second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> +</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> - second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">7</span>] = second.m_center + second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> +</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> +  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    glm::vec3 sMinPos&#123;secondPos[<span class=\"number\">0</span>]&#125;;</span><br><span class=\"line\">    glm::vec3 sMaxPos&#123;secondPos[<span class=\"number\">0</span>]&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; it : secondPos)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sMinPos.x = sMinPos.x &gt; it.x? it.x:sMinPos.x;</span><br><span class=\"line\">        sMinPos.y = sMinPos.y &gt; it.y? it.y:sMinPos.y;</span><br><span class=\"line\">        sMinPos.z = sMinPos.z &gt; it.z? it.z:sMinPos.z;</span><br><span class=\"line\"></span><br><span class=\"line\">        sMaxPos.x = sMaxPos.x &lt; it.x? it.x:sMaxPos.x;</span><br><span class=\"line\">        sMaxPos.y = sMaxPos.y &lt; it.y? it.y:sMaxPos.y;</span><br><span class=\"line\">        sMaxPos.z = sMaxPos.z &lt; it.z? it.z:sMaxPos.z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(</span><br><span class=\"line\">        (fMinPos.x &gt; sMaxPos.x || sMinPos.x &gt; fMaxPos.x) ||</span><br><span class=\"line\">        (fMinPos.y &gt; sMaxPos.y || sMinPos.y &gt; fMaxPos.y) ||</span><br><span class=\"line\">        (fMinPos.z &gt; sMaxPos.z || sMinPos.z &gt; fMaxPos.z)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>当然也可以直接使用其他的方式计算<code>OBB</code>的求交，分离轴使用相对较多，可以直接投影<code>OBB</code>的最大最小的点到由<code>OBB</code>确定的投影轴上,包含15跟轴</li>\r\n<li><code>OBB A</code>的三个轴向,<code>OBB B</code>的三个轴向 6\r\n根。</li>\r\n<li>两个<code>OBB</code>各自轴向的叉积 =&gt; 3*3 = 9。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>OBB 全称为 Oriented Bound Box，译为有朝向的包围盒。OBB 常与\r\nAABB(Axis-Aligned Bound Box) 对比：AABB 的边与轴平行，而 OBB\r\n的边则与物体的朝向有关。</p>","more":"<h3 id=\"obb求交介绍\">OBB求交介绍</h3>\r\n<ul>\r\n<li>采用分离轴的方式计算</li>\r\n<li>两个凸包多边形，当且仅当存在一条线，这两个多边形在这条线上的投影不相交，则这两个多边形也不相交.</li>\r\n<li>这条线称为<code>Separating Axis</code>.垂直<code>Separating Axis</code>存在一条<code>Separating Line</code>将两个多边形分开。</li>\r\n</ul>\r\n<h4 id=\"obb-to-aabb\">OBB to AABB</h4>\r\n<ul>\r\n<li>我们采用一个稍微容易理解的方法完成这种计算 -\r\n将<code>OBB</code>转换为<code>AABB</code></li>\r\n<li>然后使用<code>AABB</code>o\r\n求交的计算方式去算<code>OBB</code>的相交</li>\r\n</ul>\r\n<h3 id=\"aabb的定义\"><code>AABB</code>的定义</h3>\r\n<ul>\r\n<li><code>AABB</code>既是<code>Axis-aligned Bounding Box</code></li>\r\n</ul>\r\n<center>\r\n<img src=https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/define_aabb.png></img>\r\n</center>\r\n<ul>\r\n<li>简单由定义两个最大最小点完成定义，一个<code>OBB</code>也可以描述一个<code>AABB</code></li>\r\n</ul>\r\n<h3 id=\"obb的定义\">OBB的定义</h3>\r\n<ul>\r\n<li><code>m_center</code> 中点位置</li>\r\n<li><code>size</code> 盒子的大小(尺寸)</li>\r\n<li><span class=\"math inline\">\\(\\vec{u},\\vec{v},\\vec{w}\\)</span>,\r\n坐标系的轴向(与面的法相一样)</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">OBB</span></span></span><br><span class=\"line\"><span class=\"class\">///&lt;</span> 右手系</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OBB(<span class=\"keyword\">const</span> vec3 &amp; pos,<span class=\"keyword\">const</span> vec3 &amp; size)</span><br><span class=\"line\">        : m_pos(pos)</span><br><span class=\"line\">        , m_size(size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    OBB(<span class=\"keyword\">const</span> vec3&amp; pos, <span class=\"keyword\">const</span> vec3&amp; size, <span class=\"keyword\">const</span> vec3&amp; u, <span class=\"keyword\">const</span> vec3&amp; v, <span class=\"keyword\">const</span> vec3&amp; w)</span><br><span class=\"line\">        : m_pos(pos)</span><br><span class=\"line\">        , m_size(size) </span><br><span class=\"line\">        , m_u(u)</span><br><span class=\"line\">        , m_v(v)</span><br><span class=\"line\">        , m_w(w)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vec3 m_pos&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;   <span class=\"comment\">///&lt; pos </span></span><br><span class=\"line\">    vec3 m_size&#123; <span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span> &#125;;  <span class=\"comment\">///&lt; 长宽高 x = 长 y = 宽 z = 高</span></span><br><span class=\"line\">    vec3 m_u&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;     <span class=\"comment\">///&lt; x</span></span><br><span class=\"line\">    vec3 m_v&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;;     <span class=\"comment\">///&lt; y </span></span><br><span class=\"line\">    vec3 m_w&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;;     <span class=\"comment\">///&lt; z </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"aabb求交\"><code>AABB</code>求交</h3>\r\n<ul>\r\n<li>根据分离轴定理，对于<code>AABB</code>我们只需要计算最大最小的点在标准的<span\r\nclass=\"math inline\">\\({\\vec{x},\\vec{y},\\vec{z}}\\)</span>轴上的投影是否相交即可，实现起来比较简单</li>\r\n</ul>\r\n<h4 id=\"code\">code</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">intersectObbWithObb</span><span class=\"params\">(OBB &amp;first, OBB &amp;second)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> fRes  = computerOBBIntersecte(first,second);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> sRes = computerOBBIntersecte(second,first);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (fRes&amp;sRes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">computerOBBIntersecte</span><span class=\"params\">(OBB first, OBB second)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// first</span></span><br><span class=\"line\">    first.m_trans = glm::translate(glm::mat4(<span class=\"number\">1.0f</span>),-first.m_center);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> rotate = glm::mat4(glm::vec4(first.m_u, <span class=\"number\">0.0</span>), glm::vec4(first.m_v, <span class=\"number\">0.0</span>), glm::vec4(first.m_w, <span class=\"number\">0.0</span>), glm::vec4(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1.0</span>));</span><br><span class=\"line\">    rotate = glm::transpose(rotate);</span><br><span class=\"line\">    first.m_rotate = rotate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将第一个matrix变换到第一个变换矩阵描述的空间</span></span><br><span class=\"line\">    first.m_center = first.m_rotate * first.m_trans * glm::vec4(first.m_center,<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    first.m_u = first.m_rotate * first.m_trans * glm::vec4(first.m_u,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    first.m_v = first.m_rotate * first.m_trans * glm::vec4(first.m_v,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    first.m_w = first.m_rotate * first.m_trans * glm::vec4(first.m_w,<span class=\"number\">0.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将 second 变换到对应的空间中</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> trans2Origin = glm::translate(glm::mat4(<span class=\"number\">1.0</span>),-second.m_center);</span><br><span class=\"line\">    second.m_trans = trans2Origin;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> transRestore = glm::translate(glm::mat4(<span class=\"number\">1.0</span>),second.m_center);</span><br><span class=\"line\">    second.m_center = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_center,<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    second.m_u = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_u,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    second.m_v = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_v,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    second.m_w = first.m_trans * transRestore * first.m_rotate * second.m_trans * glm::vec4(second.m_w,<span class=\"number\">0.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// first Obb max &amp; min position</span></span><br><span class=\"line\">    glm::vec3 fMinPos = first.m_center - first.m_size.x/<span class=\"number\">2.0f</span> * first.m_u - first.m_size.y / <span class=\"number\">2.0f</span> * first.m_v - first.m_size.z/<span class=\"number\">2.0f</span> * first.m_w;</span><br><span class=\"line\">    glm::vec3 fMaxPos = first.m_center + first.m_size.x/<span class=\"number\">2.0f</span> * first.m_u + first.m_size.y / <span class=\"number\">2.0f</span> * first.m_v + first.m_size.z/<span class=\"number\">2.0f</span> * first.m_w;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 计算second OBB 的最大最小点</span></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;glm::vec3,8&gt; secondPos;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 右手系</span></span><br><span class=\"line\">        <span class=\"comment\">// m_center + vector * size</span></span><br><span class=\"line\">        secondPos[<span class=\"number\">0</span>] = second.m_center - second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> -</span><br><span class=\"line\">                second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> -  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">1</span>] = second.m_center - second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> -</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> +  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">2</span>] = second.m_center - second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> +</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> - second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">3</span>] = second.m_center - second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> +</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> +  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">4</span>] = second.m_center + second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> -</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> -  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">5</span>] = second.m_center + second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> -</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> +  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">6</span>] = second.m_center + second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> +</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> - second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        secondPos[<span class=\"number\">7</span>] = second.m_center + second.m_u * second.m_size.x * <span class=\"number\">0.5f</span> +</span><br><span class=\"line\">                       second.m_v * second.m_size.y * <span class=\"number\">0.5f</span> +  second.m_w * second.m_size.z * <span class=\"number\">0.5f</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    glm::vec3 sMinPos&#123;secondPos[<span class=\"number\">0</span>]&#125;;</span><br><span class=\"line\">    glm::vec3 sMaxPos&#123;secondPos[<span class=\"number\">0</span>]&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp; it : secondPos)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sMinPos.x = sMinPos.x &gt; it.x? it.x:sMinPos.x;</span><br><span class=\"line\">        sMinPos.y = sMinPos.y &gt; it.y? it.y:sMinPos.y;</span><br><span class=\"line\">        sMinPos.z = sMinPos.z &gt; it.z? it.z:sMinPos.z;</span><br><span class=\"line\"></span><br><span class=\"line\">        sMaxPos.x = sMaxPos.x &lt; it.x? it.x:sMaxPos.x;</span><br><span class=\"line\">        sMaxPos.y = sMaxPos.y &lt; it.y? it.y:sMaxPos.y;</span><br><span class=\"line\">        sMaxPos.z = sMaxPos.z &lt; it.z? it.z:sMaxPos.z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// 计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(</span><br><span class=\"line\">        (fMinPos.x &gt; sMaxPos.x || sMinPos.x &gt; fMaxPos.x) ||</span><br><span class=\"line\">        (fMinPos.y &gt; sMaxPos.y || sMinPos.y &gt; fMaxPos.y) ||</span><br><span class=\"line\">        (fMinPos.z &gt; sMaxPos.z || sMinPos.z &gt; fMaxPos.z)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>当然也可以直接使用其他的方式计算<code>OBB</code>的求交，分离轴使用相对较多，可以直接投影<code>OBB</code>的最大最小的点到由<code>OBB</code>确定的投影轴上,包含15跟轴</li>\r\n<li><code>OBB A</code>的三个轴向,<code>OBB B</code>的三个轴向 6\r\n根。</li>\r\n<li>两个<code>OBB</code>各自轴向的叉积 =&gt; 3*3 = 9。</li>\r\n</ul>"},{"title":"OSG-HUD","date":"2021-07-26T14:40:11.000Z","_content":"\n<p>\n&ensp;&ensp;<code>OSG</code>HUD...\n</p>\n\n<!-- more -->\n\n# OSG-HUD\n\n- <p>\"HUD\"在渲染的场景中算是比较常见的存在: 游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...</p>\n\n<b style=\"color:red\">如何创建HUD ？</b> \n\n<p>本质上说，HUD就是一个相机( 在`OSG`中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行</p>\n\n<b style=\"color:red\">实现要点，如下：</b>\n\n- 关闭节点的光照，保证整个视口显示的场景的亮度是一样的。\n- 关闭深度测试\n- 调整渲染的顺序为最后渲染，让`HUD`显示在整个场景的最前方\n- 设置参考帧为绝对参考帧\n- 设置变换矩阵,不受父节点的影响\n- 设置投影矩阵(平行投影或者透视),设置视口的大小。\n\n\n\n## Create HUD\n\n### 1、创建相机节点\n\n```C++\nosg::ref_ptr<osg::Camera> hud_camera = new osg::Camera;   // 创建相机的节点\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;      // 创建绘制的节点(也可以是文字)\n```\n\n### 2、设置投影矩阵\n\n```C++\nhud_camera->setProjectionMatrixAsOrtho2D(-3, 4, -3, 4, -1.0, 100);  // 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小\n```\n\n### 3、设置视口大小(ViewPort)\n\n```C++\n// void setViewport(osg::Viewport* viewport);\n// void setViewport(int x,int y,int width,int height);\nhud_camera->setviewport();  // 两种方式都是可以的 \n```\n\n### 4、设置渲染的顺序\n\n```C++\nhud_camera->setRenderOrder(osg::Camera::POST_RENDER);\n```\n\n### 5、设置参考帧\n\n```C++\nhud_camera->setReferenceFrame(osg::Transform::ABSOLUTE_RF);\n```\n\n### 6、设置不受父节点的影响\n\n```C++\nhud_camera->setViewMatrix(osg::Matrix::identity());\n```\n\n### 7、设置不获取焦点\n\n```C++\nhud_camera->setAllowEventFocus(false);\n```\n\n### 8、设置节点的更新回调\n\n```C++\n// void setUpdateCallback(Callback* nc);\n// 需要重写一个节点的更新回调 修改节点的视图矩阵 \n// 设置相机的三个参数  \n// 视点 相机的位置 相机的向上方向\nhud_camera->setUpdateCallback();\n```\n\n## 挂载节点\n\n### 1、将前面创建的几何节点挂载到 相机上\n\n```C++\nosg::ref_ptr<osg::Geode> node = new osg::Geode;\nnode->addChild(geom.get());\nhud_camera->addChild(node.get());\n```\n\n### 2、设置节点的属性\n\n- 关闭光照 深度测试 & 打开混溶\n\n```C++\nauto states = node->getOrCreateStateSet();\nstates->setMode(GL_LIGHTING, osg::StateAttribute::ON);   //关闭灯光\nstates->setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);//关闭深度测试\nstates->setMode(GL_BLEND, osg::StateAttribute::ON);  \n```\n\n\n\n","source":"_posts/OSG-HUD.md","raw":"---\ntitle: OSG-HUD\ndate: 2021-07-26 22:40:11\ncategories:\n - works\n - GF\ntags:\n- cpp\n- osg\n---\n\n<p>\n&ensp;&ensp;<code>OSG</code>HUD...\n</p>\n\n<!-- more -->\n\n# OSG-HUD\n\n- <p>\"HUD\"在渲染的场景中算是比较常见的存在: 游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...</p>\n\n<b style=\"color:red\">如何创建HUD ？</b> \n\n<p>本质上说，HUD就是一个相机( 在`OSG`中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行</p>\n\n<b style=\"color:red\">实现要点，如下：</b>\n\n- 关闭节点的光照，保证整个视口显示的场景的亮度是一样的。\n- 关闭深度测试\n- 调整渲染的顺序为最后渲染，让`HUD`显示在整个场景的最前方\n- 设置参考帧为绝对参考帧\n- 设置变换矩阵,不受父节点的影响\n- 设置投影矩阵(平行投影或者透视),设置视口的大小。\n\n\n\n## Create HUD\n\n### 1、创建相机节点\n\n```C++\nosg::ref_ptr<osg::Camera> hud_camera = new osg::Camera;   // 创建相机的节点\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry;      // 创建绘制的节点(也可以是文字)\n```\n\n### 2、设置投影矩阵\n\n```C++\nhud_camera->setProjectionMatrixAsOrtho2D(-3, 4, -3, 4, -1.0, 100);  // 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小\n```\n\n### 3、设置视口大小(ViewPort)\n\n```C++\n// void setViewport(osg::Viewport* viewport);\n// void setViewport(int x,int y,int width,int height);\nhud_camera->setviewport();  // 两种方式都是可以的 \n```\n\n### 4、设置渲染的顺序\n\n```C++\nhud_camera->setRenderOrder(osg::Camera::POST_RENDER);\n```\n\n### 5、设置参考帧\n\n```C++\nhud_camera->setReferenceFrame(osg::Transform::ABSOLUTE_RF);\n```\n\n### 6、设置不受父节点的影响\n\n```C++\nhud_camera->setViewMatrix(osg::Matrix::identity());\n```\n\n### 7、设置不获取焦点\n\n```C++\nhud_camera->setAllowEventFocus(false);\n```\n\n### 8、设置节点的更新回调\n\n```C++\n// void setUpdateCallback(Callback* nc);\n// 需要重写一个节点的更新回调 修改节点的视图矩阵 \n// 设置相机的三个参数  \n// 视点 相机的位置 相机的向上方向\nhud_camera->setUpdateCallback();\n```\n\n## 挂载节点\n\n### 1、将前面创建的几何节点挂载到 相机上\n\n```C++\nosg::ref_ptr<osg::Geode> node = new osg::Geode;\nnode->addChild(geom.get());\nhud_camera->addChild(node.get());\n```\n\n### 2、设置节点的属性\n\n- 关闭光照 深度测试 & 打开混溶\n\n```C++\nauto states = node->getOrCreateStateSet();\nstates->setMode(GL_LIGHTING, osg::StateAttribute::ON);   //关闭灯光\nstates->setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);//关闭深度测试\nstates->setMode(GL_BLEND, osg::StateAttribute::ON);  \n```\n\n\n\n","slug":"OSG-HUD","published":1,"updated":"2022-08-21T15:34:56.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravj000y7cdagqa21otl","content":"<p>\r\n  <code>OSG</code>HUD...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"osg-hud\">OSG-HUD</h1>\r\n<ul>\r\n<li><p>\r\n\"HUD\"在渲染的场景中算是比较常见的存在:\r\n游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...\r\n</p></li>\r\n</ul>\r\n<p><b style=\"color:red\">如何创建HUD ？</b></p>\r\n<p>\r\n本质上说，HUD就是一个相机(\r\n在<code>OSG</code>中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行\r\n</p>\r\n<p><b style=\"color:red\">实现要点，如下：</b></p>\r\n<ul>\r\n<li>关闭节点的光照，保证整个视口显示的场景的亮度是一样的。</li>\r\n<li>关闭深度测试</li>\r\n<li>调整渲染的顺序为最后渲染，让<code>HUD</code>显示在整个场景的最前方</li>\r\n<li>设置参考帧为绝对参考帧</li>\r\n<li>设置变换矩阵,不受父节点的影响</li>\r\n<li>设置投影矩阵(平行投影或者透视),设置视口的大小。</li>\r\n</ul>\r\n<h2 id=\"create-hud\">Create HUD</h2>\r\n<h3 id=\"创建相机节点\">1、创建相机节点</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Camera&gt; hud_camera = <span class=\"keyword\">new</span> osg::Camera;   <span class=\"comment\">// 创建相机的节点</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;      <span class=\"comment\">// 创建绘制的节点(也可以是文字)</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置投影矩阵\">2、设置投影矩阵</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setProjectionMatrixAsOrtho2D(<span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-1.0</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置视口大小viewport\">3、设置视口大小(ViewPort)</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setViewport(osg::Viewport* viewport);</span></span><br><span class=\"line\"><span class=\"comment\">// void setViewport(int x,int y,int width,int height);</span></span><br><span class=\"line\">hud_camera-&gt;setviewport();  <span class=\"comment\">// 两种方式都是可以的 </span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置渲染的顺序\">4、设置渲染的顺序</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setRenderOrder(osg::Camera::POST_RENDER);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置参考帧\">5、设置参考帧</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setReferenceFrame(osg::Transform::ABSOLUTE_RF);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置不受父节点的影响\">6、设置不受父节点的影响</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setViewMatrix(osg::Matrix::identity());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置不获取焦点\">7、设置不获取焦点</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setAllowEventFocus(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置节点的更新回调\">8、设置节点的更新回调</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setUpdateCallback(Callback* nc);</span></span><br><span class=\"line\"><span class=\"comment\">// 需要重写一个节点的更新回调 修改节点的视图矩阵 </span></span><br><span class=\"line\"><span class=\"comment\">// 设置相机的三个参数  </span></span><br><span class=\"line\"><span class=\"comment\">// 视点 相机的位置 相机的向上方向</span></span><br><span class=\"line\">hud_camera-&gt;setUpdateCallback();</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"挂载节点\">挂载节点</h2>\r\n<h3 id=\"将前面创建的几何节点挂载到-相机上\">1、将前面创建的几何节点挂载到\r\n相机上</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Geode&gt; node = <span class=\"keyword\">new</span> osg::Geode;</span><br><span class=\"line\">node-&gt;addChild(geom.get());</span><br><span class=\"line\">hud_camera-&gt;addChild(node.get());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置节点的属性\">2、设置节点的属性</h3>\r\n<ul>\r\n<li>关闭光照 深度测试 &amp; 打开混溶</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> states = node-&gt;getOrCreateStateSet();</span><br><span class=\"line\">states-&gt;setMode(GL_LIGHTING, osg::StateAttribute::ON);   <span class=\"comment\">//关闭灯光</span></span><br><span class=\"line\">states-&gt;setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);<span class=\"comment\">//关闭深度测试</span></span><br><span class=\"line\">states-&gt;setMode(GL_BLEND, osg::StateAttribute::ON);  </span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>OSG</code>HUD...\r\n</p>","more":"<h1 id=\"osg-hud\">OSG-HUD</h1>\r\n<ul>\r\n<li><p>\r\n\"HUD\"在渲染的场景中算是比较常见的存在:\r\n游戏中的小地图(上帝视角)、实时状态、显示鼠标的实时位置、三维视角...\r\n</p></li>\r\n</ul>\r\n<p><b style=\"color:red\">如何创建HUD ？</b></p>\r\n<p>\r\n本质上说，HUD就是一个相机(\r\n在<code>OSG</code>中可以作为节点)，只是不响应鼠标的操作。只需要设置好相关的参数，添加到场景的根节点就行\r\n</p>\r\n<p><b style=\"color:red\">实现要点，如下：</b></p>\r\n<ul>\r\n<li>关闭节点的光照，保证整个视口显示的场景的亮度是一样的。</li>\r\n<li>关闭深度测试</li>\r\n<li>调整渲染的顺序为最后渲染，让<code>HUD</code>显示在整个场景的最前方</li>\r\n<li>设置参考帧为绝对参考帧</li>\r\n<li>设置变换矩阵,不受父节点的影响</li>\r\n<li>设置投影矩阵(平行投影或者透视),设置视口的大小。</li>\r\n</ul>\r\n<h2 id=\"create-hud\">Create HUD</h2>\r\n<h3 id=\"创建相机节点\">1、创建相机节点</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Camera&gt; hud_camera = <span class=\"keyword\">new</span> osg::Camera;   <span class=\"comment\">// 创建相机的节点</span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry;      <span class=\"comment\">// 创建绘制的节点(也可以是文字)</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置投影矩阵\">2、设置投影矩阵</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setProjectionMatrixAsOrtho2D(<span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">4</span>, <span class=\"number\">-1.0</span>, <span class=\"number\">100</span>);  <span class=\"comment\">// 2D 也可以 此处设置表示你裁剪的三维空间的实际的能表示的数值的大小</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置视口大小viewport\">3、设置视口大小(ViewPort)</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setViewport(osg::Viewport* viewport);</span></span><br><span class=\"line\"><span class=\"comment\">// void setViewport(int x,int y,int width,int height);</span></span><br><span class=\"line\">hud_camera-&gt;setviewport();  <span class=\"comment\">// 两种方式都是可以的 </span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置渲染的顺序\">4、设置渲染的顺序</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setRenderOrder(osg::Camera::POST_RENDER);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置参考帧\">5、设置参考帧</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setReferenceFrame(osg::Transform::ABSOLUTE_RF);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置不受父节点的影响\">6、设置不受父节点的影响</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setViewMatrix(osg::Matrix::identity());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置不获取焦点\">7、设置不获取焦点</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hud_camera-&gt;setAllowEventFocus(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置节点的更新回调\">8、设置节点的更新回调</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// void setUpdateCallback(Callback* nc);</span></span><br><span class=\"line\"><span class=\"comment\">// 需要重写一个节点的更新回调 修改节点的视图矩阵 </span></span><br><span class=\"line\"><span class=\"comment\">// 设置相机的三个参数  </span></span><br><span class=\"line\"><span class=\"comment\">// 视点 相机的位置 相机的向上方向</span></span><br><span class=\"line\">hud_camera-&gt;setUpdateCallback();</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"挂载节点\">挂载节点</h2>\r\n<h3 id=\"将前面创建的几何节点挂载到-相机上\">1、将前面创建的几何节点挂载到\r\n相机上</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::ref_ptr&lt;osg::Geode&gt; node = <span class=\"keyword\">new</span> osg::Geode;</span><br><span class=\"line\">node-&gt;addChild(geom.get());</span><br><span class=\"line\">hud_camera-&gt;addChild(node.get());</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"设置节点的属性\">2、设置节点的属性</h3>\r\n<ul>\r\n<li>关闭光照 深度测试 &amp; 打开混溶</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> states = node-&gt;getOrCreateStateSet();</span><br><span class=\"line\">states-&gt;setMode(GL_LIGHTING, osg::StateAttribute::ON);   <span class=\"comment\">//关闭灯光</span></span><br><span class=\"line\">states-&gt;setMode(GL_DEPTH_TEST, osg::StateAttribute::OFF);<span class=\"comment\">//关闭深度测试</span></span><br><span class=\"line\">states-&gt;setMode(GL_BLEND, osg::StateAttribute::ON);  </span><br></pre></td></tr></table></figure>"},{"title":"OBB与Ray求交","date":"2022-09-08T09:49:42.000Z","mathjax":true,"_content":"\n光先追踪的加速方法就是引入层次结构数据结构，计算光线与层次结构的相交，从而加速光线与场景的求交。\n<!--more-->\n\n## OBB与Ray求交\n\n- 我们在更之前的地方定义了一个`OBB`,往前翻一番也许就能找到\n  - $center$   - 盒子的中心点\n  - $\\vec{u}$  - 盒子的某个法线 $u$\n  - $\\vec{v}$  - 盒子的某个法线 $v$\n  - $\\vec{w}$  - 盒子的某个法线 $w$\n  - 盒子的尺寸 - $size\\left(h_u,h_v,h_w \\right )$\n\n- 同样的 我们曾经定义过一条射线\n  - $Ray \\left( P\\right ) = O + t \\cdot \\vec{u}$\n  - `Ray(P)` 射线上某一点\n  - `O` 射线的起点 \n  - `t` 沿着方向$\\vec{u}$前进的长度\n  - $\\vec{u}$ 射线的方向向量\n\n## slab method\n\n- 在OBB与光线的求交计算中，我们常用的方法是`slab method`\n  - 将我们测量的这个盒子分成三组平行的板\n  - 分别将光线与对应的板做相交计算，在射线的方向上，有一个进入这一组板的时间$t^{min}$，以及一个出板的时间$t^{max}$\n  - 分别计算对于三个面板的$t^{min}_{i},t^{max}_{i},i \\in \\left(u,v,w\\right)$\n  - 如果射线与盒子相交，那么简单的说这条射线一定有一段时间是处于这三个$t^{min},t^{max}$之中的。\n\n### 计算原理\n\n![intersection](https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/Ray_and_Obb_intersect.png \"Ray&OBB\")\n\n- $P_{min} = P + t_{min} \\cdot \\vec{u}$ - $1.0$\n- $P_{max} = P + t_{max} \\cdot \\vec{u}$ - $1.1$\n- $P_{i} = P + t \\cdot \\vec{u}$         - $1.2$\n\n- $\\left (P_{min} - C \\right) \\cdot \\vec{o_u} = min $  - $1.3$\n- $\\left (P_{max} - C \\right) \\cdot \\vec{o_u} = max $  - $1.4$\n\n- $1.0$式 & $1.1$式 带入 $1.3$式 & $1.4$式得到：\n$$\n\\left [ \\left (P + t_i \\cdot \\vec{u} \\right ) - C \\right ] \\cdot \\vec{O_n} = O_{Size.j} / 2.0, i \\in (min,max),j \\in (x,y,z), n \\in (u,v,w)\n$$\n=> 化简得:\n$$\nt_i = (O_{Size.i} / 2.0 - (C - P) \\cdot \\vec{O_n}) / (\\vec{u} \\cdot \\vec{O_n}), i \\in (min,max),j \\in (x,y,z), n \\in (u,v,w)\n$$\n\n### 求交实现\n\n```C++\nbool Intersect::IntersectObbWithRay(const OBB& obb, Ray & ray)\n{\n    auto delta = obb.m_center - ray.m_begin; // C- P\n    float t1, t2;    // 当前面交点在射线上的位置\n    double minT = DBL_MIN, maxT = DBL_MAX;\n\n    {\n        float e = glm::dot(delta, obb.m_u);\n        float f = glm::dot(ray.m_dir, obb.m_u);\n        if (std::abs(f) > 1e-20) // 判断当前面是否和射线平行 - 与法线垂直则会平行\n        {\n            t1 = (e + obb.m_size.x / 2.0) / f;\n            t2 = (e - obb.m_size.x / 2.0) / f;\n            if (t1 > t2)  // 交换 我们不知道当前的射线与目前检测的板的法相的方向是什么样的关系\n            {\n                auto temp = t1;\n                t1 = t2;\n                t2 = temp;\n            }\n\n            if (t1 > minT)\n            {\n                minT = t1;\n            }\n            if (t2 < maxT)\n            {\n                maxT = t2;\n            }\n            if (minT > maxT)   // 未发生相交\n            {\n                return false;\n            }\n            if (maxT < 0)  // 小于0表示不再正方向上，盒子在射线的后面\n            {\n                return false;\n            }\n        }\n        // 此时盒子与光线平行，我们需要看看盒子和光线的关系，如果光线在盒子内部则相交\n        else if (-e - obb.m_size.x / 2.0 > 0 || -e + obb.m_size.x / 2.0 < 0)\n        {\n            return false;\n        }\n    }\n\n    {\n        float e = glm::dot(delta, obb.m_v);\n        float f = glm::dot(ray.m_dir, obb.m_v);\n        if (std::abs(f) > 1e-20)\n        {\n            t1 = (e + obb.m_size.y / 2.0) / f;\n            t2 = (e - obb.m_size.y / 2.0) / f;\n            if (t1 > t2)\n            {\n                auto temp = t1;\n                t1 = t2;\n                t2 = temp;\n            }\n\n            if (t1 > minT)\n            {\n                minT = t1;\n            }\n            if (t2 < maxT)\n            {\n                maxT = t2;\n            }\n            if (minT > maxT)\n            {\n                return false;\n            }\n            if (maxT < 0)\n            {\n                return false;\n            }\n        }\n        else if (-e - obb.m_size.y / 2.0 > 0 || -e + obb.m_size.y / 2.0 < 0)\n        {\n            return false;\n        }\n    }\n\n    {\n        float e = glm::dot(delta, obb.m_w);\n        float f = glm::dot(ray.m_dir, obb.m_w);\n        if (std::abs(f) > 1e-20)\n        {\n            t1 = (e + obb.m_size.z / 2.0) / f;\n            t2 = (e - obb.m_size.z / 2.0) / f;\n            if (t1 > t2)\n            {\n                auto temp = t1;\n                t1 = t2;\n                t2 = temp;\n            }\n\n            if (t1 > minT)\n            {\n                minT = t1;\n            }\n            if (t2 < maxT)\n            {\n                maxT = t2;\n            }\n            if (minT > maxT)\n            {\n                return false;\n            }\n            if (maxT < 0)\n            {\n                return false;\n            }\n        }\n        else if (-e - obb.m_size.z / 2.0 > 0 || -e + obb.m_size.z / 2.0 < 0)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n```\n\n","source":"_posts/OBB与Ray求交.md","raw":"---\ntitle: OBB与Ray求交\ndate: 2022-09-08 17:49:42\nmathjax: true\ncategories:\n- Algorithm\n- Computer Graphics\ntags:\n- OBB\n- Intersect\n---\n\n光先追踪的加速方法就是引入层次结构数据结构，计算光线与层次结构的相交，从而加速光线与场景的求交。\n<!--more-->\n\n## OBB与Ray求交\n\n- 我们在更之前的地方定义了一个`OBB`,往前翻一番也许就能找到\n  - $center$   - 盒子的中心点\n  - $\\vec{u}$  - 盒子的某个法线 $u$\n  - $\\vec{v}$  - 盒子的某个法线 $v$\n  - $\\vec{w}$  - 盒子的某个法线 $w$\n  - 盒子的尺寸 - $size\\left(h_u,h_v,h_w \\right )$\n\n- 同样的 我们曾经定义过一条射线\n  - $Ray \\left( P\\right ) = O + t \\cdot \\vec{u}$\n  - `Ray(P)` 射线上某一点\n  - `O` 射线的起点 \n  - `t` 沿着方向$\\vec{u}$前进的长度\n  - $\\vec{u}$ 射线的方向向量\n\n## slab method\n\n- 在OBB与光线的求交计算中，我们常用的方法是`slab method`\n  - 将我们测量的这个盒子分成三组平行的板\n  - 分别将光线与对应的板做相交计算，在射线的方向上，有一个进入这一组板的时间$t^{min}$，以及一个出板的时间$t^{max}$\n  - 分别计算对于三个面板的$t^{min}_{i},t^{max}_{i},i \\in \\left(u,v,w\\right)$\n  - 如果射线与盒子相交，那么简单的说这条射线一定有一段时间是处于这三个$t^{min},t^{max}$之中的。\n\n### 计算原理\n\n![intersection](https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/Ray_and_Obb_intersect.png \"Ray&OBB\")\n\n- $P_{min} = P + t_{min} \\cdot \\vec{u}$ - $1.0$\n- $P_{max} = P + t_{max} \\cdot \\vec{u}$ - $1.1$\n- $P_{i} = P + t \\cdot \\vec{u}$         - $1.2$\n\n- $\\left (P_{min} - C \\right) \\cdot \\vec{o_u} = min $  - $1.3$\n- $\\left (P_{max} - C \\right) \\cdot \\vec{o_u} = max $  - $1.4$\n\n- $1.0$式 & $1.1$式 带入 $1.3$式 & $1.4$式得到：\n$$\n\\left [ \\left (P + t_i \\cdot \\vec{u} \\right ) - C \\right ] \\cdot \\vec{O_n} = O_{Size.j} / 2.0, i \\in (min,max),j \\in (x,y,z), n \\in (u,v,w)\n$$\n=> 化简得:\n$$\nt_i = (O_{Size.i} / 2.0 - (C - P) \\cdot \\vec{O_n}) / (\\vec{u} \\cdot \\vec{O_n}), i \\in (min,max),j \\in (x,y,z), n \\in (u,v,w)\n$$\n\n### 求交实现\n\n```C++\nbool Intersect::IntersectObbWithRay(const OBB& obb, Ray & ray)\n{\n    auto delta = obb.m_center - ray.m_begin; // C- P\n    float t1, t2;    // 当前面交点在射线上的位置\n    double minT = DBL_MIN, maxT = DBL_MAX;\n\n    {\n        float e = glm::dot(delta, obb.m_u);\n        float f = glm::dot(ray.m_dir, obb.m_u);\n        if (std::abs(f) > 1e-20) // 判断当前面是否和射线平行 - 与法线垂直则会平行\n        {\n            t1 = (e + obb.m_size.x / 2.0) / f;\n            t2 = (e - obb.m_size.x / 2.0) / f;\n            if (t1 > t2)  // 交换 我们不知道当前的射线与目前检测的板的法相的方向是什么样的关系\n            {\n                auto temp = t1;\n                t1 = t2;\n                t2 = temp;\n            }\n\n            if (t1 > minT)\n            {\n                minT = t1;\n            }\n            if (t2 < maxT)\n            {\n                maxT = t2;\n            }\n            if (minT > maxT)   // 未发生相交\n            {\n                return false;\n            }\n            if (maxT < 0)  // 小于0表示不再正方向上，盒子在射线的后面\n            {\n                return false;\n            }\n        }\n        // 此时盒子与光线平行，我们需要看看盒子和光线的关系，如果光线在盒子内部则相交\n        else if (-e - obb.m_size.x / 2.0 > 0 || -e + obb.m_size.x / 2.0 < 0)\n        {\n            return false;\n        }\n    }\n\n    {\n        float e = glm::dot(delta, obb.m_v);\n        float f = glm::dot(ray.m_dir, obb.m_v);\n        if (std::abs(f) > 1e-20)\n        {\n            t1 = (e + obb.m_size.y / 2.0) / f;\n            t2 = (e - obb.m_size.y / 2.0) / f;\n            if (t1 > t2)\n            {\n                auto temp = t1;\n                t1 = t2;\n                t2 = temp;\n            }\n\n            if (t1 > minT)\n            {\n                minT = t1;\n            }\n            if (t2 < maxT)\n            {\n                maxT = t2;\n            }\n            if (minT > maxT)\n            {\n                return false;\n            }\n            if (maxT < 0)\n            {\n                return false;\n            }\n        }\n        else if (-e - obb.m_size.y / 2.0 > 0 || -e + obb.m_size.y / 2.0 < 0)\n        {\n            return false;\n        }\n    }\n\n    {\n        float e = glm::dot(delta, obb.m_w);\n        float f = glm::dot(ray.m_dir, obb.m_w);\n        if (std::abs(f) > 1e-20)\n        {\n            t1 = (e + obb.m_size.z / 2.0) / f;\n            t2 = (e - obb.m_size.z / 2.0) / f;\n            if (t1 > t2)\n            {\n                auto temp = t1;\n                t1 = t2;\n                t2 = temp;\n            }\n\n            if (t1 > minT)\n            {\n                minT = t1;\n            }\n            if (t2 < maxT)\n            {\n                maxT = t2;\n            }\n            if (minT > maxT)\n            {\n                return false;\n            }\n            if (maxT < 0)\n            {\n                return false;\n            }\n        }\n        else if (-e - obb.m_size.z / 2.0 > 0 || -e + obb.m_size.z / 2.0 < 0)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n```\n\n","slug":"OBB与Ray求交","published":1,"updated":"2022-10-23T14:41:59.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravk00127cdaacj3cw4x","content":"<p>光先追踪的加速方法就是引入层次结构数据结构，计算光线与层次结构的相交，从而加速光线与场景的求交。\r\n<span id=\"more\"></span></p>\r\n<h2 id=\"obb与ray求交\">OBB与Ray求交</h2>\r\n<ul>\r\n<li>我们在更之前的地方定义了一个<code>OBB</code>,往前翻一番也许就能找到\r\n<ul>\r\n<li><span class=\"math inline\">\\(center\\)</span> - 盒子的中心点</li>\r\n<li><span class=\"math inline\">\\(\\vec{u}\\)</span> - 盒子的某个法线 <span\r\nclass=\"math inline\">\\(u\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{v}\\)</span> - 盒子的某个法线 <span\r\nclass=\"math inline\">\\(v\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{w}\\)</span> - 盒子的某个法线 <span\r\nclass=\"math inline\">\\(w\\)</span></li>\r\n<li>盒子的尺寸 - <span class=\"math inline\">\\(size\\left(h_u,h_v,h_w\r\n\\right )\\)</span></li>\r\n</ul></li>\r\n<li>同样的 我们曾经定义过一条射线\r\n<ul>\r\n<li><span class=\"math inline\">\\(Ray \\left( P\\right ) = O + t \\cdot\r\n\\vec{u}\\)</span></li>\r\n<li><code>Ray(P)</code> 射线上某一点</li>\r\n<li><code>O</code> 射线的起点</li>\r\n<li><code>t</code> 沿着方向<span\r\nclass=\"math inline\">\\(\\vec{u}\\)</span>前进的长度</li>\r\n<li><span class=\"math inline\">\\(\\vec{u}\\)</span> 射线的方向向量</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"slab-method\">slab method</h2>\r\n<ul>\r\n<li>在OBB与光线的求交计算中，我们常用的方法是<code>slab method</code>\r\n<ul>\r\n<li>将我们测量的这个盒子分成三组平行的板</li>\r\n<li>分别将光线与对应的板做相交计算，在射线的方向上，有一个进入这一组板的时间<span\r\nclass=\"math inline\">\\(t^{min}\\)</span>，以及一个出板的时间<span\r\nclass=\"math inline\">\\(t^{max}\\)</span></li>\r\n<li>分别计算对于三个面板的<span\r\nclass=\"math inline\">\\(t^{min}_{i},t^{max}_{i},i \\in\r\n\\left(u,v,w\\right)\\)</span></li>\r\n<li>如果射线与盒子相交，那么简单的说这条射线一定有一段时间是处于这三个<span\r\nclass=\"math inline\">\\(t^{min},t^{max}\\)</span>之中的。</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"计算原理\">计算原理</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/Ray_and_Obb_intersect.png\"\r\ntitle=\"Ray&amp;OBB\" alt=\"intersection\" />\r\n<figcaption aria-hidden=\"true\">intersection</figcaption>\r\n</figure>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(P_{min} = P + t_{min} \\cdot\r\n\\vec{u}\\)</span> - <span class=\"math inline\">\\(1.0\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(P_{max} = P + t_{max} \\cdot\r\n\\vec{u}\\)</span> - <span class=\"math inline\">\\(1.1\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(P_{i} = P + t \\cdot \\vec{u}\\)</span>\r\n- <span class=\"math inline\">\\(1.2\\)</span></p></li>\r\n<li><p>$(P_{min} - C ) = min $ - <span\r\nclass=\"math inline\">\\(1.3\\)</span></p></li>\r\n<li><p>$(P_{max} - C ) = max $ - <span\r\nclass=\"math inline\">\\(1.4\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(1.0\\)</span>式 &amp; <span\r\nclass=\"math inline\">\\(1.1\\)</span>式 带入 <span\r\nclass=\"math inline\">\\(1.3\\)</span>式 &amp; <span\r\nclass=\"math inline\">\\(1.4\\)</span>式得到： <span class=\"math display\">\\[\r\n\\left [ \\left (P + t_i \\cdot \\vec{u} \\right ) - C \\right ] \\cdot\r\n\\vec{O_n} = O_{Size.j} / 2.0, i \\in (min,max),j \\in (x,y,z), n \\in\r\n(u,v,w)\r\n\\]</span> =&gt; 化简得: <span class=\"math display\">\\[\r\nt_i = (O_{Size.i} / 2.0 - (C - P) \\cdot \\vec{O_n}) / (\\vec{u} \\cdot\r\n\\vec{O_n}), i \\in (min,max),j \\in (x,y,z), n \\in (u,v,w)\r\n\\]</span></p></li>\r\n</ul>\r\n<h3 id=\"求交实现\">求交实现</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Intersect::IntersectObbWithRay</span><span class=\"params\">(<span class=\"keyword\">const</span> OBB&amp; obb, Ray &amp; ray)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> delta = obb.m_center - ray.m_begin; <span class=\"comment\">// C- P</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> t1, t2;    <span class=\"comment\">// 当前面交点在射线上的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> minT = DBL_MIN, maxT = DBL_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> e = glm::dot(delta, obb.m_u);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> f = glm::dot(ray.m_dir, obb.m_u);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(f) &gt; <span class=\"number\">1e-20</span>) <span class=\"comment\">// 判断当前面是否和射线平行 - 与法线垂直则会平行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t1 = (e + obb.m_size.x / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            t2 = (e - obb.m_size.x / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; t2)  <span class=\"comment\">// 交换 我们不知道当前的射线与目前检测的板的法相的方向是什么样的关系</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> temp = t1;</span><br><span class=\"line\">                t1 = t2;</span><br><span class=\"line\">                t2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; minT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minT = t1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t2 &lt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxT = t2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minT &gt; maxT)   <span class=\"comment\">// 未发生相交</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxT &lt; <span class=\"number\">0</span>)  <span class=\"comment\">// 小于0表示不再正方向上，盒子在射线的后面</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 此时盒子与光线平行，我们需要看看盒子和光线的关系，如果光线在盒子内部则相交</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (-e - obb.m_size.x / <span class=\"number\">2.0</span> &gt; <span class=\"number\">0</span> || -e + obb.m_size.x / <span class=\"number\">2.0</span> &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> e = glm::dot(delta, obb.m_v);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> f = glm::dot(ray.m_dir, obb.m_v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(f) &gt; <span class=\"number\">1e-20</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t1 = (e + obb.m_size.y / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            t2 = (e - obb.m_size.y / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; t2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> temp = t1;</span><br><span class=\"line\">                t1 = t2;</span><br><span class=\"line\">                t2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; minT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minT = t1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t2 &lt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxT = t2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minT &gt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxT &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (-e - obb.m_size.y / <span class=\"number\">2.0</span> &gt; <span class=\"number\">0</span> || -e + obb.m_size.y / <span class=\"number\">2.0</span> &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> e = glm::dot(delta, obb.m_w);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> f = glm::dot(ray.m_dir, obb.m_w);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(f) &gt; <span class=\"number\">1e-20</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t1 = (e + obb.m_size.z / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            t2 = (e - obb.m_size.z / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; t2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> temp = t1;</span><br><span class=\"line\">                t1 = t2;</span><br><span class=\"line\">                t2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; minT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minT = t1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t2 &lt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxT = t2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minT &gt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxT &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (-e - obb.m_size.z / <span class=\"number\">2.0</span> &gt; <span class=\"number\">0</span> || -e + obb.m_size.z / <span class=\"number\">2.0</span> &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>光先追踪的加速方法就是引入层次结构数据结构，计算光线与层次结构的相交，从而加速光线与场景的求交。","more":"</p>\r\n<h2 id=\"obb与ray求交\">OBB与Ray求交</h2>\r\n<ul>\r\n<li>我们在更之前的地方定义了一个<code>OBB</code>,往前翻一番也许就能找到\r\n<ul>\r\n<li><span class=\"math inline\">\\(center\\)</span> - 盒子的中心点</li>\r\n<li><span class=\"math inline\">\\(\\vec{u}\\)</span> - 盒子的某个法线 <span\r\nclass=\"math inline\">\\(u\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{v}\\)</span> - 盒子的某个法线 <span\r\nclass=\"math inline\">\\(v\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{w}\\)</span> - 盒子的某个法线 <span\r\nclass=\"math inline\">\\(w\\)</span></li>\r\n<li>盒子的尺寸 - <span class=\"math inline\">\\(size\\left(h_u,h_v,h_w\r\n\\right )\\)</span></li>\r\n</ul></li>\r\n<li>同样的 我们曾经定义过一条射线\r\n<ul>\r\n<li><span class=\"math inline\">\\(Ray \\left( P\\right ) = O + t \\cdot\r\n\\vec{u}\\)</span></li>\r\n<li><code>Ray(P)</code> 射线上某一点</li>\r\n<li><code>O</code> 射线的起点</li>\r\n<li><code>t</code> 沿着方向<span\r\nclass=\"math inline\">\\(\\vec{u}\\)</span>前进的长度</li>\r\n<li><span class=\"math inline\">\\(\\vec{u}\\)</span> 射线的方向向量</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"slab-method\">slab method</h2>\r\n<ul>\r\n<li>在OBB与光线的求交计算中，我们常用的方法是<code>slab method</code>\r\n<ul>\r\n<li>将我们测量的这个盒子分成三组平行的板</li>\r\n<li>分别将光线与对应的板做相交计算，在射线的方向上，有一个进入这一组板的时间<span\r\nclass=\"math inline\">\\(t^{min}\\)</span>，以及一个出板的时间<span\r\nclass=\"math inline\">\\(t^{max}\\)</span></li>\r\n<li>分别计算对于三个面板的<span\r\nclass=\"math inline\">\\(t^{min}_{i},t^{max}_{i},i \\in\r\n\\left(u,v,w\\right)\\)</span></li>\r\n<li>如果射线与盒子相交，那么简单的说这条射线一定有一段时间是处于这三个<span\r\nclass=\"math inline\">\\(t^{min},t^{max}\\)</span>之中的。</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"计算原理\">计算原理</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/intersection/Ray_and_Obb_intersect.png\"\r\ntitle=\"Ray&amp;OBB\" alt=\"intersection\" />\r\n<figcaption aria-hidden=\"true\">intersection</figcaption>\r\n</figure>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(P_{min} = P + t_{min} \\cdot\r\n\\vec{u}\\)</span> - <span class=\"math inline\">\\(1.0\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(P_{max} = P + t_{max} \\cdot\r\n\\vec{u}\\)</span> - <span class=\"math inline\">\\(1.1\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(P_{i} = P + t \\cdot \\vec{u}\\)</span>\r\n- <span class=\"math inline\">\\(1.2\\)</span></p></li>\r\n<li><p>$(P_{min} - C ) = min $ - <span\r\nclass=\"math inline\">\\(1.3\\)</span></p></li>\r\n<li><p>$(P_{max} - C ) = max $ - <span\r\nclass=\"math inline\">\\(1.4\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(1.0\\)</span>式 &amp; <span\r\nclass=\"math inline\">\\(1.1\\)</span>式 带入 <span\r\nclass=\"math inline\">\\(1.3\\)</span>式 &amp; <span\r\nclass=\"math inline\">\\(1.4\\)</span>式得到： <span class=\"math display\">\\[\r\n\\left [ \\left (P + t_i \\cdot \\vec{u} \\right ) - C \\right ] \\cdot\r\n\\vec{O_n} = O_{Size.j} / 2.0, i \\in (min,max),j \\in (x,y,z), n \\in\r\n(u,v,w)\r\n\\]</span> =&gt; 化简得: <span class=\"math display\">\\[\r\nt_i = (O_{Size.i} / 2.0 - (C - P) \\cdot \\vec{O_n}) / (\\vec{u} \\cdot\r\n\\vec{O_n}), i \\in (min,max),j \\in (x,y,z), n \\in (u,v,w)\r\n\\]</span></p></li>\r\n</ul>\r\n<h3 id=\"求交实现\">求交实现</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Intersect::IntersectObbWithRay</span><span class=\"params\">(<span class=\"keyword\">const</span> OBB&amp; obb, Ray &amp; ray)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> delta = obb.m_center - ray.m_begin; <span class=\"comment\">// C- P</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> t1, t2;    <span class=\"comment\">// 当前面交点在射线上的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> minT = DBL_MIN, maxT = DBL_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> e = glm::dot(delta, obb.m_u);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> f = glm::dot(ray.m_dir, obb.m_u);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(f) &gt; <span class=\"number\">1e-20</span>) <span class=\"comment\">// 判断当前面是否和射线平行 - 与法线垂直则会平行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t1 = (e + obb.m_size.x / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            t2 = (e - obb.m_size.x / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; t2)  <span class=\"comment\">// 交换 我们不知道当前的射线与目前检测的板的法相的方向是什么样的关系</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> temp = t1;</span><br><span class=\"line\">                t1 = t2;</span><br><span class=\"line\">                t2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; minT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minT = t1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t2 &lt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxT = t2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minT &gt; maxT)   <span class=\"comment\">// 未发生相交</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxT &lt; <span class=\"number\">0</span>)  <span class=\"comment\">// 小于0表示不再正方向上，盒子在射线的后面</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 此时盒子与光线平行，我们需要看看盒子和光线的关系，如果光线在盒子内部则相交</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (-e - obb.m_size.x / <span class=\"number\">2.0</span> &gt; <span class=\"number\">0</span> || -e + obb.m_size.x / <span class=\"number\">2.0</span> &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> e = glm::dot(delta, obb.m_v);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> f = glm::dot(ray.m_dir, obb.m_v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(f) &gt; <span class=\"number\">1e-20</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t1 = (e + obb.m_size.y / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            t2 = (e - obb.m_size.y / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; t2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> temp = t1;</span><br><span class=\"line\">                t1 = t2;</span><br><span class=\"line\">                t2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; minT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minT = t1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t2 &lt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxT = t2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minT &gt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxT &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (-e - obb.m_size.y / <span class=\"number\">2.0</span> &gt; <span class=\"number\">0</span> || -e + obb.m_size.y / <span class=\"number\">2.0</span> &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> e = glm::dot(delta, obb.m_w);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> f = glm::dot(ray.m_dir, obb.m_w);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>(f) &gt; <span class=\"number\">1e-20</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t1 = (e + obb.m_size.z / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            t2 = (e - obb.m_size.z / <span class=\"number\">2.0</span>) / f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; t2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> temp = t1;</span><br><span class=\"line\">                t1 = t2;</span><br><span class=\"line\">                t2 = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t1 &gt; minT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minT = t1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t2 &lt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                maxT = t2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minT &gt; maxT)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxT &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (-e - obb.m_size.z / <span class=\"number\">2.0</span> &gt; <span class=\"number\">0</span> || -e + obb.m_size.z / <span class=\"number\">2.0</span> &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"OSG踩坑记-模型共享&模型颜色修改","date":"2021-03-20T12:54:22.000Z","_content":"\n<p>\n&ensp;&ensp;<code>OSG</code>模型共享...\n</p>\n\n<!-- more -->\n\n###  简单概述\n\n在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。\n\n### 伪代码：\n\n#### 1、读入模型\n\n```c++\n// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。\n// 使用osg自带读取模型的函数读取模型\n// 推荐使用 osg 的智能指针\n// 此处使用一个 内嵌的几何体 代替模型 \n\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry; \n// osg 的智能指针采用引用计数的方式决定当前对象是否释放\n```\n\n#### 2、计算对模型的旋转、缩放、平移的操作矩阵\n\n```C++\n// osg 有专门用户模型操作的类  osg::MatrixTransform \n// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 \nosg::ref_ptr<osg::MatrixTransform> trans = new osg::MatrixTransform;\n// 对于模型的操作，有PVM矩阵的意思 \n\n// 创建旋转矩阵 \nosg::Matrix matrix_rotate;\n// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  \nmatrix_rotate.makeRotate(osg::vec3(0,0,1),osg::vec3(1,0,0));  // 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向\n// 你也可以直接选择使用\nosg::Matrix::rotate(osg::Vec3(),osg::Vec3()); // 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵\n\n// ==============================================================================================\n// 也可以直接 设置最终的变换矩阵 \ntrans->setMatrix(matrix_rotate * osg::Martix::scale(1.0,1.0,1.0) * osg::translate(osg::Vec3()));\n// trans 已经存储了 我们对于模型的操作 \n```\n\n#### 3、对trans节点设置材料等属性 \n\n```C++\n// 创建材质对象\nosg::Material* mat = new osg::Material();\nmat->setColorMode(osg::Material::ColorMode::DIFFUSE);   // 设置绘制颜色的模式 \nmat->setDiffuse(osg::Material::FRONT, osg::Vec4());      // 设置此种模式下的颜色 \n\ntrans->getOrCreateStateSet()->setAttribute(mat);        // 将材质设置给 节点 \n```\n\n#### 4、将对象作为节点添加\n\n```C++\ntrans.addchild(geom.get());\n```\n\n#### 5、将操作节点添加到绘制的根节点或者是其他的叶节点\n\n```C++\n// ......\n```\n\n","source":"_posts/OSG踩坑记-模型共享-模型颜色修改.md","raw":"---\ntitle: OSG踩坑记-模型共享&模型颜色修改\ndate: 2021-03-20 20:54:22\ncategories: \n- works\n- GF\n- OSG\ntags: \n- cpp\n- osg\n---\n\n<p>\n&ensp;&ensp;<code>OSG</code>模型共享...\n</p>\n\n<!-- more -->\n\n###  简单概述\n\n在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。\n\n### 伪代码：\n\n#### 1、读入模型\n\n```c++\n// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。\n// 使用osg自带读取模型的函数读取模型\n// 推荐使用 osg 的智能指针\n// 此处使用一个 内嵌的几何体 代替模型 \n\nosg::ref_ptr<osg::Geometry> geom = new osg::Geometry; \n// osg 的智能指针采用引用计数的方式决定当前对象是否释放\n```\n\n#### 2、计算对模型的旋转、缩放、平移的操作矩阵\n\n```C++\n// osg 有专门用户模型操作的类  osg::MatrixTransform \n// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 \nosg::ref_ptr<osg::MatrixTransform> trans = new osg::MatrixTransform;\n// 对于模型的操作，有PVM矩阵的意思 \n\n// 创建旋转矩阵 \nosg::Matrix matrix_rotate;\n// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  \nmatrix_rotate.makeRotate(osg::vec3(0,0,1),osg::vec3(1,0,0));  // 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向\n// 你也可以直接选择使用\nosg::Matrix::rotate(osg::Vec3(),osg::Vec3()); // 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵\n\n// ==============================================================================================\n// 也可以直接 设置最终的变换矩阵 \ntrans->setMatrix(matrix_rotate * osg::Martix::scale(1.0,1.0,1.0) * osg::translate(osg::Vec3()));\n// trans 已经存储了 我们对于模型的操作 \n```\n\n#### 3、对trans节点设置材料等属性 \n\n```C++\n// 创建材质对象\nosg::Material* mat = new osg::Material();\nmat->setColorMode(osg::Material::ColorMode::DIFFUSE);   // 设置绘制颜色的模式 \nmat->setDiffuse(osg::Material::FRONT, osg::Vec4());      // 设置此种模式下的颜色 \n\ntrans->getOrCreateStateSet()->setAttribute(mat);        // 将材质设置给 节点 \n```\n\n#### 4、将对象作为节点添加\n\n```C++\ntrans.addchild(geom.get());\n```\n\n#### 5、将操作节点添加到绘制的根节点或者是其他的叶节点\n\n```C++\n// ......\n```\n\n","slug":"OSG踩坑记-模型共享-模型颜色修改","published":1,"updated":"2022-08-21T15:34:56.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravk00157cda8c6a30hy","content":"<p>\r\n  <code>OSG</code>模型共享...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"简单概述\">简单概述</h3>\r\n<p>在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。</p>\r\n<h3 id=\"伪代码\">伪代码：</h3>\r\n<h4 id=\"读入模型\">1、读入模型</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。</span></span><br><span class=\"line\"><span class=\"comment\">// 使用osg自带读取模型的函数读取模型</span></span><br><span class=\"line\"><span class=\"comment\">// 推荐使用 osg 的智能指针</span></span><br><span class=\"line\"><span class=\"comment\">// 此处使用一个 内嵌的几何体 代替模型 </span></span><br><span class=\"line\"></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry; </span><br><span class=\"line\"><span class=\"comment\">// osg 的智能指针采用引用计数的方式决定当前对象是否释放</span></span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"计算对模型的旋转缩放平移的操作矩阵\">2、计算对模型的旋转、缩放、平移的操作矩阵</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osg 有专门用户模型操作的类  osg::MatrixTransform </span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 </span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::MatrixTransform&gt; trans = <span class=\"keyword\">new</span> osg::MatrixTransform;</span><br><span class=\"line\"><span class=\"comment\">// 对于模型的操作，有PVM矩阵的意思 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建旋转矩阵 </span></span><br><span class=\"line\">osg::Matrix matrix_rotate;</span><br><span class=\"line\"><span class=\"comment\">// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  </span></span><br><span class=\"line\">matrix_rotate.makeRotate(osg::vec3(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>),osg::vec3(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));  <span class=\"comment\">// 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向</span></span><br><span class=\"line\"><span class=\"comment\">// 你也可以直接选择使用</span></span><br><span class=\"line\">osg::Matrix::rotate(osg::Vec3(),osg::Vec3()); <span class=\"comment\">// 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==============================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接 设置最终的变换矩阵 </span></span><br><span class=\"line\">trans-&gt;setMatrix(matrix_rotate * osg::Martix::scale(<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>) * osg::translate(osg::Vec3()));</span><br><span class=\"line\"><span class=\"comment\">// trans 已经存储了 我们对于模型的操作 </span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"对trans节点设置材料等属性\">3、对trans节点设置材料等属性</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建材质对象</span></span><br><span class=\"line\">osg::Material* mat = <span class=\"keyword\">new</span> osg::Material();</span><br><span class=\"line\">mat-&gt;setColorMode(osg::Material::ColorMode::DIFFUSE);   <span class=\"comment\">// 设置绘制颜色的模式 </span></span><br><span class=\"line\">mat-&gt;setDiffuse(osg::Material::FRONT, osg::Vec4());      <span class=\"comment\">// 设置此种模式下的颜色 </span></span><br><span class=\"line\"></span><br><span class=\"line\">trans-&gt;getOrCreateStateSet()-&gt;setAttribute(mat);        <span class=\"comment\">// 将材质设置给 节点 </span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"将对象作为节点添加\">4、将对象作为节点添加</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trans.addchild(geom.get());</span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"将操作节点添加到绘制的根节点或者是其他的叶节点\">5、将操作节点添加到绘制的根节点或者是其他的叶节点</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ......</span></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>OSG</code>模型共享...\r\n</p>","more":"<h3 id=\"简单概述\">简单概述</h3>\r\n<p>在很多场景中，我们需要将同一个模型绘制到不同的区域并且还需要对模型进行一系列的旋转缩放等操作，同时需要使用不同的颜色，这个时候我们只需要使用一些简单的设置便可以实现这个功能功能。</p>\r\n<h3 id=\"伪代码\">伪代码：</h3>\r\n<h4 id=\"读入模型\">1、读入模型</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无论你是从外部读入模型 还是你自己构建的一个模型都是可以的。</span></span><br><span class=\"line\"><span class=\"comment\">// 使用osg自带读取模型的函数读取模型</span></span><br><span class=\"line\"><span class=\"comment\">// 推荐使用 osg 的智能指针</span></span><br><span class=\"line\"><span class=\"comment\">// 此处使用一个 内嵌的几何体 代替模型 </span></span><br><span class=\"line\"></span><br><span class=\"line\">osg::ref_ptr&lt;osg::Geometry&gt; geom = <span class=\"keyword\">new</span> osg::Geometry; </span><br><span class=\"line\"><span class=\"comment\">// osg 的智能指针采用引用计数的方式决定当前对象是否释放</span></span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"计算对模型的旋转缩放平移的操作矩阵\">2、计算对模型的旋转、缩放、平移的操作矩阵</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osg 有专门用户模型操作的类  osg::MatrixTransform </span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个对象 模型操作类中抽象了矩阵的接口 可以当做矩阵操作 本质上是一个节点 </span></span><br><span class=\"line\">osg::ref_ptr&lt;osg::MatrixTransform&gt; trans = <span class=\"keyword\">new</span> osg::MatrixTransform;</span><br><span class=\"line\"><span class=\"comment\">// 对于模型的操作，有PVM矩阵的意思 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建旋转矩阵 </span></span><br><span class=\"line\">osg::Matrix matrix_rotate;</span><br><span class=\"line\"><span class=\"comment\">// 构建旋转，从osg坐标系的沿着Z轴方向转到X轴（都是正方向）  </span></span><br><span class=\"line\">matrix_rotate.makeRotate(osg::vec3(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>),osg::vec3(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>));  <span class=\"comment\">// 参数分别是两个方向向量 第一个参数是当前模型的方向 第二个参数是你需要旋转的方向</span></span><br><span class=\"line\"><span class=\"comment\">// 你也可以直接选择使用</span></span><br><span class=\"line\">osg::Matrix::rotate(osg::Vec3(),osg::Vec3()); <span class=\"comment\">// 输入的参数也可以是四元数  返回值是一个表示旋转的矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ==============================================================================================</span></span><br><span class=\"line\"><span class=\"comment\">// 也可以直接 设置最终的变换矩阵 </span></span><br><span class=\"line\">trans-&gt;setMatrix(matrix_rotate * osg::Martix::scale(<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>,<span class=\"number\">1.0</span>) * osg::translate(osg::Vec3()));</span><br><span class=\"line\"><span class=\"comment\">// trans 已经存储了 我们对于模型的操作 </span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"对trans节点设置材料等属性\">3、对trans节点设置材料等属性</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建材质对象</span></span><br><span class=\"line\">osg::Material* mat = <span class=\"keyword\">new</span> osg::Material();</span><br><span class=\"line\">mat-&gt;setColorMode(osg::Material::ColorMode::DIFFUSE);   <span class=\"comment\">// 设置绘制颜色的模式 </span></span><br><span class=\"line\">mat-&gt;setDiffuse(osg::Material::FRONT, osg::Vec4());      <span class=\"comment\">// 设置此种模式下的颜色 </span></span><br><span class=\"line\"></span><br><span class=\"line\">trans-&gt;getOrCreateStateSet()-&gt;setAttribute(mat);        <span class=\"comment\">// 将材质设置给 节点 </span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"将对象作为节点添加\">4、将对象作为节点添加</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trans.addchild(geom.get());</span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"将操作节点添加到绘制的根节点或者是其他的叶节点\">5、将操作节点添加到绘制的根节点或者是其他的叶节点</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ......</span></span><br></pre></td></tr></table></figure>"},{"title":"OSG踩坑记-默认光源","date":"2021-04-03T16:10:50.000Z","mathjax":true,"_content":"\n<p>\n&ensp;&ensp;<code>OSG</code>默认光源...\n</p>\n\n<!-- more -->\n\n### OSG-Viewer默认光源\n\n```C++\nosg::Node->getOrCreateStateSet()->setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    // 法线随着模型大小变化而变化。\nosg::Node->getOrCreateStateSet()->setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); // 关闭节点光源 并遵从父节点的光照设置\n```\n\n---\n\n##### `不指定法向` -- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化 </font> \n\n### Viewer 默认光源的使用\n\n#### 1、设置光照的相关的信息 \n\n- `osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配`\n\n- 你需要设置的信息包括: ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。\n\n> 设置光照  -- <font color=Green>衰减公式</font>\n> $$\n> F = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\n> $$\n>\n\n```C++ \n\t// 1. 获取缺省的光照\n\tosg::Light *light = viewer->getLight(); // 从当前的查看器 获取光照设置 \n\tlight->setAmbient(osg::Vec4(0.4, 0.4, 0.4, 1.0));   // 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);\n\tlight->setDiffuse(osg::Vec4(0.5, 0.5, 0.5, 1.0));   // 漫反射   直接来源于光源\n\tlight->setSpecular(osg::Vec4(0.2, 0.2, 0.2, 1.0));  // specular   高光 此处给的很低  \n\t// 由于此处我们使用的是平行光\n\tosg::Vec4 lightpos(x, y, z, 0.0f);   // 记住: 平行光的位置的最后一个分量必须是 0 \n\tlight->setPosition(lightpos);        // 设置光照位置 \n\t// 光照方向设置\n\t// 需要用到高度角和方位角 -- 计算一个你需要方向 \n\t\n\n\t// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减\n\tlight->setConstantAttenuation(1.0f);\n\tlight->setLinearAttenuation(0.0f);\n\tlight->setQuadraticAttenuation(0.f);\n```\n\n<font color=red> 产生平行光，位置分量的第四分量必须是0 </font>\n\n#### 2、对节点设置好材料属性\n\n- 材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。","source":"_posts/OSG踩坑记-默认光源.md","raw":"---\ntitle: OSG踩坑记-默认光源\ndate: 2021-04-04 00:10:50\ncategories: \n- works\n- GF\n- OSG\ntags:\n- cpp\n- osg\nmathjax: true\n---\n\n<p>\n&ensp;&ensp;<code>OSG</code>默认光源...\n</p>\n\n<!-- more -->\n\n### OSG-Viewer默认光源\n\n```C++\nosg::Node->getOrCreateStateSet()->setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    // 法线随着模型大小变化而变化。\nosg::Node->getOrCreateStateSet()->setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); // 关闭节点光源 并遵从父节点的光照设置\n```\n\n---\n\n##### `不指定法向` -- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化 </font> \n\n### Viewer 默认光源的使用\n\n#### 1、设置光照的相关的信息 \n\n- `osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配`\n\n- 你需要设置的信息包括: ambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。\n\n> 设置光照  -- <font color=Green>衰减公式</font>\n> $$\n> F = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\n> $$\n>\n\n```C++ \n\t// 1. 获取缺省的光照\n\tosg::Light *light = viewer->getLight(); // 从当前的查看器 获取光照设置 \n\tlight->setAmbient(osg::Vec4(0.4, 0.4, 0.4, 1.0));   // 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);\n\tlight->setDiffuse(osg::Vec4(0.5, 0.5, 0.5, 1.0));   // 漫反射   直接来源于光源\n\tlight->setSpecular(osg::Vec4(0.2, 0.2, 0.2, 1.0));  // specular   高光 此处给的很低  \n\t// 由于此处我们使用的是平行光\n\tosg::Vec4 lightpos(x, y, z, 0.0f);   // 记住: 平行光的位置的最后一个分量必须是 0 \n\tlight->setPosition(lightpos);        // 设置光照位置 \n\t// 光照方向设置\n\t// 需要用到高度角和方位角 -- 计算一个你需要方向 \n\t\n\n\t// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减\n\tlight->setConstantAttenuation(1.0f);\n\tlight->setLinearAttenuation(0.0f);\n\tlight->setQuadraticAttenuation(0.f);\n```\n\n<font color=red> 产生平行光，位置分量的第四分量必须是0 </font>\n\n#### 2、对节点设置好材料属性\n\n- 材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。","slug":"OSG踩坑记-默认光源","published":1,"updated":"2022-08-21T15:34:56.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravl001a7cdage93bdrr","content":"<p>\r\n  <code>OSG</code>默认光源...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"osg-viewer默认光源\">OSG-Viewer默认光源</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    <span class=\"comment\">// 法线随着模型大小变化而变化。</span></span><br><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); <span class=\"comment\">// 关闭节点光源 并遵从父节点的光照设置</span></span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<h5\r\nid=\"不指定法向----仍然可以看到-光照效果-但是无法看到明暗变化\"><code>不指定法向</code>\r\n-- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化\r\n</font></h5>\r\n<h3 id=\"viewer-默认光源的使用\">Viewer 默认光源的使用</h3>\r\n<h4 id=\"设置光照的相关的信息\">1、设置光照的相关的信息</h4>\r\n<ul>\r\n<li><p><code>osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配</code></p></li>\r\n<li><p>你需要设置的信息包括:\r\nambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。</p></li>\r\n</ul>\r\n<blockquote>\r\n<p>设置光照 -- <font color=Green>衰减公式</font> <span\r\nclass=\"math display\">\\[\r\nF = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\r\n\\]</span></p>\r\n</blockquote>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取缺省的光照</span></span><br><span class=\"line\">osg::Light *light = viewer-&gt;getLight(); <span class=\"comment\">// 从当前的查看器 获取光照设置 </span></span><br><span class=\"line\">light-&gt;setAmbient(osg::Vec4(<span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);</span></span><br><span class=\"line\">light-&gt;setDiffuse(osg::Vec4(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 漫反射   直接来源于光源</span></span><br><span class=\"line\">light-&gt;setSpecular(osg::Vec4(<span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">1.0</span>));  <span class=\"comment\">// specular   高光 此处给的很低  </span></span><br><span class=\"line\"><span class=\"comment\">// 由于此处我们使用的是平行光</span></span><br><span class=\"line\"><span class=\"function\">osg::Vec4 <span class=\"title\">lightpos</span><span class=\"params\">(x, y, z, <span class=\"number\">0.0f</span>)</span></span>;   <span class=\"comment\">// 记住: 平行光的位置的最后一个分量必须是 0 </span></span><br><span class=\"line\">light-&gt;setPosition(lightpos);        <span class=\"comment\">// 设置光照位置 </span></span><br><span class=\"line\"><span class=\"comment\">// 光照方向设置</span></span><br><span class=\"line\"><span class=\"comment\">// 需要用到高度角和方位角 -- 计算一个你需要方向 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减</span></span><br><span class=\"line\">light-&gt;setConstantAttenuation(<span class=\"number\">1.0f</span>);</span><br><span class=\"line\">light-&gt;setLinearAttenuation(<span class=\"number\">0.0f</span>);</span><br><span class=\"line\">light-&gt;setQuadraticAttenuation(<span class=\"number\">0.f</span>);</span><br></pre></td></tr></table></figure>\r\n<p><font color=red> 产生平行光，位置分量的第四分量必须是0 </font></p>\r\n<h4 id=\"对节点设置好材料属性\">2、对节点设置好材料属性</h4>\r\n<ul>\r\n<li>材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>OSG</code>默认光源...\r\n</p>","more":"<h3 id=\"osg-viewer默认光源\">OSG-Viewer默认光源</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_RESCALE_NORMAL, osg::StateAttribute::ON);    <span class=\"comment\">// 法线随着模型大小变化而变化。</span></span><br><span class=\"line\">osg::Node-&gt;getOrCreateStateSet()-&gt;setMode(GL_LIGHTING, osg::StateAttribute::OFF | osg::StateAttribute::OVERRIDE); <span class=\"comment\">// 关闭节点光源 并遵从父节点的光照设置</span></span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<h5\r\nid=\"不指定法向----仍然可以看到-光照效果-但是无法看到明暗变化\"><code>不指定法向</code>\r\n-- <font color=red>仍然可以看到 光照效果 但是无法看到明暗变化\r\n</font></h5>\r\n<h3 id=\"viewer-默认光源的使用\">Viewer 默认光源的使用</h3>\r\n<h4 id=\"设置光照的相关的信息\">1、设置光照的相关的信息</h4>\r\n<ul>\r\n<li><p><code>osg::Viewer默认存在缺省光源,但是需要进行部分设置,不然可能与你当前的场景不匹配</code></p></li>\r\n<li><p>你需要设置的信息包括:\r\nambient、diffuse、specular、光照方向（可以不设置，使用缺省的）、光照位置、光的衰减参数。</p></li>\r\n</ul>\r\n<blockquote>\r\n<p>设置光照 -- <font color=Green>衰减公式</font> <span\r\nclass=\"math display\">\\[\r\nF = \\frac{1}{(k_c + k_l*d + k_q*d^2)}\r\n\\]</span></p>\r\n</blockquote>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取缺省的光照</span></span><br><span class=\"line\">osg::Light *light = viewer-&gt;getLight(); <span class=\"comment\">// 从当前的查看器 获取光照设置 </span></span><br><span class=\"line\">light-&gt;setAmbient(osg::Vec4(<span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 环境光   OPENGL的默认值是 osg::Vec3(0.2,0.2,0.2);</span></span><br><span class=\"line\">light-&gt;setDiffuse(osg::Vec4(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>, <span class=\"number\">1.0</span>));   <span class=\"comment\">// 漫反射   直接来源于光源</span></span><br><span class=\"line\">light-&gt;setSpecular(osg::Vec4(<span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.2</span>, <span class=\"number\">1.0</span>));  <span class=\"comment\">// specular   高光 此处给的很低  </span></span><br><span class=\"line\"><span class=\"comment\">// 由于此处我们使用的是平行光</span></span><br><span class=\"line\"><span class=\"function\">osg::Vec4 <span class=\"title\">lightpos</span><span class=\"params\">(x, y, z, <span class=\"number\">0.0f</span>)</span></span>;   <span class=\"comment\">// 记住: 平行光的位置的最后一个分量必须是 0 </span></span><br><span class=\"line\">light-&gt;setPosition(lightpos);        <span class=\"comment\">// 设置光照位置 </span></span><br><span class=\"line\"><span class=\"comment\">// 光照方向设置</span></span><br><span class=\"line\"><span class=\"comment\">// 需要用到高度角和方位角 -- 计算一个你需要方向 </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置光的衰减 -- 只设置 常量衰减的话 --   无距离衰减</span></span><br><span class=\"line\">light-&gt;setConstantAttenuation(<span class=\"number\">1.0f</span>);</span><br><span class=\"line\">light-&gt;setLinearAttenuation(<span class=\"number\">0.0f</span>);</span><br><span class=\"line\">light-&gt;setQuadraticAttenuation(<span class=\"number\">0.f</span>);</span><br></pre></td></tr></table></figure>\r\n<p><font color=red> 产生平行光，位置分量的第四分量必须是0 </font></p>\r\n<h4 id=\"对节点设置好材料属性\">2、对节点设置好材料属性</h4>\r\n<ul>\r\n<li>材料的设置是针对你要显示的节点设置的、你可以创建一个材料并设置相关的颜色，这样就可以拥有一个更好的显示效果。</li>\r\n</ul>"},{"title":"OpenGL Move Scene","date":"2022-08-03T13:05:59.000Z","_content":"\n<p>\n&ensp;&ensp;<code>OpenGL</code>场景移动...\n</p>\n\n<!-- more -->\n\n<center><h1> OpenGL Move Scene - 平面上移动 </h1></center>\n\n- 我们考虑一个简单的平面的移动\n  - 某个维度为 `0`,我们只需要在某个平面上移动 \n\n## 1. 计算移动的方向\n- 在此之前对于相机的概念，希望您是熟悉的\n- 虽然在`OpenGL`中本身并没有相机的概念\n  - `eye`    - `point`\n  - `center` - `point`\n  - `up`     - `vector`\n \n### 计算相机的朝向 \n\n- 右方向：$\\vec{front} = center - eye$\n\n### 计算相机的右方向\n- $\\vec{right} = \\vec{front} \\times \\vec{up}$\n- 记得将向量$\\vec{right}$归一化处理\n\n## 2. 鼠标的移动\n- 规定使用鼠标右键平移场景\n- 我们使用`Qt`的鼠标事件\n  - 在`x`方向上，两次记录的位置相减携带了移动的方向\n  - 在`y`方向上，`Qt`窗口的原点与`OpenGL`的窗口存在差别，需要做额外的处理 - 反向\n\n### 1. 当右键按下我们记录当前的鼠标的坐标\n\n### 2. 触发移动事件\n- 此处每一次出发移动我们将计算一次场景的移动 \n  - `X`方向 - `offsetX`\n  - `Y`方向 - `offsetY`\n\n- 更新我们记录的上一次的鼠标的位置\n\n## 移动场景\n- 将这个移动映射成为数据的比例，作为移动方向的系数，作用到`eye`&`center`, 重新计算视图矩阵，更新场景\n### 计算新的 `eye` & `center`\n- 计算沿着$\\vec{right}$ & $\\vec{up}$方向的移动的距离\n- 获取窗口的宽高为 `w&h`\n- 在投影矩阵中 $right - left = spanX$  &  $top - bottom = spanY$\n```C++\n\noffsetX / w * spanX = disX;\noffsetY / h * spanY = disY;\n\neye += right * disX + up *  disY;\ncenter += right * disX + up *  disY;\n```\n\n##  更新视图矩阵&`repaint`\n- `ViewMat.lookAt(eye,center,up)`\n- `repaint()`\n\n\n\n\n\n\n\n","source":"_posts/OpenGL-Move-Scene.md","raw":"---\ntitle: OpenGL Move Scene\ndate: 2022-08-03 21:05:59\ncategories:\n  - Computer Graph\n  - works\n  - SCUU\ntags:\n  - OpenGL\n---\n\n<p>\n&ensp;&ensp;<code>OpenGL</code>场景移动...\n</p>\n\n<!-- more -->\n\n<center><h1> OpenGL Move Scene - 平面上移动 </h1></center>\n\n- 我们考虑一个简单的平面的移动\n  - 某个维度为 `0`,我们只需要在某个平面上移动 \n\n## 1. 计算移动的方向\n- 在此之前对于相机的概念，希望您是熟悉的\n- 虽然在`OpenGL`中本身并没有相机的概念\n  - `eye`    - `point`\n  - `center` - `point`\n  - `up`     - `vector`\n \n### 计算相机的朝向 \n\n- 右方向：$\\vec{front} = center - eye$\n\n### 计算相机的右方向\n- $\\vec{right} = \\vec{front} \\times \\vec{up}$\n- 记得将向量$\\vec{right}$归一化处理\n\n## 2. 鼠标的移动\n- 规定使用鼠标右键平移场景\n- 我们使用`Qt`的鼠标事件\n  - 在`x`方向上，两次记录的位置相减携带了移动的方向\n  - 在`y`方向上，`Qt`窗口的原点与`OpenGL`的窗口存在差别，需要做额外的处理 - 反向\n\n### 1. 当右键按下我们记录当前的鼠标的坐标\n\n### 2. 触发移动事件\n- 此处每一次出发移动我们将计算一次场景的移动 \n  - `X`方向 - `offsetX`\n  - `Y`方向 - `offsetY`\n\n- 更新我们记录的上一次的鼠标的位置\n\n## 移动场景\n- 将这个移动映射成为数据的比例，作为移动方向的系数，作用到`eye`&`center`, 重新计算视图矩阵，更新场景\n### 计算新的 `eye` & `center`\n- 计算沿着$\\vec{right}$ & $\\vec{up}$方向的移动的距离\n- 获取窗口的宽高为 `w&h`\n- 在投影矩阵中 $right - left = spanX$  &  $top - bottom = spanY$\n```C++\n\noffsetX / w * spanX = disX;\noffsetY / h * spanY = disY;\n\neye += right * disX + up *  disY;\ncenter += right * disX + up *  disY;\n```\n\n##  更新视图矩阵&`repaint`\n- `ViewMat.lookAt(eye,center,up)`\n- `repaint()`\n\n\n\n\n\n\n\n","slug":"OpenGL-Move-Scene","published":1,"updated":"2022-08-21T15:34:56.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravm001c7cda6t9kdrxo","content":"<p>\r\n  <code>OpenGL</code>场景移动...\r\n</p>\r\n<span id=\"more\"></span>\r\n<center>\r\n<h1>\r\nOpenGL Move Scene - 平面上移动\r\n</h1>\r\n</center>\r\n<ul>\r\n<li>我们考虑一个简单的平面的移动\r\n<ul>\r\n<li>某个维度为 <code>0</code>,我们只需要在某个平面上移动</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"计算移动的方向\">1. 计算移动的方向</h2>\r\n<ul>\r\n<li>在此之前对于相机的概念，希望您是熟悉的</li>\r\n<li>虽然在<code>OpenGL</code>中本身并没有相机的概念\r\n<ul>\r\n<li><code>eye</code> - <code>point</code></li>\r\n<li><code>center</code> - <code>point</code></li>\r\n<li><code>up</code> - <code>vector</code></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"计算相机的朝向\">计算相机的朝向</h3>\r\n<ul>\r\n<li>右方向：<span class=\"math inline\">\\(\\vec{front} = center -\r\neye\\)</span></li>\r\n</ul>\r\n<h3 id=\"计算相机的右方向\">计算相机的右方向</h3>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{right} = \\vec{front} \\times\r\n\\vec{up}\\)</span></li>\r\n<li>记得将向量<span\r\nclass=\"math inline\">\\(\\vec{right}\\)</span>归一化处理</li>\r\n</ul>\r\n<h2 id=\"鼠标的移动\">2. 鼠标的移动</h2>\r\n<ul>\r\n<li>规定使用鼠标右键平移场景</li>\r\n<li>我们使用<code>Qt</code>的鼠标事件\r\n<ul>\r\n<li>在<code>x</code>方向上，两次记录的位置相减携带了移动的方向</li>\r\n<li>在<code>y</code>方向上，<code>Qt</code>窗口的原点与<code>OpenGL</code>的窗口存在差别，需要做额外的处理\r\n- 反向</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"当右键按下我们记录当前的鼠标的坐标\">1.\r\n当右键按下我们记录当前的鼠标的坐标</h3>\r\n<h3 id=\"触发移动事件\">2. 触发移动事件</h3>\r\n<ul>\r\n<li>此处每一次出发移动我们将计算一次场景的移动\r\n<ul>\r\n<li><code>X</code>方向 - <code>offsetX</code></li>\r\n<li><code>Y</code>方向 - <code>offsetY</code></li>\r\n</ul></li>\r\n<li>更新我们记录的上一次的鼠标的位置</li>\r\n</ul>\r\n<h2 id=\"移动场景\">移动场景</h2>\r\n<ul>\r\n<li>将这个移动映射成为数据的比例，作为移动方向的系数，作用到<code>eye</code>&amp;<code>center</code>,\r\n重新计算视图矩阵，更新场景 ### 计算新的 <code>eye</code> &amp;\r\n<code>center</code></li>\r\n<li>计算沿着<span class=\"math inline\">\\(\\vec{right}\\)</span> &amp; <span\r\nclass=\"math inline\">\\(\\vec{up}\\)</span>方向的移动的距离</li>\r\n<li>获取窗口的宽高为 <code>w&amp;h</code></li>\r\n<li>在投影矩阵中 <span class=\"math inline\">\\(right - left =\r\nspanX\\)</span> &amp; <span class=\"math inline\">\\(top - bottom =\r\nspanY\\)</span> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">offsetX / w * spanX = disX;</span><br><span class=\"line\">offsetY / h * spanY = disY;</span><br><span class=\"line\"></span><br><span class=\"line\">eye += right * disX + up *  disY;</span><br><span class=\"line\">center += right * disX + up *  disY;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h2 id=\"更新视图矩阵repaint\">更新视图矩阵&amp;<code>repaint</code></h2>\r\n<ul>\r\n<li><code>ViewMat.lookAt(eye,center,up)</code></li>\r\n<li><code>repaint()</code></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>OpenGL</code>场景移动...\r\n</p>","more":"<center>\r\n<h1>\r\nOpenGL Move Scene - 平面上移动\r\n</h1>\r\n</center>\r\n<ul>\r\n<li>我们考虑一个简单的平面的移动\r\n<ul>\r\n<li>某个维度为 <code>0</code>,我们只需要在某个平面上移动</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"计算移动的方向\">1. 计算移动的方向</h2>\r\n<ul>\r\n<li>在此之前对于相机的概念，希望您是熟悉的</li>\r\n<li>虽然在<code>OpenGL</code>中本身并没有相机的概念\r\n<ul>\r\n<li><code>eye</code> - <code>point</code></li>\r\n<li><code>center</code> - <code>point</code></li>\r\n<li><code>up</code> - <code>vector</code></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"计算相机的朝向\">计算相机的朝向</h3>\r\n<ul>\r\n<li>右方向：<span class=\"math inline\">\\(\\vec{front} = center -\r\neye\\)</span></li>\r\n</ul>\r\n<h3 id=\"计算相机的右方向\">计算相机的右方向</h3>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{right} = \\vec{front} \\times\r\n\\vec{up}\\)</span></li>\r\n<li>记得将向量<span\r\nclass=\"math inline\">\\(\\vec{right}\\)</span>归一化处理</li>\r\n</ul>\r\n<h2 id=\"鼠标的移动\">2. 鼠标的移动</h2>\r\n<ul>\r\n<li>规定使用鼠标右键平移场景</li>\r\n<li>我们使用<code>Qt</code>的鼠标事件\r\n<ul>\r\n<li>在<code>x</code>方向上，两次记录的位置相减携带了移动的方向</li>\r\n<li>在<code>y</code>方向上，<code>Qt</code>窗口的原点与<code>OpenGL</code>的窗口存在差别，需要做额外的处理\r\n- 反向</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"当右键按下我们记录当前的鼠标的坐标\">1.\r\n当右键按下我们记录当前的鼠标的坐标</h3>\r\n<h3 id=\"触发移动事件\">2. 触发移动事件</h3>\r\n<ul>\r\n<li>此处每一次出发移动我们将计算一次场景的移动\r\n<ul>\r\n<li><code>X</code>方向 - <code>offsetX</code></li>\r\n<li><code>Y</code>方向 - <code>offsetY</code></li>\r\n</ul></li>\r\n<li>更新我们记录的上一次的鼠标的位置</li>\r\n</ul>\r\n<h2 id=\"移动场景\">移动场景</h2>\r\n<ul>\r\n<li>将这个移动映射成为数据的比例，作为移动方向的系数，作用到<code>eye</code>&amp;<code>center</code>,\r\n重新计算视图矩阵，更新场景 ### 计算新的 <code>eye</code> &amp;\r\n<code>center</code></li>\r\n<li>计算沿着<span class=\"math inline\">\\(\\vec{right}\\)</span> &amp; <span\r\nclass=\"math inline\">\\(\\vec{up}\\)</span>方向的移动的距离</li>\r\n<li>获取窗口的宽高为 <code>w&amp;h</code></li>\r\n<li>在投影矩阵中 <span class=\"math inline\">\\(right - left =\r\nspanX\\)</span> &amp; <span class=\"math inline\">\\(top - bottom =\r\nspanY\\)</span> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">offsetX / w * spanX = disX;</span><br><span class=\"line\">offsetY / h * spanY = disY;</span><br><span class=\"line\"></span><br><span class=\"line\">eye += right * disX + up *  disY;</span><br><span class=\"line\">center += right * disX + up *  disY;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h2 id=\"更新视图矩阵repaint\">更新视图矩阵&amp;<code>repaint</code></h2>\r\n<ul>\r\n<li><code>ViewMat.lookAt(eye,center,up)</code></li>\r\n<li><code>repaint()</code></li>\r\n</ul>"},{"title":"Heap","date":"2021-10-24T07:55:06.000Z","_content":"\n<p>\n&ensp;&ensp;<code>Heap</code>数据结构介绍...\n</p>\n\n<!-- more -->\n\n## 堆\n\n#### 优先队列(`Pripority Queue`)\n- 特殊的 \"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。\n- 使用数组构建：\n  - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入数组的尾部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;从数组中删除元素，需要将元素移动位置：`T=O(N)`\n- 链表构建：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入链表的头部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;删除元素：`T=O(1)`\n- 有序数组：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N) or O(log2(N))`\n   &ensp;&ensp;&ensp;&ensp;移动元素并插入`T=O(N)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素：`T=O(1)`\n- 有序链表：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N)`\n   &ensp;&ensp;&ensp;&ensp;插入`T=O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素(或者首元素)：`T=O(1)`\n\n#### 最大堆 - 完全二叉树（大顶堆）\n\n- 根元素是当前树中最大的\n\n##### 1、堆的创建 -- 创建空堆\n\n```C++\ntypedef strut HeapStruct * MaxHeap;\nstruct HeadStruct{\n    ElementType * Elements;   // 存储元素的数组 \n    int Size;                 // 当前元素个数\n    int Capacity;             // 堆的最大容量\n}\n\n// 创建堆\nMaxHeap create(int MaxSize)\n{\n    MaxHeap H = malloc(sizeof(struct HeapStruct));\n    H->Elements = malloc((MaxSize+1) * sizeof(ElementType));\n    H->size = 0;\n    H->Capactity = MaxSize;\n    H->Elements[0] = MaxData;  // O号位置存储的是哨兵 不是个元素 \n\treturn H;\n}\n\n```\n\n\n\n##### 2，堆的插入\n\n```C++ \nvoid Insert(MaxHeap H,ElementType item)\n{\n    int i;\n    if(isFull(H))\n    {\n        std::cout<<\"最大堆已经满了\"<<std::endl;\n    }\n    i = ++H->Size;  // i等于 插入元素后的堆中的最后一个元素的下标\n    // 交换节点的位置 \n    for(;H->Elements[i/2] < item; i = i/2) // 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值\n    {\n        H->Elements[i] = H->Elements[i/2];  // 覆盖结果\n    }\n    H->Elements[i] = item;\n}\n\n```\n\n##### 3、堆的删除\n\n```C++ \n// 取出根节点\n// 将最后一个元素放到根节点(保留树的特性)\n// 修改使其具有最大（最小）堆的特性\n\nEleementType deleteMax(MaxHeap H)\n{\n    int parent,child;\n    ElementType MaxChild,temp;\n    if(IsEmpty(H))\n    {\n        std::cout<<\"堆为空\"<<std::endl;\n        return ;\n    }\n    MaxItem = H->Elements[1]; // 取出根的最大值 \n    // 取出堆中最后一个元素， 并将Size - 1\n    temp = H->Elements[H->Size --];\n    // 调整数据的大小关系 \n    for(parent = 1; parent*2 < H->Size;parent = child)  // 是不是存在左孩子 \n    {\n        child = parent * 2;\n        // 比较左右孩子的大小\n        if((child != H->Size)) && (H->Elements[child] < H->Elements[child+1]))  // 当前child不是最后一个元素 \n        {\n            child++; \n        }\n        // 不满足交换条件 - 结束循环\n        if(temp > H->Elements[child])\n        {\n            break;\n        }\n        else\n        {\n            // 交换元素 \n            H->Elements[parent] = H->Elements[child];\n            \n        }\n    }\n    // 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可\n    H->Elements[parent] = temp;\n    return MaxItem;\n}\n\n```\n\n##### 4、最大堆的建立\n\n&ensp;&ensp;建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中\n\n&ensp;&ensp;1、通过插入操作，将N个元素一个一个的插入到空堆中去：`T = O(NlogN)`\n\n&ensp;&ensp;2、线性时间复杂度下建立最大堆\n\n​\t&ensp;&ensp;1、将元素安顺序输入，先构建完全二叉树（下标为1开始）\n\n&ensp;\t&ensp;2、调整元素位置，使其满足最大堆\n\n<a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap C++ 实现  </a>\n\n#### 最小堆- 完全二叉树（小顶堆）\n\n- 可以参照最大堆写\n\n","source":"_posts/Heap.md","raw":"---\ntitle: Heap \ndate: 2021-10-24 15:55:06\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;<code>Heap</code>数据结构介绍...\n</p>\n\n<!-- more -->\n\n## 堆\n\n#### 优先队列(`Pripority Queue`)\n- 特殊的 \"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。\n- 使用数组构建：\n  - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入数组的尾部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;从数组中删除元素，需要将元素移动位置：`T=O(N)`\n- 链表构建：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;&ensp;总是插入链表的头部`T = O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;&ensp;查找到最大的(最小的元素)：`T=O(N)`\n\t  &ensp;&ensp;&ensp;&ensp;&ensp;删除元素：`T=O(1)`\n- 有序数组：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N) or O(log2(N))`\n   &ensp;&ensp;&ensp;&ensp;移动元素并插入`T=O(N)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素：`T=O(1)`\n- 有序链表：\n    - 插入：\n   &ensp;&ensp;&ensp;&ensp;找到合适的位置:`T = O(N)`\n   &ensp;&ensp;&ensp;&ensp;插入`T=O(1)`\n  - 删除：\n\t &ensp;&ensp;&ensp;&ensp;删除最后一个元素(或者首元素)：`T=O(1)`\n\n#### 最大堆 - 完全二叉树（大顶堆）\n\n- 根元素是当前树中最大的\n\n##### 1、堆的创建 -- 创建空堆\n\n```C++\ntypedef strut HeapStruct * MaxHeap;\nstruct HeadStruct{\n    ElementType * Elements;   // 存储元素的数组 \n    int Size;                 // 当前元素个数\n    int Capacity;             // 堆的最大容量\n}\n\n// 创建堆\nMaxHeap create(int MaxSize)\n{\n    MaxHeap H = malloc(sizeof(struct HeapStruct));\n    H->Elements = malloc((MaxSize+1) * sizeof(ElementType));\n    H->size = 0;\n    H->Capactity = MaxSize;\n    H->Elements[0] = MaxData;  // O号位置存储的是哨兵 不是个元素 \n\treturn H;\n}\n\n```\n\n\n\n##### 2，堆的插入\n\n```C++ \nvoid Insert(MaxHeap H,ElementType item)\n{\n    int i;\n    if(isFull(H))\n    {\n        std::cout<<\"最大堆已经满了\"<<std::endl;\n    }\n    i = ++H->Size;  // i等于 插入元素后的堆中的最后一个元素的下标\n    // 交换节点的位置 \n    for(;H->Elements[i/2] < item; i = i/2) // 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值\n    {\n        H->Elements[i] = H->Elements[i/2];  // 覆盖结果\n    }\n    H->Elements[i] = item;\n}\n\n```\n\n##### 3、堆的删除\n\n```C++ \n// 取出根节点\n// 将最后一个元素放到根节点(保留树的特性)\n// 修改使其具有最大（最小）堆的特性\n\nEleementType deleteMax(MaxHeap H)\n{\n    int parent,child;\n    ElementType MaxChild,temp;\n    if(IsEmpty(H))\n    {\n        std::cout<<\"堆为空\"<<std::endl;\n        return ;\n    }\n    MaxItem = H->Elements[1]; // 取出根的最大值 \n    // 取出堆中最后一个元素， 并将Size - 1\n    temp = H->Elements[H->Size --];\n    // 调整数据的大小关系 \n    for(parent = 1; parent*2 < H->Size;parent = child)  // 是不是存在左孩子 \n    {\n        child = parent * 2;\n        // 比较左右孩子的大小\n        if((child != H->Size)) && (H->Elements[child] < H->Elements[child+1]))  // 当前child不是最后一个元素 \n        {\n            child++; \n        }\n        // 不满足交换条件 - 结束循环\n        if(temp > H->Elements[child])\n        {\n            break;\n        }\n        else\n        {\n            // 交换元素 \n            H->Elements[parent] = H->Elements[child];\n            \n        }\n    }\n    // 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可\n    H->Elements[parent] = temp;\n    return MaxItem;\n}\n\n```\n\n##### 4、最大堆的建立\n\n&ensp;&ensp;建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中\n\n&ensp;&ensp;1、通过插入操作，将N个元素一个一个的插入到空堆中去：`T = O(NlogN)`\n\n&ensp;&ensp;2、线性时间复杂度下建立最大堆\n\n​\t&ensp;&ensp;1、将元素安顺序输入，先构建完全二叉树（下标为1开始）\n\n&ensp;\t&ensp;2、调整元素位置，使其满足最大堆\n\n<a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap C++ 实现  </a>\n\n#### 最小堆- 完全二叉树（小顶堆）\n\n- 可以参照最大堆写\n\n","slug":"Heap","published":1,"updated":"2022-08-21T15:34:56.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravm001e7cdabctt8a2k","content":"<p>\r\n  <code>Heap</code>数据结构介绍...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"堆\">堆</h2>\r\n<h4\r\nid=\"优先队列pripority-queue\">优先队列(<code>Pripority Queue</code>)</h4>\r\n<ul>\r\n<li>特殊的\r\n\"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。</li>\r\n<li>使用数组构建：\r\n<ul>\r\n<li>插入：      总是插入数组的尾部<code>T = O(1)</code></li>\r\n<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>\r\n     从数组中删除元素，需要将元素移动位置：<code>T=O(N)</code></li>\r\n</ul></li>\r\n<li>链表构建：\r\n<ul>\r\n<li>插入：      总是插入链表的头部<code>T = O(1)</code></li>\r\n<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>\r\n     删除元素：<code>T=O(1)</code></li>\r\n</ul></li>\r\n<li>有序数组：\r\n<ul>\r\n<li>插入：     找到合适的位置:<code>T = O(N) or O(log2(N))</code>\r\n    移动元素并插入<code>T=O(N)</code></li>\r\n<li>删除：     删除最后一个元素：<code>T=O(1)</code></li>\r\n</ul></li>\r\n<li>有序链表：\r\n<ul>\r\n<li>插入：     找到合适的位置:<code>T = O(N)</code>\r\n    插入<code>T=O(1)</code></li>\r\n<li>删除：     删除最后一个元素(或者首元素)：<code>T=O(1)</code></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"最大堆---完全二叉树大顶堆\">最大堆 - 完全二叉树（大顶堆）</h4>\r\n<ul>\r\n<li>根元素是当前树中最大的</li>\r\n</ul>\r\n<h5 id=\"堆的创建----创建空堆\">1、堆的创建 -- 创建空堆</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> strut HeapStruct * MaxHeap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeadStruct</span>&#123;</span></span><br><span class=\"line\">    ElementType * Elements;   <span class=\"comment\">// 存储元素的数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size;                 <span class=\"comment\">// 当前元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Capacity;             <span class=\"comment\">// 堆的最大容量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建堆</span></span><br><span class=\"line\"><span class=\"function\">MaxHeap <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> MaxSize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MaxHeap H = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct HeapStruct));</span><br><span class=\"line\">    H-&gt;Elements = <span class=\"built_in\">malloc</span>((MaxSize+<span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(ElementType));</span><br><span class=\"line\">    H-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    H-&gt;Capactity = MaxSize;</span><br><span class=\"line\">    H-&gt;Elements[<span class=\"number\">0</span>] = MaxData;  <span class=\"comment\">// O号位置存储的是哨兵 不是个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> H;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"堆的插入\">2，堆的插入</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(MaxHeap H,ElementType item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isFull(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;最大堆已经满了&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = ++H-&gt;Size;  <span class=\"comment\">// i等于 插入元素后的堆中的最后一个元素的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 交换节点的位置 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;H-&gt;Elements[i/<span class=\"number\">2</span>] &lt; item; i = i/<span class=\"number\">2</span>) <span class=\"comment\">// 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        H-&gt;Elements[i] = H-&gt;Elements[i/<span class=\"number\">2</span>];  <span class=\"comment\">// 覆盖结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    H-&gt;Elements[i] = item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"堆的删除\">3、堆的删除</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取出根节点</span></span><br><span class=\"line\"><span class=\"comment\">// 将最后一个元素放到根节点(保留树的特性)</span></span><br><span class=\"line\"><span class=\"comment\">// 修改使其具有最大（最小）堆的特性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EleementType <span class=\"title\">deleteMax</span><span class=\"params\">(MaxHeap H)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent,child;</span><br><span class=\"line\">    ElementType MaxChild,temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(IsEmpty(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;堆为空&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxItem = H-&gt;Elements[<span class=\"number\">1</span>]; <span class=\"comment\">// 取出根的最大值 </span></span><br><span class=\"line\">    <span class=\"comment\">// 取出堆中最后一个元素， 并将Size - 1</span></span><br><span class=\"line\">    temp = H-&gt;Elements[H-&gt;Size --];</span><br><span class=\"line\">    <span class=\"comment\">// 调整数据的大小关系 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(parent = <span class=\"number\">1</span>; parent*<span class=\"number\">2</span> &lt; H-&gt;Size;parent = child)  <span class=\"comment\">// 是不是存在左孩子 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        child = parent * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 比较左右孩子的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((child != H-&gt;Size)) &amp;&amp; (H-&gt;Elements[child] &lt; H-&gt;Elements[child+<span class=\"number\">1</span>]))  <span class=\"comment\">// 当前child不是最后一个元素 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            child++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不满足交换条件 - 结束循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp &gt; H-&gt;Elements[child])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            H-&gt;Elements[parent] = H-&gt;Elements[child];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可</span></span><br><span class=\"line\">    H-&gt;Elements[parent] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaxItem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"最大堆的建立\">4、最大堆的建立</h5>\r\n<p>  建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中</p>\r\n<p>  1、通过插入操作，将N个元素一个一个的插入到空堆中去：<code>T = O(NlogN)</code></p>\r\n<p>  2、线性时间复杂度下建立最大堆</p>\r\n<p>​   1、将元素安顺序输入，先构建完全二叉树（下标为1开始）</p>\r\n<p>   2、调整元素位置，使其满足最大堆</p>\r\n<p><a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap\r\nC++ 实现  </a></p>\r\n<h4 id=\"最小堆--完全二叉树小顶堆\">最小堆- 完全二叉树（小顶堆）</h4>\r\n<ul>\r\n<li>可以参照最大堆写</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>Heap</code>数据结构介绍...\r\n</p>","more":"<h2 id=\"堆\">堆</h2>\r\n<h4\r\nid=\"优先队列pripority-queue\">优先队列(<code>Pripority Queue</code>)</h4>\r\n<ul>\r\n<li>特殊的\r\n\"队列\",取出元素的顺序是按照元素的优先级大小，而不是进入队列的先后顺序。</li>\r\n<li>使用数组构建：\r\n<ul>\r\n<li>插入：      总是插入数组的尾部<code>T = O(1)</code></li>\r\n<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>\r\n     从数组中删除元素，需要将元素移动位置：<code>T=O(N)</code></li>\r\n</ul></li>\r\n<li>链表构建：\r\n<ul>\r\n<li>插入：      总是插入链表的头部<code>T = O(1)</code></li>\r\n<li>删除：      查找到最大的(最小的元素)：<code>T=O(N)</code>\r\n     删除元素：<code>T=O(1)</code></li>\r\n</ul></li>\r\n<li>有序数组：\r\n<ul>\r\n<li>插入：     找到合适的位置:<code>T = O(N) or O(log2(N))</code>\r\n    移动元素并插入<code>T=O(N)</code></li>\r\n<li>删除：     删除最后一个元素：<code>T=O(1)</code></li>\r\n</ul></li>\r\n<li>有序链表：\r\n<ul>\r\n<li>插入：     找到合适的位置:<code>T = O(N)</code>\r\n    插入<code>T=O(1)</code></li>\r\n<li>删除：     删除最后一个元素(或者首元素)：<code>T=O(1)</code></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"最大堆---完全二叉树大顶堆\">最大堆 - 完全二叉树（大顶堆）</h4>\r\n<ul>\r\n<li>根元素是当前树中最大的</li>\r\n</ul>\r\n<h5 id=\"堆的创建----创建空堆\">1、堆的创建 -- 创建空堆</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> strut HeapStruct * MaxHeap;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HeadStruct</span>&#123;</span></span><br><span class=\"line\">    ElementType * Elements;   <span class=\"comment\">// 存储元素的数组 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size;                 <span class=\"comment\">// 当前元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> Capacity;             <span class=\"comment\">// 堆的最大容量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建堆</span></span><br><span class=\"line\"><span class=\"function\">MaxHeap <span class=\"title\">create</span><span class=\"params\">(<span class=\"keyword\">int</span> MaxSize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MaxHeap H = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct HeapStruct));</span><br><span class=\"line\">    H-&gt;Elements = <span class=\"built_in\">malloc</span>((MaxSize+<span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(ElementType));</span><br><span class=\"line\">    H-&gt;size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    H-&gt;Capactity = MaxSize;</span><br><span class=\"line\">    H-&gt;Elements[<span class=\"number\">0</span>] = MaxData;  <span class=\"comment\">// O号位置存储的是哨兵 不是个元素 </span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> H;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"堆的插入\">2，堆的插入</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(MaxHeap H,ElementType item)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isFull(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;最大堆已经满了&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i = ++H-&gt;Size;  <span class=\"comment\">// i等于 插入元素后的堆中的最后一个元素的下标</span></span><br><span class=\"line\">    <span class=\"comment\">// 交换节点的位置 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;H-&gt;Elements[i/<span class=\"number\">2</span>] &lt; item; i = i/<span class=\"number\">2</span>) <span class=\"comment\">// 如果I对应的那个插入元素 大于其父节点的数据 交换两个元素的值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        H-&gt;Elements[i] = H-&gt;Elements[i/<span class=\"number\">2</span>];  <span class=\"comment\">// 覆盖结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    H-&gt;Elements[i] = item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"堆的删除\">3、堆的删除</h5>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取出根节点</span></span><br><span class=\"line\"><span class=\"comment\">// 将最后一个元素放到根节点(保留树的特性)</span></span><br><span class=\"line\"><span class=\"comment\">// 修改使其具有最大（最小）堆的特性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">EleementType <span class=\"title\">deleteMax</span><span class=\"params\">(MaxHeap H)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent,child;</span><br><span class=\"line\">    ElementType MaxChild,temp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(IsEmpty(H))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;堆为空&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MaxItem = H-&gt;Elements[<span class=\"number\">1</span>]; <span class=\"comment\">// 取出根的最大值 </span></span><br><span class=\"line\">    <span class=\"comment\">// 取出堆中最后一个元素， 并将Size - 1</span></span><br><span class=\"line\">    temp = H-&gt;Elements[H-&gt;Size --];</span><br><span class=\"line\">    <span class=\"comment\">// 调整数据的大小关系 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(parent = <span class=\"number\">1</span>; parent*<span class=\"number\">2</span> &lt; H-&gt;Size;parent = child)  <span class=\"comment\">// 是不是存在左孩子 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        child = parent * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 比较左右孩子的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((child != H-&gt;Size)) &amp;&amp; (H-&gt;Elements[child] &lt; H-&gt;Elements[child+<span class=\"number\">1</span>]))  <span class=\"comment\">// 当前child不是最后一个元素 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            child++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不满足交换条件 - 结束循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp &gt; H-&gt;Elements[child])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            H-&gt;Elements[parent] = H-&gt;Elements[child];</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 循环结束代表找到temp元素的合适安置位置 -- 放到合适的位置即可</span></span><br><span class=\"line\">    H-&gt;Elements[parent] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaxItem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"最大堆的建立\">4、最大堆的建立</h5>\r\n<p>  建立最大堆：将已经存在的N个元素按最大堆的要求存放在一个一维数组中</p>\r\n<p>  1、通过插入操作，将N个元素一个一个的插入到空堆中去：<code>T = O(NlogN)</code></p>\r\n<p>  2、线性时间复杂度下建立最大堆</p>\r\n<p>​   1、将元素安顺序输入，先构建完全二叉树（下标为1开始）</p>\r\n<p>   2、调整元素位置，使其满足最大堆</p>\r\n<p><a href=https://github.com/CuntBoy/Sort_Algorithm/tree/main/heap style=\"color:red\">Heap\r\nC++ 实现  </a></p>\r\n<h4 id=\"最小堆--完全二叉树小顶堆\">最小堆- 完全二叉树（小顶堆）</h4>\r\n<ul>\r\n<li>可以参照最大堆写</li>\r\n</ul>"},{"title":"OpenGL parallel  projection graphics do not scale with the window","date":"2022-08-04T02:05:58.000Z","_content":"\n<p>\n&ensp;&ensp;<code>QtOpenGL</code>平行投影窗口缩放导致图形变形...\n</p>\n\n<!-- more -->\n\n<center><h2>OpenGL parallel projection graphics do not scale with the window </h2> </center>\n\n###  实现步骤 \n- 重写窗口的`resize`事件 \n  - 计算投影的范围\n- 更新投影矩阵\n- `drawcull`\n\n#### `resizeGL`\n- 我们最初计算一个比例： \n  - 关于窗口的`size`和投影的范围的\n    - 使用`left, right`计算一个`spanx(right - left)`, `top, bottom`计算`spany(top - bottom)`, 分别与窗口的宽高比较\n    ```C++\n    auto ratioW = w / spanx;\n    auto ratioH = h / spany; \n    // 取最小的一个 \n    auto ratio = std::min(ratioW,ratioH);\n    ```\n  - 每次窗口缩放，我们就使用上述的范围计算新的`left,right,bottom,top`\n    - 只要投影的范围没有发生改变我们便不计算新的`ratio`\n\n- 计算新的`left,right,bottom,top`\n```C++\nvoid OpenGLWidget::resizeGL(int w, int h)\n{\n    glViewport(0,0,w,h);\n\n    left = - w / ratio;\n    right = abs(left);\n    bottom = -h / ratio;\n    top = abs(bottom);\n}\n```\n\n#### 更新投影矩阵 \n- update \n  - 关于`zNear & zFar`投影当二维平面时候，并未使用这两个参数\n```c++\nprojMat.ortho(left,right,bottom,top,0.1f,100.0f);\n```\n\n#### 更新绘制的场景 \n\n\n```C++\n\nshaderProgram.bind(); \nshaderProgram->setUniformValue(\"projectionMatrix\", projMat); \nglDrawArray()\n......\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/OpenGL-parallel-projection-graphics-do-not-scale-with-the-window.md","raw":"---\ntitle: OpenGL parallel  projection graphics do not scale with the window\ndate: 2022-08-04 10:05:58\ncategories:\n- Computer Graph\n- works\n- SCUU\ntags:\n- OpenGL\n---\n\n<p>\n&ensp;&ensp;<code>QtOpenGL</code>平行投影窗口缩放导致图形变形...\n</p>\n\n<!-- more -->\n\n<center><h2>OpenGL parallel projection graphics do not scale with the window </h2> </center>\n\n###  实现步骤 \n- 重写窗口的`resize`事件 \n  - 计算投影的范围\n- 更新投影矩阵\n- `drawcull`\n\n#### `resizeGL`\n- 我们最初计算一个比例： \n  - 关于窗口的`size`和投影的范围的\n    - 使用`left, right`计算一个`spanx(right - left)`, `top, bottom`计算`spany(top - bottom)`, 分别与窗口的宽高比较\n    ```C++\n    auto ratioW = w / spanx;\n    auto ratioH = h / spany; \n    // 取最小的一个 \n    auto ratio = std::min(ratioW,ratioH);\n    ```\n  - 每次窗口缩放，我们就使用上述的范围计算新的`left,right,bottom,top`\n    - 只要投影的范围没有发生改变我们便不计算新的`ratio`\n\n- 计算新的`left,right,bottom,top`\n```C++\nvoid OpenGLWidget::resizeGL(int w, int h)\n{\n    glViewport(0,0,w,h);\n\n    left = - w / ratio;\n    right = abs(left);\n    bottom = -h / ratio;\n    top = abs(bottom);\n}\n```\n\n#### 更新投影矩阵 \n- update \n  - 关于`zNear & zFar`投影当二维平面时候，并未使用这两个参数\n```c++\nprojMat.ortho(left,right,bottom,top,0.1f,100.0f);\n```\n\n#### 更新绘制的场景 \n\n\n```C++\n\nshaderProgram.bind(); \nshaderProgram->setUniformValue(\"projectionMatrix\", projMat); \nglDrawArray()\n......\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"OpenGL-parallel-projection-graphics-do-not-scale-with-the-window","published":1,"updated":"2022-08-21T15:34:56.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravn001h7cda35r7ghim","content":"<p>\r\n  <code>QtOpenGL</code>平行投影窗口缩放导致图形变形...\r\n</p>\r\n<span id=\"more\"></span>\r\n<center>\r\n<h2>\r\nOpenGL parallel projection graphics do not scale with the window\r\n</h2>\r\n</center>\r\n<h3 id=\"实现步骤\">实现步骤</h3>\r\n<ul>\r\n<li>重写窗口的<code>resize</code>事件\r\n<ul>\r\n<li>计算投影的范围</li>\r\n</ul></li>\r\n<li>更新投影矩阵</li>\r\n<li><code>drawcull</code></li>\r\n</ul>\r\n<h4 id=\"resizegl\"><code>resizeGL</code></h4>\r\n<ul>\r\n<li>我们最初计算一个比例：\r\n<ul>\r\n<li>关于窗口的<code>size</code>和投影的范围的\r\n<ul>\r\n<li>使用<code>left, right</code>计算一个<code>spanx(right - left)</code>,\r\n<code>top, bottom</code>计算<code>spany(top - bottom)</code>,\r\n分别与窗口的宽高比较 <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> ratioW = w / spanx;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> ratioH = h / spany; </span><br><span class=\"line\"><span class=\"comment\">// 取最小的一个 </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> ratio = <span class=\"built_in\">std</span>::min(ratioW,ratioH);</span><br></pre></td></tr></table></figure></li>\r\n</ul></li>\r\n<li>每次窗口缩放，我们就使用上述的范围计算新的<code>left,right,bottom,top</code>\r\n<ul>\r\n<li>只要投影的范围没有发生改变我们便不计算新的<code>ratio</code></li>\r\n</ul></li>\r\n</ul></li>\r\n<li>计算新的<code>left,right,bottom,top</code> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OpenGLWidget::resizeGL</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    glViewport(<span class=\"number\">0</span>,<span class=\"number\">0</span>,w,h);</span><br><span class=\"line\"></span><br><span class=\"line\">    left = - w / ratio;</span><br><span class=\"line\">    right = <span class=\"built_in\">abs</span>(left);</span><br><span class=\"line\">    bottom = -h / ratio;</span><br><span class=\"line\">    top = <span class=\"built_in\">abs</span>(bottom);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"更新投影矩阵\">更新投影矩阵</h4>\r\n<ul>\r\n<li>update\r\n<ul>\r\n<li>关于<code>zNear &amp; zFar</code>投影当二维平面时候，并未使用这两个参数\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">projMat.ortho(left,right,bottom,top,<span class=\"number\">0.1f</span>,<span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"更新绘制的场景\">更新绘制的场景</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">shaderProgram.bind(); </span><br><span class=\"line\">shaderProgram-&gt;setUniformValue(<span class=\"string\">&quot;projectionMatrix&quot;</span>, projMat); </span><br><span class=\"line\">glDrawArray()</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>QtOpenGL</code>平行投影窗口缩放导致图形变形...\r\n</p>","more":"<center>\r\n<h2>\r\nOpenGL parallel projection graphics do not scale with the window\r\n</h2>\r\n</center>\r\n<h3 id=\"实现步骤\">实现步骤</h3>\r\n<ul>\r\n<li>重写窗口的<code>resize</code>事件\r\n<ul>\r\n<li>计算投影的范围</li>\r\n</ul></li>\r\n<li>更新投影矩阵</li>\r\n<li><code>drawcull</code></li>\r\n</ul>\r\n<h4 id=\"resizegl\"><code>resizeGL</code></h4>\r\n<ul>\r\n<li>我们最初计算一个比例：\r\n<ul>\r\n<li>关于窗口的<code>size</code>和投影的范围的\r\n<ul>\r\n<li>使用<code>left, right</code>计算一个<code>spanx(right - left)</code>,\r\n<code>top, bottom</code>计算<code>spany(top - bottom)</code>,\r\n分别与窗口的宽高比较 <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> ratioW = w / spanx;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> ratioH = h / spany; </span><br><span class=\"line\"><span class=\"comment\">// 取最小的一个 </span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> ratio = <span class=\"built_in\">std</span>::min(ratioW,ratioH);</span><br></pre></td></tr></table></figure></li>\r\n</ul></li>\r\n<li>每次窗口缩放，我们就使用上述的范围计算新的<code>left,right,bottom,top</code>\r\n<ul>\r\n<li>只要投影的范围没有发生改变我们便不计算新的<code>ratio</code></li>\r\n</ul></li>\r\n</ul></li>\r\n<li>计算新的<code>left,right,bottom,top</code> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OpenGLWidget::resizeGL</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    glViewport(<span class=\"number\">0</span>,<span class=\"number\">0</span>,w,h);</span><br><span class=\"line\"></span><br><span class=\"line\">    left = - w / ratio;</span><br><span class=\"line\">    right = <span class=\"built_in\">abs</span>(left);</span><br><span class=\"line\">    bottom = -h / ratio;</span><br><span class=\"line\">    top = <span class=\"built_in\">abs</span>(bottom);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<h4 id=\"更新投影矩阵\">更新投影矩阵</h4>\r\n<ul>\r\n<li>update\r\n<ul>\r\n<li>关于<code>zNear &amp; zFar</code>投影当二维平面时候，并未使用这两个参数\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">projMat.ortho(left,right,bottom,top,<span class=\"number\">0.1f</span>,<span class=\"number\">100.0f</span>);</span><br></pre></td></tr></table></figure></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"更新绘制的场景\">更新绘制的场景</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">shaderProgram.bind(); </span><br><span class=\"line\">shaderProgram-&gt;setUniformValue(<span class=\"string\">&quot;projectionMatrix&quot;</span>, projMat); </span><br><span class=\"line\">glDrawArray()</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"OpenGL Scene ZoomIn & ZoomOut","date":"2022-08-03T13:01:52.000Z","_content":"\n<p>\n&ensp;&ensp;<code>QtOpenGL</code>场景缩放...\n</p>\n\n<!-- more -->\n\n\n<!-- # `OpenGL Scene ZoomIn & ZoomOut` -->\n<center> <h1>OpenGL的缩放</h1></center>\n\n## About\n### 1. 直接缩放场景\n#### 1. 实现思路\n- 通过模型矩阵修改场景\n\n### 2. 修改投影矩阵\n#### 1. 实现思路\n- 获取鼠标滚轮的变化(这个改变是带方向的 向上获取一个正值,向下获取的是一个负值)\n- 将获取的这个值映射到和投影变换参数上\n- 修改投影矩阵\n- 重新绘制,你将获得缩放后的场景\n\n<p style=\"color:red\">\n在我的实现中采用的是第二种方式\n</p>\n\n## 缩放的实现\n### 1. 获取滚轮旋转角度\n<p>\n    我是用的是<code>Qt</code>的<code>OpenGL</code>,可以直接重写窗口的一些事件，比起使用<code>glfw</code>等方式，比起它们注册回调的方式可能相对方便一些。\n</p>\n\n#### Qt的滚轮事件\n##### `QWheelEvent`\n- 在出发滚轮事件之后，我们通过一个`QWheelEvent`对象获取我们需要的关于滚轮的信息\n\n<div>\n\n<p>\n    &ensp;&ensp;Wheel events are sent to the widget under the mouse cursor, but if that widget does not handle the event they are sent to the focus widget. Wheel events are generated for both mouse wheels and trackpad scroll gestures. There are two ways to read the wheel event delta: <code>angleDelta()</code> returns the deltas in wheel degrees. These values are always provided. <code>pixelDelta()</code> returns the deltas in screen pixels.\n</p>\n\n<p>\n    &ensp;&ensp; 上述部分来自<code>Qt</code>官方文档,我们有两种方法可以获取鼠标滚轮的增量(正负代表方向)，<code>angleDelta()</code>，<code>pixelDelta()</code>.\n</p>\n\n</div>\n\n<h6> <code>QPoint QWheelEvent::angleDelta() const</code> </h6>\n\n<p>\n&ensp;&ensp;Returns the relative amount that the wheel was rotated, in eighths of a degree. A positive value indicates that the wheel was rotated forwards away from the user; a negative value indicates that the wheel was rotated backwards toward the user. angleDelta().y() provides the angle through which the common vertical mouse wheel was rotated since the previous event. angleDelta().x() provides the angle through which the horizontal mouse wheel was rotated, if the mouse has a horizontal wheel; otherwise it stays at zero. Some mice allow the user to tilt the wheel to perform horizontal scrolling, and some touchpads support a horizontal scrolling gesture; that will also appear in angleDelta().x().\n\n&ensp;&ensp;Most mouse types work in steps of 15 degrees, in which case the delta value is a multiple of 120; i.e., 120 units * 1/8 = 15 degrees.\n</p>\n\n- 正值表示滚轮向上,远离用户. 负值向下,靠近用户.\n- 此函数将返回两个方向上的滚动\n    - <font color=red>我们此处使用是垂直方向的滚动的角度 </font>\n- 滚轮每次触发滚动的的角度是$15^\\circ\\left(delta\\right)$，但是实际的返回值是 $delta \\times 8  = 120 $\n- 返回的值应以 $ 1/8 $ 为单位:\n    - $angleDelta() / 8$ 得到鼠标实际滚动的度数\n- <code style=\"color:red\">通过上面步骤便可以获取滚轮实际旋转的角度</code>\n\n### 2. 将滚轮旋转角度映射到投影矩阵\n- $ratio = delta/360^\\circ$\n- 使用这个值去修改投影矩阵的参数 \n- 我们使用的是平行投影的方式 \n  - `left`\n  - `rght`\n  - `bottom`\n  - `top`\n\n\n### 3. 更新投影矩阵\n- 在此之前 请将矩阵设置为单位矩阵 然后重新计算投影矩阵\n- 更新投影矩阵\n- 调用强制重新绘制(`Qt`) - `repaint()`\n- 你将得到放大后的场景\n\n","source":"_posts/OpenGL-Scene-ZoomIn-ZoomOut.md","raw":"---\ntitle: OpenGL Scene ZoomIn & ZoomOut\ndate: 2022-08-03 21:01:52\ncategories:\n- Computer Graph\n- works\n- SCUU\ntags:\n- OpenGL\n---\n\n<p>\n&ensp;&ensp;<code>QtOpenGL</code>场景缩放...\n</p>\n\n<!-- more -->\n\n\n<!-- # `OpenGL Scene ZoomIn & ZoomOut` -->\n<center> <h1>OpenGL的缩放</h1></center>\n\n## About\n### 1. 直接缩放场景\n#### 1. 实现思路\n- 通过模型矩阵修改场景\n\n### 2. 修改投影矩阵\n#### 1. 实现思路\n- 获取鼠标滚轮的变化(这个改变是带方向的 向上获取一个正值,向下获取的是一个负值)\n- 将获取的这个值映射到和投影变换参数上\n- 修改投影矩阵\n- 重新绘制,你将获得缩放后的场景\n\n<p style=\"color:red\">\n在我的实现中采用的是第二种方式\n</p>\n\n## 缩放的实现\n### 1. 获取滚轮旋转角度\n<p>\n    我是用的是<code>Qt</code>的<code>OpenGL</code>,可以直接重写窗口的一些事件，比起使用<code>glfw</code>等方式，比起它们注册回调的方式可能相对方便一些。\n</p>\n\n#### Qt的滚轮事件\n##### `QWheelEvent`\n- 在出发滚轮事件之后，我们通过一个`QWheelEvent`对象获取我们需要的关于滚轮的信息\n\n<div>\n\n<p>\n    &ensp;&ensp;Wheel events are sent to the widget under the mouse cursor, but if that widget does not handle the event they are sent to the focus widget. Wheel events are generated for both mouse wheels and trackpad scroll gestures. There are two ways to read the wheel event delta: <code>angleDelta()</code> returns the deltas in wheel degrees. These values are always provided. <code>pixelDelta()</code> returns the deltas in screen pixels.\n</p>\n\n<p>\n    &ensp;&ensp; 上述部分来自<code>Qt</code>官方文档,我们有两种方法可以获取鼠标滚轮的增量(正负代表方向)，<code>angleDelta()</code>，<code>pixelDelta()</code>.\n</p>\n\n</div>\n\n<h6> <code>QPoint QWheelEvent::angleDelta() const</code> </h6>\n\n<p>\n&ensp;&ensp;Returns the relative amount that the wheel was rotated, in eighths of a degree. A positive value indicates that the wheel was rotated forwards away from the user; a negative value indicates that the wheel was rotated backwards toward the user. angleDelta().y() provides the angle through which the common vertical mouse wheel was rotated since the previous event. angleDelta().x() provides the angle through which the horizontal mouse wheel was rotated, if the mouse has a horizontal wheel; otherwise it stays at zero. Some mice allow the user to tilt the wheel to perform horizontal scrolling, and some touchpads support a horizontal scrolling gesture; that will also appear in angleDelta().x().\n\n&ensp;&ensp;Most mouse types work in steps of 15 degrees, in which case the delta value is a multiple of 120; i.e., 120 units * 1/8 = 15 degrees.\n</p>\n\n- 正值表示滚轮向上,远离用户. 负值向下,靠近用户.\n- 此函数将返回两个方向上的滚动\n    - <font color=red>我们此处使用是垂直方向的滚动的角度 </font>\n- 滚轮每次触发滚动的的角度是$15^\\circ\\left(delta\\right)$，但是实际的返回值是 $delta \\times 8  = 120 $\n- 返回的值应以 $ 1/8 $ 为单位:\n    - $angleDelta() / 8$ 得到鼠标实际滚动的度数\n- <code style=\"color:red\">通过上面步骤便可以获取滚轮实际旋转的角度</code>\n\n### 2. 将滚轮旋转角度映射到投影矩阵\n- $ratio = delta/360^\\circ$\n- 使用这个值去修改投影矩阵的参数 \n- 我们使用的是平行投影的方式 \n  - `left`\n  - `rght`\n  - `bottom`\n  - `top`\n\n\n### 3. 更新投影矩阵\n- 在此之前 请将矩阵设置为单位矩阵 然后重新计算投影矩阵\n- 更新投影矩阵\n- 调用强制重新绘制(`Qt`) - `repaint()`\n- 你将得到放大后的场景\n\n","slug":"OpenGL-Scene-ZoomIn-ZoomOut","published":1,"updated":"2022-08-21T15:34:56.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravo001k7cdae4h9fodt","content":"<p>\r\n  <code>QtOpenGL</code>场景缩放...\r\n</p>\r\n<span id=\"more\"></span>\r\n<!-- # `OpenGL Scene ZoomIn & ZoomOut` -->\r\n<center>\r\n<h1>\r\nOpenGL的缩放\r\n</h1>\r\n</center>\r\n<h2 id=\"about\">About</h2>\r\n<h3 id=\"直接缩放场景\">1. 直接缩放场景</h3>\r\n<h4 id=\"实现思路\">1. 实现思路</h4>\r\n<ul>\r\n<li>通过模型矩阵修改场景</li>\r\n</ul>\r\n<h3 id=\"修改投影矩阵\">2. 修改投影矩阵</h3>\r\n<h4 id=\"实现思路-1\">1. 实现思路</h4>\r\n<ul>\r\n<li>获取鼠标滚轮的变化(这个改变是带方向的\r\n向上获取一个正值,向下获取的是一个负值)</li>\r\n<li>将获取的这个值映射到和投影变换参数上</li>\r\n<li>修改投影矩阵</li>\r\n<li>重新绘制,你将获得缩放后的场景</li>\r\n</ul>\r\n<p style=\"color:red\">\r\n在我的实现中采用的是第二种方式\r\n</p>\r\n<h2 id=\"缩放的实现\">缩放的实现</h2>\r\n<h3 id=\"获取滚轮旋转角度\">1. 获取滚轮旋转角度</h3>\r\n<p>\r\n我是用的是<code>Qt</code>的<code>OpenGL</code>,可以直接重写窗口的一些事件，比起使用<code>glfw</code>等方式，比起它们注册回调的方式可能相对方便一些。\r\n</p>\r\n<h4 id=\"qt的滚轮事件\">Qt的滚轮事件</h4>\r\n<h5 id=\"qwheelevent\"><code>QWheelEvent</code></h5>\r\n<ul>\r\n<li>在出发滚轮事件之后，我们通过一个<code>QWheelEvent</code>对象获取我们需要的关于滚轮的信息</li>\r\n</ul>\r\n<div>\r\n<p>\r\n  Wheel events are sent to the widget under the mouse cursor, but if\r\nthat widget does not handle the event they are sent to the focus widget.\r\nWheel events are generated for both mouse wheels and trackpad scroll\r\ngestures. There are two ways to read the wheel event delta:\r\n<code>angleDelta()</code> returns the deltas in wheel degrees. These\r\nvalues are always provided. <code>pixelDelta()</code> returns the deltas\r\nin screen pixels.\r\n</p>\r\n<p>\r\n  \r\n上述部分来自<code>Qt</code>官方文档,我们有两种方法可以获取鼠标滚轮的增量(正负代表方向)，<code>angleDelta()</code>，<code>pixelDelta()</code>.\r\n</p>\r\n</div>\r\n<h6>\r\n<code>QPoint QWheelEvent::angleDelta() const</code>\r\n</h6>\r\n<p>\r\n<p>  Returns the relative amount that the wheel was rotated, in eighths\r\nof a degree. A positive value indicates that the wheel was rotated\r\nforwards away from the user; a negative value indicates that the wheel\r\nwas rotated backwards toward the user. angleDelta().y() provides the\r\nangle through which the common vertical mouse wheel was rotated since\r\nthe previous event. angleDelta().x() provides the angle through which\r\nthe horizontal mouse wheel was rotated, if the mouse has a horizontal\r\nwheel; otherwise it stays at zero. Some mice allow the user to tilt the\r\nwheel to perform horizontal scrolling, and some touchpads support a\r\nhorizontal scrolling gesture; that will also appear in\r\nangleDelta().x().</p>\r\n  Most mouse types work in steps of 15 degrees, in which case the delta\r\nvalue is a multiple of 120; i.e., 120 units * 1/8 = 15 degrees.\r\n</p>\r\n<ul>\r\n<li>正值表示滚轮向上,远离用户. 负值向下,靠近用户.</li>\r\n<li>此函数将返回两个方向上的滚动\r\n<ul>\r\n<li><font color=red>我们此处使用是垂直方向的滚动的角度 </font></li>\r\n</ul></li>\r\n<li>滚轮每次触发滚动的的角度是<span\r\nclass=\"math inline\">\\(15^\\circ\\left(delta\\right)\\)</span>，但是实际的返回值是\r\n$delta = 120 $</li>\r\n<li>返回的值应以 $ 1/8 $ 为单位:\r\n<ul>\r\n<li><span class=\"math inline\">\\(angleDelta() / 8\\)</span>\r\n得到鼠标实际滚动的度数</li>\r\n</ul></li>\r\n<li><code style=\"color:red\">通过上面步骤便可以获取滚轮实际旋转的角度</code></li>\r\n</ul>\r\n<h3 id=\"将滚轮旋转角度映射到投影矩阵\">2.\r\n将滚轮旋转角度映射到投影矩阵</h3>\r\n<ul>\r\n<li><span class=\"math inline\">\\(ratio = delta/360^\\circ\\)</span></li>\r\n<li>使用这个值去修改投影矩阵的参数</li>\r\n<li>我们使用的是平行投影的方式\r\n<ul>\r\n<li><code>left</code></li>\r\n<li><code>rght</code></li>\r\n<li><code>bottom</code></li>\r\n<li><code>top</code></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"更新投影矩阵\">3. 更新投影矩阵</h3>\r\n<ul>\r\n<li>在此之前 请将矩阵设置为单位矩阵 然后重新计算投影矩阵</li>\r\n<li>更新投影矩阵</li>\r\n<li>调用强制重新绘制(<code>Qt</code>) - <code>repaint()</code></li>\r\n<li>你将得到放大后的场景</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>QtOpenGL</code>场景缩放...\r\n</p>","more":"<!-- # `OpenGL Scene ZoomIn & ZoomOut` -->\r\n<center>\r\n<h1>\r\nOpenGL的缩放\r\n</h1>\r\n</center>\r\n<h2 id=\"about\">About</h2>\r\n<h3 id=\"直接缩放场景\">1. 直接缩放场景</h3>\r\n<h4 id=\"实现思路\">1. 实现思路</h4>\r\n<ul>\r\n<li>通过模型矩阵修改场景</li>\r\n</ul>\r\n<h3 id=\"修改投影矩阵\">2. 修改投影矩阵</h3>\r\n<h4 id=\"实现思路-1\">1. 实现思路</h4>\r\n<ul>\r\n<li>获取鼠标滚轮的变化(这个改变是带方向的\r\n向上获取一个正值,向下获取的是一个负值)</li>\r\n<li>将获取的这个值映射到和投影变换参数上</li>\r\n<li>修改投影矩阵</li>\r\n<li>重新绘制,你将获得缩放后的场景</li>\r\n</ul>\r\n<p style=\"color:red\">\r\n在我的实现中采用的是第二种方式\r\n</p>\r\n<h2 id=\"缩放的实现\">缩放的实现</h2>\r\n<h3 id=\"获取滚轮旋转角度\">1. 获取滚轮旋转角度</h3>\r\n<p>\r\n我是用的是<code>Qt</code>的<code>OpenGL</code>,可以直接重写窗口的一些事件，比起使用<code>glfw</code>等方式，比起它们注册回调的方式可能相对方便一些。\r\n</p>\r\n<h4 id=\"qt的滚轮事件\">Qt的滚轮事件</h4>\r\n<h5 id=\"qwheelevent\"><code>QWheelEvent</code></h5>\r\n<ul>\r\n<li>在出发滚轮事件之后，我们通过一个<code>QWheelEvent</code>对象获取我们需要的关于滚轮的信息</li>\r\n</ul>\r\n<div>\r\n<p>\r\n  Wheel events are sent to the widget under the mouse cursor, but if\r\nthat widget does not handle the event they are sent to the focus widget.\r\nWheel events are generated for both mouse wheels and trackpad scroll\r\ngestures. There are two ways to read the wheel event delta:\r\n<code>angleDelta()</code> returns the deltas in wheel degrees. These\r\nvalues are always provided. <code>pixelDelta()</code> returns the deltas\r\nin screen pixels.\r\n</p>\r\n<p>\r\n  \r\n上述部分来自<code>Qt</code>官方文档,我们有两种方法可以获取鼠标滚轮的增量(正负代表方向)，<code>angleDelta()</code>，<code>pixelDelta()</code>.\r\n</p>\r\n</div>\r\n<h6>\r\n<code>QPoint QWheelEvent::angleDelta() const</code>\r\n</h6>\r\n<p>\r\n<p>  Returns the relative amount that the wheel was rotated, in eighths\r\nof a degree. A positive value indicates that the wheel was rotated\r\nforwards away from the user; a negative value indicates that the wheel\r\nwas rotated backwards toward the user. angleDelta().y() provides the\r\nangle through which the common vertical mouse wheel was rotated since\r\nthe previous event. angleDelta().x() provides the angle through which\r\nthe horizontal mouse wheel was rotated, if the mouse has a horizontal\r\nwheel; otherwise it stays at zero. Some mice allow the user to tilt the\r\nwheel to perform horizontal scrolling, and some touchpads support a\r\nhorizontal scrolling gesture; that will also appear in\r\nangleDelta().x().</p>\r\n  Most mouse types work in steps of 15 degrees, in which case the delta\r\nvalue is a multiple of 120; i.e., 120 units * 1/8 = 15 degrees.\r\n</p>\r\n<ul>\r\n<li>正值表示滚轮向上,远离用户. 负值向下,靠近用户.</li>\r\n<li>此函数将返回两个方向上的滚动\r\n<ul>\r\n<li><font color=red>我们此处使用是垂直方向的滚动的角度 </font></li>\r\n</ul></li>\r\n<li>滚轮每次触发滚动的的角度是<span\r\nclass=\"math inline\">\\(15^\\circ\\left(delta\\right)\\)</span>，但是实际的返回值是\r\n$delta = 120 $</li>\r\n<li>返回的值应以 $ 1/8 $ 为单位:\r\n<ul>\r\n<li><span class=\"math inline\">\\(angleDelta() / 8\\)</span>\r\n得到鼠标实际滚动的度数</li>\r\n</ul></li>\r\n<li><code style=\"color:red\">通过上面步骤便可以获取滚轮实际旋转的角度</code></li>\r\n</ul>\r\n<h3 id=\"将滚轮旋转角度映射到投影矩阵\">2.\r\n将滚轮旋转角度映射到投影矩阵</h3>\r\n<ul>\r\n<li><span class=\"math inline\">\\(ratio = delta/360^\\circ\\)</span></li>\r\n<li>使用这个值去修改投影矩阵的参数</li>\r\n<li>我们使用的是平行投影的方式\r\n<ul>\r\n<li><code>left</code></li>\r\n<li><code>rght</code></li>\r\n<li><code>bottom</code></li>\r\n<li><code>top</code></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"更新投影矩阵\">3. 更新投影矩阵</h3>\r\n<ul>\r\n<li>在此之前 请将矩阵设置为单位矩阵 然后重新计算投影矩阵</li>\r\n<li>更新投影矩阵</li>\r\n<li>调用强制重新绘制(<code>Qt</code>) - <code>repaint()</code></li>\r\n<li>你将得到放大后的场景</li>\r\n</ul>"},{"title":"OpenGL的手动初始化","date":"2022-11-03T15:35:17.000Z","_content":"","source":"_posts/OpenGL的手动初始化.md","raw":"---\ntitle: OpenGL的手动初始化\ndate: 2022-11-03 23:35:17\ntags:\n---\n","slug":"OpenGL的手动初始化","published":1,"updated":"2022-11-03T15:35:17.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravr001p7cda7dre443m","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"Physical Sort","date":"2021-11-07T10:05:13.000Z","_content":"\n<p>\n&ensp;&ensp;物理排序...\n</p>\n\n<!-- more -->\n\n### 物理排序\n\n- 我们从上一节的知识开始 {% post_link  Table-Sort 表排序 %}，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求\n- 排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成\n\n|   A   |           A[0]           |           A[1]           |            A[2]             |           A[3]           |           A[4]            |           A[5]           |           A[6]            |           A[7]            |           A[8]            |              A[9]              |\n| :---: | :----------------------: | :----------------------: | :-------------------------: | :----------------------: | :-----------------------: | :----------------------: | :-----------------------: | :-----------------------: | :-----------------------: | :----------------------------: |\n|  Key  |            f             |            d             |              c              |            a             |             g             |            b             |             h             |             e             |             i             |               u                |\n| table |            0             |            1             |              2              |            3             |             4             |            5             |             6             |             7             |             8             |               9                |\n|  环   | <font color=red>3</font> | <font color=red>5</font> | <font color=yellow>2</font> | <font color=red>1</font> | <font color=blue>7</font> | <font color=red>0</font> | <font color=blue>4</font> | <font color=blue>6</font> | <font color=pink>8</font> | <font color=\"#32FF00\">9</font> |\n\n- 我们从`table[0]= 3` 开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环\n\n  ```C++ \n  // table[0] -> table[3] -> table[1] -> table[0]\n  // 上述序列构成了一个环\n  ```\n\n- 排序，按环处理：\n\n  - 首先，取一个临时变量`temp`随机存储，环中的任意一个元素，以A[0]为例：\n\n    ```C++ \n    temp  = f;  // 此时A[0] 为空 \n    ```\n\n  - 将table中的元素放到`A[0],A[0] = A[table[0]];`\n  \n  - |    A    |           A[0]           |           A[1]           | A[2] |           A[3]           | A[4] |           A[5]           | A[6] | A[7] | A[8] | A[9] |\n    | :-----: | :----------------------: | :----------------------: | :--: | :----------------------: | :--: | :----------------------: | :--: | :--: | :--: | :--: |\n    |   Key   |            f             |            d             |  c   |            a             |  g   |            b             |  h   |  e   |  i   |  u   |\n    |  table  |            0             |            1             |  2   |            3             |  4   |            5             |  6   |  7   |  8   |  9   |\n    |   环    | <font color=red>3</font> | <font color=red>5</font> |      | <font color=red>1</font> |      | <font color=red>0</font> |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |                          |      |           null           |      |                          |      |      |      |      |\n    |  table  |            0             |                          |      |            1             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |           null           |      |            d             |      |                          |      |      |      |      |\n    |  table  |            0             |            5             |      |            3             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |           null           |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            0             |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |            f             |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            5             |      |      |      |      |\n    \n  - 判断环结束：\n  \n    - `table[i] == i`，此时环结束\n  \n- 复杂度分析：\n\n  - 最好： 初始的时候都有序\n  - 最坏：两本书(a,b)发生交换，需要三个步骤：\n    - 两本书发生交换：\n      - 取出一本(a)，temp\n      - a = b;\n      - b = temp;\n    - 存在[N/2]个环，每个环两个元素，需要[3N/2]此移动\n  - `T = O(mN)`,m是每个元素A的复制时间\n","source":"_posts/Physical-Sort.md","raw":"---\ntitle: Physical Sort\ndate: 2021-11-07 18:05:13\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;物理排序...\n</p>\n\n<!-- more -->\n\n### 物理排序\n\n- 我们从上一节的知识开始 {% post_link  Table-Sort 表排序 %}，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求\n- 排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成\n\n|   A   |           A[0]           |           A[1]           |            A[2]             |           A[3]           |           A[4]            |           A[5]           |           A[6]            |           A[7]            |           A[8]            |              A[9]              |\n| :---: | :----------------------: | :----------------------: | :-------------------------: | :----------------------: | :-----------------------: | :----------------------: | :-----------------------: | :-----------------------: | :-----------------------: | :----------------------------: |\n|  Key  |            f             |            d             |              c              |            a             |             g             |            b             |             h             |             e             |             i             |               u                |\n| table |            0             |            1             |              2              |            3             |             4             |            5             |             6             |             7             |             8             |               9                |\n|  环   | <font color=red>3</font> | <font color=red>5</font> | <font color=yellow>2</font> | <font color=red>1</font> | <font color=blue>7</font> | <font color=red>0</font> | <font color=blue>4</font> | <font color=blue>6</font> | <font color=pink>8</font> | <font color=\"#32FF00\">9</font> |\n\n- 我们从`table[0]= 3` 开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环\n\n  ```C++ \n  // table[0] -> table[3] -> table[1] -> table[0]\n  // 上述序列构成了一个环\n  ```\n\n- 排序，按环处理：\n\n  - 首先，取一个临时变量`temp`随机存储，环中的任意一个元素，以A[0]为例：\n\n    ```C++ \n    temp  = f;  // 此时A[0] 为空 \n    ```\n\n  - 将table中的元素放到`A[0],A[0] = A[table[0]];`\n  \n  - |    A    |           A[0]           |           A[1]           | A[2] |           A[3]           | A[4] |           A[5]           | A[6] | A[7] | A[8] | A[9] |\n    | :-----: | :----------------------: | :----------------------: | :--: | :----------------------: | :--: | :----------------------: | :--: | :--: | :--: | :--: |\n    |   Key   |            f             |            d             |  c   |            a             |  g   |            b             |  h   |  e   |  i   |  u   |\n    |  table  |            0             |            1             |  2   |            3             |  4   |            5             |  6   |  7   |  8   |  9   |\n    |   环    | <font color=red>3</font> | <font color=red>5</font> |      | <font color=red>1</font> |      | <font color=red>0</font> |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |                          |      |           null           |      |                          |      |      |      |      |\n    |  table  |            0             |                          |      |            1             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |           null           |      |            d             |      |                          |      |      |      |      |\n    |  table  |            0             |            5             |      |            3             |      |                          |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |           null           |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            0             |      |      |      |      |\n    |         |                          |                          |      |                          |      |                          |      |      |      |      |\n    | new key |            a             |            b             |      |            d             |      |            f             |      |      |      |      |\n    |  table  |            0             |            1             |      |            3             |      |            5             |      |      |      |      |\n    \n  - 判断环结束：\n  \n    - `table[i] == i`，此时环结束\n  \n- 复杂度分析：\n\n  - 最好： 初始的时候都有序\n  - 最坏：两本书(a,b)发生交换，需要三个步骤：\n    - 两本书发生交换：\n      - 取出一本(a)，temp\n      - a = b;\n      - b = temp;\n    - 存在[N/2]个环，每个环两个元素，需要[3N/2]此移动\n  - `T = O(mN)`,m是每个元素A的复制时间\n","slug":"Physical-Sort","published":1,"updated":"2022-08-21T15:34:56.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravr001s7cda9fvp5j4h","content":"<p>\r\n  物理排序...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"物理排序\">物理排序</h3>\r\n<ul>\r\n<li>我们从上一节的知识开始\r\n<a href=\"/2021/11/07/Table-Sort/\" title=\"表排序\">表排序</a>，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求</li>\r\n<li>排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成</li>\r\n</ul>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 1%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 11%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">环</td>\r\n<td style=\"text-align: center;\"><font color=red>3</font></td>\r\n<td style=\"text-align: center;\"><font color=red>5</font></td>\r\n<td style=\"text-align: center;\"><font color=yellow>2</font></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>7</font></td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>4</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>6</font></td>\r\n<td style=\"text-align: center;\"><font color=pink>8</font></td>\r\n<td style=\"text-align: center;\"><font color=\"#32FF00\">9</font></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><p>我们从<code>table[0]= 3</code>\r\n开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// table[0] -&gt; table[3] -&gt; table[1] -&gt; table[0]</span></span><br><span class=\"line\"><span class=\"comment\">// 上述序列构成了一个环</span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>排序，按环处理：</p>\r\n<ul>\r\n<li><p>首先，取一个临时变量<code>temp</code>随机存储，环中的任意一个元素，以A[0]为例：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp  = f;  <span class=\"comment\">// 此时A[0] 为空 </span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>将table中的元素放到<code>A[0],A[0] = A[table[0]];</code></p></li>\r\n<li><table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 5%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">环</td>\r\n<td style=\"text-align: center;\"><font color=red>3</font></td>\r\n<td style=\"text-align: center;\"><font color=red>5</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n</tbody>\r\n</table></li>\r\n<li><p>判断环结束：</p>\r\n<ul>\r\n<li><code>table[i] == i</code>，此时环结束</li>\r\n</ul></li>\r\n</ul></li>\r\n<li><p>复杂度分析：</p>\r\n<ul>\r\n<li>最好： 初始的时候都有序</li>\r\n<li>最坏：两本书(a,b)发生交换，需要三个步骤：\r\n<ul>\r\n<li>两本书发生交换：\r\n<ul>\r\n<li>取出一本(a)，temp</li>\r\n<li>a = b;</li>\r\n<li>b = temp;</li>\r\n</ul></li>\r\n<li>存在[N/2]个环，每个环两个元素，需要[3N/2]此移动</li>\r\n</ul></li>\r\n<li><code>T = O(mN)</code>,m是每个元素A的复制时间</li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  物理排序...\r\n</p>","more":"<h3 id=\"物理排序\">物理排序</h3>\r\n<ul>\r\n<li>我们从上一节的知识开始\r\n<a href=\"/2021/11/07/Table-Sort/\" title=\"表排序\">表排序</a>，在某些需求下，我们需要实在的交换表中元素的物理地址，不能通过一张额外的table来达到我们的目的。物理排序可以到达我们的要求</li>\r\n<li>排序完成的结果如下，并且这个排序结果必然有若干个相互独立的环组成</li>\r\n</ul>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 1%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 10%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 11%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">环</td>\r\n<td style=\"text-align: center;\"><font color=red>3</font></td>\r\n<td style=\"text-align: center;\"><font color=red>5</font></td>\r\n<td style=\"text-align: center;\"><font color=yellow>2</font></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>7</font></td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>4</font></td>\r\n<td style=\"text-align: center;\"><font color=blue>6</font></td>\r\n<td style=\"text-align: center;\"><font color=pink>8</font></td>\r\n<td style=\"text-align: center;\"><font color=\"#32FF00\">9</font></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><p>我们从<code>table[0]= 3</code>\r\n开始,我们从不同的环的任意一个元素开始切入，遍历元素，最后我们都将回到这个元素，这就是环</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// table[0] -&gt; table[3] -&gt; table[1] -&gt; table[0]</span></span><br><span class=\"line\"><span class=\"comment\">// 上述序列构成了一个环</span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>排序，按环处理：</p>\r\n<ul>\r\n<li><p>首先，取一个临时变量<code>temp</code>随机存储，环中的任意一个元素，以A[0]为例：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp  = f;  <span class=\"comment\">// 此时A[0] 为空 </span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>将table中的元素放到<code>A[0],A[0] = A[table[0]];</code></p></li>\r\n<li><table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 5%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 3%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">环</td>\r\n<td style=\"text-align: center;\"><font color=red>3</font></td>\r\n<td style=\"text-align: center;\"><font color=red>5</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"><font color=red>1</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"><font color=red>0</font></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">null</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">new key</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n</tbody>\r\n</table></li>\r\n<li><p>判断环结束：</p>\r\n<ul>\r\n<li><code>table[i] == i</code>，此时环结束</li>\r\n</ul></li>\r\n</ul></li>\r\n<li><p>复杂度分析：</p>\r\n<ul>\r\n<li>最好： 初始的时候都有序</li>\r\n<li>最坏：两本书(a,b)发生交换，需要三个步骤：\r\n<ul>\r\n<li>两本书发生交换：\r\n<ul>\r\n<li>取出一本(a)，temp</li>\r\n<li>a = b;</li>\r\n<li>b = temp;</li>\r\n</ul></li>\r\n<li>存在[N/2]个环，每个环两个元素，需要[3N/2]此移动</li>\r\n</ul></li>\r\n<li><code>T = O(mN)</code>,m是每个元素A的复制时间</li>\r\n</ul></li>\r\n</ul>"},{"title":"Qt OpenGL Antialiasing-MSAA","date":"2022-08-02T09:16:16.000Z","_content":"\n<p>\n&ensp;&ensp;<code>QtOpenGL</code>MSAA算法介绍...\n</p>\n\n<!-- more -->\n\n## Qt OpenGL Antialiasing - MSAA \n\n### 锯齿是图形绘制中常见的问题\n- 这是一个采样不足然后信号丢失导致的问题\n- 经过各位前辈们的其扑后继的研究，终究是有了看起来不错的解决方案\n- 本文中我们采用一种名为`MSAA`的抗锯齿的技术\n\n### `MSAA`\n\n<p>\n&ensp;&ensp;超级采样抗锯齿（Super Sampling Anti-Aliasing）的原理是把当前分辨率成倍提高,然后再把画缩放到当前的显示器上。这样的做法实际上就是在显示尺寸不变的情况提高分辨率，让单个像素变得极小，这样就能够大幅减轻画面的锯齿感了。不过是由于对整个显示画面的放大，因此它消耗的显示资源也是非常大的。\n</p>\n\n### `Qt OpengGL` 的 `MSAA`\n\n#### 走样展示\n\n![走样](https://raw.githubusercontent.com/Ranbun/images/main/blog/OpenGL/OpenGLAntialiasing.png \"线的走样\")\n\n\n#### 开启`QtOpenGLWidget`的`MSAA`\n\n![MSAA](https://raw.githubusercontent.com/Ranbun/images/main/blog/OpenGL/OpenGLAntialiasing-MSAA.png \"MSAA\")\n\n#### 如何开启`QtOpenGL`的`MSAA`\n\n- `Qt`有他自己的关于`OpenGL`的封装，我们使用的`Qt`的关于`OpenGL`封装\n- 在创建`QOpenGLWidget`窗口时，在构造函数中添加如下代码：\n\n    ```cpp\n    QSurfaceFormat format;\n    format.setSamples(4);\n    setFormat(format);\n    ```\n\n    - `setFormat`是窗口`QOpenGLWidget`的函数，在构造函数中使用，会给后面所有依赖的小部件设置一个默认的`format`，对于后面的小部件(窗口)，如果不做格式的修改，将会使用在构造函数中调用`setFormat`函数设置的格式作为默认格式\n\n#### 失败的尝试\n<p>\n    &ensp;&ensp;我尝试，单独修改<code>QopenGLContext</code>的<code>QSurfaceFormat</code>,前面的部分是成功，我获取了当前窗口的<code>QopenGLContext</code>,修改了<code>QSurfaceFormat</code>，向其中添加了\n    启用<code>MSAA</code>的代码.然后调用<code>QopenGLContext</code>的<code>create</code>函数，企图重新创建一个<code>QopenGLContext</code>，但是失败了，在初始化<code>QopenGLFunction</code>失败，<p style=\"color:red\">暂时不知道原因,目测可能需要重新将当前窗口的绑定到重新创建后的上下文，以及调用这个上下文的<code>OpenGL</code>函数\n    </p>\n</p>\n\n\n\n\n\n\n","source":"_posts/Qt-OpenGL-Antialiasing-MSAA.md","raw":"---\ntitle: Qt OpenGL Antialiasing-MSAA\ndate: 2022-08-02 17:16:16\ncategories:\n - works\n - SCUU\n - Computer Graph\ntags:\n- OpenGL\n- Qt\n---\n\n<p>\n&ensp;&ensp;<code>QtOpenGL</code>MSAA算法介绍...\n</p>\n\n<!-- more -->\n\n## Qt OpenGL Antialiasing - MSAA \n\n### 锯齿是图形绘制中常见的问题\n- 这是一个采样不足然后信号丢失导致的问题\n- 经过各位前辈们的其扑后继的研究，终究是有了看起来不错的解决方案\n- 本文中我们采用一种名为`MSAA`的抗锯齿的技术\n\n### `MSAA`\n\n<p>\n&ensp;&ensp;超级采样抗锯齿（Super Sampling Anti-Aliasing）的原理是把当前分辨率成倍提高,然后再把画缩放到当前的显示器上。这样的做法实际上就是在显示尺寸不变的情况提高分辨率，让单个像素变得极小，这样就能够大幅减轻画面的锯齿感了。不过是由于对整个显示画面的放大，因此它消耗的显示资源也是非常大的。\n</p>\n\n### `Qt OpengGL` 的 `MSAA`\n\n#### 走样展示\n\n![走样](https://raw.githubusercontent.com/Ranbun/images/main/blog/OpenGL/OpenGLAntialiasing.png \"线的走样\")\n\n\n#### 开启`QtOpenGLWidget`的`MSAA`\n\n![MSAA](https://raw.githubusercontent.com/Ranbun/images/main/blog/OpenGL/OpenGLAntialiasing-MSAA.png \"MSAA\")\n\n#### 如何开启`QtOpenGL`的`MSAA`\n\n- `Qt`有他自己的关于`OpenGL`的封装，我们使用的`Qt`的关于`OpenGL`封装\n- 在创建`QOpenGLWidget`窗口时，在构造函数中添加如下代码：\n\n    ```cpp\n    QSurfaceFormat format;\n    format.setSamples(4);\n    setFormat(format);\n    ```\n\n    - `setFormat`是窗口`QOpenGLWidget`的函数，在构造函数中使用，会给后面所有依赖的小部件设置一个默认的`format`，对于后面的小部件(窗口)，如果不做格式的修改，将会使用在构造函数中调用`setFormat`函数设置的格式作为默认格式\n\n#### 失败的尝试\n<p>\n    &ensp;&ensp;我尝试，单独修改<code>QopenGLContext</code>的<code>QSurfaceFormat</code>,前面的部分是成功，我获取了当前窗口的<code>QopenGLContext</code>,修改了<code>QSurfaceFormat</code>，向其中添加了\n    启用<code>MSAA</code>的代码.然后调用<code>QopenGLContext</code>的<code>create</code>函数，企图重新创建一个<code>QopenGLContext</code>，但是失败了，在初始化<code>QopenGLFunction</code>失败，<p style=\"color:red\">暂时不知道原因,目测可能需要重新将当前窗口的绑定到重新创建后的上下文，以及调用这个上下文的<code>OpenGL</code>函数\n    </p>\n</p>\n\n\n\n\n\n\n","slug":"Qt-OpenGL-Antialiasing-MSAA","published":1,"updated":"2022-08-21T15:34:56.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravs001w7cdae1bw9pa3","content":"<p>\r\n  <code>QtOpenGL</code>MSAA算法介绍...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"qt-opengl-antialiasing---msaa\">Qt OpenGL Antialiasing -\r\nMSAA</h2>\r\n<h3 id=\"锯齿是图形绘制中常见的问题\">锯齿是图形绘制中常见的问题</h3>\r\n<ul>\r\n<li>这是一个采样不足然后信号丢失导致的问题</li>\r\n<li>经过各位前辈们的其扑后继的研究，终究是有了看起来不错的解决方案</li>\r\n<li>本文中我们采用一种名为<code>MSAA</code>的抗锯齿的技术</li>\r\n</ul>\r\n<h3 id=\"msaa\"><code>MSAA</code></h3>\r\n<p>\r\n  超级采样抗锯齿（Super Sampling\r\nAnti-Aliasing）的原理是把当前分辨率成倍提高,然后再把画缩放到当前的显示器上。这样的做法实际上就是在显示尺寸不变的情况提高分辨率，让单个像素变得极小，这样就能够大幅减轻画面的锯齿感了。不过是由于对整个显示画面的放大，因此它消耗的显示资源也是非常大的。\r\n</p>\r\n<h3 id=\"qt-openggl-的-msaa\"><code>Qt OpengGL</code> 的\r\n<code>MSAA</code></h3>\r\n<h4 id=\"走样展示\">走样展示</h4>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/OpenGL/OpenGLAntialiasing.png\"\r\ntitle=\"线的走样\" alt=\"走样\" />\r\n<figcaption aria-hidden=\"true\">走样</figcaption>\r\n</figure>\r\n<h4\r\nid=\"开启qtopenglwidget的msaa\">开启<code>QtOpenGLWidget</code>的<code>MSAA</code></h4>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/OpenGL/OpenGLAntialiasing-MSAA.png\"\r\ntitle=\"MSAA\" alt=\"MSAA\" />\r\n<figcaption aria-hidden=\"true\">MSAA</figcaption>\r\n</figure>\r\n<h4\r\nid=\"如何开启qtopengl的msaa\">如何开启<code>QtOpenGL</code>的<code>MSAA</code></h4>\r\n<ul>\r\n<li><p><code>Qt</code>有他自己的关于<code>OpenGL</code>的封装，我们使用的<code>Qt</code>的关于<code>OpenGL</code>封装</p></li>\r\n<li><p>在创建<code>QOpenGLWidget</code>窗口时，在构造函数中添加如下代码：</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QSurfaceFormat format;</span><br><span class=\"line\">format.setSamples(<span class=\"number\">4</span>);</span><br><span class=\"line\">setFormat(format);</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li><code>setFormat</code>是窗口<code>QOpenGLWidget</code>的函数，在构造函数中使用，会给后面所有依赖的小部件设置一个默认的<code>format</code>，对于后面的小部件(窗口)，如果不做格式的修改，将会使用在构造函数中调用<code>setFormat</code>函数设置的格式作为默认格式</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"失败的尝试\">失败的尝试</h4>\r\n<p>\r\n  我尝试，单独修改<code>QopenGLContext</code>的<code>QSurfaceFormat</code>,前面的部分是成功，我获取了当前窗口的<code>QopenGLContext</code>,修改了<code>QSurfaceFormat</code>，向其中添加了\r\n启用<code>MSAA</code>的代码.然后调用<code>QopenGLContext</code>的<code>create</code>函数，企图重新创建一个<code>QopenGLContext</code>，但是失败了，在初始化<code>QopenGLFunction</code>失败，\r\n<p style=\"color:red\">\r\n暂时不知道原因,目测可能需要重新将当前窗口的绑定到重新创建后的上下文，以及调用这个上下文的<code>OpenGL</code>函数\r\n</p>\r\n</p>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>QtOpenGL</code>MSAA算法介绍...\r\n</p>","more":"<h2 id=\"qt-opengl-antialiasing---msaa\">Qt OpenGL Antialiasing -\r\nMSAA</h2>\r\n<h3 id=\"锯齿是图形绘制中常见的问题\">锯齿是图形绘制中常见的问题</h3>\r\n<ul>\r\n<li>这是一个采样不足然后信号丢失导致的问题</li>\r\n<li>经过各位前辈们的其扑后继的研究，终究是有了看起来不错的解决方案</li>\r\n<li>本文中我们采用一种名为<code>MSAA</code>的抗锯齿的技术</li>\r\n</ul>\r\n<h3 id=\"msaa\"><code>MSAA</code></h3>\r\n<p>\r\n  超级采样抗锯齿（Super Sampling\r\nAnti-Aliasing）的原理是把当前分辨率成倍提高,然后再把画缩放到当前的显示器上。这样的做法实际上就是在显示尺寸不变的情况提高分辨率，让单个像素变得极小，这样就能够大幅减轻画面的锯齿感了。不过是由于对整个显示画面的放大，因此它消耗的显示资源也是非常大的。\r\n</p>\r\n<h3 id=\"qt-openggl-的-msaa\"><code>Qt OpengGL</code> 的\r\n<code>MSAA</code></h3>\r\n<h4 id=\"走样展示\">走样展示</h4>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/OpenGL/OpenGLAntialiasing.png\"\r\ntitle=\"线的走样\" alt=\"走样\" />\r\n<figcaption aria-hidden=\"true\">走样</figcaption>\r\n</figure>\r\n<h4\r\nid=\"开启qtopenglwidget的msaa\">开启<code>QtOpenGLWidget</code>的<code>MSAA</code></h4>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/OpenGL/OpenGLAntialiasing-MSAA.png\"\r\ntitle=\"MSAA\" alt=\"MSAA\" />\r\n<figcaption aria-hidden=\"true\">MSAA</figcaption>\r\n</figure>\r\n<h4\r\nid=\"如何开启qtopengl的msaa\">如何开启<code>QtOpenGL</code>的<code>MSAA</code></h4>\r\n<ul>\r\n<li><p><code>Qt</code>有他自己的关于<code>OpenGL</code>的封装，我们使用的<code>Qt</code>的关于<code>OpenGL</code>封装</p></li>\r\n<li><p>在创建<code>QOpenGLWidget</code>窗口时，在构造函数中添加如下代码：</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QSurfaceFormat format;</span><br><span class=\"line\">format.setSamples(<span class=\"number\">4</span>);</span><br><span class=\"line\">setFormat(format);</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li><code>setFormat</code>是窗口<code>QOpenGLWidget</code>的函数，在构造函数中使用，会给后面所有依赖的小部件设置一个默认的<code>format</code>，对于后面的小部件(窗口)，如果不做格式的修改，将会使用在构造函数中调用<code>setFormat</code>函数设置的格式作为默认格式</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"失败的尝试\">失败的尝试</h4>\r\n<p>\r\n  我尝试，单独修改<code>QopenGLContext</code>的<code>QSurfaceFormat</code>,前面的部分是成功，我获取了当前窗口的<code>QopenGLContext</code>,修改了<code>QSurfaceFormat</code>，向其中添加了\r\n启用<code>MSAA</code>的代码.然后调用<code>QopenGLContext</code>的<code>create</code>函数，企图重新创建一个<code>QopenGLContext</code>，但是失败了，在初始化<code>QopenGLFunction</code>失败，\r\n<p style=\"color:red\">\r\n暂时不知道原因,目测可能需要重新将当前窗口的绑定到重新创建后的上下文，以及调用这个上下文的<code>OpenGL</code>函数\r\n</p>\r\n</p>"},{"title":"QuickSort","date":"2021-10-28T14:28:59.000Z","_content":"\n<p>\n&ensp;&ensp;快速排序...\n</p>\n\n<!-- more -->\n\n## Quick Sort\n\n#### 1、快速排序概述\n\n- 快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。\n\n- 伪码实现\n\n```C++ \nvoid QuickSort(ElementType A[],int N)\n{\n    if(N < 2)\n    {\n        return ; //数据有序 不需要排序\n    }\n    // 计算主元 -- 将数据分组\n    pivot = {A|A中的一个元素}\n    将A（S）分成两个独立的子集{A[] \\ pivot}；\n    A1 = {a∈S|a < pivot};\n    A2 = {a∈S|a > pivot};\n    // 递归调用QuickSort\n}\n```\n\n#### 2、选主元\n\n- 选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。\n\n- 下面介绍一种主元的选取方法：\n\n  - 取头，中，尾的中位数\n\n  - 伪码描述：\n  ```C++\n  ElementType Media3(ElementType A[],int left,int right)\n  {\n      int center = (left + right) / 2;\n      \n      // 如果坐标的比中间的大\n      if(A[left] > A[center])\n      {\n          Swap(&A[left],&A[center]);  // 交换 左中的值 \n          //此后 A[center] > A[left]\n      }\n      // 交换后的左 依旧大于右边\n      if(A[left] > A[right])\n      {\n           Swap(&A[left],&A[right]); \n      }\n      if(A[center] > A[right])\n      {\n           Swap(&A[center],&A[right]); \n      }\n      // A[right] > A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素\n      swap(&A[center],&A[right - 1]);\n      \n      return A[rigjt -1 ];  // 返回我们得到的主元 \n  }\n  ```\n\n#### 3、子集划分\n\n- 每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。\n\n#### 4、算法实现\n\n```C++ \nvoid QuickSort(ElementType A[], int left,int right)\n{\n    if(Cutoff <= right - left)\n    {\n        // 主元\n        poivt = Media3(A,left,right);\n        int i = left;        // i 当前指向第一个元素的位置 \n        int j = right - 1;   // J 指向主元的位置 \n        for(;;)\n        {\n            while(A[++i] < poivt){}\n            while(A[--j] > poivt){}\n            if(i < j)\n            {\n                swap(&A[i],A[j]);\n            }\n            else\n            {\n                break;\n            }\n        }\n        swap(&A[i],&A[right - 1]);\n        // 递归 \n        QuickSort(A,left,i-1);\n        QuickSort(A,i,right);\n    }\n    else\n    {\n        Insert_selection(A+left,right - left + 1);\n    }\n    \n}\n\n```\n\n","source":"_posts/QuickSort.md","raw":"---\ntitle: QuickSort\ndate: 2021-10-28 22:28:59\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;快速排序...\n</p>\n\n<!-- more -->\n\n## Quick Sort\n\n#### 1、快速排序概述\n\n- 快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。\n\n- 伪码实现\n\n```C++ \nvoid QuickSort(ElementType A[],int N)\n{\n    if(N < 2)\n    {\n        return ; //数据有序 不需要排序\n    }\n    // 计算主元 -- 将数据分组\n    pivot = {A|A中的一个元素}\n    将A（S）分成两个独立的子集{A[] \\ pivot}；\n    A1 = {a∈S|a < pivot};\n    A2 = {a∈S|a > pivot};\n    // 递归调用QuickSort\n}\n```\n\n#### 2、选主元\n\n- 选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。\n\n- 下面介绍一种主元的选取方法：\n\n  - 取头，中，尾的中位数\n\n  - 伪码描述：\n  ```C++\n  ElementType Media3(ElementType A[],int left,int right)\n  {\n      int center = (left + right) / 2;\n      \n      // 如果坐标的比中间的大\n      if(A[left] > A[center])\n      {\n          Swap(&A[left],&A[center]);  // 交换 左中的值 \n          //此后 A[center] > A[left]\n      }\n      // 交换后的左 依旧大于右边\n      if(A[left] > A[right])\n      {\n           Swap(&A[left],&A[right]); \n      }\n      if(A[center] > A[right])\n      {\n           Swap(&A[center],&A[right]); \n      }\n      // A[right] > A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素\n      swap(&A[center],&A[right - 1]);\n      \n      return A[rigjt -1 ];  // 返回我们得到的主元 \n  }\n  ```\n\n#### 3、子集划分\n\n- 每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。\n\n#### 4、算法实现\n\n```C++ \nvoid QuickSort(ElementType A[], int left,int right)\n{\n    if(Cutoff <= right - left)\n    {\n        // 主元\n        poivt = Media3(A,left,right);\n        int i = left;        // i 当前指向第一个元素的位置 \n        int j = right - 1;   // J 指向主元的位置 \n        for(;;)\n        {\n            while(A[++i] < poivt){}\n            while(A[--j] > poivt){}\n            if(i < j)\n            {\n                swap(&A[i],A[j]);\n            }\n            else\n            {\n                break;\n            }\n        }\n        swap(&A[i],&A[right - 1]);\n        // 递归 \n        QuickSort(A,left,i-1);\n        QuickSort(A,i,right);\n    }\n    else\n    {\n        Insert_selection(A+left,right - left + 1);\n    }\n    \n}\n\n```\n\n","slug":"QuickSort","published":1,"updated":"2022-09-08T09:32:45.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravt001y7cdaeqvb46cy","content":"<p>\r\n  快速排序...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"quick-sort\">Quick Sort</h2>\r\n<h4 id=\"快速排序概述\">1、快速排序概述</h4>\r\n<ul>\r\n<li><p>快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。</p></li>\r\n<li><p>伪码实现</p></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ; <span class=\"comment\">//数据有序 不需要排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算主元 -- 将数据分组</span></span><br><span class=\"line\">    pivot = &#123;A|A中的一个元素&#125;</span><br><span class=\"line\">    将A（S）分成两个独立的子集&#123;A[] \\ pivot&#125;；</span><br><span class=\"line\">    A1 = &#123;a∈S|a &lt; pivot&#125;;</span><br><span class=\"line\">    A2 = &#123;a∈S|a &gt; pivot&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 递归调用QuickSort</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"选主元\">2、选主元</h4>\r\n<ul>\r\n<li><p>选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。</p></li>\r\n<li><p>下面介绍一种主元的选取方法：</p>\r\n<ul>\r\n<li><p>取头，中，尾的中位数</p></li>\r\n<li><p>伪码描述： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ElementType <span class=\"title\">Media3</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果坐标的比中间的大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[center])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Swap(&amp;A[left],&amp;A[center]);  <span class=\"comment\">// 交换 左中的值 </span></span><br><span class=\"line\">        <span class=\"comment\">//此后 A[center] &gt; A[left]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换后的左 依旧大于右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[left],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[center] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[center],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A[right] &gt; A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素</span></span><br><span class=\"line\">    swap(&amp;A[center],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A[rigjt <span class=\"number\">-1</span> ];  <span class=\"comment\">// 返回我们得到的主元 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"子集划分\">3、子集划分</h4>\r\n<ul>\r\n<li>每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。</li>\r\n</ul>\r\n<h4 id=\"算法实现\">4、算法实现</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Cutoff &lt;= right - left)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主元</span></span><br><span class=\"line\">        poivt = Media3(A,left,right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;        <span class=\"comment\">// i 当前指向第一个元素的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right - <span class=\"number\">1</span>;   <span class=\"comment\">// J 指向主元的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[++i] &lt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[--j] &gt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(&amp;A[i],A[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(&amp;A[i],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// 递归 </span></span><br><span class=\"line\">        QuickSort(A,left,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        QuickSort(A,i,right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Insert_selection(A+left,right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  快速排序...\r\n</p>","more":"<h2 id=\"quick-sort\">Quick Sort</h2>\r\n<h4 id=\"快速排序概述\">1、快速排序概述</h4>\r\n<ul>\r\n<li><p>快速排序也是采用分治的思想实现的，首先你有一组无序的数据，然后通过某种方法，取一个这组数据的中间数（M），然后对这组数据进行分组，大于M放到M的右边，小于M放到M的左边。然后通过相同的方法对这两组数分别做相同的处理，直到数据有序。</p></li>\r\n<li><p>伪码实现</p></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ; <span class=\"comment\">//数据有序 不需要排序</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算主元 -- 将数据分组</span></span><br><span class=\"line\">    pivot = &#123;A|A中的一个元素&#125;</span><br><span class=\"line\">    将A（S）分成两个独立的子集&#123;A[] \\ pivot&#125;；</span><br><span class=\"line\">    A1 = &#123;a∈S|a &lt; pivot&#125;;</span><br><span class=\"line\">    A2 = &#123;a∈S|a &gt; pivot&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 递归调用QuickSort</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"选主元\">2、选主元</h4>\r\n<ul>\r\n<li><p>选择一个合适的主元是快速排序算法实现的关键，不能草率的取一个数作为主元。</p></li>\r\n<li><p>下面介绍一种主元的选取方法：</p>\r\n<ul>\r\n<li><p>取头，中，尾的中位数</p></li>\r\n<li><p>伪码描述： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ElementType <span class=\"title\">Media3</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 如果坐标的比中间的大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[center])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Swap(&amp;A[left],&amp;A[center]);  <span class=\"comment\">// 交换 左中的值 </span></span><br><span class=\"line\">        <span class=\"comment\">//此后 A[center] &gt; A[left]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 交换后的左 依旧大于右边</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[left] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[left],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[center] &gt; A[right])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         Swap(&amp;A[center],&amp;A[right]); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A[right] &gt; A[center] 此时我们将center的元素放到此位置，可以只考虑 left+1 -- right-2的元素</span></span><br><span class=\"line\">    swap(&amp;A[center],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> A[rigjt <span class=\"number\">-1</span> ];  <span class=\"comment\">// 返回我们得到的主元 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"子集划分\">3、子集划分</h4>\r\n<ul>\r\n<li>每次完成子集划分，主元会放到一个在全局中都正确的位置，将不会在改变。</li>\r\n</ul>\r\n<h4 id=\"算法实现\">4、算法实现</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Cutoff &lt;= right - left)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 主元</span></span><br><span class=\"line\">        poivt = Media3(A,left,right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;        <span class=\"comment\">// i 当前指向第一个元素的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = right - <span class=\"number\">1</span>;   <span class=\"comment\">// J 指向主元的位置 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[++i] &lt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(A[--j] &gt; poivt)&#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &lt; j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(&amp;A[i],A[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(&amp;A[i],&amp;A[right - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// 递归 </span></span><br><span class=\"line\">        QuickSort(A,left,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        QuickSort(A,i,right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Insert_selection(A+left,right - left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Qt Connect","date":"2022-07-29T09:26:28.000Z","_content":"\n<p>\n&ensp;&ensp;<code>Qt</code>信号与槽...\n</p>\n\n<!-- more -->\n\n# `Qt` \n- 是非常好的用于开发软件界面的库, 当然我这样说有些狭隘, `Qt`能做的事情远不止如此\n- 但本文我只是说一下`Qt`的信号槽机制\n\n## 1. `Qt`超级经典的信号与槽机制- `signal` & `slot`\n- 示例\n    ```cpp\n        class Use_SignalAndSlot:public QObject\n        {\n            Q_OBJECT\n        public:\n        // ......\n        signals:\n            void useSignalsAndSlots();\n        slots: // (槽函数可以不是slots下的函数)，可以是public or private or protected 下的函数\n            void OnuseSignalsAndSlots();\n        // ......\n        }\n    ```\n\n- `class` 必须是继承自 `QObject`\n- 要使用`Qt`的这个机制需要在`Class`的定义处添加`Q_OBJECT`的宏定义x\n- 定义信号是必须加上- `signals:` 前缀, 且信号不需要实现只需要定义，`Qt`有自己的解析机制\n\n### 1. 信号槽的不同写法 - 官方介绍\n\n#### `Qt4`\n来自官方的文档\n- 使用宏包裹\n    ```cpp\n    QMetaObject::Connection QObject::connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type = Qt::AutoConnection)\n    ```\n    <p> \n    &ensp;&ensp;Creates a connection of the given type from the signal in the sender object to the method in the receiver object. Returns a handle to the connection that can be used to disconnect it later.<br>\n    &ensp;&ensp;You must use the <code> SIGNAL() </code> and <code>SLOT()</code> macros when specifying the signal and the method, for example:\n    </p>\n    \n-  上面函数创建一个链接，并将这个链接作为返回值,这个返回值可以用于调用 `disconnect` 断开链接\n- example:\n    ```cpp\n\n    QLabel *label = new QLabel;\n    QScrollBar *scrollBar = new QScrollBar;\n    QObject::connect(scrollBar, SIGNAL(valueChanged(int)),label,  SLOT(setNum(int)));\n\n    ```\n- <font color=red id=\"danger\">友情提示：请记住这种写法，必须使用<code>SIGNAL</code>&<code>SLOT</code>将对应的信号和槽函数包裹起来，并且这种方法无法检测对应的信号和槽函数是否存在</font>\n- 在创建链接的时候，对应的信号中我们只需要给出参数的类型，不需要写出具体的参数名称:\n    <p>\n    &ensp;&ensp;This example ensures that the label always displays the current scroll bar value. Note that the signal and slots parameters must not contain any variable names, only the type. E.g. the following would not work and return false:\n    </p>\n\n    ```cpp\n    // WRONG\n    QObject::connect(scrollBar, SIGNAL(valueChanged(int value)),label, SLOT(setNum(int value)));\n    ```\n- overloads - 1\n\n    ```cpp\n    QMetaObject::Connection QObject::connect(const QObject *sender, const QMetaMethod &signal, const QObject *receiver, const QMetaMethod &method, Qt::ConnectionType type = Qt::AutoConnection)\n    ```\n    <p>\n    &ensp;&ensp;Creates a connection of the given type from the signal in the sender object to the method in the receiver object. Returns a handle to the connection that can be used to disconnect it later.<br>\n    &ensp;&ensp;The Connection handle will be invalid if it cannot create the connection, for example, the parameters were invalid. You can check if the <code>QMetaObject::Connection</code> is valid by casting it to a bool.<br>\n    &ensp;&ensp;This function works in the same way as <code>connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type)</code> but it uses <code>QMetaMethod</code> to specify signal and method.<br>\n    This function was introduced in Qt 4.8.\n    </p>\n\n- overloads - 2\n\n    ```cpp\n    QMetaObject::Connection QObject::connect(const QObject *sender, const char *signal, const char *method, Qt::ConnectionType type = Qt::AutoConnection) const\n    ```\n    <p>\n        &ensp;&ensp;This function overloads <code>connect()</code>.<br>\n        &ensp;&ensp;Connects signal from the sender object to this object's method.<br>\n        &ensp;&ensp;Equivalent to <code>connect(sender, signal, <font color=red>this</font>, method, type)</code>.<br>\n        &ensp;&ensp;Every connection you make emits a signal, so duplicate connections emit two signals. You can break a connection using <code>disconnect()</code>.<br>\n        &ensp;&ensp;Note: This function is <font color=#00ff00>thread-safe</font>. <br>\n        <font color=red>&ensp;&ensp;友情提示： 默认指定this作为接收者</font>\n    </p>\n\n\n#### `Qt5`之后    \n- 新的写法\n    ```cpp\n    template <typename PointerToMemberFunction> QMetaObject::Connection QObject::connect(const QObject *sender, PointerToMemberFunction signal, const QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type =  Qt::AutoConnection)\n    ```\n\n- <code>example</code>\n    ```cpp\n    QLabel *label = new QLabel;\n    QLineEdit *lineEdit = new QLineEdit;\n    QObject::connect(lineEdit, &QLineEdit::textChanged,label,  &QLabel::setText);\n    ```\n- 请注意信号和槽函数的参数必须是匹配的\n\n- overloads - 1\n\n    ```cpp\n    template <typename PointerToMemberFunction, typename Functor> \n    QMetaObject::Connection QObject::connect(const QObject *sender,PointerToMemberFunction signal, Functor functor)\n    // 这是个重载的函数\n\n    ```\n\n    - Example\n\n    ``` \n    void someFunction();\n    QPushButton *button = new QPushButton;\n    QObject::connect(button, &QPushButton::clicked, someFunction);\n    ```\n\n    - Lambda expressions can also be used:\n\n    ```cpp\n    QByteArray page = ...;\n    QTcpSocket *socket = new QTcpSocket;\n    socket->connectToHost(\"qt-project.org\", 80);\n    QObject::connect(socket, &QTcpSocket::connected, [=] () {\n            socket->write(\"GET \" + page + \"\\r\\n\");\n    });\n    ``` \n\n    <p>\n    &ensp;&ensp;The connection will automatically disconnect if the sender is destroyed. However, you should take care that any objects used within the functor are still alive when the signal is emitted.<br>\n    &ensp;&ensp;Overloaded functions can be resolved with help of qOverload.<br>\n    &ensp;&enspNote: This function is thread-safe.<br>\n    </p>\n\n- overloads - 2\n\n    ```cpp\n\n    template <typename PointerToMemberFunction, typename Functor> QMetaObject::Connection \n    QObject::connect(const QObject *sender, PointerToMemberFunction signal, const QObject *context, \n                    Functor functor, Qt::ConnectionType type = Qt::AutoConnection)\n\n    ```\n\n    <p>\n    &ensp;&ensp;This function overloads connect().<br>\n    &ensp;&ensp;Creates a connection of a given type from signal in sender object to functor to be placed in a specific event loop of context, and returns a handle to the connection.<br>\n    &ensp;&ensp;Note: <code>Qt::UniqueConnections</code> do not work for lambdas, non-member functions and functors; they only apply to connecting to member functions.<br>\n    &ensp;&ensp;The signal must be a function declared as a signal in the header. The slot function can be any function or functor that can be connected to the signal. A function can be connected to a given signal if the signal has at least as many argument as the slot. A functor can be connected to a signal if they have exactly the same number of arguments. There must exist implicit conversion between the types of the corresponding arguments in the signal and the slot.\n    </p>\n\n    - Example:\n\n    ```cpp\n    void someFunction();\n    QPushButton *button = new QPushButton;\n    QObject::connect(button, &QPushButton::clicked, this, someFunction, Qt::QueuedConnection);\n    ```\n    \n    - Lambda expressions can also be used:\n    \n    ```cpp\n    QByteArray page = ...;\n    QTcpSocket *socket = new QTcpSocket;\n    socket->connectToHost(\"qt-project.org\", 80);\n    QObject::connect(socket, &QTcpSocket::connected, this, [=] () {\n            socket->write(\"GET \" + page + \"\\r\\n\");\n        }, Qt::AutoConnection);\n     ```\n     \n    <p> \n    &ensp;&ensp;The connection will automatically disconnect if the sender or the context is destroyed. However, you should take care that any objects used within the functor are still alive when the signal is emitted.<br>\n    &ensp;&ensp;Overloaded functions can be resolved with help of qOverload.<br>\n    &ensp;&ensp;Note: This function is thread-safe.<br>\n    &ensp;&ensp;This function was introduced in Qt 5.2.\n    </p>\n\n### 2. 信号槽的不同写法 - 几种一般写法    \n\n##### `connect`的最后一个参数，我们暂时使用他的默认认为\n\n####  `Qt4的写法`\n- 宏包裹\n    ```cpp\n    QPushButton *btn = new QPushButton;\n    connect(btn, SIGNAL(clicked()), this, SLOT(close()));\n    ```\n- [注意事项](#danger)\n\n#### `Qt5`后的写法\n\n- 模板匹配\n\n    ```cpp \n    QPushButton *btn = new QPushButton; \n    connect(btn, &QPushButton::clicked, this, &MainWindow::close);\n    ```\n    \n    <p> Qt5后的官方推荐写法，编译的时候信号或槽不存在是无法编译通过的，槽的可以直接写在<code>public or protected or private</code>下\n    </p>\n\n- lambda\n\n    ```cpp\n    connect(btn, &QPushButton::clicked, [&]() {\n    this->close();\n    });\n\n    connect(btn, &QPushButton::clicked, this, [&]() {\n    this->close();\n    });\n\n    ```  \n\n    - 两种写法本质上是一样的，只是说第一种默认指定接收者为<code>this</code> \n    - 请保证`lambda`函数中使用成员都是活跃的，不然将是很糟糕的行为\n\n\n### 3. connect 最后一个参数\n\n- `Qt::AutoConnection` \n    - 默认使用的参数\n    <div>\n    <p>(Default) If the receiver lives in the thread that emits the signal, Qt::DirectConnection is used. Otherwise, Qt::QueuedConnection is used. The connection type is determined when the signal is emitted.\n    </p>\n    <p>\n    如果接收器位于发出信号的线程中，则使用 Qt::DirectConnection。 否则，使用 Qt::QueuedConnection。 连接类型在信号发出时确定\n    </p>\n    </div>\n- `Qt::DirectConnection`\n\n    <div>\n    <p>\n    The slot is invoked immediately when the signal is emitted. The slot is executed in the signalling thread.\n    </p>\n    <p>\n    发出信号时立即调用插槽。 该槽函数在发送者线程中执行。\n    </p>\n    </div>\n\n- `Qt::QueuedConnection`\n\n    <div>\n    <p>\n    The slot is invoked when control returns to the event loop of the receiver's thread. The slot is executed in the receiver's thread.\n    </p>\n    <p>\n    当控制返回到接收者线程的事件循环时调用该槽,会等待当前函数执行结束，重新回到事件循环。 槽函数在接收者的线程中执行.\n    </p>\n    </div>\n\n- `Qt::BlockingQueuedConnection`\n    <div>\n    <p>\n    Same as Qt::QueuedConnection, except that the signalling thread blocks until the slot returns. This connection must not be used if the receiver lives in the signalling thread, or else the application will deadlock.\n    </p>\n    <p>\n    与 Qt::QueuedConnection 相同，只是信号线程阻塞直到槽返回。 如果接收者与发送者在一个线程中，则不得使用此连接，否则应用程序将死锁\n    </p>\n    </div>\n\n- `Qt::UniqueConnection`\n    <div>\n    <p>\n    This is a flag that can be combined with any one of the above connection types, using a bitwise OR. When Qt::UniqueConnection is set, QObject::connect() will fail if the connection already exists (i.e. if the same signal is already connected to the same slot for the same pair of objects). This flag was introduced in Qt 4.6.\n    </p>\n    <p>\n    这是一个可以与上述任何一种连接类型结合使用的标志，使用按位或。 当设置了 Qt::UniqueConnection 时，如果连接已经存在（即，如果相同的信号已经连接到同一对对象的同一槽函数），则 QObject::connect() 将失败。 这个标志是在 Qt 4.6 中引入的。\n    </p>\n    </div>\n\n\n\n\n\n\n\n\n","source":"_posts/Qt-Signals-And-Slots.md","raw":"---\ntitle: Qt Connect\ndate: 2022-07-29 17:26:28\ncategories:\n- develop\ntags:\n- cpp\n- Qt\n---\n\n<p>\n&ensp;&ensp;<code>Qt</code>信号与槽...\n</p>\n\n<!-- more -->\n\n# `Qt` \n- 是非常好的用于开发软件界面的库, 当然我这样说有些狭隘, `Qt`能做的事情远不止如此\n- 但本文我只是说一下`Qt`的信号槽机制\n\n## 1. `Qt`超级经典的信号与槽机制- `signal` & `slot`\n- 示例\n    ```cpp\n        class Use_SignalAndSlot:public QObject\n        {\n            Q_OBJECT\n        public:\n        // ......\n        signals:\n            void useSignalsAndSlots();\n        slots: // (槽函数可以不是slots下的函数)，可以是public or private or protected 下的函数\n            void OnuseSignalsAndSlots();\n        // ......\n        }\n    ```\n\n- `class` 必须是继承自 `QObject`\n- 要使用`Qt`的这个机制需要在`Class`的定义处添加`Q_OBJECT`的宏定义x\n- 定义信号是必须加上- `signals:` 前缀, 且信号不需要实现只需要定义，`Qt`有自己的解析机制\n\n### 1. 信号槽的不同写法 - 官方介绍\n\n#### `Qt4`\n来自官方的文档\n- 使用宏包裹\n    ```cpp\n    QMetaObject::Connection QObject::connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type = Qt::AutoConnection)\n    ```\n    <p> \n    &ensp;&ensp;Creates a connection of the given type from the signal in the sender object to the method in the receiver object. Returns a handle to the connection that can be used to disconnect it later.<br>\n    &ensp;&ensp;You must use the <code> SIGNAL() </code> and <code>SLOT()</code> macros when specifying the signal and the method, for example:\n    </p>\n    \n-  上面函数创建一个链接，并将这个链接作为返回值,这个返回值可以用于调用 `disconnect` 断开链接\n- example:\n    ```cpp\n\n    QLabel *label = new QLabel;\n    QScrollBar *scrollBar = new QScrollBar;\n    QObject::connect(scrollBar, SIGNAL(valueChanged(int)),label,  SLOT(setNum(int)));\n\n    ```\n- <font color=red id=\"danger\">友情提示：请记住这种写法，必须使用<code>SIGNAL</code>&<code>SLOT</code>将对应的信号和槽函数包裹起来，并且这种方法无法检测对应的信号和槽函数是否存在</font>\n- 在创建链接的时候，对应的信号中我们只需要给出参数的类型，不需要写出具体的参数名称:\n    <p>\n    &ensp;&ensp;This example ensures that the label always displays the current scroll bar value. Note that the signal and slots parameters must not contain any variable names, only the type. E.g. the following would not work and return false:\n    </p>\n\n    ```cpp\n    // WRONG\n    QObject::connect(scrollBar, SIGNAL(valueChanged(int value)),label, SLOT(setNum(int value)));\n    ```\n- overloads - 1\n\n    ```cpp\n    QMetaObject::Connection QObject::connect(const QObject *sender, const QMetaMethod &signal, const QObject *receiver, const QMetaMethod &method, Qt::ConnectionType type = Qt::AutoConnection)\n    ```\n    <p>\n    &ensp;&ensp;Creates a connection of the given type from the signal in the sender object to the method in the receiver object. Returns a handle to the connection that can be used to disconnect it later.<br>\n    &ensp;&ensp;The Connection handle will be invalid if it cannot create the connection, for example, the parameters were invalid. You can check if the <code>QMetaObject::Connection</code> is valid by casting it to a bool.<br>\n    &ensp;&ensp;This function works in the same way as <code>connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type)</code> but it uses <code>QMetaMethod</code> to specify signal and method.<br>\n    This function was introduced in Qt 4.8.\n    </p>\n\n- overloads - 2\n\n    ```cpp\n    QMetaObject::Connection QObject::connect(const QObject *sender, const char *signal, const char *method, Qt::ConnectionType type = Qt::AutoConnection) const\n    ```\n    <p>\n        &ensp;&ensp;This function overloads <code>connect()</code>.<br>\n        &ensp;&ensp;Connects signal from the sender object to this object's method.<br>\n        &ensp;&ensp;Equivalent to <code>connect(sender, signal, <font color=red>this</font>, method, type)</code>.<br>\n        &ensp;&ensp;Every connection you make emits a signal, so duplicate connections emit two signals. You can break a connection using <code>disconnect()</code>.<br>\n        &ensp;&ensp;Note: This function is <font color=#00ff00>thread-safe</font>. <br>\n        <font color=red>&ensp;&ensp;友情提示： 默认指定this作为接收者</font>\n    </p>\n\n\n#### `Qt5`之后    \n- 新的写法\n    ```cpp\n    template <typename PointerToMemberFunction> QMetaObject::Connection QObject::connect(const QObject *sender, PointerToMemberFunction signal, const QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type =  Qt::AutoConnection)\n    ```\n\n- <code>example</code>\n    ```cpp\n    QLabel *label = new QLabel;\n    QLineEdit *lineEdit = new QLineEdit;\n    QObject::connect(lineEdit, &QLineEdit::textChanged,label,  &QLabel::setText);\n    ```\n- 请注意信号和槽函数的参数必须是匹配的\n\n- overloads - 1\n\n    ```cpp\n    template <typename PointerToMemberFunction, typename Functor> \n    QMetaObject::Connection QObject::connect(const QObject *sender,PointerToMemberFunction signal, Functor functor)\n    // 这是个重载的函数\n\n    ```\n\n    - Example\n\n    ``` \n    void someFunction();\n    QPushButton *button = new QPushButton;\n    QObject::connect(button, &QPushButton::clicked, someFunction);\n    ```\n\n    - Lambda expressions can also be used:\n\n    ```cpp\n    QByteArray page = ...;\n    QTcpSocket *socket = new QTcpSocket;\n    socket->connectToHost(\"qt-project.org\", 80);\n    QObject::connect(socket, &QTcpSocket::connected, [=] () {\n            socket->write(\"GET \" + page + \"\\r\\n\");\n    });\n    ``` \n\n    <p>\n    &ensp;&ensp;The connection will automatically disconnect if the sender is destroyed. However, you should take care that any objects used within the functor are still alive when the signal is emitted.<br>\n    &ensp;&ensp;Overloaded functions can be resolved with help of qOverload.<br>\n    &ensp;&enspNote: This function is thread-safe.<br>\n    </p>\n\n- overloads - 2\n\n    ```cpp\n\n    template <typename PointerToMemberFunction, typename Functor> QMetaObject::Connection \n    QObject::connect(const QObject *sender, PointerToMemberFunction signal, const QObject *context, \n                    Functor functor, Qt::ConnectionType type = Qt::AutoConnection)\n\n    ```\n\n    <p>\n    &ensp;&ensp;This function overloads connect().<br>\n    &ensp;&ensp;Creates a connection of a given type from signal in sender object to functor to be placed in a specific event loop of context, and returns a handle to the connection.<br>\n    &ensp;&ensp;Note: <code>Qt::UniqueConnections</code> do not work for lambdas, non-member functions and functors; they only apply to connecting to member functions.<br>\n    &ensp;&ensp;The signal must be a function declared as a signal in the header. The slot function can be any function or functor that can be connected to the signal. A function can be connected to a given signal if the signal has at least as many argument as the slot. A functor can be connected to a signal if they have exactly the same number of arguments. There must exist implicit conversion between the types of the corresponding arguments in the signal and the slot.\n    </p>\n\n    - Example:\n\n    ```cpp\n    void someFunction();\n    QPushButton *button = new QPushButton;\n    QObject::connect(button, &QPushButton::clicked, this, someFunction, Qt::QueuedConnection);\n    ```\n    \n    - Lambda expressions can also be used:\n    \n    ```cpp\n    QByteArray page = ...;\n    QTcpSocket *socket = new QTcpSocket;\n    socket->connectToHost(\"qt-project.org\", 80);\n    QObject::connect(socket, &QTcpSocket::connected, this, [=] () {\n            socket->write(\"GET \" + page + \"\\r\\n\");\n        }, Qt::AutoConnection);\n     ```\n     \n    <p> \n    &ensp;&ensp;The connection will automatically disconnect if the sender or the context is destroyed. However, you should take care that any objects used within the functor are still alive when the signal is emitted.<br>\n    &ensp;&ensp;Overloaded functions can be resolved with help of qOverload.<br>\n    &ensp;&ensp;Note: This function is thread-safe.<br>\n    &ensp;&ensp;This function was introduced in Qt 5.2.\n    </p>\n\n### 2. 信号槽的不同写法 - 几种一般写法    \n\n##### `connect`的最后一个参数，我们暂时使用他的默认认为\n\n####  `Qt4的写法`\n- 宏包裹\n    ```cpp\n    QPushButton *btn = new QPushButton;\n    connect(btn, SIGNAL(clicked()), this, SLOT(close()));\n    ```\n- [注意事项](#danger)\n\n#### `Qt5`后的写法\n\n- 模板匹配\n\n    ```cpp \n    QPushButton *btn = new QPushButton; \n    connect(btn, &QPushButton::clicked, this, &MainWindow::close);\n    ```\n    \n    <p> Qt5后的官方推荐写法，编译的时候信号或槽不存在是无法编译通过的，槽的可以直接写在<code>public or protected or private</code>下\n    </p>\n\n- lambda\n\n    ```cpp\n    connect(btn, &QPushButton::clicked, [&]() {\n    this->close();\n    });\n\n    connect(btn, &QPushButton::clicked, this, [&]() {\n    this->close();\n    });\n\n    ```  \n\n    - 两种写法本质上是一样的，只是说第一种默认指定接收者为<code>this</code> \n    - 请保证`lambda`函数中使用成员都是活跃的，不然将是很糟糕的行为\n\n\n### 3. connect 最后一个参数\n\n- `Qt::AutoConnection` \n    - 默认使用的参数\n    <div>\n    <p>(Default) If the receiver lives in the thread that emits the signal, Qt::DirectConnection is used. Otherwise, Qt::QueuedConnection is used. The connection type is determined when the signal is emitted.\n    </p>\n    <p>\n    如果接收器位于发出信号的线程中，则使用 Qt::DirectConnection。 否则，使用 Qt::QueuedConnection。 连接类型在信号发出时确定\n    </p>\n    </div>\n- `Qt::DirectConnection`\n\n    <div>\n    <p>\n    The slot is invoked immediately when the signal is emitted. The slot is executed in the signalling thread.\n    </p>\n    <p>\n    发出信号时立即调用插槽。 该槽函数在发送者线程中执行。\n    </p>\n    </div>\n\n- `Qt::QueuedConnection`\n\n    <div>\n    <p>\n    The slot is invoked when control returns to the event loop of the receiver's thread. The slot is executed in the receiver's thread.\n    </p>\n    <p>\n    当控制返回到接收者线程的事件循环时调用该槽,会等待当前函数执行结束，重新回到事件循环。 槽函数在接收者的线程中执行.\n    </p>\n    </div>\n\n- `Qt::BlockingQueuedConnection`\n    <div>\n    <p>\n    Same as Qt::QueuedConnection, except that the signalling thread blocks until the slot returns. This connection must not be used if the receiver lives in the signalling thread, or else the application will deadlock.\n    </p>\n    <p>\n    与 Qt::QueuedConnection 相同，只是信号线程阻塞直到槽返回。 如果接收者与发送者在一个线程中，则不得使用此连接，否则应用程序将死锁\n    </p>\n    </div>\n\n- `Qt::UniqueConnection`\n    <div>\n    <p>\n    This is a flag that can be combined with any one of the above connection types, using a bitwise OR. When Qt::UniqueConnection is set, QObject::connect() will fail if the connection already exists (i.e. if the same signal is already connected to the same slot for the same pair of objects). This flag was introduced in Qt 4.6.\n    </p>\n    <p>\n    这是一个可以与上述任何一种连接类型结合使用的标志，使用按位或。 当设置了 Qt::UniqueConnection 时，如果连接已经存在（即，如果相同的信号已经连接到同一对对象的同一槽函数），则 QObject::connect() 将失败。 这个标志是在 Qt 4.6 中引入的。\n    </p>\n    </div>\n\n\n\n\n\n\n\n\n","slug":"Qt-Signals-And-Slots","published":1,"updated":"2022-08-21T15:34:56.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravu00227cda0szu9760","content":"<p>\r\n  <code>Qt</code>信号与槽...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"qt\"><code>Qt</code></h1>\r\n<ul>\r\n<li>是非常好的用于开发软件界面的库, 当然我这样说有些狭隘,\r\n<code>Qt</code>能做的事情远不止如此</li>\r\n<li>但本文我只是说一下<code>Qt</code>的信号槽机制</li>\r\n</ul>\r\n<h2 id=\"qt超级经典的信号与槽机制--signal-slot\">1.\r\n<code>Qt</code>超级经典的信号与槽机制- <code>signal</code> &amp;\r\n<code>slot</code></h2>\r\n<ul>\r\n<li><p>示例 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Use_SignalAndSlot</span>:</span><span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"comment\">// ......</span></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">useSignalsAndSlots</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">slots: <span class=\"comment\">// (槽函数可以不是slots下的函数)，可以是public or private or protected 下的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnuseSignalsAndSlots</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// ......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><code>class</code> 必须是继承自 <code>QObject</code></p></li>\r\n<li><p>要使用<code>Qt</code>的这个机制需要在<code>Class</code>的定义处添加<code>Q_OBJECT</code>的宏定义x</p></li>\r\n<li><p>定义信号是必须加上- <code>signals:</code> 前缀,\r\n且信号不需要实现只需要定义，<code>Qt</code>有自己的解析机制</p></li>\r\n</ul>\r\n<h3 id=\"信号槽的不同写法---官方介绍\">1. 信号槽的不同写法 - 官方介绍</h3>\r\n<h4 id=\"qt4\"><code>Qt4</code></h4>\r\n来自官方的文档 - 使用宏包裹 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *signal, <span class=\"keyword\">const</span> QObject *receiver, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *method, Qt::ConnectionType type = Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure>\r\n<p>\r\n  Creates a connection of the given type from the signal in the sender\r\nobject to the method in the receiver object. Returns a handle to the\r\nconnection that can be used to disconnect it later.<br>   You must use\r\nthe <code> SIGNAL() </code> and <code>SLOT()</code> macros when\r\nspecifying the signal and the method, for example:\r\n</p>\r\n<ul>\r\n<li><p>上面函数创建一个链接，并将这个链接作为返回值,这个返回值可以用于调用\r\n<code>disconnect</code> 断开链接</p></li>\r\n<li><p>example: <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">QLabel *label = <span class=\"keyword\">new</span> QLabel;</span><br><span class=\"line\">QScrollBar *scrollBar = <span class=\"keyword\">new</span> QScrollBar;</span><br><span class=\"line\">QObject::connect(scrollBar, SIGNAL(valueChanged(<span class=\"keyword\">int</span>)),label,  SLOT(setNum(<span class=\"keyword\">int</span>)));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><font color=red id=\"danger\">友情提示：请记住这种写法，必须使用<code>SIGNAL</code>&amp;<code>SLOT</code>将对应的信号和槽函数包裹起来，并且这种方法无法检测对应的信号和槽函数是否存在</font></p></li>\r\n<li><p>在创建链接的时候，对应的信号中我们只需要给出参数的类型，不需要写出具体的参数名称:</p>\r\n<p>\r\n<p>  This example ensures that the label always displays the current\r\nscroll bar value. Note that the signal and slots parameters must not\r\ncontain any variable names, only the type. E.g. the following would not\r\nwork and return false:</p>\r\n</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WRONG</span></span><br><span class=\"line\">QObject::connect(scrollBar, SIGNAL(valueChanged(<span class=\"keyword\">int</span> value)),label, SLOT(setNum(<span class=\"keyword\">int</span> value)));</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>overloads - 1</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender, <span class=\"keyword\">const</span> QMetaMethod &amp;signal, <span class=\"keyword\">const</span> QObject *receiver, <span class=\"keyword\">const</span> QMetaMethod &amp;method, Qt::ConnectionType type = Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  Creates a connection of the given type from the signal in the\r\nsender object to the method in the receiver object. Returns a handle to\r\nthe connection that can be used to disconnect it later.<br>   The\r\nConnection handle will be invalid if it cannot create the connection,\r\nfor example, the parameters were invalid. You can check if the\r\n<code>QMetaObject::Connection</code> is valid by casting it to a\r\nbool.<br>   This function works in the same way as <code>connect(const\r\nQObject <em>sender, const char </em>signal, const QObject <em>receiver,\r\nconst char </em>method, Qt::ConnectionType type)</code> but it uses\r\n<code>QMetaMethod</code> to specify signal and method.<br> This function\r\nwas introduced in Qt 4.8.</p>\r\n</p></li>\r\n<li><p>overloads - 2</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *signal, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *method, Qt::ConnectionType type = Qt::AutoConnection)</span> <span class=\"keyword\">const</span></span></span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  This function overloads <code>connect()</code>.<br>   Connects\r\nsignal from the sender object to this object's method.<br>   Equivalent\r\nto <code>connect(sender, signal, <font color=red>this</font>, method,\r\ntype)</code>.<br>   Every connection you make emits a signal, so\r\nduplicate connections emit two signals. You can break a connection using\r\n<code>disconnect()</code>.<br>   Note: This function is\r\n<font color=#00ff00>thread-safe</font>. <br>\r\n<font color=red>  友情提示： 默认指定this作为接收者</font></p>\r\n</p></li>\r\n</ul>\r\n<h4 id=\"qt5之后\"><code>Qt5</code>之后</h4>\r\n<ul>\r\n<li><p>新的写法 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PointerToMemberFunction&gt; <span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender, PointerToMemberFunction signal, <span class=\"keyword\">const</span> QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type =  Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><code>example</code> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QLabel *label = <span class=\"keyword\">new</span> QLabel;</span><br><span class=\"line\">QLineEdit *lineEdit = <span class=\"keyword\">new</span> QLineEdit;</span><br><span class=\"line\">QObject::connect(lineEdit, &amp;QLineEdit::textChanged,label,  &amp;QLabel::setText);</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>请注意信号和槽函数的参数必须是匹配的</p></li>\r\n<li><p>overloads - 1</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PointerToMemberFunction, <span class=\"keyword\">typename</span> Functor&gt; </span><br><span class=\"line\"><span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender,PointerToMemberFunction signal, Functor functor)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 这是个重载的函数</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>Example</li>\r\n</ul>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void someFunction();</span><br><span class=\"line\">QPushButton *button &#x3D; new QPushButton;</span><br><span class=\"line\">QObject::connect(button, &amp;QPushButton::clicked, someFunction);</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>Lambda expressions can also be used:</li>\r\n</ul>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QByteArray page = ...;</span><br><span class=\"line\">QTcpSocket *socket = <span class=\"keyword\">new</span> QTcpSocket;</span><br><span class=\"line\">socket-&gt;connectToHost(<span class=\"string\">&quot;qt-project.org&quot;</span>, <span class=\"number\">80</span>);</span><br><span class=\"line\">QObject::connect(socket, &amp;QTcpSocket::connected, [=] () &#123;</span><br><span class=\"line\">        socket-&gt;write(<span class=\"string\">&quot;GET &quot;</span> + page + <span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  The connection will automatically disconnect if the sender is\r\ndestroyed. However, you should take care that any objects used within\r\nthe functor are still alive when the signal is emitted.<br>   Overloaded\r\nfunctions can be resolved with help of qOverload.<br>  &amp;enspNote:\r\nThis function is thread-safe.<br></p>\r\n</p></li>\r\n<li><p>overloads - 2</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PointerToMemberFunction, <span class=\"keyword\">typename</span> Functor&gt; QMetaObject::Connection </span><br><span class=\"line\">QObject::connect(<span class=\"keyword\">const</span> QObject *sender, PointerToMemberFunction signal, <span class=\"keyword\">const</span> QObject *context, </span><br><span class=\"line\">                Functor functor, Qt::ConnectionType type = Qt::AutoConnection)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  This function overloads connect().<br>   Creates a connection of a\r\ngiven type from signal in sender object to functor to be placed in a\r\nspecific event loop of context, and returns a handle to the\r\nconnection.<br>   Note: <code>Qt::UniqueConnections</code> do not work\r\nfor lambdas, non-member functions and functors; they only apply to\r\nconnecting to member functions.<br>   The signal must be a function\r\ndeclared as a signal in the header. The slot function can be any\r\nfunction or functor that can be connected to the signal. A function can\r\nbe connected to a given signal if the signal has at least as many\r\nargument as the slot. A functor can be connected to a signal if they\r\nhave exactly the same number of arguments. There must exist implicit\r\nconversion between the types of the corresponding arguments in the\r\nsignal and the slot.</p>\r\n</p>\r\n<ul>\r\n<li>Example:</li>\r\n</ul>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">someFunction</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">QPushButton *button = <span class=\"keyword\">new</span> QPushButton;</span><br><span class=\"line\">QObject::connect(button, &amp;QPushButton::clicked, <span class=\"keyword\">this</span>, someFunction, Qt::QueuedConnection);</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>Lambda expressions can also be used:</li>\r\n</ul>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QByteArray page = ...;</span><br><span class=\"line\">QTcpSocket *socket = <span class=\"keyword\">new</span> QTcpSocket;</span><br><span class=\"line\">socket-&gt;connectToHost(<span class=\"string\">&quot;qt-project.org&quot;</span>, <span class=\"number\">80</span>);</span><br><span class=\"line\">QObject::connect(socket, &amp;QTcpSocket::connected, <span class=\"keyword\">this</span>, [=] () &#123;</span><br><span class=\"line\">        socket-&gt;write(<span class=\"string\">&quot;GET &quot;</span> + page + <span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;, Qt::AutoConnection);</span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  The connection will automatically disconnect if the sender or the\r\ncontext is destroyed. However, you should take care that any objects\r\nused within the functor are still alive when the signal is emitted.<br>\r\n  Overloaded functions can be resolved with help of qOverload.<br>\r\n  Note: This function is thread-safe.<br>   This function was introduced\r\nin Qt 5.2.</p>\r\n</p></li>\r\n</ul>\r\n<h3 id=\"信号槽的不同写法---几种一般写法\">2. 信号槽的不同写法 -\r\n几种一般写法</h3>\r\n<h5\r\nid=\"connect的最后一个参数我们暂时使用他的默认认为\"><code>connect</code>的最后一个参数，我们暂时使用他的默认认为</h5>\r\n<h4 id=\"qt4的写法\"><code>Qt4的写法</code></h4>\r\n<ul>\r\n<li>宏包裹 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QPushButton *btn = <span class=\"keyword\">new</span> QPushButton;</span><br><span class=\"line\">connect(btn, SIGNAL(clicked()), <span class=\"keyword\">this</span>, SLOT(close()));</span><br></pre></td></tr></table></figure></li>\r\n<li><a href=\"#danger\">注意事项</a></li>\r\n</ul>\r\n<h4 id=\"qt5后的写法\"><code>Qt5</code>后的写法</h4>\r\n<ul>\r\n<li><p>模板匹配</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QPushButton *btn = <span class=\"keyword\">new</span> QPushButton; </span><br><span class=\"line\">connect(btn, &amp;QPushButton::clicked, <span class=\"keyword\">this</span>, &amp;MainWindow::close);</span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>Qt5后的官方推荐写法，编译的时候信号或槽不存在是无法编译通过的，槽的可以直接写在<code>public\r\nor protected or private</code>下</p>\r\n</p></li>\r\n<li><p>lambda</p>\r\n<div class=\"sourceCode\" id=\"cb1\"><pre\r\nclass=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">connect</span><span class=\"op\">(</span>btn<span class=\"op\">,</span> <span class=\"op\">&amp;</span><span class=\"ex\">QPushButton::</span>clicked<span class=\"op\">,</span> <span class=\"op\">[&amp;]()</span> <span class=\"op\">&#123;</span></span>\r\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">this</span><span class=\"op\">-&gt;</span>close<span class=\"op\">();</span></span>\r\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&#125;);</span></span>\r\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\r\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">connect</span><span class=\"op\">(</span>btn<span class=\"op\">,</span> <span class=\"op\">&amp;</span><span class=\"ex\">QPushButton::</span>clicked<span class=\"op\">,</span> <span class=\"kw\">this</span><span class=\"op\">,</span> <span class=\"op\">[&amp;]()</span> <span class=\"op\">&#123;</span></span>\r\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">this</span><span class=\"op\">-&gt;</span>close<span class=\"op\">();</span></span>\r\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&#125;);</span></span></code></pre></div>\r\n<ul>\r\n<li>两种写法本质上是一样的，只是说第一种默认指定接收者为<code>this</code></li>\r\n<li>请保证<code>lambda</code>函数中使用成员都是活跃的，不然将是很糟糕的行为</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"connect-最后一个参数\">3. connect 最后一个参数</h3>\r\n<ul>\r\n<li><p><code>Qt::AutoConnection</code></p>\r\n<ul>\r\n<li>默认使用的参数\r\n<div>\r\n<p>\r\n(Default) If the receiver lives in the thread that emits the signal,\r\nQt::DirectConnection is used. Otherwise, Qt::QueuedConnection is used.\r\nThe connection type is determined when the signal is emitted.\r\n</p>\r\n<p>\r\n如果接收器位于发出信号的线程中，则使用 Qt::DirectConnection。 否则，使用\r\nQt::QueuedConnection。 连接类型在信号发出时确定\r\n</p>\r\n</div></li>\r\n</ul></li>\r\n<li><p><code>Qt::DirectConnection</code></p>\r\n<div>\r\n<p>\r\nThe slot is invoked immediately when the signal is emitted. The slot is\r\nexecuted in the signalling thread.\r\n</p>\r\n<p>\r\n发出信号时立即调用插槽。 该槽函数在发送者线程中执行。\r\n</p>\r\n</div></li>\r\n<li><p><code>Qt::QueuedConnection</code></p>\r\n<div>\r\n<p>\r\nThe slot is invoked when control returns to the event loop of the\r\nreceiver's thread. The slot is executed in the receiver's thread.\r\n</p>\r\n<p>\r\n当控制返回到接收者线程的事件循环时调用该槽,会等待当前函数执行结束，重新回到事件循环。\r\n槽函数在接收者的线程中执行.\r\n</p>\r\n</div></li>\r\n<li><p><code>Qt::BlockingQueuedConnection</code></p>\r\n<div>\r\n<p>\r\nSame as Qt::QueuedConnection, except that the signalling thread blocks\r\nuntil the slot returns. This connection must not be used if the receiver\r\nlives in the signalling thread, or else the application will deadlock.\r\n</p>\r\n<p>\r\n与 Qt::QueuedConnection 相同，只是信号线程阻塞直到槽返回。\r\n如果接收者与发送者在一个线程中，则不得使用此连接，否则应用程序将死锁\r\n</p>\r\n</div></li>\r\n<li><p><code>Qt::UniqueConnection</code></p>\r\n<div>\r\n<p>\r\nThis is a flag that can be combined with any one of the above connection\r\ntypes, using a bitwise OR. When Qt::UniqueConnection is set,\r\nQObject::connect() will fail if the connection already exists (i.e. if\r\nthe same signal is already connected to the same slot for the same pair\r\nof objects). This flag was introduced in Qt 4.6.\r\n</p>\r\n<p>\r\n这是一个可以与上述任何一种连接类型结合使用的标志，使用按位或。 当设置了\r\nQt::UniqueConnection\r\n时，如果连接已经存在（即，如果相同的信号已经连接到同一对对象的同一槽函数），则\r\nQObject::connect() 将失败。 这个标志是在 Qt 4.6 中引入的。\r\n</p>\r\n</div></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  <code>Qt</code>信号与槽...\r\n</p>","more":"<h1 id=\"qt\"><code>Qt</code></h1>\r\n<ul>\r\n<li>是非常好的用于开发软件界面的库, 当然我这样说有些狭隘,\r\n<code>Qt</code>能做的事情远不止如此</li>\r\n<li>但本文我只是说一下<code>Qt</code>的信号槽机制</li>\r\n</ul>\r\n<h2 id=\"qt超级经典的信号与槽机制--signal-slot\">1.\r\n<code>Qt</code>超级经典的信号与槽机制- <code>signal</code> &amp;\r\n<code>slot</code></h2>\r\n<ul>\r\n<li><p>示例 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Use_SignalAndSlot</span>:</span><span class=\"keyword\">public</span> QObject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"><span class=\"comment\">// ......</span></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">useSignalsAndSlots</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">slots: <span class=\"comment\">// (槽函数可以不是slots下的函数)，可以是public or private or protected 下的函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnuseSignalsAndSlots</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// ......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><code>class</code> 必须是继承自 <code>QObject</code></p></li>\r\n<li><p>要使用<code>Qt</code>的这个机制需要在<code>Class</code>的定义处添加<code>Q_OBJECT</code>的宏定义x</p></li>\r\n<li><p>定义信号是必须加上- <code>signals:</code> 前缀,\r\n且信号不需要实现只需要定义，<code>Qt</code>有自己的解析机制</p></li>\r\n</ul>\r\n<h3 id=\"信号槽的不同写法---官方介绍\">1. 信号槽的不同写法 - 官方介绍</h3>\r\n<h4 id=\"qt4\"><code>Qt4</code></h4>\r\n来自官方的文档 - 使用宏包裹 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *signal, <span class=\"keyword\">const</span> QObject *receiver, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *method, Qt::ConnectionType type = Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure>\r\n<p>\r\n  Creates a connection of the given type from the signal in the sender\r\nobject to the method in the receiver object. Returns a handle to the\r\nconnection that can be used to disconnect it later.<br>   You must use\r\nthe <code> SIGNAL() </code> and <code>SLOT()</code> macros when\r\nspecifying the signal and the method, for example:\r\n</p>\r\n<ul>\r\n<li><p>上面函数创建一个链接，并将这个链接作为返回值,这个返回值可以用于调用\r\n<code>disconnect</code> 断开链接</p></li>\r\n<li><p>example: <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">QLabel *label = <span class=\"keyword\">new</span> QLabel;</span><br><span class=\"line\">QScrollBar *scrollBar = <span class=\"keyword\">new</span> QScrollBar;</span><br><span class=\"line\">QObject::connect(scrollBar, SIGNAL(valueChanged(<span class=\"keyword\">int</span>)),label,  SLOT(setNum(<span class=\"keyword\">int</span>)));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><font color=red id=\"danger\">友情提示：请记住这种写法，必须使用<code>SIGNAL</code>&amp;<code>SLOT</code>将对应的信号和槽函数包裹起来，并且这种方法无法检测对应的信号和槽函数是否存在</font></p></li>\r\n<li><p>在创建链接的时候，对应的信号中我们只需要给出参数的类型，不需要写出具体的参数名称:</p>\r\n<p>\r\n<p>  This example ensures that the label always displays the current\r\nscroll bar value. Note that the signal and slots parameters must not\r\ncontain any variable names, only the type. E.g. the following would not\r\nwork and return false:</p>\r\n</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WRONG</span></span><br><span class=\"line\">QObject::connect(scrollBar, SIGNAL(valueChanged(<span class=\"keyword\">int</span> value)),label, SLOT(setNum(<span class=\"keyword\">int</span> value)));</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>overloads - 1</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender, <span class=\"keyword\">const</span> QMetaMethod &amp;signal, <span class=\"keyword\">const</span> QObject *receiver, <span class=\"keyword\">const</span> QMetaMethod &amp;method, Qt::ConnectionType type = Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  Creates a connection of the given type from the signal in the\r\nsender object to the method in the receiver object. Returns a handle to\r\nthe connection that can be used to disconnect it later.<br>   The\r\nConnection handle will be invalid if it cannot create the connection,\r\nfor example, the parameters were invalid. You can check if the\r\n<code>QMetaObject::Connection</code> is valid by casting it to a\r\nbool.<br>   This function works in the same way as <code>connect(const\r\nQObject <em>sender, const char </em>signal, const QObject <em>receiver,\r\nconst char </em>method, Qt::ConnectionType type)</code> but it uses\r\n<code>QMetaMethod</code> to specify signal and method.<br> This function\r\nwas introduced in Qt 4.8.</p>\r\n</p></li>\r\n<li><p>overloads - 2</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *signal, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *method, Qt::ConnectionType type = Qt::AutoConnection)</span> <span class=\"keyword\">const</span></span></span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  This function overloads <code>connect()</code>.<br>   Connects\r\nsignal from the sender object to this object's method.<br>   Equivalent\r\nto <code>connect(sender, signal, <font color=red>this</font>, method,\r\ntype)</code>.<br>   Every connection you make emits a signal, so\r\nduplicate connections emit two signals. You can break a connection using\r\n<code>disconnect()</code>.<br>   Note: This function is\r\n<font color=#00ff00>thread-safe</font>. <br>\r\n<font color=red>  友情提示： 默认指定this作为接收者</font></p>\r\n</p></li>\r\n</ul>\r\n<h4 id=\"qt5之后\"><code>Qt5</code>之后</h4>\r\n<ul>\r\n<li><p>新的写法 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PointerToMemberFunction&gt; <span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender, PointerToMemberFunction signal, <span class=\"keyword\">const</span> QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type =  Qt::AutoConnection)</span></span></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><code>example</code> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QLabel *label = <span class=\"keyword\">new</span> QLabel;</span><br><span class=\"line\">QLineEdit *lineEdit = <span class=\"keyword\">new</span> QLineEdit;</span><br><span class=\"line\">QObject::connect(lineEdit, &amp;QLineEdit::textChanged,label,  &amp;QLabel::setText);</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>请注意信号和槽函数的参数必须是匹配的</p></li>\r\n<li><p>overloads - 1</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PointerToMemberFunction, <span class=\"keyword\">typename</span> Functor&gt; </span><br><span class=\"line\"><span class=\"function\">QMetaObject::Connection <span class=\"title\">QObject::connect</span><span class=\"params\">(<span class=\"keyword\">const</span> QObject *sender,PointerToMemberFunction signal, Functor functor)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 这是个重载的函数</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>Example</li>\r\n</ul>\r\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void someFunction();</span><br><span class=\"line\">QPushButton *button &#x3D; new QPushButton;</span><br><span class=\"line\">QObject::connect(button, &amp;QPushButton::clicked, someFunction);</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>Lambda expressions can also be used:</li>\r\n</ul>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QByteArray page = ...;</span><br><span class=\"line\">QTcpSocket *socket = <span class=\"keyword\">new</span> QTcpSocket;</span><br><span class=\"line\">socket-&gt;connectToHost(<span class=\"string\">&quot;qt-project.org&quot;</span>, <span class=\"number\">80</span>);</span><br><span class=\"line\">QObject::connect(socket, &amp;QTcpSocket::connected, [=] () &#123;</span><br><span class=\"line\">        socket-&gt;write(<span class=\"string\">&quot;GET &quot;</span> + page + <span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  The connection will automatically disconnect if the sender is\r\ndestroyed. However, you should take care that any objects used within\r\nthe functor are still alive when the signal is emitted.<br>   Overloaded\r\nfunctions can be resolved with help of qOverload.<br>  &amp;enspNote:\r\nThis function is thread-safe.<br></p>\r\n</p></li>\r\n<li><p>overloads - 2</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> PointerToMemberFunction, <span class=\"keyword\">typename</span> Functor&gt; QMetaObject::Connection </span><br><span class=\"line\">QObject::connect(<span class=\"keyword\">const</span> QObject *sender, PointerToMemberFunction signal, <span class=\"keyword\">const</span> QObject *context, </span><br><span class=\"line\">                Functor functor, Qt::ConnectionType type = Qt::AutoConnection)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  This function overloads connect().<br>   Creates a connection of a\r\ngiven type from signal in sender object to functor to be placed in a\r\nspecific event loop of context, and returns a handle to the\r\nconnection.<br>   Note: <code>Qt::UniqueConnections</code> do not work\r\nfor lambdas, non-member functions and functors; they only apply to\r\nconnecting to member functions.<br>   The signal must be a function\r\ndeclared as a signal in the header. The slot function can be any\r\nfunction or functor that can be connected to the signal. A function can\r\nbe connected to a given signal if the signal has at least as many\r\nargument as the slot. A functor can be connected to a signal if they\r\nhave exactly the same number of arguments. There must exist implicit\r\nconversion between the types of the corresponding arguments in the\r\nsignal and the slot.</p>\r\n</p>\r\n<ul>\r\n<li>Example:</li>\r\n</ul>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">someFunction</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">QPushButton *button = <span class=\"keyword\">new</span> QPushButton;</span><br><span class=\"line\">QObject::connect(button, &amp;QPushButton::clicked, <span class=\"keyword\">this</span>, someFunction, Qt::QueuedConnection);</span><br></pre></td></tr></table></figure></p>\r\n<ul>\r\n<li>Lambda expressions can also be used:</li>\r\n</ul>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QByteArray page = ...;</span><br><span class=\"line\">QTcpSocket *socket = <span class=\"keyword\">new</span> QTcpSocket;</span><br><span class=\"line\">socket-&gt;connectToHost(<span class=\"string\">&quot;qt-project.org&quot;</span>, <span class=\"number\">80</span>);</span><br><span class=\"line\">QObject::connect(socket, &amp;QTcpSocket::connected, <span class=\"keyword\">this</span>, [=] () &#123;</span><br><span class=\"line\">        socket-&gt;write(<span class=\"string\">&quot;GET &quot;</span> + page + <span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">    &#125;, Qt::AutoConnection);</span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>  The connection will automatically disconnect if the sender or the\r\ncontext is destroyed. However, you should take care that any objects\r\nused within the functor are still alive when the signal is emitted.<br>\r\n  Overloaded functions can be resolved with help of qOverload.<br>\r\n  Note: This function is thread-safe.<br>   This function was introduced\r\nin Qt 5.2.</p>\r\n</p></li>\r\n</ul>\r\n<h3 id=\"信号槽的不同写法---几种一般写法\">2. 信号槽的不同写法 -\r\n几种一般写法</h3>\r\n<h5\r\nid=\"connect的最后一个参数我们暂时使用他的默认认为\"><code>connect</code>的最后一个参数，我们暂时使用他的默认认为</h5>\r\n<h4 id=\"qt4的写法\"><code>Qt4的写法</code></h4>\r\n<ul>\r\n<li>宏包裹 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QPushButton *btn = <span class=\"keyword\">new</span> QPushButton;</span><br><span class=\"line\">connect(btn, SIGNAL(clicked()), <span class=\"keyword\">this</span>, SLOT(close()));</span><br></pre></td></tr></table></figure></li>\r\n<li><a href=\"#danger\">注意事项</a></li>\r\n</ul>\r\n<h4 id=\"qt5后的写法\"><code>Qt5</code>后的写法</h4>\r\n<ul>\r\n<li><p>模板匹配</p>\r\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QPushButton *btn = <span class=\"keyword\">new</span> QPushButton; </span><br><span class=\"line\">connect(btn, &amp;QPushButton::clicked, <span class=\"keyword\">this</span>, &amp;MainWindow::close);</span><br></pre></td></tr></table></figure></p>\r\n<p>\r\n<p>Qt5后的官方推荐写法，编译的时候信号或槽不存在是无法编译通过的，槽的可以直接写在<code>public\r\nor protected or private</code>下</p>\r\n</p></li>\r\n<li><p>lambda</p>\r\n<div class=\"sourceCode\" id=\"cb1\"><pre\r\nclass=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">connect</span><span class=\"op\">(</span>btn<span class=\"op\">,</span> <span class=\"op\">&amp;</span><span class=\"ex\">QPushButton::</span>clicked<span class=\"op\">,</span> <span class=\"op\">[&amp;]()</span> <span class=\"op\">&#123;</span></span>\r\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">this</span><span class=\"op\">-&gt;</span>close<span class=\"op\">();</span></span>\r\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&#125;);</span></span>\r\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\r\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">connect</span><span class=\"op\">(</span>btn<span class=\"op\">,</span> <span class=\"op\">&amp;</span><span class=\"ex\">QPushButton::</span>clicked<span class=\"op\">,</span> <span class=\"kw\">this</span><span class=\"op\">,</span> <span class=\"op\">[&amp;]()</span> <span class=\"op\">&#123;</span></span>\r\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">this</span><span class=\"op\">-&gt;</span>close<span class=\"op\">();</span></span>\r\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&#125;);</span></span></code></pre></div>\r\n<ul>\r\n<li>两种写法本质上是一样的，只是说第一种默认指定接收者为<code>this</code></li>\r\n<li>请保证<code>lambda</code>函数中使用成员都是活跃的，不然将是很糟糕的行为</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"connect-最后一个参数\">3. connect 最后一个参数</h3>\r\n<ul>\r\n<li><p><code>Qt::AutoConnection</code></p>\r\n<ul>\r\n<li>默认使用的参数\r\n<div>\r\n<p>\r\n(Default) If the receiver lives in the thread that emits the signal,\r\nQt::DirectConnection is used. Otherwise, Qt::QueuedConnection is used.\r\nThe connection type is determined when the signal is emitted.\r\n</p>\r\n<p>\r\n如果接收器位于发出信号的线程中，则使用 Qt::DirectConnection。 否则，使用\r\nQt::QueuedConnection。 连接类型在信号发出时确定\r\n</p>\r\n</div></li>\r\n</ul></li>\r\n<li><p><code>Qt::DirectConnection</code></p>\r\n<div>\r\n<p>\r\nThe slot is invoked immediately when the signal is emitted. The slot is\r\nexecuted in the signalling thread.\r\n</p>\r\n<p>\r\n发出信号时立即调用插槽。 该槽函数在发送者线程中执行。\r\n</p>\r\n</div></li>\r\n<li><p><code>Qt::QueuedConnection</code></p>\r\n<div>\r\n<p>\r\nThe slot is invoked when control returns to the event loop of the\r\nreceiver's thread. The slot is executed in the receiver's thread.\r\n</p>\r\n<p>\r\n当控制返回到接收者线程的事件循环时调用该槽,会等待当前函数执行结束，重新回到事件循环。\r\n槽函数在接收者的线程中执行.\r\n</p>\r\n</div></li>\r\n<li><p><code>Qt::BlockingQueuedConnection</code></p>\r\n<div>\r\n<p>\r\nSame as Qt::QueuedConnection, except that the signalling thread blocks\r\nuntil the slot returns. This connection must not be used if the receiver\r\nlives in the signalling thread, or else the application will deadlock.\r\n</p>\r\n<p>\r\n与 Qt::QueuedConnection 相同，只是信号线程阻塞直到槽返回。\r\n如果接收者与发送者在一个线程中，则不得使用此连接，否则应用程序将死锁\r\n</p>\r\n</div></li>\r\n<li><p><code>Qt::UniqueConnection</code></p>\r\n<div>\r\n<p>\r\nThis is a flag that can be combined with any one of the above connection\r\ntypes, using a bitwise OR. When Qt::UniqueConnection is set,\r\nQObject::connect() will fail if the connection already exists (i.e. if\r\nthe same signal is already connected to the same slot for the same pair\r\nof objects). This flag was introduced in Qt 4.6.\r\n</p>\r\n<p>\r\n这是一个可以与上述任何一种连接类型结合使用的标志，使用按位或。 当设置了\r\nQt::UniqueConnection\r\n时，如果连接已经存在（即，如果相同的信号已经连接到同一对对象的同一槽函数），则\r\nQObject::connect() 将失败。 这个标志是在 Qt 4.6 中引入的。\r\n</p>\r\n</div></li>\r\n</ul>"},{"title":"Shell-Sort","date":"2021-10-26T12:25:46.000Z","_content":"\n<p>\n&ensp;&ensp;希尔排序...\n</p>\n\n<!-- more -->\n\n###  希尔排序\n\n- 希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\n  - `DK[i-1]`有序后，执行`DK[i]`的排序后，`DK[i-1]`依旧是有序的\n\n#### 1、原始的希尔排序\n\n- `DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)`\n\n```C++\nvoid Shell_sort(ElementTypes A[], int N)\n{\n    int D;  // 当前次序的间隔\n    int P,i;\n    ElementType temp;\n    for(P=N/2;D>0;D/=2) // 间隔的变换\n    {\n        // 插入排序 \n        for(P = D; P<N; P++)\n        {\n        \ttemp = A[P];  // 当前要插入的元素 \n            for(i = P; i >= D && A[i-D] > temp;i -= D)  // 和已经有序的元素进行比较\n            // 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动\n            {\n                A[i] = A[i-D];\n            }\n            A[i] = temp;  // temp 放到正确位置\n        }\n    }\n}\n\n```\n\n- 复杂度分析： 当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到`O(N^2)`。\n\n","source":"_posts/Shell-Sort.md","raw":"---\ntitle: Shell-Sort\ndate: 2021-10-26 20:25:46\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;希尔排序...\n</p>\n\n<!-- more -->\n\n###  希尔排序\n\n- 希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\n  - `DK[i-1]`有序后，执行`DK[i]`的排序后，`DK[i-1]`依旧是有序的\n\n#### 1、原始的希尔排序\n\n- `DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)`\n\n```C++\nvoid Shell_sort(ElementTypes A[], int N)\n{\n    int D;  // 当前次序的间隔\n    int P,i;\n    ElementType temp;\n    for(P=N/2;D>0;D/=2) // 间隔的变换\n    {\n        // 插入排序 \n        for(P = D; P<N; P++)\n        {\n        \ttemp = A[P];  // 当前要插入的元素 \n            for(i = P; i >= D && A[i-D] > temp;i -= D)  // 和已经有序的元素进行比较\n            // 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动\n            {\n                A[i] = A[i-D];\n            }\n            A[i] = temp;  // temp 放到正确位置\n        }\n    }\n}\n\n```\n\n- 复杂度分析： 当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到`O(N^2)`。\n\n","slug":"Shell-Sort","published":1,"updated":"2022-08-21T15:34:56.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravu00257cdadd0b0i77","content":"<p>\r\n  希尔排序...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"希尔排序\">希尔排序</h3>\r\n<ul>\r\n<li>希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\r\n<ul>\r\n<li><code>DK[i-1]</code>有序后，执行<code>DK[i]</code>的排序后，<code>DK[i-1]</code>依旧是有序的</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"原始的希尔排序\">1、原始的希尔排序</h4>\r\n<ul>\r\n<li><code>DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Shell_sort</span><span class=\"params\">(ElementTypes A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D;  <span class=\"comment\">// 当前次序的间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> P,i;</span><br><span class=\"line\">    ElementType temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(P=N/<span class=\"number\">2</span>;D&gt;<span class=\"number\">0</span>;D/=<span class=\"number\">2</span>) <span class=\"comment\">// 间隔的变换</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入排序 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(P = D; P&lt;N; P++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \ttemp = A[P];  <span class=\"comment\">// 当前要插入的元素 </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i = P; i &gt;= D &amp;&amp; A[i-D] &gt; temp;i -= D)  <span class=\"comment\">// 和已经有序的元素进行比较</span></span><br><span class=\"line\">            <span class=\"comment\">// 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                A[i] = A[i-D];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[i] = temp;  <span class=\"comment\">// temp 放到正确位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>复杂度分析：\r\n当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到<code>O(N^2)</code>。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  希尔排序...\r\n</p>","more":"<h3 id=\"希尔排序\">希尔排序</h3>\r\n<ul>\r\n<li>希尔排序：预先定义一系列间隔(增量序列)DK，按照间隔，进行间隔排序\r\n<ul>\r\n<li><code>DK[i-1]</code>有序后，执行<code>DK[i]</code>的排序后，<code>DK[i-1]</code>依旧是有序的</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"原始的希尔排序\">1、原始的希尔排序</h4>\r\n<ul>\r\n<li><code>DK[i-1] = 取整(N/2),DK[i] = 取整(DK[i-1]/2)</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Shell_sort</span><span class=\"params\">(ElementTypes A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D;  <span class=\"comment\">// 当前次序的间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> P,i;</span><br><span class=\"line\">    ElementType temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(P=N/<span class=\"number\">2</span>;D&gt;<span class=\"number\">0</span>;D/=<span class=\"number\">2</span>) <span class=\"comment\">// 间隔的变换</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入排序 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(P = D; P&lt;N; P++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \ttemp = A[P];  <span class=\"comment\">// 当前要插入的元素 </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(i = P; i &gt;= D &amp;&amp; A[i-D] &gt; temp;i -= D)  <span class=\"comment\">// 和已经有序的元素进行比较</span></span><br><span class=\"line\">            <span class=\"comment\">// 前一个元素A[i-D]如果大于temp，temp放置的位置在i-D之前，i-D位置的元素向后移动</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                A[i] = A[i-D];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            A[i] = temp;  <span class=\"comment\">// temp 放到正确位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>复杂度分析：\r\n当所有大于的增量的序列的数据都是有序的时候，所有的交换操作都会在增量为1的时候执行，这回导致一个不怎么好的结果，时间复杂度会达到<code>O(N^2)</code>。</li>\r\n</ul>"},{"title":"Selection_sort","date":"2021-10-25T14:25:09.000Z","_content":"\n<p>\n&ensp;&ensp;选择排序...\n</p>\n\n<!-- more -->\n\n## 选择排序  \n\n- 选择排序，每次从无序的数据中选择一个`最大的`或者是`最小的`,放到合适的位置。\n\n- 代码实现：\n\n    ```C++ \n    // 这里为了使用最大堆-我们倒着排序 \n    void Selection_Sort(ElementType A[], int N)\n    {  \n        for(auto i = N-1;i >= 0；i--)\n        {\n        \t  max_postion = scanForMax(A,0,i); //获取最大元素的下标 \n              swap(&A[i],&A[max_position]);    // 交换元素    \n        }\n    }\n    ```\n\n- `scanForMax`\n  - 查找当前无序元素中最大的元素，并返回元素的下标\n    - 常规下，直接对数组元素进行扫描，时间复杂度`O(N)`,整个算法的时间复杂度`T=O(N^2)`\n    - 优化方案：如何快速找到最大值 -- 最大堆or最小堆。\n\n","source":"_posts/Selection-sort.md","raw":"---\ntitle: Selection_sort\ndate: 2021-10-25 22:25:09\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;选择排序...\n</p>\n\n<!-- more -->\n\n## 选择排序  \n\n- 选择排序，每次从无序的数据中选择一个`最大的`或者是`最小的`,放到合适的位置。\n\n- 代码实现：\n\n    ```C++ \n    // 这里为了使用最大堆-我们倒着排序 \n    void Selection_Sort(ElementType A[], int N)\n    {  \n        for(auto i = N-1;i >= 0；i--)\n        {\n        \t  max_postion = scanForMax(A,0,i); //获取最大元素的下标 \n              swap(&A[i],&A[max_position]);    // 交换元素    \n        }\n    }\n    ```\n\n- `scanForMax`\n  - 查找当前无序元素中最大的元素，并返回元素的下标\n    - 常规下，直接对数组元素进行扫描，时间复杂度`O(N)`,整个算法的时间复杂度`T=O(N^2)`\n    - 优化方案：如何快速找到最大值 -- 最大堆or最小堆。\n\n","slug":"Selection-sort","published":1,"updated":"2022-08-21T15:34:56.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravv002a7cda1vb7bjef","content":"<p>\r\n  选择排序...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"选择排序\">选择排序</h2>\r\n<ul>\r\n<li><p>选择排序，每次从无序的数据中选择一个<code>最大的</code>或者是<code>最小的</code>,放到合适的位置。</p></li>\r\n<li><p>代码实现：</p>\r\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里为了使用最大堆-我们倒着排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Selection_Sort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = N<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>；i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t  max_postion = scanForMax(A,<span class=\"number\">0</span>,i); <span class=\"comment\">//获取最大元素的下标 </span></span><br><span class=\"line\">          swap(&amp;A[i],&amp;A[max_position]);    <span class=\"comment\">// 交换元素    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><code>scanForMax</code></p>\r\n<ul>\r\n<li>查找当前无序元素中最大的元素，并返回元素的下标\r\n<ul>\r\n<li>常规下，直接对数组元素进行扫描，时间复杂度<code>O(N)</code>,整个算法的时间复杂度<code>T=O(N^2)</code></li>\r\n<li>优化方案：如何快速找到最大值 -- 最大堆or最小堆。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  选择排序...\r\n</p>","more":"<h2 id=\"选择排序\">选择排序</h2>\r\n<ul>\r\n<li><p>选择排序，每次从无序的数据中选择一个<code>最大的</code>或者是<code>最小的</code>,放到合适的位置。</p></li>\r\n<li><p>代码实现：</p>\r\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里为了使用最大堆-我们倒着排序 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Selection_Sort</span><span class=\"params\">(ElementType A[], <span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i = N<span class=\"number\">-1</span>;i &gt;= <span class=\"number\">0</span>；i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t  max_postion = scanForMax(A,<span class=\"number\">0</span>,i); <span class=\"comment\">//获取最大元素的下标 </span></span><br><span class=\"line\">          swap(&amp;A[i],&amp;A[max_position]);    <span class=\"comment\">// 交换元素    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p><code>scanForMax</code></p>\r\n<ul>\r\n<li>查找当前无序元素中最大的元素，并返回元素的下标\r\n<ul>\r\n<li>常规下，直接对数组元素进行扫描，时间复杂度<code>O(N)</code>,整个算法的时间复杂度<code>T=O(N^2)</code></li>\r\n<li>优化方案：如何快速找到最大值 -- 最大堆or最小堆。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>"},{"title":"Smart pointer 简介","date":"2022-08-01T11:53:40.000Z","_content":"\n<p>\n&ensp;&ensp;智能指针...\n</p>\n\n<!-- more -->\n\n# Smart Pointer\n<p style=\"color:red\">\n&ensp;&ensp;智能指针是行为类似于指针的类对象，但这种对象还有其他功能。   \n</p>\n\n- 下面我将将会分别介绍几种不同的智能指针 \n\n### `auto_ptr`\n- 包含在 `<memory>` 头文件中\n- 在`C++98`时被引入\n- 已经在`C++11`是被弃用\n- 在`C++17`被移除\n\n#### 特点\n\n-  `auto_ptr` 没有使用引用计数，在复制构造函数和赋值构造函数中将对象所有权转移\n-  `auto_ptr` 不能指向数组，因为`auto_ptr`在析构的时候只是调用`delete`,而数组应该要调用`delete[]`\n-  `auto_ptr` 不能和标准容器（vector,list,map…)一起使用\n    - 由于`auto_ptr`在复制和赋值构造中将转移所有权\n\n### `unique_ptr`\n\n- 包含在 `<memory>` 头文件中\n- 在`C++11`时被引入\n- 用于解决`auto_ptr`的拷贝问题\n\n#### 特点\n\n- 不支持拷贝操作，只能进行所有权的转移\n- `std::unique_ptr` 通常用于管理对象的生命周期，包括：\n通过保证正常退出和异常退出时的删除，为处理具有动态生命周期的对象的类和函数提供异常安全性\n- 对于自定义的类对象，支持提供自定义的删除器 \n- 常用于单线程\n- 可以为空\n\n### `shared_ptr`\n\n- 包含在 `<memory>`头文件中\n- 在`C++11`时被引入\n- 支持拷贝和复制\n\n#### 特点\n\n- 支持拷贝和复制\n- 对于自定义的类对象，支持提供自定义的删除器 \n- 常用于多线程\n- 多个对象可以共享所有权\n- 可以为空\n\n### `weak_ptr`\n\n- 包含在 `<memory>` 头文件中\n- 在`C++11`时被引入\n- 它是对 `std::shared_ptr` 管理的对象的非拥有引用,必须将其转换为 `std::shared_ptr` 才能访问引用的对象\n\n#### 特点\n- 解决`shared_ptr`引起的循环引用问题\n- 获取某个`shared_ptr`指向对象的临时所有权，在`shared_ptr`对象被销毁是可以延长此对象的生命周期\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Smartpointer.md","raw":"---\ntitle: Smart pointer 简介 \ndate: 2022-08-01 19:53:40\ncategories:\n- study\n- coding\ntags:\n- pointer\n- cpp\n\n---\n\n<p>\n&ensp;&ensp;智能指针...\n</p>\n\n<!-- more -->\n\n# Smart Pointer\n<p style=\"color:red\">\n&ensp;&ensp;智能指针是行为类似于指针的类对象，但这种对象还有其他功能。   \n</p>\n\n- 下面我将将会分别介绍几种不同的智能指针 \n\n### `auto_ptr`\n- 包含在 `<memory>` 头文件中\n- 在`C++98`时被引入\n- 已经在`C++11`是被弃用\n- 在`C++17`被移除\n\n#### 特点\n\n-  `auto_ptr` 没有使用引用计数，在复制构造函数和赋值构造函数中将对象所有权转移\n-  `auto_ptr` 不能指向数组，因为`auto_ptr`在析构的时候只是调用`delete`,而数组应该要调用`delete[]`\n-  `auto_ptr` 不能和标准容器（vector,list,map…)一起使用\n    - 由于`auto_ptr`在复制和赋值构造中将转移所有权\n\n### `unique_ptr`\n\n- 包含在 `<memory>` 头文件中\n- 在`C++11`时被引入\n- 用于解决`auto_ptr`的拷贝问题\n\n#### 特点\n\n- 不支持拷贝操作，只能进行所有权的转移\n- `std::unique_ptr` 通常用于管理对象的生命周期，包括：\n通过保证正常退出和异常退出时的删除，为处理具有动态生命周期的对象的类和函数提供异常安全性\n- 对于自定义的类对象，支持提供自定义的删除器 \n- 常用于单线程\n- 可以为空\n\n### `shared_ptr`\n\n- 包含在 `<memory>`头文件中\n- 在`C++11`时被引入\n- 支持拷贝和复制\n\n#### 特点\n\n- 支持拷贝和复制\n- 对于自定义的类对象，支持提供自定义的删除器 \n- 常用于多线程\n- 多个对象可以共享所有权\n- 可以为空\n\n### `weak_ptr`\n\n- 包含在 `<memory>` 头文件中\n- 在`C++11`时被引入\n- 它是对 `std::shared_ptr` 管理的对象的非拥有引用,必须将其转换为 `std::shared_ptr` 才能访问引用的对象\n\n#### 特点\n- 解决`shared_ptr`引起的循环引用问题\n- 获取某个`shared_ptr`指向对象的临时所有权，在`shared_ptr`对象被销毁是可以延长此对象的生命周期\n\n\n\n\n\n\n\n\n\n\n","slug":"Smartpointer","published":1,"updated":"2022-08-21T15:34:56.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravw002d7cda37fh5dnv","content":"<p>\r\n  智能指针...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"smart-pointer\">Smart Pointer</h1>\r\n<p style=\"color:red\">\r\n  智能指针是行为类似于指针的类对象，但这种对象还有其他功能。\r\n</p>\r\n<ul>\r\n<li>下面我将将会分别介绍几种不同的智能指针</li>\r\n</ul>\r\n<h3 id=\"auto_ptr\"><code>auto_ptr</code></h3>\r\n<ul>\r\n<li>包含在 <code>&lt;memory&gt;</code> 头文件中</li>\r\n<li>在<code>C++98</code>时被引入</li>\r\n<li>已经在<code>C++11</code>是被弃用</li>\r\n<li>在<code>C++17</code>被移除</li>\r\n</ul>\r\n<h4 id=\"特点\">特点</h4>\r\n<ul>\r\n<li><code>auto_ptr</code>\r\n没有使用引用计数，在复制构造函数和赋值构造函数中将对象所有权转移</li>\r\n<li><code>auto_ptr</code>\r\n不能指向数组，因为<code>auto_ptr</code>在析构的时候只是调用<code>delete</code>,而数组应该要调用<code>delete[]</code></li>\r\n<li><code>auto_ptr</code> 不能和标准容器（vector,list,map…)一起使用\r\n<ul>\r\n<li>由于<code>auto_ptr</code>在复制和赋值构造中将转移所有权</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"unique_ptr\"><code>unique_ptr</code></h3>\r\n<ul>\r\n<li>包含在 <code>&lt;memory&gt;</code> 头文件中</li>\r\n<li>在<code>C++11</code>时被引入</li>\r\n<li>用于解决<code>auto_ptr</code>的拷贝问题</li>\r\n</ul>\r\n<h4 id=\"特点-1\">特点</h4>\r\n<ul>\r\n<li>不支持拷贝操作，只能进行所有权的转移</li>\r\n<li><code>std::unique_ptr</code> 通常用于管理对象的生命周期，包括：\r\n通过保证正常退出和异常退出时的删除，为处理具有动态生命周期的对象的类和函数提供异常安全性</li>\r\n<li>对于自定义的类对象，支持提供自定义的删除器</li>\r\n<li>常用于单线程</li>\r\n<li>可以为空</li>\r\n</ul>\r\n<h3 id=\"shared_ptr\"><code>shared_ptr</code></h3>\r\n<ul>\r\n<li>包含在 <code>&lt;memory&gt;</code>头文件中</li>\r\n<li>在<code>C++11</code>时被引入</li>\r\n<li>支持拷贝和复制</li>\r\n</ul>\r\n<h4 id=\"特点-2\">特点</h4>\r\n<ul>\r\n<li>支持拷贝和复制</li>\r\n<li>对于自定义的类对象，支持提供自定义的删除器</li>\r\n<li>常用于多线程</li>\r\n<li>多个对象可以共享所有权</li>\r\n<li>可以为空</li>\r\n</ul>\r\n<h3 id=\"weak_ptr\"><code>weak_ptr</code></h3>\r\n<ul>\r\n<li>包含在 <code>&lt;memory&gt;</code> 头文件中</li>\r\n<li>在<code>C++11</code>时被引入</li>\r\n<li>它是对 <code>std::shared_ptr</code>\r\n管理的对象的非拥有引用,必须将其转换为 <code>std::shared_ptr</code>\r\n才能访问引用的对象</li>\r\n</ul>\r\n<h4 id=\"特点-3\">特点</h4>\r\n<ul>\r\n<li>解决<code>shared_ptr</code>引起的循环引用问题</li>\r\n<li>获取某个<code>shared_ptr</code>指向对象的临时所有权，在<code>shared_ptr</code>对象被销毁是可以延长此对象的生命周期</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  智能指针...\r\n</p>","more":"<h1 id=\"smart-pointer\">Smart Pointer</h1>\r\n<p style=\"color:red\">\r\n  智能指针是行为类似于指针的类对象，但这种对象还有其他功能。\r\n</p>\r\n<ul>\r\n<li>下面我将将会分别介绍几种不同的智能指针</li>\r\n</ul>\r\n<h3 id=\"auto_ptr\"><code>auto_ptr</code></h3>\r\n<ul>\r\n<li>包含在 <code>&lt;memory&gt;</code> 头文件中</li>\r\n<li>在<code>C++98</code>时被引入</li>\r\n<li>已经在<code>C++11</code>是被弃用</li>\r\n<li>在<code>C++17</code>被移除</li>\r\n</ul>\r\n<h4 id=\"特点\">特点</h4>\r\n<ul>\r\n<li><code>auto_ptr</code>\r\n没有使用引用计数，在复制构造函数和赋值构造函数中将对象所有权转移</li>\r\n<li><code>auto_ptr</code>\r\n不能指向数组，因为<code>auto_ptr</code>在析构的时候只是调用<code>delete</code>,而数组应该要调用<code>delete[]</code></li>\r\n<li><code>auto_ptr</code> 不能和标准容器（vector,list,map…)一起使用\r\n<ul>\r\n<li>由于<code>auto_ptr</code>在复制和赋值构造中将转移所有权</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"unique_ptr\"><code>unique_ptr</code></h3>\r\n<ul>\r\n<li>包含在 <code>&lt;memory&gt;</code> 头文件中</li>\r\n<li>在<code>C++11</code>时被引入</li>\r\n<li>用于解决<code>auto_ptr</code>的拷贝问题</li>\r\n</ul>\r\n<h4 id=\"特点-1\">特点</h4>\r\n<ul>\r\n<li>不支持拷贝操作，只能进行所有权的转移</li>\r\n<li><code>std::unique_ptr</code> 通常用于管理对象的生命周期，包括：\r\n通过保证正常退出和异常退出时的删除，为处理具有动态生命周期的对象的类和函数提供异常安全性</li>\r\n<li>对于自定义的类对象，支持提供自定义的删除器</li>\r\n<li>常用于单线程</li>\r\n<li>可以为空</li>\r\n</ul>\r\n<h3 id=\"shared_ptr\"><code>shared_ptr</code></h3>\r\n<ul>\r\n<li>包含在 <code>&lt;memory&gt;</code>头文件中</li>\r\n<li>在<code>C++11</code>时被引入</li>\r\n<li>支持拷贝和复制</li>\r\n</ul>\r\n<h4 id=\"特点-2\">特点</h4>\r\n<ul>\r\n<li>支持拷贝和复制</li>\r\n<li>对于自定义的类对象，支持提供自定义的删除器</li>\r\n<li>常用于多线程</li>\r\n<li>多个对象可以共享所有权</li>\r\n<li>可以为空</li>\r\n</ul>\r\n<h3 id=\"weak_ptr\"><code>weak_ptr</code></h3>\r\n<ul>\r\n<li>包含在 <code>&lt;memory&gt;</code> 头文件中</li>\r\n<li>在<code>C++11</code>时被引入</li>\r\n<li>它是对 <code>std::shared_ptr</code>\r\n管理的对象的非拥有引用,必须将其转换为 <code>std::shared_ptr</code>\r\n才能访问引用的对象</li>\r\n</ul>\r\n<h4 id=\"特点-3\">特点</h4>\r\n<ul>\r\n<li>解决<code>shared_ptr</code>引起的循环引用问题</li>\r\n<li>获取某个<code>shared_ptr</code>指向对象的临时所有权，在<code>shared_ptr</code>对象被销毁是可以延长此对象的生命周期</li>\r\n</ul>"},{"title":"Table-Sort","date":"2021-11-06T16:30:03.000Z","_content":"\n<p>\n&ensp;&ensp;表排序...\n</p>\n\n<!-- more -->\n\n### 表排序\n\n- 某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\n  - 定义一个指针数组作为\"表\"（table）\n- 概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\n  - 我们定义一个新的部分`table`记录数组中每个元素的下标\n\n| A | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7]  | A[8] | A[9] |\n|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|  Key  | f | d | c | a | g | b | h | e | i | u |\n| table | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\n  - - 初始状态下，`table[index]` 等于A 的`index`\n    - 然后我们同通过任意一种排序比较`A[table]`对应的关键字的大小，从而交换`table`中的值——排序\n\n- 排序结果 -- 使用插入排序\n\n  |     A      | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9] |\n  | :--------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n  |    Key     |  f   |  d   |  c   |  a   |  g   |  b   |  h   |  e   |  i   |  u   |\n  |   table    |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |\n  | 第零次插入 |  0   |      |      |      |      |      |      |      |      |      |\n  | 第一次插入 |  1   |  0   |      |      |      |      |      |      |      |      |\n  | 第二次插入 |  2   |  1   |  0   |      |      |      |      |      |      |      |\n  | 第三次插入 |  3   |  2   |  1   |  0   |      |      |      |      |      |      |\n  | 第四次插入 |  3   |  2   |  1   |  0   |  4   |      |      |      |      |      |\n  | 第五次插入 |  3   |  5   |  2   |  1   |  0   |  4   |      |      |      |      |\n  | 第六次插入 |  3   |  5   |  2   |  1   |  0   |  4   |  6   |      |      |      |\n  | 第七次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |      |      |\n  | 第八次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |      |\n  | 第九次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n  |   table    |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n\n- 到此，上述表变得有序：\n- 正确的输出结果是:\n  - `A[table[0]],A[table[0]]........`\n\n","source":"_posts/Table-Sort.md","raw":"---\ntitle: Table-Sort\ndate: 2021-11-07 00:30:03\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;表排序...\n</p>\n\n<!-- more -->\n\n### 表排序\n\n- 某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\n  - 定义一个指针数组作为\"表\"（table）\n- 概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\n  - 我们定义一个新的部分`table`记录数组中每个元素的下标\n\n| A | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7]  | A[8] | A[9] |\n|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|:----:|\n|  Key  | f | d | c | a | g | b | h | e | i | u |\n| table | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\n  - - 初始状态下，`table[index]` 等于A 的`index`\n    - 然后我们同通过任意一种排序比较`A[table]`对应的关键字的大小，从而交换`table`中的值——排序\n\n- 排序结果 -- 使用插入排序\n\n  |     A      | A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9] |\n  | :--------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n  |    Key     |  f   |  d   |  c   |  a   |  g   |  b   |  h   |  e   |  i   |  u   |\n  |   table    |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |\n  | 第零次插入 |  0   |      |      |      |      |      |      |      |      |      |\n  | 第一次插入 |  1   |  0   |      |      |      |      |      |      |      |      |\n  | 第二次插入 |  2   |  1   |  0   |      |      |      |      |      |      |      |\n  | 第三次插入 |  3   |  2   |  1   |  0   |      |      |      |      |      |      |\n  | 第四次插入 |  3   |  2   |  1   |  0   |  4   |      |      |      |      |      |\n  | 第五次插入 |  3   |  5   |  2   |  1   |  0   |  4   |      |      |      |      |\n  | 第六次插入 |  3   |  5   |  2   |  1   |  0   |  4   |  6   |      |      |      |\n  | 第七次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |      |      |\n  | 第八次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |      |\n  | 第九次插入 |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n  |   table    |  3   |  5   |  2   |  1   |  7   |  0   |  4   |  6   |  8   |  9   |\n\n- 到此，上述表变得有序：\n- 正确的输出结果是:\n  - `A[table[0]],A[table[0]]........`\n\n","slug":"Table-Sort","published":1,"updated":"2022-08-21T15:34:56.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravx002i7cda5wop0dia","content":"<p>\r\n  表排序...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"表排序\">表排序</h3>\r\n<ul>\r\n<li>某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\r\n<ul>\r\n<li>定义一个指针数组作为\"表\"（table）</li>\r\n</ul></li>\r\n<li>概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\r\n<ul>\r\n<li>我们定义一个新的部分<code>table</code>记录数组中每个元素的下标</li>\r\n</ul></li>\r\n</ul>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><ul>\r\n<li>初始状态下，<code>table[index]</code> 等于A\r\n的<code>index</code></li>\r\n<li>然后我们同通过任意一种排序比较<code>A[table]</code>对应的关键字的大小，从而交换<code>table</code>中的值——排序</li>\r\n</ul></li>\r\n<li><p>排序结果 -- 使用插入排序</p>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 20%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第零次插入</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第一次插入</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第二次插入</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第三次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第四次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第五次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第六次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第七次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第八次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第九次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table></li>\r\n<li><p>到此，上述表变得有序：</p></li>\r\n<li><p>正确的输出结果是:</p>\r\n<ul>\r\n<li><code>A[table[0]],A[table[0]]........</code></li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  表排序...\r\n</p>","more":"<h3 id=\"表排序\">表排序</h3>\r\n<ul>\r\n<li>某些场景，移动元素的成本比较大，元素移动的时间是不可以俘忽略的，为了节省时间，我们不得不寻求其他的办法。\r\n<ul>\r\n<li>定义一个指针数组作为\"表\"（table）</li>\r\n</ul></li>\r\n<li>概述，存在表A，存储的是对应的关键字，每个关键字代表具体的实体，我们根据关键字进行排序，这样省去额外的数据交换的时间。\r\n<ul>\r\n<li>我们定义一个新的部分<code>table</code>记录数组中每个元素的下标</li>\r\n</ul></li>\r\n</ul>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<ul>\r\n<li><ul>\r\n<li>初始状态下，<code>table[index]</code> 等于A\r\n的<code>index</code></li>\r\n<li>然后我们同通过任意一种排序比较<code>A[table]</code>对应的关键字的大小，从而交换<code>table</code>中的值——排序</li>\r\n</ul></li>\r\n<li><p>排序结果 -- 使用插入排序</p>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 20%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n<col style=\"width: 8%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">A</th>\r\n<th style=\"text-align: center;\">A[0]</th>\r\n<th style=\"text-align: center;\">A[1]</th>\r\n<th style=\"text-align: center;\">A[2]</th>\r\n<th style=\"text-align: center;\">A[3]</th>\r\n<th style=\"text-align: center;\">A[4]</th>\r\n<th style=\"text-align: center;\">A[5]</th>\r\n<th style=\"text-align: center;\">A[6]</th>\r\n<th style=\"text-align: center;\">A[7]</th>\r\n<th style=\"text-align: center;\">A[8]</th>\r\n<th style=\"text-align: center;\">A[9]</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">Key</td>\r\n<td style=\"text-align: center;\">f</td>\r\n<td style=\"text-align: center;\">d</td>\r\n<td style=\"text-align: center;\">c</td>\r\n<td style=\"text-align: center;\">a</td>\r\n<td style=\"text-align: center;\">g</td>\r\n<td style=\"text-align: center;\">b</td>\r\n<td style=\"text-align: center;\">h</td>\r\n<td style=\"text-align: center;\">e</td>\r\n<td style=\"text-align: center;\">i</td>\r\n<td style=\"text-align: center;\">u</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第零次插入</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第一次插入</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第二次插入</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第三次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第四次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第五次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第六次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第七次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\"></td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">第八次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\"></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">第九次插入</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td style=\"text-align: center;\">3</td>\r\n<td style=\"text-align: center;\">5</td>\r\n<td style=\"text-align: center;\">2</td>\r\n<td style=\"text-align: center;\">1</td>\r\n<td style=\"text-align: center;\">7</td>\r\n<td style=\"text-align: center;\">0</td>\r\n<td style=\"text-align: center;\">4</td>\r\n<td style=\"text-align: center;\">6</td>\r\n<td style=\"text-align: center;\">8</td>\r\n<td style=\"text-align: center;\">9</td>\r\n</tr>\r\n</tbody>\r\n</table></li>\r\n<li><p>到此，上述表变得有序：</p></li>\r\n<li><p>正确的输出结果是:</p>\r\n<ul>\r\n<li><code>A[table[0]],A[table[0]]........</code></li>\r\n</ul></li>\r\n</ul>"},{"title":"View/Camera Transformation","date":"2022-08-19T12:39:56.000Z","mathjax":true,"_content":"\n<p>\n&ensp;&ensp;计算机图形学的视图变换过程的解析...\n</p>\n\n<!-- more -->\n\n# 视图变换 \n- 视图变换是将所有世界空间中的点，变换到视图空间下的操作\n    - 这种变换，我们通过矩阵可以轻易的完成，但是我们首先需要计算一个描述这种变换的矩阵\n- 在一般的实现中，我们将视图变换的过程抽象出了一个相机的概念\n    - 本身而言在图形学中是没有相机这个概念的\n\n## 视图变换-变换过程\n- 从顶点构建到最终渲染成一张二维的图片，在行业中大家将之类比为拍照的行为\n    - 模型变换 - 取景的过程\n    - <font color=red>视图变换 - 摆放相机的过程</font>\n    - ......\n    - 此处我们只是讨论视图变换的过程 \n\n### 定义一个相机 \n![camera](https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/define_cameracamera.png \"define camera\")\n\n- 对于上述的那个拍照的行为，我们要拍摄这个摆放好的景物，关于相机我们只需要关心三个方面。\n    - 我们基于<font color=red>右手系</font>考虑下面的这些信息\n    - 相机的位置 $e$ -> $eye$ = $\\lbrace x,y,z,1\\rbrace $\n    - 相机的看的方向，既相机的拍摄方向 $\\vec{dir}$ - `lookAt direction` $\\lbrace x,y,z,0 \\rbrace $\n    - 相机的上方向 $\\vec{up}$ = $\\lbrace x,y,z,1\\rbrace$\n        - 大概是手机横屏与竖屏的区别\n- 我们获得一个观察方向,一个向上的方向\n    - 观察方向与向上方向垂直\n    - 通过叉积我们可以得到一个向右的方向$\\vec{right}$\n\n<p style=\"color:red\">\n&ensp;&ensp; 从拍照的行为来看，相机的观察方向是指向模型摆放的位置，我们保持两个物体的相对位置关系(相机与场景)，相机做了某种变换，模型也跟着做同样的变换。基于这种相对位置的变化，我们约定，将相机永远变换到原点，相机的观察方向永远是 <code> -z </code>方向,以此我们构建一个坐标系\n</p>\n\n<img id=\"view_coordinate\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/camera构建坐标系.png\"/>\n\n## 计算视图变换矩阵\n<img id=\"旋转矩阵构建\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/旋转矩阵的构建.png\"/>\n\n- 我们将以相机定义的坐标框架通过旋转与平移将之与世界空间的坐标重合\n    - $\\vec{g}$ -> $\\vec{-Z} $ \n    - $\\vec{t}$ -> $ \\vec{Y} $\n    - $\\vec{t} \\times \\vec{g}$ -> ${\\vec{X}}$\n    - <font color=red>但是我们要做到上面的事情比较困难，换一种思路，我们做相反的事情</font>\n\n- 我们将世界空间的坐标通过旋转&平移将之与相机定义的坐标系重合\n    - $\\vec{Y}$ -> $\\vec{t}$\n    - $\\vec{-Z}$ -> $\\vec{g}$\n    - ${\\vec{X}}$ -> $\\vec{t} \\times \\vec{g}$\n\n- 构建一个旋转矩阵的逆矩阵，然后计算逆矩阵的逆便得到我们想要的矩阵。\n    - 由于坐标系的三个轴是正交的，我们只需要将矩阵转置就可以得到这个旋转矩阵。\n\n- 将旋转矩阵与平移矩阵乘起来，就得到想要的试图变换矩阵\n\n<img src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/旋转矩阵计算.jpg\"/>\n\n <p style=\"color:pink\">\n&ensp;&ensp; 上述过程描述了视图变换的过程与视图矩阵的计算。\n\n </p>\n\n\n","source":"_posts/View-Camera-Transformation.md","raw":"---\ntitle: View/Camera Transformation\ndate: 2022-08-19 20:39:56\nmathjax: true\ncategories:\n- Computer Graph\ntags:\n- Base\n---\n\n<p>\n&ensp;&ensp;计算机图形学的视图变换过程的解析...\n</p>\n\n<!-- more -->\n\n# 视图变换 \n- 视图变换是将所有世界空间中的点，变换到视图空间下的操作\n    - 这种变换，我们通过矩阵可以轻易的完成，但是我们首先需要计算一个描述这种变换的矩阵\n- 在一般的实现中，我们将视图变换的过程抽象出了一个相机的概念\n    - 本身而言在图形学中是没有相机这个概念的\n\n## 视图变换-变换过程\n- 从顶点构建到最终渲染成一张二维的图片，在行业中大家将之类比为拍照的行为\n    - 模型变换 - 取景的过程\n    - <font color=red>视图变换 - 摆放相机的过程</font>\n    - ......\n    - 此处我们只是讨论视图变换的过程 \n\n### 定义一个相机 \n![camera](https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/define_cameracamera.png \"define camera\")\n\n- 对于上述的那个拍照的行为，我们要拍摄这个摆放好的景物，关于相机我们只需要关心三个方面。\n    - 我们基于<font color=red>右手系</font>考虑下面的这些信息\n    - 相机的位置 $e$ -> $eye$ = $\\lbrace x,y,z,1\\rbrace $\n    - 相机的看的方向，既相机的拍摄方向 $\\vec{dir}$ - `lookAt direction` $\\lbrace x,y,z,0 \\rbrace $\n    - 相机的上方向 $\\vec{up}$ = $\\lbrace x,y,z,1\\rbrace$\n        - 大概是手机横屏与竖屏的区别\n- 我们获得一个观察方向,一个向上的方向\n    - 观察方向与向上方向垂直\n    - 通过叉积我们可以得到一个向右的方向$\\vec{right}$\n\n<p style=\"color:red\">\n&ensp;&ensp; 从拍照的行为来看，相机的观察方向是指向模型摆放的位置，我们保持两个物体的相对位置关系(相机与场景)，相机做了某种变换，模型也跟着做同样的变换。基于这种相对位置的变化，我们约定，将相机永远变换到原点，相机的观察方向永远是 <code> -z </code>方向,以此我们构建一个坐标系\n</p>\n\n<img id=\"view_coordinate\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/camera构建坐标系.png\"/>\n\n## 计算视图变换矩阵\n<img id=\"旋转矩阵构建\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/旋转矩阵的构建.png\"/>\n\n- 我们将以相机定义的坐标框架通过旋转与平移将之与世界空间的坐标重合\n    - $\\vec{g}$ -> $\\vec{-Z} $ \n    - $\\vec{t}$ -> $ \\vec{Y} $\n    - $\\vec{t} \\times \\vec{g}$ -> ${\\vec{X}}$\n    - <font color=red>但是我们要做到上面的事情比较困难，换一种思路，我们做相反的事情</font>\n\n- 我们将世界空间的坐标通过旋转&平移将之与相机定义的坐标系重合\n    - $\\vec{Y}$ -> $\\vec{t}$\n    - $\\vec{-Z}$ -> $\\vec{g}$\n    - ${\\vec{X}}$ -> $\\vec{t} \\times \\vec{g}$\n\n- 构建一个旋转矩阵的逆矩阵，然后计算逆矩阵的逆便得到我们想要的矩阵。\n    - 由于坐标系的三个轴是正交的，我们只需要将矩阵转置就可以得到这个旋转矩阵。\n\n- 将旋转矩阵与平移矩阵乘起来，就得到想要的试图变换矩阵\n\n<img src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/旋转矩阵计算.jpg\"/>\n\n <p style=\"color:pink\">\n&ensp;&ensp; 上述过程描述了视图变换的过程与视图矩阵的计算。\n\n </p>\n\n\n","slug":"View-Camera-Transformation","published":1,"updated":"2022-08-22T11:46:11.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravy002l7cdabkvf0xy2","content":"<p>\r\n  计算机图形学的视图变换过程的解析...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h1 id=\"视图变换\">视图变换</h1>\r\n<ul>\r\n<li>视图变换是将所有世界空间中的点，变换到视图空间下的操作\r\n<ul>\r\n<li>这种变换，我们通过矩阵可以轻易的完成，但是我们首先需要计算一个描述这种变换的矩阵</li>\r\n</ul></li>\r\n<li>在一般的实现中，我们将视图变换的过程抽象出了一个相机的概念\r\n<ul>\r\n<li>本身而言在图形学中是没有相机这个概念的</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"视图变换-变换过程\">视图变换-变换过程</h2>\r\n<ul>\r\n<li>从顶点构建到最终渲染成一张二维的图片，在行业中大家将之类比为拍照的行为\r\n<ul>\r\n<li>模型变换 - 取景的过程</li>\r\n<li><font color=red>视图变换 - 摆放相机的过程</font></li>\r\n<li>......</li>\r\n<li>此处我们只是讨论视图变换的过程</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"定义一个相机\">定义一个相机</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/define_cameracamera.png\"\r\ntitle=\"define camera\" alt=\"camera\" />\r\n<figcaption aria-hidden=\"true\">camera</figcaption>\r\n</figure>\r\n<ul>\r\n<li>对于上述的那个拍照的行为，我们要拍摄这个摆放好的景物，关于相机我们只需要关心三个方面。\r\n<ul>\r\n<li>我们基于<font color=red>右手系</font>考虑下面的这些信息</li>\r\n<li>相机的位置 <span class=\"math inline\">\\(e\\)</span> -&gt; <span\r\nclass=\"math inline\">\\(eye\\)</span> = $x,y,z,1$</li>\r\n<li>相机的看的方向，既相机的拍摄方向 <span\r\nclass=\"math inline\">\\(\\vec{dir}\\)</span> - <code>lookAt direction</code>\r\n$x,y,z,0 $</li>\r\n<li>相机的上方向 <span class=\"math inline\">\\(\\vec{up}\\)</span> = <span\r\nclass=\"math inline\">\\(\\lbrace x,y,z,1\\rbrace\\)</span>\r\n<ul>\r\n<li>大概是手机横屏与竖屏的区别</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>我们获得一个观察方向,一个向上的方向\r\n<ul>\r\n<li>观察方向与向上方向垂直</li>\r\n<li>通过叉积我们可以得到一个向右的方向<span\r\nclass=\"math inline\">\\(\\vec{right}\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<p style=\"color:red\">\r\n  \r\n从拍照的行为来看，相机的观察方向是指向模型摆放的位置，我们保持两个物体的相对位置关系(相机与场景)，相机做了某种变换，模型也跟着做同样的变换。基于这种相对位置的变化，我们约定，将相机永远变换到原点，相机的观察方向永远是\r\n<code> -z </code>方向,以此我们构建一个坐标系\r\n</p>\r\n<p><img id=\"view_coordinate\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/camera构建坐标系.png\"/></p>\r\n<h2 id=\"计算视图变换矩阵\">计算视图变换矩阵</h2>\r\n<p><img id=\"旋转矩阵构建\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/旋转矩阵的构建.png\"/></p>\r\n<ul>\r\n<li>我们将以相机定义的坐标框架通过旋转与平移将之与世界空间的坐标重合\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{g}\\)</span> -&gt; $ $</li>\r\n<li><span class=\"math inline\">\\(\\vec{t}\\)</span> -&gt; $ $</li>\r\n<li><span class=\"math inline\">\\(\\vec{t} \\times \\vec{g}\\)</span> -&gt;\r\n<span class=\"math inline\">\\({\\vec{X}}\\)</span></li>\r\n<li><font color=red>但是我们要做到上面的事情比较困难，换一种思路，我们做相反的事情</font></li>\r\n</ul></li>\r\n<li>我们将世界空间的坐标通过旋转&amp;平移将之与相机定义的坐标系重合\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{Y}\\)</span> -&gt; <span\r\nclass=\"math inline\">\\(\\vec{t}\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{-Z}\\)</span> -&gt; <span\r\nclass=\"math inline\">\\(\\vec{g}\\)</span></li>\r\n<li><span class=\"math inline\">\\({\\vec{X}}\\)</span> -&gt; <span\r\nclass=\"math inline\">\\(\\vec{t} \\times \\vec{g}\\)</span></li>\r\n</ul></li>\r\n<li>构建一个旋转矩阵的逆矩阵，然后计算逆矩阵的逆便得到我们想要的矩阵。\r\n<ul>\r\n<li>由于坐标系的三个轴是正交的，我们只需要将矩阵转置就可以得到这个旋转矩阵。</li>\r\n</ul></li>\r\n<li>将旋转矩阵与平移矩阵乘起来，就得到想要的试图变换矩阵</li>\r\n</ul>\r\n<p><img src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/旋转矩阵计算.jpg\"/></p>\r\n<p style=\"color:pink\">\r\n<p>   上述过程描述了视图变换的过程与视图矩阵的计算。</p>\r\n</p>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  计算机图形学的视图变换过程的解析...\r\n</p>","more":"<h1 id=\"视图变换\">视图变换</h1>\r\n<ul>\r\n<li>视图变换是将所有世界空间中的点，变换到视图空间下的操作\r\n<ul>\r\n<li>这种变换，我们通过矩阵可以轻易的完成，但是我们首先需要计算一个描述这种变换的矩阵</li>\r\n</ul></li>\r\n<li>在一般的实现中，我们将视图变换的过程抽象出了一个相机的概念\r\n<ul>\r\n<li>本身而言在图形学中是没有相机这个概念的</li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"视图变换-变换过程\">视图变换-变换过程</h2>\r\n<ul>\r\n<li>从顶点构建到最终渲染成一张二维的图片，在行业中大家将之类比为拍照的行为\r\n<ul>\r\n<li>模型变换 - 取景的过程</li>\r\n<li><font color=red>视图变换 - 摆放相机的过程</font></li>\r\n<li>......</li>\r\n<li>此处我们只是讨论视图变换的过程</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"定义一个相机\">定义一个相机</h3>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/define_cameracamera.png\"\r\ntitle=\"define camera\" alt=\"camera\" />\r\n<figcaption aria-hidden=\"true\">camera</figcaption>\r\n</figure>\r\n<ul>\r\n<li>对于上述的那个拍照的行为，我们要拍摄这个摆放好的景物，关于相机我们只需要关心三个方面。\r\n<ul>\r\n<li>我们基于<font color=red>右手系</font>考虑下面的这些信息</li>\r\n<li>相机的位置 <span class=\"math inline\">\\(e\\)</span> -&gt; <span\r\nclass=\"math inline\">\\(eye\\)</span> = $x,y,z,1$</li>\r\n<li>相机的看的方向，既相机的拍摄方向 <span\r\nclass=\"math inline\">\\(\\vec{dir}\\)</span> - <code>lookAt direction</code>\r\n$x,y,z,0 $</li>\r\n<li>相机的上方向 <span class=\"math inline\">\\(\\vec{up}\\)</span> = <span\r\nclass=\"math inline\">\\(\\lbrace x,y,z,1\\rbrace\\)</span>\r\n<ul>\r\n<li>大概是手机横屏与竖屏的区别</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>我们获得一个观察方向,一个向上的方向\r\n<ul>\r\n<li>观察方向与向上方向垂直</li>\r\n<li>通过叉积我们可以得到一个向右的方向<span\r\nclass=\"math inline\">\\(\\vec{right}\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<p style=\"color:red\">\r\n  \r\n从拍照的行为来看，相机的观察方向是指向模型摆放的位置，我们保持两个物体的相对位置关系(相机与场景)，相机做了某种变换，模型也跟着做同样的变换。基于这种相对位置的变化，我们约定，将相机永远变换到原点，相机的观察方向永远是\r\n<code> -z </code>方向,以此我们构建一个坐标系\r\n</p>\r\n<p><img id=\"view_coordinate\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/camera构建坐标系.png\"/></p>\r\n<h2 id=\"计算视图变换矩阵\">计算视图变换矩阵</h2>\r\n<p><img id=\"旋转矩阵构建\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/旋转矩阵的构建.png\"/></p>\r\n<ul>\r\n<li>我们将以相机定义的坐标框架通过旋转与平移将之与世界空间的坐标重合\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{g}\\)</span> -&gt; $ $</li>\r\n<li><span class=\"math inline\">\\(\\vec{t}\\)</span> -&gt; $ $</li>\r\n<li><span class=\"math inline\">\\(\\vec{t} \\times \\vec{g}\\)</span> -&gt;\r\n<span class=\"math inline\">\\({\\vec{X}}\\)</span></li>\r\n<li><font color=red>但是我们要做到上面的事情比较困难，换一种思路，我们做相反的事情</font></li>\r\n</ul></li>\r\n<li>我们将世界空间的坐标通过旋转&amp;平移将之与相机定义的坐标系重合\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{Y}\\)</span> -&gt; <span\r\nclass=\"math inline\">\\(\\vec{t}\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{-Z}\\)</span> -&gt; <span\r\nclass=\"math inline\">\\(\\vec{g}\\)</span></li>\r\n<li><span class=\"math inline\">\\({\\vec{X}}\\)</span> -&gt; <span\r\nclass=\"math inline\">\\(\\vec{t} \\times \\vec{g}\\)</span></li>\r\n</ul></li>\r\n<li>构建一个旋转矩阵的逆矩阵，然后计算逆矩阵的逆便得到我们想要的矩阵。\r\n<ul>\r\n<li>由于坐标系的三个轴是正交的，我们只需要将矩阵转置就可以得到这个旋转矩阵。</li>\r\n</ul></li>\r\n<li>将旋转矩阵与平移矩阵乘起来，就得到想要的试图变换矩阵</li>\r\n</ul>\r\n<p><img src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/旋转矩阵计算.jpg\"/></p>\r\n<p style=\"color:pink\">\r\n<p>   上述过程描述了视图变换的过程与视图矩阵的计算。</p>\r\n</p>"},{"title":"Boy","date":"2021-03-16T13:53:58.000Z","_content":"\n####  About this Blog\n\n- 个人博客，分享我的日常与一些工作内容\n\n<!-- more -->\n","source":"_posts/baozi.md","raw":"---\ntitle: \"Boy\"\ndate: 2021-03-16 21:53:58\ncategories:\n- bun\n- life\ntags:\n - intraduce\n---\n\n####  About this Blog\n\n- 个人博客，分享我的日常与一些工作内容\n\n<!-- more -->\n","slug":"baozi","published":1,"updated":"2022-08-21T15:34:56.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravz002q7cda5qmah9ly","content":"<h4 id=\"about-this-blog\">About this Blog</h4>\r\n<ul>\r\n<li>个人博客，分享我的日常与一些工作内容</li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n","site":{"data":{}},"excerpt":"<h4 id=\"about-this-blog\">About this Blog</h4>\r\n<ul>\r\n<li>个人博客，分享我的日常与一些工作内容</li>\r\n</ul>","more":""},{"title":"cmake 文件操作","date":"2022-09-09T17:36:07.000Z","mathjax":true,"_content":"\n记录一下在日常的工作中用到的一些`cmake`的关于文件操作的命令(基本`Copy`,`move`,`remove`$\\dots$)\n\n<!--more-->\n\n## `cmake` 文件操作\n\n- 通常使用`FILE`命令完成相关的参数.\n\n### `Copy` File\n\n```cmake\nFILE(<COPY|INSTALL> <files>... DESTINATION <dir>\n     [FILE_PERMISSIONS <permissions>...]\n     [DIRECTORY_PERMISSIONS <permissions>...]\n     [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]\n     [FOLLOW_SYMLINK_CHAIN]\n     [FILES_MATCHING]\n     [[PATTERN <pattern> | REGEX <regex>]\n    [EXCLUDE] [PERMISSIONS <permissions>...]] [...])\n\n# The COPY signature copies files, directories, and symlinks to a destination folder. \n# Relative input paths are evaluated with respect to the current source directory, and a relative destination is evaluated with respect to the current build directory. \n# Copying preserves input file timestamps, and optimizes out a file if it exists at the destination with the same timestamp.\n# Copying preserves input permissions unless explicit permissions or NO_SOURCE_PERMISSIONS are given (default is USE_SOURCE_PERMISSIONS).\n\n# If FOLLOW_SYMLINK_CHAIN is specified, COPY will recursively resolve the symlinks at the paths given until a real file is found, and install a corresponding symlink in the destination for each symlink encountered.\n# For each symlink that is installed, the resolution is stripped of the directory, leaving only the filename, meaning that the new symlink points to a file in the same directory as the symlink. \n# This feature is useful on some Unix systems, where libraries are installed as a chain of symlinks with version numbers, with less specific versions pointing to more specific versions. \n# FOLLOW_SYMLINK_CHAIN will install all of these symlinks and the library itself into the destination directory. \n# For example, if you have the following directory structure:\n\n```\n\n- `file`命令的`copy`操作会将文件，目录，或者是符号链接复制到目标目录，相对输入路径是相对于当前源目录(`cmake文件`)，复制会保留输入文件的时间戳，如果文件存在于目标位置且具有相同的时间戳，则会对其进行优化。复制行为默认保留默认权限，除非手动指定(`NO_SOURCE_PERMISSIONS`)。\n\n#### example\n\n```cmake\n# 拷贝一个目录({CMAKE_SOURCE_DIR}/resources/Fonts)到\"{CMAKE_SOURCE_DIR}/bin/resources/\"路径下\nFILE(COPY ${CMAKE_SOURCE_DIR}/resources/Fonts DESTINATION ${CMAKE_SOURCE_DIR}/bin/resources/)\n```\n\n- load $\\dots$ $\\dots$\n","source":"_posts/cmake-文件操作.md","raw":"---\ntitle: cmake 文件操作\ndate: 2022-09-10 01:36:07\nmathjax: true\ncategories:\n- CMake\ntags:\n- fileSystem\n---\n\n记录一下在日常的工作中用到的一些`cmake`的关于文件操作的命令(基本`Copy`,`move`,`remove`$\\dots$)\n\n<!--more-->\n\n## `cmake` 文件操作\n\n- 通常使用`FILE`命令完成相关的参数.\n\n### `Copy` File\n\n```cmake\nFILE(<COPY|INSTALL> <files>... DESTINATION <dir>\n     [FILE_PERMISSIONS <permissions>...]\n     [DIRECTORY_PERMISSIONS <permissions>...]\n     [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]\n     [FOLLOW_SYMLINK_CHAIN]\n     [FILES_MATCHING]\n     [[PATTERN <pattern> | REGEX <regex>]\n    [EXCLUDE] [PERMISSIONS <permissions>...]] [...])\n\n# The COPY signature copies files, directories, and symlinks to a destination folder. \n# Relative input paths are evaluated with respect to the current source directory, and a relative destination is evaluated with respect to the current build directory. \n# Copying preserves input file timestamps, and optimizes out a file if it exists at the destination with the same timestamp.\n# Copying preserves input permissions unless explicit permissions or NO_SOURCE_PERMISSIONS are given (default is USE_SOURCE_PERMISSIONS).\n\n# If FOLLOW_SYMLINK_CHAIN is specified, COPY will recursively resolve the symlinks at the paths given until a real file is found, and install a corresponding symlink in the destination for each symlink encountered.\n# For each symlink that is installed, the resolution is stripped of the directory, leaving only the filename, meaning that the new symlink points to a file in the same directory as the symlink. \n# This feature is useful on some Unix systems, where libraries are installed as a chain of symlinks with version numbers, with less specific versions pointing to more specific versions. \n# FOLLOW_SYMLINK_CHAIN will install all of these symlinks and the library itself into the destination directory. \n# For example, if you have the following directory structure:\n\n```\n\n- `file`命令的`copy`操作会将文件，目录，或者是符号链接复制到目标目录，相对输入路径是相对于当前源目录(`cmake文件`)，复制会保留输入文件的时间戳，如果文件存在于目标位置且具有相同的时间戳，则会对其进行优化。复制行为默认保留默认权限，除非手动指定(`NO_SOURCE_PERMISSIONS`)。\n\n#### example\n\n```cmake\n# 拷贝一个目录({CMAKE_SOURCE_DIR}/resources/Fonts)到\"{CMAKE_SOURCE_DIR}/bin/resources/\"路径下\nFILE(COPY ${CMAKE_SOURCE_DIR}/resources/Fonts DESTINATION ${CMAKE_SOURCE_DIR}/bin/resources/)\n```\n\n- load $\\dots$ $\\dots$\n","slug":"cmake-文件操作","published":1,"updated":"2022-09-30T15:32:36.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexravz002t7cdacrz2gtd0","content":"<p>记录一下在日常的工作中用到的一些<code>cmake</code>的关于文件操作的命令(基本<code>Copy</code>,<code>move</code>,<code>remove</code><span\r\nclass=\"math inline\">\\(\\dots\\)</span>)</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"cmake-文件操作\"><code>cmake</code> 文件操作</h2>\r\n<ul>\r\n<li>通常使用<code>FILE</code>命令完成相关的参数.</li>\r\n</ul>\r\n<h3 id=\"copy-file\"><code>Copy</code> File</h3>\r\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FILE</span>(&lt;COPY|<span class=\"keyword\">INSTALL</span>&gt; &lt;files&gt;... DESTINATION &lt;dir&gt;</span><br><span class=\"line\">     [FILE_PERMISSIONS &lt;permissions&gt;...]</span><br><span class=\"line\">     [DIRECTORY_PERMISSIONS &lt;permissions&gt;...]</span><br><span class=\"line\">     [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]</span><br><span class=\"line\">     [FOLLOW_SYMLINK_CHAIN]</span><br><span class=\"line\">     [FILES_MATCHING]</span><br><span class=\"line\">     [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]</span><br><span class=\"line\">    [EXCLUDE] [PERMISSIONS &lt;permissions&gt;...]] [...])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The COPY signature copies files, directories, and symlinks to a destination folder. </span></span><br><span class=\"line\"><span class=\"comment\"># Relative input paths are evaluated with respect to the current source directory, and a relative destination is evaluated with respect to the current build directory. </span></span><br><span class=\"line\"><span class=\"comment\"># Copying preserves input file timestamps, and optimizes out a file if it exists at the destination with the same timestamp.</span></span><br><span class=\"line\"><span class=\"comment\"># Copying preserves input permissions unless explicit permissions or NO_SOURCE_PERMISSIONS are given (default is USE_SOURCE_PERMISSIONS).</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If FOLLOW_SYMLINK_CHAIN is specified, COPY will recursively resolve the symlinks at the paths given until a real file is found, and install a corresponding symlink in the destination for each symlink encountered.</span></span><br><span class=\"line\"><span class=\"comment\"># For each symlink that is installed, the resolution is stripped of the directory, leaving only the filename, meaning that the new symlink points to a file in the same directory as the symlink. </span></span><br><span class=\"line\"><span class=\"comment\"># This feature is useful on some Unix systems, where libraries are installed as a chain of symlinks with version numbers, with less specific versions pointing to more specific versions. </span></span><br><span class=\"line\"><span class=\"comment\"># FOLLOW_SYMLINK_CHAIN will install all of these symlinks and the library itself into the destination directory. </span></span><br><span class=\"line\"><span class=\"comment\"># For example, if you have the following directory structure:</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>file</code>命令的<code>copy</code>操作会将文件，目录，或者是符号链接复制到目标目录，相对输入路径是相对于当前源目录(<code>cmake文件</code>)，复制会保留输入文件的时间戳，如果文件存在于目标位置且具有相同的时间戳，则会对其进行优化。复制行为默认保留默认权限，除非手动指定(<code>NO_SOURCE_PERMISSIONS</code>)。</li>\r\n</ul>\r\n<h4 id=\"example\">example</h4>\r\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拷贝一个目录(&#123;CMAKE_SOURCE_DIR&#125;/resources/Fonts)到&quot;&#123;CMAKE_SOURCE_DIR&#125;/bin/resources/&quot;路径下</span></span><br><span class=\"line\"><span class=\"keyword\">FILE</span>(COPY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span>/resources/Fonts DESTINATION <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin/resources/)</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>load <span class=\"math inline\">\\(\\dots\\)</span> <span\r\nclass=\"math inline\">\\(\\dots\\)</span></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>记录一下在日常的工作中用到的一些<code>cmake</code>的关于文件操作的命令(基本<code>Copy</code>,<code>move</code>,<code>remove</code><span\r\nclass=\"math inline\">\\(\\dots\\)</span>)</p>","more":"<h2 id=\"cmake-文件操作\"><code>cmake</code> 文件操作</h2>\r\n<ul>\r\n<li>通常使用<code>FILE</code>命令完成相关的参数.</li>\r\n</ul>\r\n<h3 id=\"copy-file\"><code>Copy</code> File</h3>\r\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FILE</span>(&lt;COPY|<span class=\"keyword\">INSTALL</span>&gt; &lt;files&gt;... DESTINATION &lt;dir&gt;</span><br><span class=\"line\">     [FILE_PERMISSIONS &lt;permissions&gt;...]</span><br><span class=\"line\">     [DIRECTORY_PERMISSIONS &lt;permissions&gt;...]</span><br><span class=\"line\">     [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]</span><br><span class=\"line\">     [FOLLOW_SYMLINK_CHAIN]</span><br><span class=\"line\">     [FILES_MATCHING]</span><br><span class=\"line\">     [[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]</span><br><span class=\"line\">    [EXCLUDE] [PERMISSIONS &lt;permissions&gt;...]] [...])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The COPY signature copies files, directories, and symlinks to a destination folder. </span></span><br><span class=\"line\"><span class=\"comment\"># Relative input paths are evaluated with respect to the current source directory, and a relative destination is evaluated with respect to the current build directory. </span></span><br><span class=\"line\"><span class=\"comment\"># Copying preserves input file timestamps, and optimizes out a file if it exists at the destination with the same timestamp.</span></span><br><span class=\"line\"><span class=\"comment\"># Copying preserves input permissions unless explicit permissions or NO_SOURCE_PERMISSIONS are given (default is USE_SOURCE_PERMISSIONS).</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If FOLLOW_SYMLINK_CHAIN is specified, COPY will recursively resolve the symlinks at the paths given until a real file is found, and install a corresponding symlink in the destination for each symlink encountered.</span></span><br><span class=\"line\"><span class=\"comment\"># For each symlink that is installed, the resolution is stripped of the directory, leaving only the filename, meaning that the new symlink points to a file in the same directory as the symlink. </span></span><br><span class=\"line\"><span class=\"comment\"># This feature is useful on some Unix systems, where libraries are installed as a chain of symlinks with version numbers, with less specific versions pointing to more specific versions. </span></span><br><span class=\"line\"><span class=\"comment\"># FOLLOW_SYMLINK_CHAIN will install all of these symlinks and the library itself into the destination directory. </span></span><br><span class=\"line\"><span class=\"comment\"># For example, if you have the following directory structure:</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>file</code>命令的<code>copy</code>操作会将文件，目录，或者是符号链接复制到目标目录，相对输入路径是相对于当前源目录(<code>cmake文件</code>)，复制会保留输入文件的时间戳，如果文件存在于目标位置且具有相同的时间戳，则会对其进行优化。复制行为默认保留默认权限，除非手动指定(<code>NO_SOURCE_PERMISSIONS</code>)。</li>\r\n</ul>\r\n<h4 id=\"example\">example</h4>\r\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拷贝一个目录(&#123;CMAKE_SOURCE_DIR&#125;/resources/Fonts)到&quot;&#123;CMAKE_SOURCE_DIR&#125;/bin/resources/&quot;路径下</span></span><br><span class=\"line\"><span class=\"keyword\">FILE</span>(COPY <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span>/resources/Fonts DESTINATION <span class=\"variable\">$&#123;CMAKE_SOURCE_DIR&#125;</span>/bin/resources/)</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>load <span class=\"math inline\">\\(\\dots\\)</span> <span\r\nclass=\"math inline\">\\(\\dots\\)</span></li>\r\n</ul>"},{"title":"简单排序-冒泡&插入","date":"2021-10-19T15:41:14.000Z","_content":"\n<p>\n&ensp;&ensp;简单排序算法...\n</p>\n\n<!-- more -->\n\n## 简单排序:\n\n- 冒泡排序\n- 插入排序\n\n上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。\n\n在常规的排序算法中：我们默认的顺序是从小到大\n\n#### 1、冒泡排序\n\n&ensp;&ensp;原理： 冒泡排序是一个两重的`for`循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。\n\n- C++实现 -- 初始版本\n\n```c++\nvoid swap(int * a,int * b)；\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素 \n            }\n        }\n    }\n}\n\nvoid swap(int * a,int * b)\n{\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n```\n\n- 优化版本\n\n如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：\n\n```C++\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n    bool flag = false;       // 标识数组是否有序\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素\n                flag = true;\n            }\n        }\n        if(!flag)  // 满足退出条件 结束循环\n        {\n            break; \n        }\n    }\n}\n```\n- 结果展示\n  - 输入与数据：`int a[7] = {3,1,2,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png)\n\n- 复杂度分析 - 优化版本\n\n最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历`flag`变量会触发循环结束，复杂度：\n\n<center>T = O(N)</center>\n\n最坏情况：元素逆序，需要遍历比较所有的元素\n\n<center>T = O(N^2)</center>\n\n#### 2、插入排序\n\n插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。\n\n- C++实现 \n\n  ```C++\n  void Insertion_Sort(ElementType A[],int N)\n  {\n      int p,i，tmp;\n      for(p = 1;p < N;p++)\n      {\n          tmp = A[p];  // 获取插入的元素 \n          for(i = p;i > 0 && A[i - 1] > tmp;i--) // A[i-1]表示的是有序序列中的最大元素\n          {\n              A[i] = A[i-1];\n          }\n          // 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：\n          A[i] = tmp;\n      }\n  }\n  ```\n\n- 结果展示\n\n  - 输入与数据：`int a[7] = {3,1,1,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png)\n\n- 复杂度分析：\n\n  最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：\n\n  <center>T = O(N)</center>\n\n  最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：\n\n  <center>T = O(N^2)</center>\n\n#### 补充说明：\n\n- 时间复杂度下界\n\n&ensp;&ensp;&ensp;&ensp;概念：对于下边`i<j`如果A[i] > A[j]，则称`(i,j)`是一对逆序对<font color=red>逆序对(inversion)</font>\n\n- 在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font>\n\n<center>插入排序：T(N,I) = O(N+I)</center>\n\n- 对于N个不同元素组成的序列，平均具有`N(N-1)/4`个逆序对。\n\n- 对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐`Ω(N^2)`\n\n基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。\n\n### 下面将会介绍，希尔排序！\n\n","source":"_posts/sort-bubble-insertion.md","raw":"---\ntitle: 简单排序-冒泡&插入\ndate: 2021-10-19 23:41:14\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;简单排序算法...\n</p>\n\n<!-- more -->\n\n## 简单排序:\n\n- 冒泡排序\n- 插入排序\n\n上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。\n\n在常规的排序算法中：我们默认的顺序是从小到大\n\n#### 1、冒泡排序\n\n&ensp;&ensp;原理： 冒泡排序是一个两重的`for`循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。\n\n- C++实现 -- 初始版本\n\n```c++\nvoid swap(int * a,int * b)；\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素 \n            }\n        }\n    }\n}\n\nvoid swap(int * a,int * b)\n{\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n```\n\n- 优化版本\n\n如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：\n\n```C++\nvoid bubble_Sort(ElementTYpe A[],int N)  // A是待排序的数据 N代表的是数据的个数\n{\n    int p = 0,i = 0;\n    bool flag = false;       // 标识数组是否有序\n  \tfor(p = N - 1;p>=0;p--)\n    {\n        for(i = 0;i < p;i++) // 从无序的数据中抛出最大的\n        {\n            if(A[i] > A[i+1])  // 比较元素\n            {\n                swap(A+i,(A+(i+1))); // 交换元素\n                flag = true;\n            }\n        }\n        if(!flag)  // 满足退出条件 结束循环\n        {\n            break; \n        }\n    }\n}\n```\n- 结果展示\n  - 输入与数据：`int a[7] = {3,1,2,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png)\n\n- 复杂度分析 - 优化版本\n\n最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历`flag`变量会触发循环结束，复杂度：\n\n<center>T = O(N)</center>\n\n最坏情况：元素逆序，需要遍历比较所有的元素\n\n<center>T = O(N^2)</center>\n\n#### 2、插入排序\n\n插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。\n\n- C++实现 \n\n  ```C++\n  void Insertion_Sort(ElementType A[],int N)\n  {\n      int p,i，tmp;\n      for(p = 1;p < N;p++)\n      {\n          tmp = A[p];  // 获取插入的元素 \n          for(i = p;i > 0 && A[i - 1] > tmp;i--) // A[i-1]表示的是有序序列中的最大元素\n          {\n              A[i] = A[i-1];\n          }\n          // 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：\n          A[i] = tmp;\n      }\n  }\n  ```\n\n- 结果展示\n\n  - 输入与数据：`int a[7] = {3,1,1,98,30,8,90};`\n\n![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png)\n\n- 复杂度分析：\n\n  最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：\n\n  <center>T = O(N)</center>\n\n  最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：\n\n  <center>T = O(N^2)</center>\n\n#### 补充说明：\n\n- 时间复杂度下界\n\n&ensp;&ensp;&ensp;&ensp;概念：对于下边`i<j`如果A[i] > A[j]，则称`(i,j)`是一对逆序对<font color=red>逆序对(inversion)</font>\n\n- 在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font>\n\n<center>插入排序：T(N,I) = O(N+I)</center>\n\n- 对于N个不同元素组成的序列，平均具有`N(N-1)/4`个逆序对。\n\n- 对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐`Ω(N^2)`\n\n基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。\n\n### 下面将会介绍，希尔排序！\n\n","slug":"sort-bubble-insertion","published":1,"updated":"2022-08-21T15:34:57.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw0002y7cda12r1bsfz","content":"<p>\r\n  简单排序算法...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"简单排序\">简单排序:</h2>\r\n<ul>\r\n<li>冒泡排序</li>\r\n<li>插入排序</li>\r\n</ul>\r\n<p>上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。</p>\r\n<p>在常规的排序算法中：我们默认的顺序是从小到大</p>\r\n<h4 id=\"冒泡排序\">1、冒泡排序</h4>\r\n<p>  原理：\r\n冒泡排序是一个两重的<code>for</code>循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。</p>\r\n<ul>\r\n<li>C++实现 -- 初始版本</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap(int * a,int * b)；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> * a,<span class=\"keyword\">int</span> * b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">    *b ^= *a;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>优化版本</li>\r\n</ul>\r\n<p>如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;       <span class=\"comment\">// 标识数组是否有序</span></span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素</span></span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)  <span class=\"comment\">// 满足退出条件 结束循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>结果展示\r\n<ul>\r\n<li>输入与数据：<code>int a[7] = &#123;3,1,2,98,30,8,90&#125;;</code></li>\r\n</ul></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png\" /></p>\r\n<ul>\r\n<li>复杂度分析 - 优化版本</li>\r\n</ul>\r\n<p>最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历<code>flag</code>变量会触发循环结束，复杂度：</p>\r\n<center>\r\nT = O(N)\r\n</center>\r\n<p>最坏情况：元素逆序，需要遍历比较所有的元素</p>\r\n<center>\r\nT = O(N^2)\r\n</center>\r\n<h4 id=\"插入排序\">2、插入排序</h4>\r\n<p>插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。</p>\r\n<ul>\r\n<li><p>C++实现</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertion_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p,i，tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = <span class=\"number\">1</span>;p &lt; N;p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = A[p];  <span class=\"comment\">// 获取插入的元素 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = p;i &gt; <span class=\"number\">0</span> &amp;&amp; A[i - <span class=\"number\">1</span>] &gt; tmp;i--) <span class=\"comment\">// A[i-1]表示的是有序序列中的最大元素</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            A[i] = A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：</span></span><br><span class=\"line\">        A[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n<li><p>结果展示</p>\r\n<ul>\r\n<li>输入与数据：<code>int a[7] = &#123;3,1,1,98,30,8,90&#125;;</code></li>\r\n</ul></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png\" /></p>\r\n<ul>\r\n<li><p>复杂度分析：</p>\r\n<p>最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：</p>\r\n<center>\r\n<p>T = O(N)</p>\r\n</center>\r\n<p>最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：</p>\r\n<center>\r\n<p>T = O(N^2)</p>\r\n</center></li>\r\n</ul>\r\n<h4 id=\"补充说明\">补充说明：</h4>\r\n<ul>\r\n<li>时间复杂度下界</li>\r\n</ul>\r\n<p>    概念：对于下边<code>i&lt;j</code>如果A[i] &gt;\r\nA[j]，则称<code>(i,j)</code>是一对逆序对<font color=red>逆序对(inversion)</font></p>\r\n<ul>\r\n<li>在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font></li>\r\n</ul>\r\n<center>\r\n插入排序：T(N,I) = O(N+I)\r\n</center>\r\n<ul>\r\n<li><p>对于N个不同元素组成的序列，平均具有<code>N(N-1)/4</code>个逆序对。</p></li>\r\n<li><p>对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐<code>Ω(N^2)</code></p></li>\r\n</ul>\r\n<p>基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。</p>\r\n<h3 id=\"下面将会介绍希尔排序\">下面将会介绍，希尔排序！</h3>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  简单排序算法...\r\n</p>","more":"<h2 id=\"简单排序\">简单排序:</h2>\r\n<ul>\r\n<li>冒泡排序</li>\r\n<li>插入排序</li>\r\n</ul>\r\n<p>上述两种排序是相对基础的简单排序,通过交换逆序对逐渐使序列有序。</p>\r\n<p>在常规的排序算法中：我们默认的顺序是从小到大</p>\r\n<h4 id=\"冒泡排序\">1、冒泡排序</h4>\r\n<p>  原理：\r\n冒泡排序是一个两重的<code>for</code>循环，外面一层每循环一次就代表有一个元素被放好，第二重循环做的事情是从没有排好序的元素中取出一个，然后依次和后面的元素作比较，将这些元素中最大的一个放到这些无序元素的最后一个元素的位置，标志着这个元素完成排序——变得有序。</p>\r\n<ul>\r\n<li>C++实现 -- 初始版本</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void swap(int * a,int * b)；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素 </span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> * a,<span class=\"keyword\">int</span> * b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">    *b ^= *a;</span><br><span class=\"line\">    *a ^= *b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>优化版本</li>\r\n</ul>\r\n<p>如是在某一次循环中，提前让数组有序，但是在上述的代码中，即使数据有序了，循环依旧会继续执行，我们需要一个标志，来知道数据已经有序：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble_Sort</span><span class=\"params\">(ElementTYpe A[],<span class=\"keyword\">int</span> N)</span>  <span class=\"comment\">// A是待排序的数据 N代表的是数据的个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"literal\">false</span>;       <span class=\"comment\">// 标识数组是否有序</span></span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(p = N - <span class=\"number\">1</span>;p&gt;=<span class=\"number\">0</span>;p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; p;i++) <span class=\"comment\">// 从无序的数据中抛出最大的</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] &gt; A[i+<span class=\"number\">1</span>])  <span class=\"comment\">// 比较元素</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap(A+i,(A+(i+<span class=\"number\">1</span>))); <span class=\"comment\">// 交换元素</span></span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!flag)  <span class=\"comment\">// 满足退出条件 结束循环</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>结果展示\r\n<ul>\r\n<li>输入与数据：<code>int a[7] = &#123;3,1,2,98,30,8,90&#125;;</code></li>\r\n</ul></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/bubble_sort.png\" /></p>\r\n<ul>\r\n<li>复杂度分析 - 优化版本</li>\r\n</ul>\r\n<p>最好的情况：默认传输进来的元素是有序的，我们只需要，经历一次数据的遍历<code>flag</code>变量会触发循环结束，复杂度：</p>\r\n<center>\r\nT = O(N)\r\n</center>\r\n<p>最坏情况：元素逆序，需要遍历比较所有的元素</p>\r\n<center>\r\nT = O(N^2)\r\n</center>\r\n<h4 id=\"插入排序\">2、插入排序</h4>\r\n<p>插入排序：不发生元素的交换，但是会发生元素的移动，每次获取一个元素(P)，将这个P插入到一个有序的序列中，插入的过程是一个比较+覆盖的过程。</p>\r\n<ul>\r\n<li><p>C++实现</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Insertion_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p,i，tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(p = <span class=\"number\">1</span>;p &lt; N;p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmp = A[p];  <span class=\"comment\">// 获取插入的元素 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = p;i &gt; <span class=\"number\">0</span> &amp;&amp; A[i - <span class=\"number\">1</span>] &gt; tmp;i--) <span class=\"comment\">// A[i-1]表示的是有序序列中的最大元素</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            A[i] = A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 比较结束后，当前 i - 1指向位置的元素是小于 tmp的，所以：</span></span><br><span class=\"line\">        A[i] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n<li><p>结果展示</p>\r\n<ul>\r\n<li>输入与数据：<code>int a[7] = &#123;3,1,1,98,30,8,90&#125;;</code></li>\r\n</ul></li>\r\n</ul>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/sort/insertion_sort.png\" /></p>\r\n<ul>\r\n<li><p>复杂度分析：</p>\r\n<p>最好情况，每次进来的元素不需要，比较。直接插入到相应的位置，此时时间复杂度：</p>\r\n<center>\r\n<p>T = O(N)</p>\r\n</center>\r\n<p>最坏情况，数据逆序，每一次的元素都需要遍历所有的有序元素，此时时间复杂度：</p>\r\n<center>\r\n<p>T = O(N^2)</p>\r\n</center></li>\r\n</ul>\r\n<h4 id=\"补充说明\">补充说明：</h4>\r\n<ul>\r\n<li>时间复杂度下界</li>\r\n</ul>\r\n<p>    概念：对于下边<code>i&lt;j</code>如果A[i] &gt;\r\nA[j]，则称<code>(i,j)</code>是一对逆序对<font color=red>逆序对(inversion)</font></p>\r\n<ul>\r\n<li>在上述的排序中，相邻元素的交换其实是消掉逆序对的操作！<font color=red>如果序列基本有序，那么插入排序简单且高效</font></li>\r\n</ul>\r\n<center>\r\n插入排序：T(N,I) = O(N+I)\r\n</center>\r\n<ul>\r\n<li><p>对于N个不同元素组成的序列，平均具有<code>N(N-1)/4</code>个逆序对。</p></li>\r\n<li><p>对于仅以交换相邻元素来排序的算法，其平均时间复杂度为婐<code>Ω(N^2)</code></p></li>\r\n</ul>\r\n<p>基于上面的描述，我们要提高此类算法的效率，必须每次消去的逆序对数大于1。</p>\r\n<h3 id=\"下面将会介绍希尔排序\">下面将会介绍，希尔排序！</h3>"},{"title":"vector dot product","date":"2022-07-27T16:55:14.000Z","mathjax":true,"_content":"\n<p>\n&ensp;&ensp;向量的计算...\n</p>\n\n<!-- more -->\n\n## 向量的内积与外积\n### 点与点的减法\n- 描述的是起点到终点的运动\n\n### 点${p}$与向量$\\vec{a}$的加法\n\n- 从$P$出发经过这个向量$\\vec{a}$代表的运动，到达一个新的点$P_0$\n\n### 在此处定义两个向量\n- $\\vec{a}$\n  $$  \n       \\vec{a} = \\begin{bmatrix} \n          a_1 \\\\\n          a_2 \\\\\n          a_3 \\\\\n        \\end{bmatrix}\n  $$ \n- $\\vec{b}$\n  $$  \n      \\vec{b} = \\begin{bmatrix} \n        b_1 \\\\\n        b_2 \\\\\n        b_3 \\\\\n      \\end{bmatrix}\n  $$ \n\n### 向量点击\n\n- 点击(内积)的公式\n  $$\\vec{a}\\cdot\\vec{b} = |\\vec{a}|\\times|\\vec{b}|\\times \\cos \\theta $$\n  $$ \\vec{a}\\cdot\\vec{b} = \\sum_{i=1}^{n} \\left\\{ a_i * b_i \\right\\}$$\n- 点击的几何意义\n  - <p> 其中一个向量在另一个向量上的投影且与点击的顺序无关 </p>\n  - $\\vec{a}\\cdot\\vec{b} > 0$    方向基本相同，夹角在0°到90°之间\n  - $\\vec{a}\\cdot\\vec{b} = 0$    正交，相互垂直 \n  - $\\vec{a}\\cdot\\vec{b} < 0$    方向基本相反，夹角在90°到180°之间\n- 点击的巧用\n  - 计算向量的模长的平方\n    $$|\\vec{a}|^2 = \\vec{a} \\cdot \\vec{a} $$\n  - 计算两个向量之间的夹角的$\\cos\\theta$\n    -![计算两个向量之间的夹角](https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png \"计算两个向量之间的夹角\")\n    - 两个单位向量的点击等于他们的夹角的$\\cos\\theta$的值\n  - 两个互相垂直的向量的点击总是为`0` $\\theta = 90^0$\n    $$\\vec{a} \\cdot \\vec{b} = |\\vec{a}| \\ast |\\vec{b}| \\ast \\cos\\theta = 0 $$\n  - 一条射线描述的向量[起点 + 方向]点击一个平面的法向可以得到起点到平面的距离   \n### 向量叉积\n\n- 外积公式\n  $$ \n      \\vec{a} \\times \\vec{b} =  \n      \\begin{bmatrix} \n        a_2 * b_3 - b_2 * a_3 \\\\\n        a_3 * b_1 - b_3 * a_1 \\\\\n        a_1 * b_2 - b_1 * a_2 \\\\\n      \\end{bmatrix}\n   $$\n- 叉积的几何意义\n  - 几何表达公式\n    $$\n      \\vec{a} \\times \\vec{b} = |\\vec{a}| * |\\vec{b}| * sin(\\theta) * \\vec{n}\n    $$\n    - $\\vec{n}$ 表示$\\vec{a}$, $\\vec{b}$所构成平面的法向量方向的单位向量\n  - 在二维空间中：叉积得到的向量的模长$|\\vec{a}\\times\\vec{b}|$等于这两个向量$\\vec{a},\\vec{b}$组成的平行四边形的面积\n - 外积的使用\n    - 外积的模长则为夹角的正弦（始终为正）\n\n### 扩展知识\n\n- 扩展 - 1\n  - 平面上的四个点$P_1$,$P_2$,$P_3$,$P_4$,分别构成向量 $\\vec{P_1P_2}$与$\\vec{P_3P_4}$。如何通过点击计算他们交点的坐标?\n  - 下次吧！","source":"_posts/vector-dot-product.md","raw":"---\ntitle: vector dot product\ndate: 2022-07-28 00:55:14\nmathjax: true\ncategories:\n- Math\n- linear algebra\ntags:\n- vector\n---\n\n<p>\n&ensp;&ensp;向量的计算...\n</p>\n\n<!-- more -->\n\n## 向量的内积与外积\n### 点与点的减法\n- 描述的是起点到终点的运动\n\n### 点${p}$与向量$\\vec{a}$的加法\n\n- 从$P$出发经过这个向量$\\vec{a}$代表的运动，到达一个新的点$P_0$\n\n### 在此处定义两个向量\n- $\\vec{a}$\n  $$  \n       \\vec{a} = \\begin{bmatrix} \n          a_1 \\\\\n          a_2 \\\\\n          a_3 \\\\\n        \\end{bmatrix}\n  $$ \n- $\\vec{b}$\n  $$  \n      \\vec{b} = \\begin{bmatrix} \n        b_1 \\\\\n        b_2 \\\\\n        b_3 \\\\\n      \\end{bmatrix}\n  $$ \n\n### 向量点击\n\n- 点击(内积)的公式\n  $$\\vec{a}\\cdot\\vec{b} = |\\vec{a}|\\times|\\vec{b}|\\times \\cos \\theta $$\n  $$ \\vec{a}\\cdot\\vec{b} = \\sum_{i=1}^{n} \\left\\{ a_i * b_i \\right\\}$$\n- 点击的几何意义\n  - <p> 其中一个向量在另一个向量上的投影且与点击的顺序无关 </p>\n  - $\\vec{a}\\cdot\\vec{b} > 0$    方向基本相同，夹角在0°到90°之间\n  - $\\vec{a}\\cdot\\vec{b} = 0$    正交，相互垂直 \n  - $\\vec{a}\\cdot\\vec{b} < 0$    方向基本相反，夹角在90°到180°之间\n- 点击的巧用\n  - 计算向量的模长的平方\n    $$|\\vec{a}|^2 = \\vec{a} \\cdot \\vec{a} $$\n  - 计算两个向量之间的夹角的$\\cos\\theta$\n    -![计算两个向量之间的夹角](https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png \"计算两个向量之间的夹角\")\n    - 两个单位向量的点击等于他们的夹角的$\\cos\\theta$的值\n  - 两个互相垂直的向量的点击总是为`0` $\\theta = 90^0$\n    $$\\vec{a} \\cdot \\vec{b} = |\\vec{a}| \\ast |\\vec{b}| \\ast \\cos\\theta = 0 $$\n  - 一条射线描述的向量[起点 + 方向]点击一个平面的法向可以得到起点到平面的距离   \n### 向量叉积\n\n- 外积公式\n  $$ \n      \\vec{a} \\times \\vec{b} =  \n      \\begin{bmatrix} \n        a_2 * b_3 - b_2 * a_3 \\\\\n        a_3 * b_1 - b_3 * a_1 \\\\\n        a_1 * b_2 - b_1 * a_2 \\\\\n      \\end{bmatrix}\n   $$\n- 叉积的几何意义\n  - 几何表达公式\n    $$\n      \\vec{a} \\times \\vec{b} = |\\vec{a}| * |\\vec{b}| * sin(\\theta) * \\vec{n}\n    $$\n    - $\\vec{n}$ 表示$\\vec{a}$, $\\vec{b}$所构成平面的法向量方向的单位向量\n  - 在二维空间中：叉积得到的向量的模长$|\\vec{a}\\times\\vec{b}|$等于这两个向量$\\vec{a},\\vec{b}$组成的平行四边形的面积\n - 外积的使用\n    - 外积的模长则为夹角的正弦（始终为正）\n\n### 扩展知识\n\n- 扩展 - 1\n  - 平面上的四个点$P_1$,$P_2$,$P_3$,$P_4$,分别构成向量 $\\vec{P_1P_2}$与$\\vec{P_3P_4}$。如何通过点击计算他们交点的坐标?\n  - 下次吧！","slug":"vector-dot-product","published":1,"updated":"2022-08-22T11:46:11.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw100317cda3rs7d8v3","content":"<p>\r\n  向量的计算...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"向量的内积与外积\">向量的内积与外积</h2>\r\n<h3 id=\"点与点的减法\">点与点的减法</h3>\r\n<ul>\r\n<li>描述的是起点到终点的运动</li>\r\n</ul>\r\n<h3 id=\"点p与向量veca的加法\">点<span\r\nclass=\"math inline\">\\({p}\\)</span>与向量<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>的加法</h3>\r\n<ul>\r\n<li>从<span class=\"math inline\">\\(P\\)</span>出发经过这个向量<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>代表的运动，到达一个新的点<span\r\nclass=\"math inline\">\\(P_0\\)</span></li>\r\n</ul>\r\n<h3 id=\"在此处定义两个向量\">在此处定义两个向量</h3>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\)</span> <span\r\nclass=\"math display\">\\[  \r\n     \\vec{a} = \\begin{bmatrix}\r\n        a_1 \\\\\r\n        a_2 \\\\\r\n        a_3 \\\\\r\n      \\end{bmatrix}\r\n\\]</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{b}\\)</span> <span\r\nclass=\"math display\">\\[  \r\n    \\vec{b} = \\begin{bmatrix}\r\n      b_1 \\\\\r\n      b_2 \\\\\r\n      b_3 \\\\\r\n    \\end{bmatrix}\r\n\\]</span></li>\r\n</ul>\r\n<h3 id=\"向量点击\">向量点击</h3>\r\n<ul>\r\n<li>点击(内积)的公式 <span class=\"math display\">\\[\\vec{a}\\cdot\\vec{b} =\r\n|\\vec{a}|\\times|\\vec{b}|\\times \\cos \\theta \\]</span> <span\r\nclass=\"math display\">\\[ \\vec{a}\\cdot\\vec{b} = \\sum_{i=1}^{n} \\left\\{ a_i\r\n* b_i \\right\\}\\]</span></li>\r\n<li>点击的几何意义\r\n<ul>\r\n<li><p>\r\n其中一个向量在另一个向量上的投影且与点击的顺序无关\r\n</p></li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} &gt; 0\\)</span>\r\n方向基本相同，夹角在0°到90°之间</li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} = 0\\)</span>\r\n正交，相互垂直</li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} &lt; 0\\)</span>\r\n方向基本相反，夹角在90°到180°之间</li>\r\n</ul></li>\r\n<li>点击的巧用\r\n<ul>\r\n<li>计算向量的模长的平方 <span class=\"math display\">\\[|\\vec{a}|^2 =\r\n\\vec{a} \\cdot \\vec{a} \\]</span></li>\r\n<li>计算两个向量之间的夹角的<span\r\nclass=\"math inline\">\\(\\cos\\theta\\)</span> -<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png\"\r\ntitle=\"计算两个向量之间的夹角\" alt=\"计算两个向量之间的夹角\" />\r\n<ul>\r\n<li>两个单位向量的点击等于他们的夹角的<span\r\nclass=\"math inline\">\\(\\cos\\theta\\)</span>的值</li>\r\n</ul></li>\r\n<li>两个互相垂直的向量的点击总是为<code>0</code> <span\r\nclass=\"math inline\">\\(\\theta = 90^0\\)</span> <span\r\nclass=\"math display\">\\[\\vec{a} \\cdot \\vec{b} = |\\vec{a}| \\ast |\\vec{b}|\r\n\\ast \\cos\\theta = 0 \\]</span></li>\r\n<li>一条射线描述的向量[起点 +\r\n方向]点击一个平面的法向可以得到起点到平面的距离<br />\r\n### 向量叉积</li>\r\n</ul></li>\r\n<li>外积公式 <span class=\"math display\">\\[\r\n    \\vec{a} \\times \\vec{b} =  \r\n    \\begin{bmatrix}\r\n      a_2 * b_3 - b_2 * a_3 \\\\\r\n      a_3 * b_1 - b_3 * a_1 \\\\\r\n      a_1 * b_2 - b_1 * a_2 \\\\\r\n    \\end{bmatrix}\r\n\\]</span></li>\r\n<li>叉积的几何意义\r\n<ul>\r\n<li>几何表达公式 <span class=\"math display\">\\[\r\n  \\vec{a} \\times \\vec{b} = |\\vec{a}| * |\\vec{b}| * sin(\\theta) * \\vec{n}\r\n\\]</span>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n}\\)</span> 表示<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>, <span\r\nclass=\"math inline\">\\(\\vec{b}\\)</span>所构成平面的法向量方向的单位向量</li>\r\n</ul></li>\r\n<li>在二维空间中：叉积得到的向量的模长<span\r\nclass=\"math inline\">\\(|\\vec{a}\\times\\vec{b}|\\)</span>等于这两个向量<span\r\nclass=\"math inline\">\\(\\vec{a},\\vec{b}\\)</span>组成的平行四边形的面积</li>\r\n</ul></li>\r\n<li>外积的使用\r\n<ul>\r\n<li>外积的模长则为夹角的正弦（始终为正）</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"扩展知识\">扩展知识</h3>\r\n<ul>\r\n<li>扩展 - 1\r\n<ul>\r\n<li>平面上的四个点<span class=\"math inline\">\\(P_1\\)</span>,<span\r\nclass=\"math inline\">\\(P_2\\)</span>,<span\r\nclass=\"math inline\">\\(P_3\\)</span>,<span\r\nclass=\"math inline\">\\(P_4\\)</span>,分别构成向量 <span\r\nclass=\"math inline\">\\(\\vec{P_1P_2}\\)</span>与<span\r\nclass=\"math inline\">\\(\\vec{P_3P_4}\\)</span>。如何通过点击计算他们交点的坐标?</li>\r\n<li>下次吧！</li>\r\n</ul></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  向量的计算...\r\n</p>","more":"<h2 id=\"向量的内积与外积\">向量的内积与外积</h2>\r\n<h3 id=\"点与点的减法\">点与点的减法</h3>\r\n<ul>\r\n<li>描述的是起点到终点的运动</li>\r\n</ul>\r\n<h3 id=\"点p与向量veca的加法\">点<span\r\nclass=\"math inline\">\\({p}\\)</span>与向量<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>的加法</h3>\r\n<ul>\r\n<li>从<span class=\"math inline\">\\(P\\)</span>出发经过这个向量<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>代表的运动，到达一个新的点<span\r\nclass=\"math inline\">\\(P_0\\)</span></li>\r\n</ul>\r\n<h3 id=\"在此处定义两个向量\">在此处定义两个向量</h3>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\)</span> <span\r\nclass=\"math display\">\\[  \r\n     \\vec{a} = \\begin{bmatrix}\r\n        a_1 \\\\\r\n        a_2 \\\\\r\n        a_3 \\\\\r\n      \\end{bmatrix}\r\n\\]</span></li>\r\n<li><span class=\"math inline\">\\(\\vec{b}\\)</span> <span\r\nclass=\"math display\">\\[  \r\n    \\vec{b} = \\begin{bmatrix}\r\n      b_1 \\\\\r\n      b_2 \\\\\r\n      b_3 \\\\\r\n    \\end{bmatrix}\r\n\\]</span></li>\r\n</ul>\r\n<h3 id=\"向量点击\">向量点击</h3>\r\n<ul>\r\n<li>点击(内积)的公式 <span class=\"math display\">\\[\\vec{a}\\cdot\\vec{b} =\r\n|\\vec{a}|\\times|\\vec{b}|\\times \\cos \\theta \\]</span> <span\r\nclass=\"math display\">\\[ \\vec{a}\\cdot\\vec{b} = \\sum_{i=1}^{n} \\left\\{ a_i\r\n* b_i \\right\\}\\]</span></li>\r\n<li>点击的几何意义\r\n<ul>\r\n<li><p>\r\n其中一个向量在另一个向量上的投影且与点击的顺序无关\r\n</p></li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} &gt; 0\\)</span>\r\n方向基本相同，夹角在0°到90°之间</li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} = 0\\)</span>\r\n正交，相互垂直</li>\r\n<li><span class=\"math inline\">\\(\\vec{a}\\cdot\\vec{b} &lt; 0\\)</span>\r\n方向基本相反，夹角在90°到180°之间</li>\r\n</ul></li>\r\n<li>点击的巧用\r\n<ul>\r\n<li>计算向量的模长的平方 <span class=\"math display\">\\[|\\vec{a}|^2 =\r\n\\vec{a} \\cdot \\vec{a} \\]</span></li>\r\n<li>计算两个向量之间的夹角的<span\r\nclass=\"math inline\">\\(\\cos\\theta\\)</span> -<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/weChat/vector/计算两个向量的夹角.png\"\r\ntitle=\"计算两个向量之间的夹角\" alt=\"计算两个向量之间的夹角\" />\r\n<ul>\r\n<li>两个单位向量的点击等于他们的夹角的<span\r\nclass=\"math inline\">\\(\\cos\\theta\\)</span>的值</li>\r\n</ul></li>\r\n<li>两个互相垂直的向量的点击总是为<code>0</code> <span\r\nclass=\"math inline\">\\(\\theta = 90^0\\)</span> <span\r\nclass=\"math display\">\\[\\vec{a} \\cdot \\vec{b} = |\\vec{a}| \\ast |\\vec{b}|\r\n\\ast \\cos\\theta = 0 \\]</span></li>\r\n<li>一条射线描述的向量[起点 +\r\n方向]点击一个平面的法向可以得到起点到平面的距离<br />\r\n### 向量叉积</li>\r\n</ul></li>\r\n<li>外积公式 <span class=\"math display\">\\[\r\n    \\vec{a} \\times \\vec{b} =  \r\n    \\begin{bmatrix}\r\n      a_2 * b_3 - b_2 * a_3 \\\\\r\n      a_3 * b_1 - b_3 * a_1 \\\\\r\n      a_1 * b_2 - b_1 * a_2 \\\\\r\n    \\end{bmatrix}\r\n\\]</span></li>\r\n<li>叉积的几何意义\r\n<ul>\r\n<li>几何表达公式 <span class=\"math display\">\\[\r\n  \\vec{a} \\times \\vec{b} = |\\vec{a}| * |\\vec{b}| * sin(\\theta) * \\vec{n}\r\n\\]</span>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n}\\)</span> 表示<span\r\nclass=\"math inline\">\\(\\vec{a}\\)</span>, <span\r\nclass=\"math inline\">\\(\\vec{b}\\)</span>所构成平面的法向量方向的单位向量</li>\r\n</ul></li>\r\n<li>在二维空间中：叉积得到的向量的模长<span\r\nclass=\"math inline\">\\(|\\vec{a}\\times\\vec{b}|\\)</span>等于这两个向量<span\r\nclass=\"math inline\">\\(\\vec{a},\\vec{b}\\)</span>组成的平行四边形的面积</li>\r\n</ul></li>\r\n<li>外积的使用\r\n<ul>\r\n<li>外积的模长则为夹角的正弦（始终为正）</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"扩展知识\">扩展知识</h3>\r\n<ul>\r\n<li>扩展 - 1\r\n<ul>\r\n<li>平面上的四个点<span class=\"math inline\">\\(P_1\\)</span>,<span\r\nclass=\"math inline\">\\(P_2\\)</span>,<span\r\nclass=\"math inline\">\\(P_3\\)</span>,<span\r\nclass=\"math inline\">\\(P_4\\)</span>,分别构成向量 <span\r\nclass=\"math inline\">\\(\\vec{P_1P_2}\\)</span>与<span\r\nclass=\"math inline\">\\(\\vec{P_3P_4}\\)</span>。如何通过点击计算他们交点的坐标?</li>\r\n<li>下次吧！</li>\r\n</ul></li>\r\n</ul>"},{"title":"多重继承下的菱形继承","date":"2022-08-19T12:58:37.000Z","_content":"\n`cpp`, 中关于继承的一点问题...\n\n<!-- more -->\n\n## 单继承\n\n- 只有一父类的时候，称之为单继承\n\n## 多继承\n\n- 一个子类有两个及以上的父类，这个时候，称之为多继承\n\n### 菱形继承\n\n- 多继承下面的特殊状态, 会产生一些问题。\n  - 当一个类的父类们同时拥有相同的父类的时候，就会发生二义性\n![菱形继承](https://raw.githubusercontent.com/Ranbun/images/main/diamond_inheritance.PNG \"菱形继承\")\n\n#### 问题\n\n##### 1 二义性\n\n  ![二义性](https://raw.githubusercontent.com/Ranbun/images/main/cpp/inherit_ambiguos.png \"二义性问题\")\n\n- 解决访问的二义性相对简单，可以通过添加类的限定从而访问到具体的数据\n\n    ```C++  \n    class Author :public Student, public Teacher\n    {\n    public:\n        Author()\n        {\n            Student::name_ = \"\";\n            Teacher::name_ = \"\";\n        }\n    };\n\n    ```\n\n\n##### 2 数据冗余\n\n- 从上面的图来看,菱形继承的数据发生了冗余，以及带来数据访问时候的二义性\n  - 在`Author`中存在两份`Person`的数据\n- 数据冗余的问题在`CPP`中通过使用虚继承解决\n\n```C++\nclass Person\n{\npublic:\n    Person()\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\n    Person(std::string name,std::string ID = \"\")\n        :name_(name)\n        ,id_(ID)\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\n    ~Person()\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\nprotected:\n    std::string name_{\"name\"};\n    std::string birthDay_{\"2000.1.1\"};\n    std::string id_{\"XXXXXXXXXXXXXXXXXX\"};\n};\n\nclass Student : virtual public Person\n{\npublic:\n    Student(std::string name_)\n        :Person(\"stu\")\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\n    ~Student() = default;\nprotected:\n    std::string stuId_;\n};\n\n\nclass Teacher : virtual public Person\n{\npublic:\n    Teacher(std::string name_)\n        :Person(\"teacher\")\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\n    ~Teacher() = default;\nprotected:\n    std::string teacherId_;\n};\n\n```\n\n## 虚继承的实现原理\n- `virtual base table pointer`\n- `virtual table`\n\n- 我们基于上面部分分析关于虚继承的实现的原理 \n  - `VS`的`class`布局查看工具\n  ![](https://raw.githubusercontent.com/Ranbun/images/main/cpp/vs_Layout_to_class.png \"\")\n  - 上述信息包含: 虚函数表及布局，类的大小，类成员占用大小，成员相较于起始地址的偏移量，字节对其信息\n\n- 上述布局中我们可以看到,当虚继承发生,就会在虚基类的直接子类中产生一个`vbptr`指针,这个指针指向一个虚基类表,`Author`继承自`Teacher&Student`,同样继承了虚基类指针,同时`Author`只存在一份`Person`的数据.\n- 我们通过虚基类表中记录的偏移(虚基类到当前类),就可以访问到虚基类的数据成员.","source":"_posts/多重继承.md","raw":"---\ntitle: 多重继承下的菱形继承\ndate: 2022-08-19 20:58:37\ncategories:\n- cpp\ntags:\n- inherit\n---\n\n`cpp`, 中关于继承的一点问题...\n\n<!-- more -->\n\n## 单继承\n\n- 只有一父类的时候，称之为单继承\n\n## 多继承\n\n- 一个子类有两个及以上的父类，这个时候，称之为多继承\n\n### 菱形继承\n\n- 多继承下面的特殊状态, 会产生一些问题。\n  - 当一个类的父类们同时拥有相同的父类的时候，就会发生二义性\n![菱形继承](https://raw.githubusercontent.com/Ranbun/images/main/diamond_inheritance.PNG \"菱形继承\")\n\n#### 问题\n\n##### 1 二义性\n\n  ![二义性](https://raw.githubusercontent.com/Ranbun/images/main/cpp/inherit_ambiguos.png \"二义性问题\")\n\n- 解决访问的二义性相对简单，可以通过添加类的限定从而访问到具体的数据\n\n    ```C++  \n    class Author :public Student, public Teacher\n    {\n    public:\n        Author()\n        {\n            Student::name_ = \"\";\n            Teacher::name_ = \"\";\n        }\n    };\n\n    ```\n\n\n##### 2 数据冗余\n\n- 从上面的图来看,菱形继承的数据发生了冗余，以及带来数据访问时候的二义性\n  - 在`Author`中存在两份`Person`的数据\n- 数据冗余的问题在`CPP`中通过使用虚继承解决\n\n```C++\nclass Person\n{\npublic:\n    Person()\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\n    Person(std::string name,std::string ID = \"\")\n        :name_(name)\n        ,id_(ID)\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\n    ~Person()\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\nprotected:\n    std::string name_{\"name\"};\n    std::string birthDay_{\"2000.1.1\"};\n    std::string id_{\"XXXXXXXXXXXXXXXXXX\"};\n};\n\nclass Student : virtual public Person\n{\npublic:\n    Student(std::string name_)\n        :Person(\"stu\")\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\n    ~Student() = default;\nprotected:\n    std::string stuId_;\n};\n\n\nclass Teacher : virtual public Person\n{\npublic:\n    Teacher(std::string name_)\n        :Person(\"teacher\")\n    {\n        std::cout << __FUNCTION__ << std::endl;\n    }\n    ~Teacher() = default;\nprotected:\n    std::string teacherId_;\n};\n\n```\n\n## 虚继承的实现原理\n- `virtual base table pointer`\n- `virtual table`\n\n- 我们基于上面部分分析关于虚继承的实现的原理 \n  - `VS`的`class`布局查看工具\n  ![](https://raw.githubusercontent.com/Ranbun/images/main/cpp/vs_Layout_to_class.png \"\")\n  - 上述信息包含: 虚函数表及布局，类的大小，类成员占用大小，成员相较于起始地址的偏移量，字节对其信息\n\n- 上述布局中我们可以看到,当虚继承发生,就会在虚基类的直接子类中产生一个`vbptr`指针,这个指针指向一个虚基类表,`Author`继承自`Teacher&Student`,同样继承了虚基类指针,同时`Author`只存在一份`Person`的数据.\n- 我们通过虚基类表中记录的偏移(虚基类到当前类),就可以访问到虚基类的数据成员.","slug":"多重继承","published":1,"updated":"2022-09-07T17:13:27.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw100347cda4gv149qn","content":"<p><code>cpp</code>, 中关于继承的一点问题...</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"单继承\">单继承</h2>\r\n<ul>\r\n<li>只有一父类的时候，称之为单继承</li>\r\n</ul>\r\n<h2 id=\"多继承\">多继承</h2>\r\n<ul>\r\n<li>一个子类有两个及以上的父类，这个时候，称之为多继承</li>\r\n</ul>\r\n<h3 id=\"菱形继承\">菱形继承</h3>\r\n<ul>\r\n<li>多继承下面的特殊状态, 会产生一些问题。\r\n<ul>\r\n<li>当一个类的父类们同时拥有相同的父类的时候，就会发生二义性 <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/diamond_inheritance.PNG\"\r\ntitle=\"菱形继承\" alt=\"菱形继承\" /></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"问题\">问题</h4>\r\n<h5 id=\"二义性\">1 二义性</h5>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/inherit_ambiguos.png\"\r\ntitle=\"二义性问题\" alt=\"二义性\" />\r\n<figcaption aria-hidden=\"true\">二义性</figcaption>\r\n</figure>\r\n<ul>\r\n<li><p>解决访问的二义性相对简单，可以通过添加类的限定从而访问到具体的数据</p>\r\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span> :</span><span class=\"keyword\">public</span> Student, <span class=\"keyword\">public</span> Teacher</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Author()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Student::name_ = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        Teacher::name_ = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n<h5 id=\"数据冗余\">2 数据冗余</h5>\r\n<ul>\r\n<li>从上面的图来看,菱形继承的数据发生了冗余，以及带来数据访问时候的二义性\r\n<ul>\r\n<li>在<code>Author</code>中存在两份<code>Person</code>的数据</li>\r\n</ul></li>\r\n<li>数据冗余的问题在<code>CPP</code>中通过使用虚继承解决</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Person()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name,<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> ID = <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">        :name_(name)</span><br><span class=\"line\">        ,id_(ID)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Person()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name_&#123;<span class=\"string\">&quot;name&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> birthDay_&#123;<span class=\"string\">&quot;2000.1.1&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> id_&#123;<span class=\"string\">&quot;XXXXXXXXXXXXXXXXXX&quot;</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> :</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Student(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name_)</span><br><span class=\"line\">        :Person(<span class=\"string\">&quot;stu&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Student() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> stuId_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> :</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Teacher(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name_)</span><br><span class=\"line\">        :Person(<span class=\"string\">&quot;teacher&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Teacher() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> teacherId_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"虚继承的实现原理\">虚继承的实现原理</h2>\r\n<ul>\r\n<li><p><code>virtual base table pointer</code></p></li>\r\n<li><p><code>virtual table</code></p></li>\r\n<li><p>我们基于上面部分分析关于虚继承的实现的原理</p>\r\n<ul>\r\n<li><code>VS</code>的<code>class</code>布局查看工具 <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/vs_Layout_to_class.png\" /></li>\r\n<li>上述信息包含:\r\n虚函数表及布局，类的大小，类成员占用大小，成员相较于起始地址的偏移量，字节对其信息</li>\r\n</ul></li>\r\n<li><p>上述布局中我们可以看到,当虚继承发生,就会在虚基类的直接子类中产生一个<code>vbptr</code>指针,这个指针指向一个虚基类表,<code>Author</code>继承自<code>Teacher&amp;Student</code>,同样继承了虚基类指针,同时<code>Author</code>只存在一份<code>Person</code>的数据.</p></li>\r\n<li><p>我们通过虚基类表中记录的偏移(虚基类到当前类),就可以访问到虚基类的数据成员.</p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p><code>cpp</code>, 中关于继承的一点问题...</p>","more":"<h2 id=\"单继承\">单继承</h2>\r\n<ul>\r\n<li>只有一父类的时候，称之为单继承</li>\r\n</ul>\r\n<h2 id=\"多继承\">多继承</h2>\r\n<ul>\r\n<li>一个子类有两个及以上的父类，这个时候，称之为多继承</li>\r\n</ul>\r\n<h3 id=\"菱形继承\">菱形继承</h3>\r\n<ul>\r\n<li>多继承下面的特殊状态, 会产生一些问题。\r\n<ul>\r\n<li>当一个类的父类们同时拥有相同的父类的时候，就会发生二义性 <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/diamond_inheritance.PNG\"\r\ntitle=\"菱形继承\" alt=\"菱形继承\" /></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"问题\">问题</h4>\r\n<h5 id=\"二义性\">1 二义性</h5>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/inherit_ambiguos.png\"\r\ntitle=\"二义性问题\" alt=\"二义性\" />\r\n<figcaption aria-hidden=\"true\">二义性</figcaption>\r\n</figure>\r\n<ul>\r\n<li><p>解决访问的二义性相对简单，可以通过添加类的限定从而访问到具体的数据</p>\r\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span> :</span><span class=\"keyword\">public</span> Student, <span class=\"keyword\">public</span> Teacher</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Author()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Student::name_ = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        Teacher::name_ = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p></li>\r\n</ul>\r\n<h5 id=\"数据冗余\">2 数据冗余</h5>\r\n<ul>\r\n<li>从上面的图来看,菱形继承的数据发生了冗余，以及带来数据访问时候的二义性\r\n<ul>\r\n<li>在<code>Author</code>中存在两份<code>Person</code>的数据</li>\r\n</ul></li>\r\n<li>数据冗余的问题在<code>CPP</code>中通过使用虚继承解决</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Person()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name,<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> ID = <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">        :name_(name)</span><br><span class=\"line\">        ,id_(ID)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Person()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name_&#123;<span class=\"string\">&quot;name&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> birthDay_&#123;<span class=\"string\">&quot;2000.1.1&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> id_&#123;<span class=\"string\">&quot;XXXXXXXXXXXXXXXXXX&quot;</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> :</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Student(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name_)</span><br><span class=\"line\">        :Person(<span class=\"string\">&quot;stu&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Student() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> stuId_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> :</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">public</span> Person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Teacher(<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> name_)</span><br><span class=\"line\">        :Person(<span class=\"string\">&quot;teacher&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; __FUNCTION__ &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Teacher() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> teacherId_;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"虚继承的实现原理\">虚继承的实现原理</h2>\r\n<ul>\r\n<li><p><code>virtual base table pointer</code></p></li>\r\n<li><p><code>virtual table</code></p></li>\r\n<li><p>我们基于上面部分分析关于虚继承的实现的原理</p>\r\n<ul>\r\n<li><code>VS</code>的<code>class</code>布局查看工具 <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/vs_Layout_to_class.png\" /></li>\r\n<li>上述信息包含:\r\n虚函数表及布局，类的大小，类成员占用大小，成员相较于起始地址的偏移量，字节对其信息</li>\r\n</ul></li>\r\n<li><p>上述布局中我们可以看到,当虚继承发生,就会在虚基类的直接子类中产生一个<code>vbptr</code>指针,这个指针指向一个虚基类表,<code>Author</code>继承自<code>Teacher&amp;Student</code>,同样继承了虚基类指针,同时<code>Author</code>只存在一份<code>Person</code>的数据.</p></li>\r\n<li><p>我们通过虚基类表中记录的偏移(虚基类到当前类),就可以访问到虚基类的数据成员.</p></li>\r\n</ul>"},{"title":"射线与平面相交","date":"2022-10-25T15:19:53.000Z","mathjax":true,"_content":"\n## 计算射线与平面的相交\n\n- 定义平面\n- 定义射线\n- 解方程\n\n### 1. 平面方程\n\n#### 1.1 平面方程\n\n- $p$为平面上一点，且$p = (x,y,z)$\n\n- 标量表示： $ ax + by + cz = d $\n\n- 矢量表示： $ p \\cdot \\vec{n} = d$\n  - $\\vec{n} = [a,b,c]$\n  - 已知任意平面上一点$p$即可以求得 $ d $\n\n- 法线 $\\vec{n}$ 决定平面的方向\n\n- $d$ 定义平面的位置,从原点到平面的有符号的距离\n  - 此距离表示沿着法线方向滑动，法线方向上的测量\n  - $d > 0$,原点位于平面背面，反之位于正面\n\n#### 1.2 三个点确定一个平面\n\n- 按照不同的坐标表示给出不同顺序的点\n  - 左手系\n    - 观察平面的正面，以顺时针给出点的顺序\n  - 右手系\n    - 观察面的正面，以逆时针给出点的顺序\n\n- 点不能共线\n- 三个点在这个确定的平面上\n\n### 2. 射线与平面求交\n\n- 前处理\n\n  - 射线与平面是否平行(重合)\n\n- 射线方程\n\n- 平面的表示\n\n- 解方程\n\n#### 2.1 射线定义\n\n- 定义射线的起点 $P_0 = (x,y,z)$\n\n- 射线的方向$\\vec{u}$\n\n- 定义如下:   $P = P_0 + t * \\vec{u}$\n\n  - $P$为射线上任意一点\n\n  - $t$为从起点$P_0$沿着方向$\\vec{u}$前进的距离\n\n#### 2.2 平面定义\n\n- 已知平面法线与平面上任意向量的点击结果为 `0`\n\n- 取平面上任意点$P_1,P_2$，平面法线 $\\vec{n}$\n\n- 可得：$\\vec{P_2 - P_1} \\cdot \\vec{n} = 0 $\n\n#### 2.3 射线与平面的平行计算\n\n![射线与平面求交](https://cdn.jsdelivr.net/gh/Ranbun/images/blog/intersection/Ray_intract_plane.png \"射线与平面求交\")\n\n- 判断射线$Ray_2$与平面的关系\n  - 起点 $R_2$\n\n##### 平行判定\n\n- $Ray_2 \\cdot \\vec{n} = 0$\n  - 可知射线$Ray_2$与平面平行\n\n##### 重合判定\n\n- 已知平面一点 $P$\n- 射线起点$R_2$\n\n- 得：\n  - $(P - R_2) \\cdot \\vec{n} < 0$\n  - 可知$R_2$与点$P$不共面\n  - 可知射线$Ray_2$与平面平行\n\n#### 2.4 相交计算\n\n- 除去平行与重合的情况，便只剩下相交与不相交\n\n- 射线 $P = P_0 + t * \\vec{u}$\n- 平面 $\\vec{P_2 - P_1} \\cdot \\vec{n} = 0 $\n\n- 若射线与平面相交，则我们取：\n  - $ P_1 = P_0 + t * \\vec{u}$\n\n=> 带入到平面方程得:\n$$(P_2 - (P_0 + t*\\vec{u})) \\cdot \\vec{n} = 0$$\n\n$$(P_2 - P_0) \\cdot \\vec{n} - t * \\vec{u} \\cdot \\vec{n} = 0$$\n\n$$ t = \\frac{ (P_2 - P_0)\\cdot\\vec{n}} {\\vec{u}\\cdot\\vec{n}}\\quad $$\n\n- 若 `t > 0`则射线与平面相交，反之不相交\n","source":"_posts/射线与平面相交计算.md","raw":"---\ntitle: 射线与平面相交\ndate: 2022-10-25 23:19:53\nmathjax: true\ncategories:\n- Algorithm\n- Computer Graphics\ntags:\n- Intersect\n---\n\n## 计算射线与平面的相交\n\n- 定义平面\n- 定义射线\n- 解方程\n\n### 1. 平面方程\n\n#### 1.1 平面方程\n\n- $p$为平面上一点，且$p = (x,y,z)$\n\n- 标量表示： $ ax + by + cz = d $\n\n- 矢量表示： $ p \\cdot \\vec{n} = d$\n  - $\\vec{n} = [a,b,c]$\n  - 已知任意平面上一点$p$即可以求得 $ d $\n\n- 法线 $\\vec{n}$ 决定平面的方向\n\n- $d$ 定义平面的位置,从原点到平面的有符号的距离\n  - 此距离表示沿着法线方向滑动，法线方向上的测量\n  - $d > 0$,原点位于平面背面，反之位于正面\n\n#### 1.2 三个点确定一个平面\n\n- 按照不同的坐标表示给出不同顺序的点\n  - 左手系\n    - 观察平面的正面，以顺时针给出点的顺序\n  - 右手系\n    - 观察面的正面，以逆时针给出点的顺序\n\n- 点不能共线\n- 三个点在这个确定的平面上\n\n### 2. 射线与平面求交\n\n- 前处理\n\n  - 射线与平面是否平行(重合)\n\n- 射线方程\n\n- 平面的表示\n\n- 解方程\n\n#### 2.1 射线定义\n\n- 定义射线的起点 $P_0 = (x,y,z)$\n\n- 射线的方向$\\vec{u}$\n\n- 定义如下:   $P = P_0 + t * \\vec{u}$\n\n  - $P$为射线上任意一点\n\n  - $t$为从起点$P_0$沿着方向$\\vec{u}$前进的距离\n\n#### 2.2 平面定义\n\n- 已知平面法线与平面上任意向量的点击结果为 `0`\n\n- 取平面上任意点$P_1,P_2$，平面法线 $\\vec{n}$\n\n- 可得：$\\vec{P_2 - P_1} \\cdot \\vec{n} = 0 $\n\n#### 2.3 射线与平面的平行计算\n\n![射线与平面求交](https://cdn.jsdelivr.net/gh/Ranbun/images/blog/intersection/Ray_intract_plane.png \"射线与平面求交\")\n\n- 判断射线$Ray_2$与平面的关系\n  - 起点 $R_2$\n\n##### 平行判定\n\n- $Ray_2 \\cdot \\vec{n} = 0$\n  - 可知射线$Ray_2$与平面平行\n\n##### 重合判定\n\n- 已知平面一点 $P$\n- 射线起点$R_2$\n\n- 得：\n  - $(P - R_2) \\cdot \\vec{n} < 0$\n  - 可知$R_2$与点$P$不共面\n  - 可知射线$Ray_2$与平面平行\n\n#### 2.4 相交计算\n\n- 除去平行与重合的情况，便只剩下相交与不相交\n\n- 射线 $P = P_0 + t * \\vec{u}$\n- 平面 $\\vec{P_2 - P_1} \\cdot \\vec{n} = 0 $\n\n- 若射线与平面相交，则我们取：\n  - $ P_1 = P_0 + t * \\vec{u}$\n\n=> 带入到平面方程得:\n$$(P_2 - (P_0 + t*\\vec{u})) \\cdot \\vec{n} = 0$$\n\n$$(P_2 - P_0) \\cdot \\vec{n} - t * \\vec{u} \\cdot \\vec{n} = 0$$\n\n$$ t = \\frac{ (P_2 - P_0)\\cdot\\vec{n}} {\\vec{u}\\cdot\\vec{n}}\\quad $$\n\n- 若 `t > 0`则射线与平面相交，反之不相交\n","slug":"射线与平面相交计算","published":1,"updated":"2023-01-02T14:58:33.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw300397cdadqk5csnr","content":"<h2 id=\"计算射线与平面的相交\">计算射线与平面的相交</h2>\r\n<ul>\r\n<li>定义平面</li>\r\n<li>定义射线</li>\r\n<li>解方程</li>\r\n</ul>\r\n<h3 id=\"平面方程\">1. 平面方程</h3>\r\n<h4 id=\"平面方程-1\">1.1 平面方程</h4>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(p\\)</span>为平面上一点，且<span\r\nclass=\"math inline\">\\(p = (x,y,z)\\)</span></p></li>\r\n<li><p>标量表示： $ ax + by + cz = d $</p></li>\r\n<li><p>矢量表示： $ p = d$</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n} = [a,b,c]\\)</span></li>\r\n<li>已知任意平面上一点<span class=\"math inline\">\\(p\\)</span>即可以求得 $\r\nd $</li>\r\n</ul></li>\r\n<li><p>法线 <span class=\"math inline\">\\(\\vec{n}\\)</span>\r\n决定平面的方向</p></li>\r\n<li><p><span class=\"math inline\">\\(d\\)</span>\r\n定义平面的位置,从原点到平面的有符号的距离</p>\r\n<ul>\r\n<li>此距离表示沿着法线方向滑动，法线方向上的测量</li>\r\n<li><span class=\"math inline\">\\(d &gt;\r\n0\\)</span>,原点位于平面背面，反之位于正面</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"三个点确定一个平面\">1.2 三个点确定一个平面</h4>\r\n<ul>\r\n<li>按照不同的坐标表示给出不同顺序的点\r\n<ul>\r\n<li>左手系\r\n<ul>\r\n<li>观察平面的正面，以顺时针给出点的顺序</li>\r\n</ul></li>\r\n<li>右手系\r\n<ul>\r\n<li>观察面的正面，以逆时针给出点的顺序</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>点不能共线</li>\r\n<li>三个点在这个确定的平面上</li>\r\n</ul>\r\n<h3 id=\"射线与平面求交\">2. 射线与平面求交</h3>\r\n<ul>\r\n<li><p>前处理</p>\r\n<ul>\r\n<li>射线与平面是否平行(重合)</li>\r\n</ul></li>\r\n<li><p>射线方程</p></li>\r\n<li><p>平面的表示</p></li>\r\n<li><p>解方程</p></li>\r\n</ul>\r\n<h4 id=\"射线定义\">2.1 射线定义</h4>\r\n<ul>\r\n<li><p>定义射线的起点 <span class=\"math inline\">\\(P_0 =\r\n(x,y,z)\\)</span></p></li>\r\n<li><p>射线的方向<span class=\"math inline\">\\(\\vec{u}\\)</span></p></li>\r\n<li><p>定义如下: <span class=\"math inline\">\\(P = P_0 + t *\r\n\\vec{u}\\)</span></p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(P\\)</span>为射线上任意一点</p></li>\r\n<li><p><span class=\"math inline\">\\(t\\)</span>为从起点<span\r\nclass=\"math inline\">\\(P_0\\)</span>沿着方向<span\r\nclass=\"math inline\">\\(\\vec{u}\\)</span>前进的距离</p></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"平面定义\">2.2 平面定义</h4>\r\n<ul>\r\n<li><p>已知平面法线与平面上任意向量的点击结果为 <code>0</code></p></li>\r\n<li><p>取平面上任意点<span\r\nclass=\"math inline\">\\(P_1,P_2\\)</span>，平面法线 <span\r\nclass=\"math inline\">\\(\\vec{n}\\)</span></p></li>\r\n<li><p>可得：$ = 0 $</p></li>\r\n</ul>\r\n<h4 id=\"射线与平面的平行计算\">2.3 射线与平面的平行计算</h4>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ranbun/images/blog/intersection/Ray_intract_plane.png\"\r\ntitle=\"射线与平面求交\" alt=\"射线与平面求交\" />\r\n<figcaption aria-hidden=\"true\">射线与平面求交</figcaption>\r\n</figure>\r\n<ul>\r\n<li>判断射线<span class=\"math inline\">\\(Ray_2\\)</span>与平面的关系\r\n<ul>\r\n<li>起点 <span class=\"math inline\">\\(R_2\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<h5 id=\"平行判定\">平行判定</h5>\r\n<ul>\r\n<li><span class=\"math inline\">\\(Ray_2 \\cdot \\vec{n} = 0\\)</span>\r\n<ul>\r\n<li>可知射线<span class=\"math inline\">\\(Ray_2\\)</span>与平面平行</li>\r\n</ul></li>\r\n</ul>\r\n<h5 id=\"重合判定\">重合判定</h5>\r\n<ul>\r\n<li><p>已知平面一点 <span class=\"math inline\">\\(P\\)</span></p></li>\r\n<li><p>射线起点<span class=\"math inline\">\\(R_2\\)</span></p></li>\r\n<li><p>得：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\((P - R_2) \\cdot \\vec{n} &lt;\r\n0\\)</span></li>\r\n<li>可知<span class=\"math inline\">\\(R_2\\)</span>与点<span\r\nclass=\"math inline\">\\(P\\)</span>不共面</li>\r\n<li>可知射线<span class=\"math inline\">\\(Ray_2\\)</span>与平面平行</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"相交计算\">2.4 相交计算</h4>\r\n<ul>\r\n<li><p>除去平行与重合的情况，便只剩下相交与不相交</p></li>\r\n<li><p>射线 <span class=\"math inline\">\\(P = P_0 + t *\r\n\\vec{u}\\)</span></p></li>\r\n<li><p>平面 $ = 0 $</p></li>\r\n<li><p>若射线与平面相交，则我们取：</p>\r\n<ul>\r\n<li>$ P_1 = P_0 + t * $</li>\r\n</ul></li>\r\n</ul>\r\n<p>=&gt; 带入到平面方程得: <span class=\"math display\">\\[(P_2 - (P_0 +\r\nt*\\vec{u})) \\cdot \\vec{n} = 0\\]</span></p>\r\n<p><span class=\"math display\">\\[(P_2 - P_0) \\cdot \\vec{n} - t * \\vec{u}\r\n\\cdot \\vec{n} = 0\\]</span></p>\r\n<p><span class=\"math display\">\\[ t = \\frac{ (P_2 - P_0)\\cdot\\vec{n}}\r\n{\\vec{u}\\cdot\\vec{n}}\\quad \\]</span></p>\r\n<ul>\r\n<li>若 <code>t &gt; 0</code>则射线与平面相交，反之不相交</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"计算射线与平面的相交\">计算射线与平面的相交</h2>\r\n<ul>\r\n<li>定义平面</li>\r\n<li>定义射线</li>\r\n<li>解方程</li>\r\n</ul>\r\n<h3 id=\"平面方程\">1. 平面方程</h3>\r\n<h4 id=\"平面方程-1\">1.1 平面方程</h4>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(p\\)</span>为平面上一点，且<span\r\nclass=\"math inline\">\\(p = (x,y,z)\\)</span></p></li>\r\n<li><p>标量表示： $ ax + by + cz = d $</p></li>\r\n<li><p>矢量表示： $ p = d$</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{n} = [a,b,c]\\)</span></li>\r\n<li>已知任意平面上一点<span class=\"math inline\">\\(p\\)</span>即可以求得 $\r\nd $</li>\r\n</ul></li>\r\n<li><p>法线 <span class=\"math inline\">\\(\\vec{n}\\)</span>\r\n决定平面的方向</p></li>\r\n<li><p><span class=\"math inline\">\\(d\\)</span>\r\n定义平面的位置,从原点到平面的有符号的距离</p>\r\n<ul>\r\n<li>此距离表示沿着法线方向滑动，法线方向上的测量</li>\r\n<li><span class=\"math inline\">\\(d &gt;\r\n0\\)</span>,原点位于平面背面，反之位于正面</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"三个点确定一个平面\">1.2 三个点确定一个平面</h4>\r\n<ul>\r\n<li>按照不同的坐标表示给出不同顺序的点\r\n<ul>\r\n<li>左手系\r\n<ul>\r\n<li>观察平面的正面，以顺时针给出点的顺序</li>\r\n</ul></li>\r\n<li>右手系\r\n<ul>\r\n<li>观察面的正面，以逆时针给出点的顺序</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>点不能共线</li>\r\n<li>三个点在这个确定的平面上</li>\r\n</ul>\r\n<h3 id=\"射线与平面求交\">2. 射线与平面求交</h3>\r\n<ul>\r\n<li><p>前处理</p>\r\n<ul>\r\n<li>射线与平面是否平行(重合)</li>\r\n</ul></li>\r\n<li><p>射线方程</p></li>\r\n<li><p>平面的表示</p></li>\r\n<li><p>解方程</p></li>\r\n</ul>\r\n<h4 id=\"射线定义\">2.1 射线定义</h4>\r\n<ul>\r\n<li><p>定义射线的起点 <span class=\"math inline\">\\(P_0 =\r\n(x,y,z)\\)</span></p></li>\r\n<li><p>射线的方向<span class=\"math inline\">\\(\\vec{u}\\)</span></p></li>\r\n<li><p>定义如下: <span class=\"math inline\">\\(P = P_0 + t *\r\n\\vec{u}\\)</span></p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(P\\)</span>为射线上任意一点</p></li>\r\n<li><p><span class=\"math inline\">\\(t\\)</span>为从起点<span\r\nclass=\"math inline\">\\(P_0\\)</span>沿着方向<span\r\nclass=\"math inline\">\\(\\vec{u}\\)</span>前进的距离</p></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"平面定义\">2.2 平面定义</h4>\r\n<ul>\r\n<li><p>已知平面法线与平面上任意向量的点击结果为 <code>0</code></p></li>\r\n<li><p>取平面上任意点<span\r\nclass=\"math inline\">\\(P_1,P_2\\)</span>，平面法线 <span\r\nclass=\"math inline\">\\(\\vec{n}\\)</span></p></li>\r\n<li><p>可得：$ = 0 $</p></li>\r\n</ul>\r\n<h4 id=\"射线与平面的平行计算\">2.3 射线与平面的平行计算</h4>\r\n<figure>\r\n<img\r\nsrc=\"https://cdn.jsdelivr.net/gh/Ranbun/images/blog/intersection/Ray_intract_plane.png\"\r\ntitle=\"射线与平面求交\" alt=\"射线与平面求交\" />\r\n<figcaption aria-hidden=\"true\">射线与平面求交</figcaption>\r\n</figure>\r\n<ul>\r\n<li>判断射线<span class=\"math inline\">\\(Ray_2\\)</span>与平面的关系\r\n<ul>\r\n<li>起点 <span class=\"math inline\">\\(R_2\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<h5 id=\"平行判定\">平行判定</h5>\r\n<ul>\r\n<li><span class=\"math inline\">\\(Ray_2 \\cdot \\vec{n} = 0\\)</span>\r\n<ul>\r\n<li>可知射线<span class=\"math inline\">\\(Ray_2\\)</span>与平面平行</li>\r\n</ul></li>\r\n</ul>\r\n<h5 id=\"重合判定\">重合判定</h5>\r\n<ul>\r\n<li><p>已知平面一点 <span class=\"math inline\">\\(P\\)</span></p></li>\r\n<li><p>射线起点<span class=\"math inline\">\\(R_2\\)</span></p></li>\r\n<li><p>得：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\((P - R_2) \\cdot \\vec{n} &lt;\r\n0\\)</span></li>\r\n<li>可知<span class=\"math inline\">\\(R_2\\)</span>与点<span\r\nclass=\"math inline\">\\(P\\)</span>不共面</li>\r\n<li>可知射线<span class=\"math inline\">\\(Ray_2\\)</span>与平面平行</li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"相交计算\">2.4 相交计算</h4>\r\n<ul>\r\n<li><p>除去平行与重合的情况，便只剩下相交与不相交</p></li>\r\n<li><p>射线 <span class=\"math inline\">\\(P = P_0 + t *\r\n\\vec{u}\\)</span></p></li>\r\n<li><p>平面 $ = 0 $</p></li>\r\n<li><p>若射线与平面相交，则我们取：</p>\r\n<ul>\r\n<li>$ P_1 = P_0 + t * $</li>\r\n</ul></li>\r\n</ul>\r\n<p>=&gt; 带入到平面方程得: <span class=\"math display\">\\[(P_2 - (P_0 +\r\nt*\\vec{u})) \\cdot \\vec{n} = 0\\]</span></p>\r\n<p><span class=\"math display\">\\[(P_2 - P_0) \\cdot \\vec{n} - t * \\vec{u}\r\n\\cdot \\vec{n} = 0\\]</span></p>\r\n<p><span class=\"math display\">\\[ t = \\frac{ (P_2 - P_0)\\cdot\\vec{n}}\r\n{\\vec{u}\\cdot\\vec{n}}\\quad \\]</span></p>\r\n<ul>\r\n<li>若 <code>t &gt; 0</code>则射线与平面相交，反之不相交</li>\r\n</ul>\r\n"},{"title":"归并排序","date":"2021-10-26T15:53:24.000Z","_content":"\n<p>\n&ensp;&ensp;归并排序算法介绍...\n</p>\n\n<!-- more -->\n\n## 归并排序\n\n- 归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。\n\n#### 1、有序子列的归并 - 伪代码 \n\n```C++ \n// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置\nvoid Merge(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n    // 将有序的元素写回到A中\n    for(int i =0;i < NumElements;i++,RightEnd--)\n    {\n        A[RightEnd] = tempA[RightEnd];\n    }\n}\n\n```\n\n#### 2、归并的实现 - 递归\n\n- 归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：\n\n```C++ \nvoid Msort(ElementType A[],ElementType tempA[],int L,int RightEnd)\n{\n    int center;  // 每次将元素对半砍开 \n    if(L < RightEnd)\n    {\n        center = (L + RightEnd) / 2;          // 中间位置的元素\n        MSort(A,tempA,L,center);              //左半部分 \n        MSort(A,tempA,center+1，RightEnd);    //右半部分 \n    \tMerge(A,tempA,L,center+1,RightEnd);   // 合并两部分 \n    }\n}\n```\n\n#### 2、归并的实现 - 非递归\n\n```C++ \nvoid Merge_Sort(ElementType A[],int N)\n{\n    int length = 1;   // 最开始 有序子列的长度\n    ElementType * tempA;   // 一个辅助交换的和A等大小的空间\n    tempA = new ElementType[N];\n    if(tempA != nullptr)\n    {\n        while(length < N)  // 随着有序子列的扩大，最终一定大于等于N\n        {\n            Merge_pass(A,tempA,N,length);\n            length *= 2;\n            Merge_pass(tempA,A,N,length);\n            length *= 2;\n        }\n        delete [] tempA;\n    }\n    else\n    {\n        std::cout<<\"error\"<<std::endl;\n    }\n}\n\n// 源元素位置 目标元素位置 元素个数 有序子列的大小\nvoid Merge_pass(ElementType A,ElementType tempA,int N,int length)\n{\n    for(i = 0;i <= N - 2*length;i += 2*length)   // 2*length 每次合并的元素的个数 \n    {\n        Merge_(A,tempA,i,i+length,i+2*length - 1);  // 合并\n    }\n    if(i+legnth < N)  // 剩下的元素个数 > length, 表示还可以进行一次合并： 一组的个数\n    {\n        // 此时最后被合并的数据 个数 < 2*length \n\t\tMerge_(A,tempA,i,i+length,N - 1);  // 合并\n    }\n    else\n    {\n        // 合并最后部分的元素\n        for(j = i; j < N;j++)\n        {\n            tempA[j] = A[j];\n        }\n    }\n}\n\nvoid Merge_(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n}\n```\n\n","source":"_posts/归并排序.md","raw":"---\ntitle: 归并排序\ndate: 2021-10-26 23:53:24\ncategories:\n- Algorithm\ntags:\n- cpp\n- sort\n---\n\n<p>\n&ensp;&ensp;归并排序算法介绍...\n</p>\n\n<!-- more -->\n\n## 归并排序\n\n- 归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。\n\n#### 1、有序子列的归并 - 伪代码 \n\n```C++ \n// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置\nvoid Merge(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n    // 将有序的元素写回到A中\n    for(int i =0;i < NumElements;i++,RightEnd--)\n    {\n        A[RightEnd] = tempA[RightEnd];\n    }\n}\n\n```\n\n#### 2、归并的实现 - 递归\n\n- 归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：\n\n```C++ \nvoid Msort(ElementType A[],ElementType tempA[],int L,int RightEnd)\n{\n    int center;  // 每次将元素对半砍开 \n    if(L < RightEnd)\n    {\n        center = (L + RightEnd) / 2;          // 中间位置的元素\n        MSort(A,tempA,L,center);              //左半部分 \n        MSort(A,tempA,center+1，RightEnd);    //右半部分 \n    \tMerge(A,tempA,L,center+1,RightEnd);   // 合并两部分 \n    }\n}\n```\n\n#### 2、归并的实现 - 非递归\n\n```C++ \nvoid Merge_Sort(ElementType A[],int N)\n{\n    int length = 1;   // 最开始 有序子列的长度\n    ElementType * tempA;   // 一个辅助交换的和A等大小的空间\n    tempA = new ElementType[N];\n    if(tempA != nullptr)\n    {\n        while(length < N)  // 随着有序子列的扩大，最终一定大于等于N\n        {\n            Merge_pass(A,tempA,N,length);\n            length *= 2;\n            Merge_pass(tempA,A,N,length);\n            length *= 2;\n        }\n        delete [] tempA;\n    }\n    else\n    {\n        std::cout<<\"error\"<<std::endl;\n    }\n}\n\n// 源元素位置 目标元素位置 元素个数 有序子列的大小\nvoid Merge_pass(ElementType A,ElementType tempA,int N,int length)\n{\n    for(i = 0;i <= N - 2*length;i += 2*length)   // 2*length 每次合并的元素的个数 \n    {\n        Merge_(A,tempA,i,i+length,i+2*length - 1);  // 合并\n    }\n    if(i+legnth < N)  // 剩下的元素个数 > length, 表示还可以进行一次合并： 一组的个数\n    {\n        // 此时最后被合并的数据 个数 < 2*length \n\t\tMerge_(A,tempA,i,i+length,N - 1);  // 合并\n    }\n    else\n    {\n        // 合并最后部分的元素\n        for(j = i; j < N;j++)\n        {\n            tempA[j] = A[j];\n        }\n    }\n}\n\nvoid Merge_(ElementType A[],ElementType tempA[],int L,int R,int RightEnd)\n{\n    leftEnd = R - 1  // 左边部分有序元素的结束位置\n    temp_index = L;  // 存放结果数组的初始位置\n    NumElements = RightEnd - L + 1;   // 计算元素的总个数 - 左右两部份紧挨着 \n\n    while(L <= LeftEnd && R <= RightEnd)\n    {\n        if(A[L] < A[R])\n        {\n            tempA[temp_index++] = A[L++];\n        }\n        else  // A[L] > A[R]\n        {\n            tempA[temp_index++] = A[R++];\n        }\n    }\n    while(L <= LeftEnd)\n    {\n        tempA[temp_index++] = A[L++];\n    }\n    while(R <= RightEnd)\n    {\n        tempA[temp_index++] = A[R++];\n    }\n}\n```\n\n","slug":"归并排序","published":1,"updated":"2022-08-21T15:34:57.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw3003c7cda41y8f6mi","content":"<p>\r\n  归并排序算法介绍...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"归并排序\">归并排序</h2>\r\n<ul>\r\n<li>归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。</li>\r\n</ul>\r\n<h4 id=\"有序子列的归并---伪代码\">1、有序子列的归并 - 伪代码</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将有序的元素写回到A中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i &lt; NumElements;i++,RightEnd--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A[RightEnd] = tempA[RightEnd];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"归并的实现---递归\">2、归并的实现 - 递归</h4>\r\n<ul>\r\n<li>归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Msort</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center;  <span class=\"comment\">// 每次将元素对半砍开 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt; RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        center = (L + RightEnd) / <span class=\"number\">2</span>;          <span class=\"comment\">// 中间位置的元素</span></span><br><span class=\"line\">        MSort(A,tempA,L,center);              <span class=\"comment\">//左半部分 </span></span><br><span class=\"line\">        MSort(A,tempA,center+<span class=\"number\">1</span>，RightEnd);    <span class=\"comment\">//右半部分 </span></span><br><span class=\"line\">    \tMerge(A,tempA,L,center+<span class=\"number\">1</span>,RightEnd);   <span class=\"comment\">// 合并两部分 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"归并的实现---非递归\">2、归并的实现 - 非递归</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">1</span>;   <span class=\"comment\">// 最开始 有序子列的长度</span></span><br><span class=\"line\">    ElementType * tempA;   <span class=\"comment\">// 一个辅助交换的和A等大小的空间</span></span><br><span class=\"line\">    tempA = <span class=\"keyword\">new</span> ElementType[N];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tempA != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(length &lt; N)  <span class=\"comment\">// 随着有序子列的扩大，最终一定大于等于N</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Merge_pass(A,tempA,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            Merge_pass(tempA,A,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] tempA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;error&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源元素位置 目标元素位置 元素个数 有序子列的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_pass</span><span class=\"params\">(ElementType A,ElementType tempA,<span class=\"keyword\">int</span> N,<span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt;= N - <span class=\"number\">2</span>*length;i += <span class=\"number\">2</span>*length)   <span class=\"comment\">// 2*length 每次合并的元素的个数 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Merge_(A,tempA,i,i+length,i+<span class=\"number\">2</span>*length - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+legnth &lt; N)  <span class=\"comment\">// 剩下的元素个数 &gt; length, 表示还可以进行一次合并： 一组的个数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此时最后被合并的数据 个数 &lt; 2*length </span></span><br><span class=\"line\">\t\tMerge_(A,tempA,i,i+length,N - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 合并最后部分的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i; j &lt; N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[j] = A[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  归并排序算法介绍...\r\n</p>","more":"<h2 id=\"归并排序\">归并排序</h2>\r\n<ul>\r\n<li>归并算法，核心机制是分而治之，每次对数据进行拆分，然后合并，每次拆分直到每次排序的元素个数为1，的时候，单个元素必然是有序的，然后合并便可。</li>\r\n</ul>\r\n<h4 id=\"有序子列的归并---伪代码\">1、有序子列的归并 - 伪代码</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// L 左边的起始位置 R 右边的起始位置 RightEnd 右边的终点位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将有序的元素写回到A中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>;i &lt; NumElements;i++,RightEnd--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        A[RightEnd] = tempA[RightEnd];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"归并的实现---递归\">2、归并的实现 - 递归</h4>\r\n<ul>\r\n<li>归并算法的实现有不同的方式，相比之下递归的实现方式相对直观，此处是递归实现的伪代码：</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Msort</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> center;  <span class=\"comment\">// 每次将元素对半砍开 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt; RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        center = (L + RightEnd) / <span class=\"number\">2</span>;          <span class=\"comment\">// 中间位置的元素</span></span><br><span class=\"line\">        MSort(A,tempA,L,center);              <span class=\"comment\">//左半部分 </span></span><br><span class=\"line\">        MSort(A,tempA,center+<span class=\"number\">1</span>，RightEnd);    <span class=\"comment\">//右半部分 </span></span><br><span class=\"line\">    \tMerge(A,tempA,L,center+<span class=\"number\">1</span>,RightEnd);   <span class=\"comment\">// 合并两部分 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"归并的实现---非递归\">2、归并的实现 - 非递归</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_Sort</span><span class=\"params\">(ElementType A[],<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = <span class=\"number\">1</span>;   <span class=\"comment\">// 最开始 有序子列的长度</span></span><br><span class=\"line\">    ElementType * tempA;   <span class=\"comment\">// 一个辅助交换的和A等大小的空间</span></span><br><span class=\"line\">    tempA = <span class=\"keyword\">new</span> ElementType[N];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tempA != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(length &lt; N)  <span class=\"comment\">// 随着有序子列的扩大，最终一定大于等于N</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Merge_pass(A,tempA,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            Merge_pass(tempA,A,N,length);</span><br><span class=\"line\">            length *= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] tempA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;error&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 源元素位置 目标元素位置 元素个数 有序子列的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_pass</span><span class=\"params\">(ElementType A,ElementType tempA,<span class=\"keyword\">int</span> N,<span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt;= N - <span class=\"number\">2</span>*length;i += <span class=\"number\">2</span>*length)   <span class=\"comment\">// 2*length 每次合并的元素的个数 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Merge_(A,tempA,i,i+length,i+<span class=\"number\">2</span>*length - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i+legnth &lt; N)  <span class=\"comment\">// 剩下的元素个数 &gt; length, 表示还可以进行一次合并： 一组的个数</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此时最后被合并的数据 个数 &lt; 2*length </span></span><br><span class=\"line\">\t\tMerge_(A,tempA,i,i+length,N - <span class=\"number\">1</span>);  <span class=\"comment\">// 合并</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 合并最后部分的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i; j &lt; N;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[j] = A[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_</span><span class=\"params\">(ElementType A[],ElementType tempA[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> RightEnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    leftEnd = R - <span class=\"number\">1</span>  <span class=\"comment\">// 左边部分有序元素的结束位置</span></span><br><span class=\"line\">    temp_index = L;  <span class=\"comment\">// 存放结果数组的初始位置</span></span><br><span class=\"line\">    NumElements = RightEnd - L + <span class=\"number\">1</span>;   <span class=\"comment\">// 计算元素的总个数 - 左右两部份紧挨着 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd &amp;&amp; R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L] &lt; A[R])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[L++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"comment\">// A[L] &gt; A[R]</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tempA[temp_index++] = A[R++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(L &lt;= LeftEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[L++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(R &lt;= RightEnd)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tempA[temp_index++] = A[R++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"微信多开","date":"2022-02-28T14:11:02.000Z","_content":"\n<p>\n&ensp;&ensp;Windows使用小技巧...\n</p>\n\n<!-- more -->\n\n## 微信多开的小技巧 - Windows\n\n- 首先，需要你知道你机器上安装微信 - 请记录它的安装位置\n\n- 一般情况下，如果你不做任何修改的话，它会在`C:\\Program Files (x86)\\Tencent\\WeChat`这个目录下：\n&ensp;&ensp; ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png \"微信安装位置\")\n\n- 然后，打开你机器上任意的一个文本编辑器，输入如下内容：\n\n- 需要多开多少个微信，你便将如下命令输入重复写多少次。\n\n    ```bash\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    \n    # 请将上面的路径换成你机器上安装微信的路径\n    # 上面表示的是同时开两个微信程序\n    # 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别\n    \n    ```\n\n- 然后将文件保存，文件后缀为`.bat`,这是`cmd`识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png \"微信多开效果图\")\n\n","source":"_posts/微信多开.md","raw":"---\ntitle: 微信多开\ndate: 2022-02-28 22:11:02\ncategories:\n- Tips\ntags:\n- windows\n---\n\n<p>\n&ensp;&ensp;Windows使用小技巧...\n</p>\n\n<!-- more -->\n\n## 微信多开的小技巧 - Windows\n\n- 首先，需要你知道你机器上安装微信 - 请记录它的安装位置\n\n- 一般情况下，如果你不做任何修改的话，它会在`C:\\Program Files (x86)\\Tencent\\WeChat`这个目录下：\n&ensp;&ensp; ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png \"微信安装位置\")\n\n- 然后，打开你机器上任意的一个文本编辑器，输入如下内容：\n\n- 需要多开多少个微信，你便将如下命令输入重复写多少次。\n\n    ```bash\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    start D:\\\"Program Files (x86)\"\\Tencent\\WeChat\\WeChat.exe\n    \n    # 请将上面的路径换成你机器上安装微信的路径\n    # 上面表示的是同时开两个微信程序\n    # 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别\n    \n    ```\n\n- 然后将文件保存，文件后缀为`.bat`,这是`cmd`识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。\n\n  ![](https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png \"微信多开效果图\")\n\n","slug":"微信多开","published":1,"updated":"2022-08-21T15:34:57.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw4003h7cda5m014x5y","content":"<p>\r\n  Windows使用小技巧...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"微信多开的小技巧---windows\">微信多开的小技巧 - Windows</h2>\r\n<ul>\r\n<li><p>首先，需要你知道你机器上安装微信 - 请记录它的安装位置</p></li>\r\n<li><p>一般情况下，如果你不做任何修改的话，它会在<code>C:\\Program Files (x86)\\Tencent\\WeChat</code>这个目录下：\r\n   <img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png\"\r\ntitle=\"微信安装位置\" /></p></li>\r\n<li><p>然后，打开你机器上任意的一个文本编辑器，输入如下内容：</p></li>\r\n<li><p>需要多开多少个微信，你便将如下命令输入重复写多少次。</p>\r\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start D:\\&quot;Program Files (x86)<span class=\"string\">&quot;\\Tencent\\WeChat\\WeChat.exe</span></span><br><span class=\"line\"><span class=\"string\">start D:\\&quot;Program Files (x86)&quot;</span>\\Tencent\\WeChat\\WeChat.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请将上面的路径换成你机器上安装微信的路径</span></span><br><span class=\"line\"><span class=\"comment\"># 上面表示的是同时开两个微信程序</span></span><br><span class=\"line\"><span class=\"comment\"># 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>然后将文件保存，文件后缀为<code>.bat</code>,这是<code>cmd</code>识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。</p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png\"\r\ntitle=\"微信多开效果图\" /></p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  Windows使用小技巧...\r\n</p>","more":"<h2 id=\"微信多开的小技巧---windows\">微信多开的小技巧 - Windows</h2>\r\n<ul>\r\n<li><p>首先，需要你知道你机器上安装微信 - 请记录它的安装位置</p></li>\r\n<li><p>一般情况下，如果你不做任何修改的话，它会在<code>C:\\Program Files (x86)\\Tencent\\WeChat</code>这个目录下：\r\n   <img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/wechat_install_path.png\"\r\ntitle=\"微信安装位置\" /></p></li>\r\n<li><p>然后，打开你机器上任意的一个文本编辑器，输入如下内容：</p></li>\r\n<li><p>需要多开多少个微信，你便将如下命令输入重复写多少次。</p>\r\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start D:\\&quot;Program Files (x86)<span class=\"string\">&quot;\\Tencent\\WeChat\\WeChat.exe</span></span><br><span class=\"line\"><span class=\"string\">start D:\\&quot;Program Files (x86)&quot;</span>\\Tencent\\WeChat\\WeChat.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请将上面的路径换成你机器上安装微信的路径</span></span><br><span class=\"line\"><span class=\"comment\"># 上面表示的是同时开两个微信程序</span></span><br><span class=\"line\"><span class=\"comment\"># 前面的路径部分中含有空格，为了让系统能识别，我们需要用双引号将其括起来，这样才能正确的识别</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>然后将文件保存，文件后缀为<code>.bat</code>,这是<code>cmd</code>识别的命令行，这个时候你打开你刚保存的文件，便会弹出你想要多开的数量。</p>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/CuntBoy/images/main/blog/computer_graph/games202/multi_open_wechat.png\"\r\ntitle=\"微信多开效果图\" /></p></li>\r\n</ul>"},{"title":"构造函数私有化","date":"2022-08-29T07:28:04.000Z","_content":"\n在我使用`std::make_unique<Typename T>()`构建一个我自定义的类的时候，不小心将构造函数写成了私有的，出现了这个问题-`cannot access private member declared in class`，这完全是由于不仔细造成的...\n\n<!-- more -->\n\n## cannot access private member declared in class\n\n### 可能的错误原因:\n\n```C++\nclass TestA\n{\n    TestA()\n    {\n\n    }\n    ~TestA()\n    {\n\n    }\n}\n```\n\n```C++\nclass TestA\n{\nprivate / protected: \n    TestA()\n    {\n\n    }\n    ~TestA()\n    {\n\n    }\n}\n\n```\n\n\n","source":"_posts/构造函数私有化.md","raw":"---\ntitle: 构造函数私有化\ndate: 2022-08-29 15:28:04\ntags:\n- cpp\n---\n\n在我使用`std::make_unique<Typename T>()`构建一个我自定义的类的时候，不小心将构造函数写成了私有的，出现了这个问题-`cannot access private member declared in class`，这完全是由于不仔细造成的...\n\n<!-- more -->\n\n## cannot access private member declared in class\n\n### 可能的错误原因:\n\n```C++\nclass TestA\n{\n    TestA()\n    {\n\n    }\n    ~TestA()\n    {\n\n    }\n}\n```\n\n```C++\nclass TestA\n{\nprivate / protected: \n    TestA()\n    {\n\n    }\n    ~TestA()\n    {\n\n    }\n}\n\n```\n\n\n","slug":"构造函数私有化","published":1,"updated":"2022-09-07T17:13:27.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw5003k7cdab9ia8oox","content":"<p>在我使用<code>std::make_unique&lt;Typename T&gt;()</code>构建一个我自定义的类的时候，不小心将构造函数写成了私有的，出现了这个问题-<code>cannot access private member declared in class</code>，这完全是由于不仔细造成的...</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"cannot-access-private-member-declared-in-class\">cannot access\r\nprivate member declared in class</h2>\r\n<h3 id=\"可能的错误原因\">可能的错误原因:</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestA</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    TestA()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~TestA()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestA</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> / <span class=\"keyword\">protected</span>: </span><br><span class=\"line\">    TestA()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~TestA()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>在我使用<code>std::make_unique&lt;Typename T&gt;()</code>构建一个我自定义的类的时候，不小心将构造函数写成了私有的，出现了这个问题-<code>cannot access private member declared in class</code>，这完全是由于不仔细造成的...</p>","more":"<h2 id=\"cannot-access-private-member-declared-in-class\">cannot access\r\nprivate member declared in class</h2>\r\n<h3 id=\"可能的错误原因\">可能的错误原因:</h3>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestA</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    TestA()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~TestA()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestA</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> / <span class=\"keyword\">protected</span>: </span><br><span class=\"line\">    TestA()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~TestA()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"模型变换-模型矩阵计算","date":"2022-09-10T02:56:47.000Z","mathjax":true,"_content":"\n常规的仿射变换(旋转，缩放，平移), 以及一些常用的基本矩阵和这些矩阵的原理$\\dots$\n\n<!--more-->\n\n## 模型变换\n\n- 仿射变换\n  - 基本概念：\n  - 矩阵的计算\n- 齐次坐标\n  - W分量的意义\n\n- 坐标系的变换\n  - 模型坐标到世界坐标。\n  \n### 齐次坐标\n\n- 在开始模型变换的讲解之前，我们首先需要知道，我们的变换的各种操作都是通过矩阵实现的，为了将旋转缩放平移写到一个矩阵中，在计算机图形学中引入了一个叫齐次坐标的东西，给向量$\\vec{a}_{3\\times1}$ 扩充一个`w`维度，$\\vec{a}(x,y,z,w)$,关于向量我相信大家知道的不少，向量只表示方向与起点与终点没有关系。当然某些时候我们也用来描述一个空间的位置，所以当`w`分量为`0`表示的是向量，为`1`表示的是一个点，注意：\n  - $\\vec{a}(x,y,z,w)$ `==` $\\vec{a}(w \\times x,w \\times y,w \\times z,w^2)$\n\n### 平移\n\n- 建模师们在建模的时候都是使用模型自己的坐标，规定坐标系的原点在模型这个包围盒的内部，平移要做的操作就是将模型放到世界空间的某个位置。\n  ","source":"_posts/模型变换-模型矩阵计算.md","raw":"---\ntitle: 模型变换-模型矩阵计算\ndate: 2022-09-10 10:56:47\nmathjax: true\ncategories:\n- Computer Graphics\ntags:\n- cpp\n- translate\n---\n\n常规的仿射变换(旋转，缩放，平移), 以及一些常用的基本矩阵和这些矩阵的原理$\\dots$\n\n<!--more-->\n\n## 模型变换\n\n- 仿射变换\n  - 基本概念：\n  - 矩阵的计算\n- 齐次坐标\n  - W分量的意义\n\n- 坐标系的变换\n  - 模型坐标到世界坐标。\n  \n### 齐次坐标\n\n- 在开始模型变换的讲解之前，我们首先需要知道，我们的变换的各种操作都是通过矩阵实现的，为了将旋转缩放平移写到一个矩阵中，在计算机图形学中引入了一个叫齐次坐标的东西，给向量$\\vec{a}_{3\\times1}$ 扩充一个`w`维度，$\\vec{a}(x,y,z,w)$,关于向量我相信大家知道的不少，向量只表示方向与起点与终点没有关系。当然某些时候我们也用来描述一个空间的位置，所以当`w`分量为`0`表示的是向量，为`1`表示的是一个点，注意：\n  - $\\vec{a}(x,y,z,w)$ `==` $\\vec{a}(w \\times x,w \\times y,w \\times z,w^2)$\n\n### 平移\n\n- 建模师们在建模的时候都是使用模型自己的坐标，规定坐标系的原点在模型这个包围盒的内部，平移要做的操作就是将模型放到世界空间的某个位置。\n  ","slug":"模型变换-模型矩阵计算","published":1,"updated":"2022-10-01T15:35:32.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw6003p7cda8jj57hwk","content":"<p>常规的仿射变换(旋转，缩放，平移),\r\n以及一些常用的基本矩阵和这些矩阵的原理<span\r\nclass=\"math inline\">\\(\\dots\\)</span></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"模型变换\">模型变换</h2>\r\n<ul>\r\n<li>仿射变换\r\n<ul>\r\n<li>基本概念：</li>\r\n<li>矩阵的计算</li>\r\n</ul></li>\r\n<li>齐次坐标\r\n<ul>\r\n<li>W分量的意义</li>\r\n</ul></li>\r\n<li>坐标系的变换\r\n<ul>\r\n<li>模型坐标到世界坐标。</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"齐次坐标\">齐次坐标</h3>\r\n<ul>\r\n<li>在开始模型变换的讲解之前，我们首先需要知道，我们的变换的各种操作都是通过矩阵实现的，为了将旋转缩放平移写到一个矩阵中，在计算机图形学中引入了一个叫齐次坐标的东西，给向量<span\r\nclass=\"math inline\">\\(\\vec{a}_{3\\times1}\\)</span>\r\n扩充一个<code>w</code>维度，<span\r\nclass=\"math inline\">\\(\\vec{a}(x,y,z,w)\\)</span>,关于向量我相信大家知道的不少，向量只表示方向与起点与终点没有关系。当然某些时候我们也用来描述一个空间的位置，所以当<code>w</code>分量为<code>0</code>表示的是向量，为<code>1</code>表示的是一个点，注意：\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{a}(x,y,z,w)\\)</span>\r\n<code>==</code> <span class=\"math inline\">\\(\\vec{a}(w \\times x,w \\times\r\ny,w \\times z,w^2)\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"平移\">平移</h3>\r\n<ul>\r\n<li>建模师们在建模的时候都是使用模型自己的坐标，规定坐标系的原点在模型这个包围盒的内部，平移要做的操作就是将模型放到世界空间的某个位置。</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>常规的仿射变换(旋转，缩放，平移),\r\n以及一些常用的基本矩阵和这些矩阵的原理<span\r\nclass=\"math inline\">\\(\\dots\\)</span></p>","more":"<h2 id=\"模型变换\">模型变换</h2>\r\n<ul>\r\n<li>仿射变换\r\n<ul>\r\n<li>基本概念：</li>\r\n<li>矩阵的计算</li>\r\n</ul></li>\r\n<li>齐次坐标\r\n<ul>\r\n<li>W分量的意义</li>\r\n</ul></li>\r\n<li>坐标系的变换\r\n<ul>\r\n<li>模型坐标到世界坐标。</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"齐次坐标\">齐次坐标</h3>\r\n<ul>\r\n<li>在开始模型变换的讲解之前，我们首先需要知道，我们的变换的各种操作都是通过矩阵实现的，为了将旋转缩放平移写到一个矩阵中，在计算机图形学中引入了一个叫齐次坐标的东西，给向量<span\r\nclass=\"math inline\">\\(\\vec{a}_{3\\times1}\\)</span>\r\n扩充一个<code>w</code>维度，<span\r\nclass=\"math inline\">\\(\\vec{a}(x,y,z,w)\\)</span>,关于向量我相信大家知道的不少，向量只表示方向与起点与终点没有关系。当然某些时候我们也用来描述一个空间的位置，所以当<code>w</code>分量为<code>0</code>表示的是向量，为<code>1</code>表示的是一个点，注意：\r\n<ul>\r\n<li><span class=\"math inline\">\\(\\vec{a}(x,y,z,w)\\)</span>\r\n<code>==</code> <span class=\"math inline\">\\(\\vec{a}(w \\times x,w \\times\r\ny,w \\times z,w^2)\\)</span></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"平移\">平移</h3>\r\n<ul>\r\n<li>建模师们在建模的时候都是使用模型自己的坐标，规定坐标系的原点在模型这个包围盒的内部，平移要做的操作就是将模型放到世界空间的某个位置。</li>\r\n</ul>"},{"title":"第一次换工作","date":"2021-10-17T07:25:40.000Z","_content":"\n<p>\n&ensp;&ensp;而二分工作的小总结，北京...\n</p>\n\n<!-- more -->\n\n### \n\n`前记：`\n\n<img src=\"https://raw.githubusercontent.com/Ranbun/images/main/works/GF/GF_Workspace.JPG\"/>\n\n&ensp;&ensp;&ensp;&ensp;从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。\n\n&ensp; &ensp;&ensp;&ensp;新工作是关于```C++　&　OSG```的，做一个仿真软件，主要负责一些关于`osg`的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：\n\n- `Qt`编写整个软件的界面\n- `osg`负责整个3D图形的展示\n\n&ensp; 关于这个项目遇到的一些问题：\n\n-   `osg`编译劝退\t\n\n&ensp;&ensp;&ensp;&ensp;讲真，`osg`的库的编译相当劝退，各种库的依赖关系，以及`VS`的工具链的选择，以及部分库的调试模式的选择。\n\n这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。\n\n- `osg`与`Qt`的集成\n\n&ensp;&ensp;&ensp;&ensp;要求你先编译`osg`然后才能编译，`osgQt`在`osg3.4`之后的版本中便被从原来的库中剔除，需要自己单独编译，\n\n同时`Qt4.0`的版本与`5.0`的版本编译使用的`Qt`的类也存在一些区别。\n\n当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：\n\n- 在于不同的团队合作的时候，如何扯皮！\n\n\n\n","source":"_posts/记一次总结_第一次换工作.md","raw":"---\ntitle: 第一次换工作\ndate: 2021-10-17 15:25:40\ntags:\n- conclusion\ncategories:\n- works\n- HJ\n---\n\n<p>\n&ensp;&ensp;而二分工作的小总结，北京...\n</p>\n\n<!-- more -->\n\n### \n\n`前记：`\n\n<img src=\"https://raw.githubusercontent.com/Ranbun/images/main/works/GF/GF_Workspace.JPG\"/>\n\n&ensp;&ensp;&ensp;&ensp;从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。\n\n&ensp; &ensp;&ensp;&ensp;新工作是关于```C++　&　OSG```的，做一个仿真软件，主要负责一些关于`osg`的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：\n\n- `Qt`编写整个软件的界面\n- `osg`负责整个3D图形的展示\n\n&ensp; 关于这个项目遇到的一些问题：\n\n-   `osg`编译劝退\t\n\n&ensp;&ensp;&ensp;&ensp;讲真，`osg`的库的编译相当劝退，各种库的依赖关系，以及`VS`的工具链的选择，以及部分库的调试模式的选择。\n\n这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。\n\n- `osg`与`Qt`的集成\n\n&ensp;&ensp;&ensp;&ensp;要求你先编译`osg`然后才能编译，`osgQt`在`osg3.4`之后的版本中便被从原来的库中剔除，需要自己单独编译，\n\n同时`Qt4.0`的版本与`5.0`的版本编译使用的`Qt`的类也存在一些区别。\n\n当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：\n\n- 在于不同的团队合作的时候，如何扯皮！\n\n\n\n","slug":"记一次总结_第一次换工作","published":1,"updated":"2022-08-25T15:45:37.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw6003s7cdafuc41pfq","content":"<p>\r\n  而二分工作的小总结，北京...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"section\"></h3>\r\n<p><code>前记：</code></p>\r\n<p><img src=\"https://raw.githubusercontent.com/Ranbun/images/main/works/GF/GF_Workspace.JPG\"/></p>\r\n<p>    从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。</p>\r\n<p> \r\n   新工作是关于<code>C++　&amp;　OSG</code>的，做一个仿真软件，主要负责一些关于<code>osg</code>的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：</p>\r\n<ul>\r\n<li><code>Qt</code>编写整个软件的界面</li>\r\n<li><code>osg</code>负责整个3D图形的展示</li>\r\n</ul>\r\n<p>  关于这个项目遇到的一些问题：</p>\r\n<ul>\r\n<li><code>osg</code>编译劝退</li>\r\n</ul>\r\n<p>    讲真，<code>osg</code>的库的编译相当劝退，各种库的依赖关系，以及<code>VS</code>的工具链的选择，以及部分库的调试模式的选择。</p>\r\n<p>这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。</p>\r\n<ul>\r\n<li><code>osg</code>与<code>Qt</code>的集成</li>\r\n</ul>\r\n<p>    要求你先编译<code>osg</code>然后才能编译，<code>osgQt</code>在<code>osg3.4</code>之后的版本中便被从原来的库中剔除，需要自己单独编译，</p>\r\n<p>同时<code>Qt4.0</code>的版本与<code>5.0</code>的版本编译使用的<code>Qt</code>的类也存在一些区别。</p>\r\n<p>当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：</p>\r\n<ul>\r\n<li>在于不同的团队合作的时候，如何扯皮！</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  而二分工作的小总结，北京...\r\n</p>","more":"<h3 id=\"section\"></h3>\r\n<p><code>前记：</code></p>\r\n<p><img src=\"https://raw.githubusercontent.com/Ranbun/images/main/works/GF/GF_Workspace.JPG\"/></p>\r\n<p>    从辞职到新公司，过去了快两个月时间，经过这大段的时间，度过了试用期，开始接手往后日子里要进行的工作。</p>\r\n<p> \r\n   新工作是关于<code>C++　&amp;　OSG</code>的，做一个仿真软件，主要负责一些关于<code>osg</code>的渲染工作，和其中部分界面的编写，项目用到的还算是熟悉的东西：</p>\r\n<ul>\r\n<li><code>Qt</code>编写整个软件的界面</li>\r\n<li><code>osg</code>负责整个3D图形的展示</li>\r\n</ul>\r\n<p>  关于这个项目遇到的一些问题：</p>\r\n<ul>\r\n<li><code>osg</code>编译劝退</li>\r\n</ul>\r\n<p>    讲真，<code>osg</code>的库的编译相当劝退，各种库的依赖关系，以及<code>VS</code>的工具链的选择，以及部分库的调试模式的选择。</p>\r\n<p>这里推荐<a ref=https://freesouth.blog.csdn.net/>杨石兴的博客</a>详细介绍了OSG的编译的一些问题，同时它提供了编译使用的所有的依赖包，各种工具集的版本。</p>\r\n<ul>\r\n<li><code>osg</code>与<code>Qt</code>的集成</li>\r\n</ul>\r\n<p>    要求你先编译<code>osg</code>然后才能编译，<code>osgQt</code>在<code>osg3.4</code>之后的版本中便被从原来的库中剔除，需要自己单独编译，</p>\r\n<p>同时<code>Qt4.0</code>的版本与<code>5.0</code>的版本编译使用的<code>Qt</code>的类也存在一些区别。</p>\r\n<p>当前阶段，上面提到的这些问题，我们已经解决了，新一番的问题产生了：</p>\r\n<ul>\r\n<li>在于不同的团队合作的时候，如何扯皮！</li>\r\n</ul>"},{"title":"渲染(CAD)","date":"2022-01-15T16:51:02.000Z","_content":"\n<p>\n&ensp;&ensp;一次面试的记录...\n</p>\n\n<!-- more -->\n\n## 记一次面试:\n\n&ensp;&ensp;距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\n&ensp;&ensp;这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是`CAD`方向，大概都是渲染相关的，所以还是符合我的预期。\n\n\n## Start Interview:\n\n- 首先这是一个`Cpp`&`图形`的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是`CPP`和`图形学`开发经验, 可以预见大概的问题就是`Cpp`和图形相关的知识。\n\n---\n\n\n### 第一次面试\n\n#### 关于简历中提到的之前的项目\n\n- 部分和之前项目相关的问题\n- 一些技术上的解决方案\n- ......\n\n#### CPP的新的语言特性\n\n- `C++11`的新语言特性 - 比较常用的\n  - 智能指针\n  - `auto`自动类型推导\n  - 标准库的多线程\n  - `lambda`表达式\n\n- 一些指针和引用相关的问题\n  - 指针是什么？\n  - 引用是什么？\n  - 两者的区别？\n  - 内存分区的相关问题，如：\n    - 常量在程序中的的存储位置\n    - 静态变量在什么位置\n    - ......\n\n#### 图形相关的问题\n\n- 图形管线的问题\n  - 坐标变换相关的问题\n    - 投影\n    - 视图\n\n- 一些渲染上面的解决方案\n  - 大数据量的绘制\n\n### 第二次面试\n\n&ensp;&ensp;第二次面试倒是没有什么技术相关的问题，两个老师，一个人事，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：\n\n- 个人介绍\t\n  - 基本信息\n  - 求学经历\n  - ......\n\n- 工作经历\n  - 项目经历\n\n- 未来的规划\n  - 职业规划\n  - 个人规划\n\n- 个人爱好\n\n&ensp;.......\n\n&ensp;&ensp;后面部分就是关于这个介绍的提问了，无关痛痒。\n\n&ensp;&ensp;一周以后......，在我以为黄了的时候，竟然通过了。\n\n&ensp;&ensp;感谢！\n\n","source":"_posts/记一次面试_CAD渲染.md","raw":"---\ntitle: 渲染(CAD)\ndate: 2022-01-16 00:51:02\ncategories:\n  - works\n  - interview\ntags:\n  - openGL\t\n  - cpp\n  - computer graphics\n---\n\n<p>\n&ensp;&ensp;一次面试的记录...\n</p>\n\n<!-- more -->\n\n## 记一次面试:\n\n&ensp;&ensp;距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\n&ensp;&ensp;这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是`CAD`方向，大概都是渲染相关的，所以还是符合我的预期。\n\n\n## Start Interview:\n\n- 首先这是一个`Cpp`&`图形`的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是`CPP`和`图形学`开发经验, 可以预见大概的问题就是`Cpp`和图形相关的知识。\n\n---\n\n\n### 第一次面试\n\n#### 关于简历中提到的之前的项目\n\n- 部分和之前项目相关的问题\n- 一些技术上的解决方案\n- ......\n\n#### CPP的新的语言特性\n\n- `C++11`的新语言特性 - 比较常用的\n  - 智能指针\n  - `auto`自动类型推导\n  - 标准库的多线程\n  - `lambda`表达式\n\n- 一些指针和引用相关的问题\n  - 指针是什么？\n  - 引用是什么？\n  - 两者的区别？\n  - 内存分区的相关问题，如：\n    - 常量在程序中的的存储位置\n    - 静态变量在什么位置\n    - ......\n\n#### 图形相关的问题\n\n- 图形管线的问题\n  - 坐标变换相关的问题\n    - 投影\n    - 视图\n\n- 一些渲染上面的解决方案\n  - 大数据量的绘制\n\n### 第二次面试\n\n&ensp;&ensp;第二次面试倒是没有什么技术相关的问题，两个老师，一个人事，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：\n\n- 个人介绍\t\n  - 基本信息\n  - 求学经历\n  - ......\n\n- 工作经历\n  - 项目经历\n\n- 未来的规划\n  - 职业规划\n  - 个人规划\n\n- 个人爱好\n\n&ensp;.......\n\n&ensp;&ensp;后面部分就是关于这个介绍的提问了，无关痛痒。\n\n&ensp;&ensp;一周以后......，在我以为黄了的时候，竟然通过了。\n\n&ensp;&ensp;感谢！\n\n","slug":"记一次面试_CAD渲染","published":1,"updated":"2022-08-21T15:34:57.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw7003x7cdactd5dre0","content":"<p>\r\n  一次面试的记录...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"记一次面试\">记一次面试:</h2>\r\n<p>  距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\r\n  这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是<code>CAD</code>方向，大概都是渲染相关的，所以还是符合我的预期。</p>\r\n<h2 id=\"start-interview\">Start Interview:</h2>\r\n<ul>\r\n<li>首先这是一个<code>Cpp</code>&amp;<code>图形</code>的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是<code>CPP</code>和<code>图形学</code>开发经验,\r\n可以预见大概的问题就是<code>Cpp</code>和图形相关的知识。</li>\r\n</ul>\r\n<hr />\r\n<h3 id=\"第一次面试\">第一次面试</h3>\r\n<h4 id=\"关于简历中提到的之前的项目\">关于简历中提到的之前的项目</h4>\r\n<ul>\r\n<li>部分和之前项目相关的问题</li>\r\n<li>一些技术上的解决方案</li>\r\n<li>......</li>\r\n</ul>\r\n<h4 id=\"cpp的新的语言特性\">CPP的新的语言特性</h4>\r\n<ul>\r\n<li><code>C++11</code>的新语言特性 - 比较常用的\r\n<ul>\r\n<li>智能指针</li>\r\n<li><code>auto</code>自动类型推导</li>\r\n<li>标准库的多线程</li>\r\n<li><code>lambda</code>表达式</li>\r\n</ul></li>\r\n<li>一些指针和引用相关的问题\r\n<ul>\r\n<li>指针是什么？</li>\r\n<li>引用是什么？</li>\r\n<li>两者的区别？</li>\r\n<li>内存分区的相关问题，如：\r\n<ul>\r\n<li>常量在程序中的的存储位置</li>\r\n<li>静态变量在什么位置</li>\r\n<li>......</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"图形相关的问题\">图形相关的问题</h4>\r\n<ul>\r\n<li>图形管线的问题\r\n<ul>\r\n<li>坐标变换相关的问题\r\n<ul>\r\n<li>投影</li>\r\n<li>视图</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>一些渲染上面的解决方案\r\n<ul>\r\n<li>大数据量的绘制</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"第二次面试\">第二次面试</h3>\r\n<p>  第二次面试倒是没有什么技术相关的问题，两个老师，一个人事，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：</p>\r\n<ul>\r\n<li>个人介绍\r\n<ul>\r\n<li>基本信息</li>\r\n<li>求学经历</li>\r\n<li>......</li>\r\n</ul></li>\r\n<li>工作经历\r\n<ul>\r\n<li>项目经历</li>\r\n</ul></li>\r\n<li>未来的规划\r\n<ul>\r\n<li>职业规划</li>\r\n<li>个人规划</li>\r\n</ul></li>\r\n<li>个人爱好</li>\r\n</ul>\r\n<p> .......</p>\r\n<p>  后面部分就是关于这个介绍的提问了，无关痛痒。</p>\r\n<p>  一周以后......，在我以为黄了的时候，竟然通过了。</p>\r\n<p>  感谢！</p>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  一次面试的记录...\r\n</p>","more":"<h2 id=\"记一次面试\">记一次面试:</h2>\r\n<p>  距离上一次面试，不到半年，频繁的换工作，总是一件不好的事情，关于换工作这件事并不是那么的难以启齿，所以具体原因就先省略了.......\r\n  这次的目标是国内的一所高校，具体的工作，根据面试的情况看来，是<code>CAD</code>方向，大概都是渲染相关的，所以还是符合我的预期。</p>\r\n<h2 id=\"start-interview\">Start Interview:</h2>\r\n<ul>\r\n<li>首先这是一个<code>Cpp</code>&amp;<code>图形</code>的混合岗位，所以能想到的是，关于对这个岗位的基本要求就是<code>CPP</code>和<code>图形学</code>开发经验,\r\n可以预见大概的问题就是<code>Cpp</code>和图形相关的知识。</li>\r\n</ul>\r\n<hr />\r\n<h3 id=\"第一次面试\">第一次面试</h3>\r\n<h4 id=\"关于简历中提到的之前的项目\">关于简历中提到的之前的项目</h4>\r\n<ul>\r\n<li>部分和之前项目相关的问题</li>\r\n<li>一些技术上的解决方案</li>\r\n<li>......</li>\r\n</ul>\r\n<h4 id=\"cpp的新的语言特性\">CPP的新的语言特性</h4>\r\n<ul>\r\n<li><code>C++11</code>的新语言特性 - 比较常用的\r\n<ul>\r\n<li>智能指针</li>\r\n<li><code>auto</code>自动类型推导</li>\r\n<li>标准库的多线程</li>\r\n<li><code>lambda</code>表达式</li>\r\n</ul></li>\r\n<li>一些指针和引用相关的问题\r\n<ul>\r\n<li>指针是什么？</li>\r\n<li>引用是什么？</li>\r\n<li>两者的区别？</li>\r\n<li>内存分区的相关问题，如：\r\n<ul>\r\n<li>常量在程序中的的存储位置</li>\r\n<li>静态变量在什么位置</li>\r\n<li>......</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<h4 id=\"图形相关的问题\">图形相关的问题</h4>\r\n<ul>\r\n<li>图形管线的问题\r\n<ul>\r\n<li>坐标变换相关的问题\r\n<ul>\r\n<li>投影</li>\r\n<li>视图</li>\r\n</ul></li>\r\n</ul></li>\r\n<li>一些渲染上面的解决方案\r\n<ul>\r\n<li>大数据量的绘制</li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"第二次面试\">第二次面试</h3>\r\n<p>  第二次面试倒是没有什么技术相关的问题，两个老师，一个人事，加上我，一共四个人，具体内容就是一个10分钟的自我介绍，这个介绍包括：</p>\r\n<ul>\r\n<li>个人介绍\r\n<ul>\r\n<li>基本信息</li>\r\n<li>求学经历</li>\r\n<li>......</li>\r\n</ul></li>\r\n<li>工作经历\r\n<ul>\r\n<li>项目经历</li>\r\n</ul></li>\r\n<li>未来的规划\r\n<ul>\r\n<li>职业规划</li>\r\n<li>个人规划</li>\r\n</ul></li>\r\n<li>个人爱好</li>\r\n</ul>\r\n<p> .......</p>\r\n<p>  后面部分就是关于这个介绍的提问了，无关痛痒。</p>\r\n<p>  一周以后......，在我以为黄了的时候，竟然通过了。</p>\r\n<p>  感谢！</p>"},{"title":"Qt","date":"2021-07-27T12:31:46.000Z","_content":"\n*和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......*\n\t目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的`C++ & Qt`，按照面试官的说法，这是一个纯`Qt`的岗位，所以接下来的问题大概全部是和`Qt`相关的，当然也会有部分C++的问题在其中。\n\n<!-- more -->\n\n<font style=\"color:pink\">废话不多说，我们进入正题：</font>\n\n## C++部分的问题：\n\n- 第一部分是关于C++这门语言的，面向对象是什么？\n\n  ```C++\n   // OOP\n   // 封装,继承,多态\n  ```\n\n- 对于多态的理解?\n\n  ```C++ \n  // 首先是如何实现多态？\n  1. 多态发生在继承关系中。\n  2. 需要重写虚函数。\n  3. 父类的指针指向子类的对象。\n  4. 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。\n  ```\nexample：\n  ```C++\nclass A\n  {\n  public:\n      A(){std::cout<<\"A\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_A\"<<std::endl;\n      }\n  private:\n      int menber;\n  \n  };\n  \n  class B: public A\n  {\n  public:\n      B():A(){std::cout<<\"B\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_B\"<<std::endl;\n      }\n  };\n  \n  class D: public A\n  {\n  public:\n      D():A(){std::cout<<\"D\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_D\"<<std::endl;\n      }\n  };\n  \n  int main()\n  {\n      A * a = new A;\n      B * b = new B;\n      D * d = new D;\n  \n      A * ptr = b;\n      ptr->function_virtual();\n  \n      ptr = a;\n      ptr->function_virtual();\n  \n      ptr = d;\n      ptr->function_virtual();\n  \t\n      return 0;\n  }\n  \n  ```\n\n\t<font style=\"color:red\">结果如下：</font>\n\t![polymorphism](https://raw.githubusercontent.com/Ranbun/images/main/cpp/polymorphism.png \"polymorphism\")\n\n\n- 多态的实现 -- <font style=\"color:red\">虚函数表</font>\n\n  - 验证虚函数表：\n\n    ```C++\n    // 一个简单的C 不带有虚函数 \n    class C\n    {\n    public:\n        C(){std::cout<<\"C\"<<std::endl;}\n    private:\n        long long member;\n    };\n    ```\n\t<font style=\"color:red\">输出结果:</font> ![virtual_table](https://raw.githubusercontent.com/Ranbun/images/main/cpp/virtual_table_1.png \"virtual table 1\")\n  \t\n  \t![virtual table 2](https://raw.githubusercontent.com/Ranbun/images/main/cpp/virtual_table_2.png \"virtual table 2\")\n\n  \t- 上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。\n\n---\n\n## Qt部分\n\n- 元对象系统\n- 窗口刷新机制\n- 内存托管(删除机制)\n- Qquick\n- Qt的布局\n\n\n\n## OPENGL部分\n\n- 缓冲(双缓冲)\n\n- 着色器程序(语言)\n\n  ","source":"_posts/记一次面试_Qt.md","raw":"---\ntitle: Qt\ndate: 2021-07-27 20:31:46\ntags:\n---\n\n*和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......*\n\t目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的`C++ & Qt`，按照面试官的说法，这是一个纯`Qt`的岗位，所以接下来的问题大概全部是和`Qt`相关的，当然也会有部分C++的问题在其中。\n\n<!-- more -->\n\n<font style=\"color:pink\">废话不多说，我们进入正题：</font>\n\n## C++部分的问题：\n\n- 第一部分是关于C++这门语言的，面向对象是什么？\n\n  ```C++\n   // OOP\n   // 封装,继承,多态\n  ```\n\n- 对于多态的理解?\n\n  ```C++ \n  // 首先是如何实现多态？\n  1. 多态发生在继承关系中。\n  2. 需要重写虚函数。\n  3. 父类的指针指向子类的对象。\n  4. 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。\n  ```\nexample：\n  ```C++\nclass A\n  {\n  public:\n      A(){std::cout<<\"A\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_A\"<<std::endl;\n      }\n  private:\n      int menber;\n  \n  };\n  \n  class B: public A\n  {\n  public:\n      B():A(){std::cout<<\"B\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_B\"<<std::endl;\n      }\n  };\n  \n  class D: public A\n  {\n  public:\n      D():A(){std::cout<<\"D\"<<std::endl;}\n  \n      virtual void function_virtual()\n      {\n          std::cout<<\"function_D\"<<std::endl;\n      }\n  };\n  \n  int main()\n  {\n      A * a = new A;\n      B * b = new B;\n      D * d = new D;\n  \n      A * ptr = b;\n      ptr->function_virtual();\n  \n      ptr = a;\n      ptr->function_virtual();\n  \n      ptr = d;\n      ptr->function_virtual();\n  \t\n      return 0;\n  }\n  \n  ```\n\n\t<font style=\"color:red\">结果如下：</font>\n\t![polymorphism](https://raw.githubusercontent.com/Ranbun/images/main/cpp/polymorphism.png \"polymorphism\")\n\n\n- 多态的实现 -- <font style=\"color:red\">虚函数表</font>\n\n  - 验证虚函数表：\n\n    ```C++\n    // 一个简单的C 不带有虚函数 \n    class C\n    {\n    public:\n        C(){std::cout<<\"C\"<<std::endl;}\n    private:\n        long long member;\n    };\n    ```\n\t<font style=\"color:red\">输出结果:</font> ![virtual_table](https://raw.githubusercontent.com/Ranbun/images/main/cpp/virtual_table_1.png \"virtual table 1\")\n  \t\n  \t![virtual table 2](https://raw.githubusercontent.com/Ranbun/images/main/cpp/virtual_table_2.png \"virtual table 2\")\n\n  \t- 上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。\n\n---\n\n## Qt部分\n\n- 元对象系统\n- 窗口刷新机制\n- 内存托管(删除机制)\n- Qquick\n- Qt的布局\n\n\n\n## OPENGL部分\n\n- 缓冲(双缓冲)\n\n- 着色器程序(语言)\n\n  ","slug":"记一次面试_Qt","published":1,"updated":"2022-08-25T15:45:37.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw800407cda78ma0008","content":"<p><em>和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......</em>\r\n目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的<code>C++ &amp; Qt</code>，按照面试官的说法，这是一个纯<code>Qt</code>的岗位，所以接下来的问题大概全部是和<code>Qt</code>相关的，当然也会有部分C++的问题在其中。</p>\r\n<span id=\"more\"></span>\r\n<p><font style=\"color:pink\">废话不多说，我们进入正题：</font></p>\r\n<h2 id=\"c部分的问题\">C++部分的问题：</h2>\r\n<ul>\r\n<li><p>第一部分是关于C++这门语言的，面向对象是什么？</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OOP</span></span><br><span class=\"line\"><span class=\"comment\">// 封装,继承,多态</span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>对于多态的理解?</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先是如何实现多态？</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 多态发生在继承关系中。</span><br><span class=\"line\"><span class=\"number\">2.</span> 需要重写虚函数。</span><br><span class=\"line\"><span class=\"number\">3.</span> 父类的指针指向子类的对象。</span><br><span class=\"line\"><span class=\"number\">4.</span> 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。</span><br></pre></td></tr></table></figure>\r\n<p>example： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> menber;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      B():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      D():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      A * a = <span class=\"keyword\">new</span> A;</span><br><span class=\"line\">      B * b = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">      D * d = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">  </span><br><span class=\"line\">      A * ptr = b;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = a;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = d;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  \t</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></p>\r\n<p><font style=\"color:red\">结果如下：</font> <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/polymorphism.png\"\r\ntitle=\"polymorphism\" alt=\"polymorphism\" /></p></li>\r\n<li><p>多态的实现 -- <font style=\"color:red\">虚函数表</font></p>\r\n<ul>\r\n<li><p>验证虚函数表：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的C 不带有虚函数 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    C()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;C&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> member;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><font style=\"color:red\">输出结果:</font> <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/virtual_table_1.png\"\r\ntitle=\"virtual table 1\" alt=\"virtual_table\" /></p>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/virtual_table_2.png\"\r\ntitle=\"virtual table 2\" alt=\"virtual table 2\" />\r\n<figcaption aria-hidden=\"true\">virtual table 2</figcaption>\r\n</figure>\r\n<ul>\r\n<li>上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"qt部分\">Qt部分</h2>\r\n<ul>\r\n<li>元对象系统</li>\r\n<li>窗口刷新机制</li>\r\n<li>内存托管(删除机制)</li>\r\n<li>Qquick</li>\r\n<li>Qt的布局</li>\r\n</ul>\r\n<h2 id=\"opengl部分\">OPENGL部分</h2>\r\n<ul>\r\n<li><p>缓冲(双缓冲)</p></li>\r\n<li><p>着色器程序(语言)</p></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p><em>和老大提出辞职之后，商量了关于我的工作后续的事情，便开始寻找新工作......</em>\r\n目的地是在重庆的一家公司，具体什么名字，暂时不透露了，面的<code>C++ &amp; Qt</code>，按照面试官的说法，这是一个纯<code>Qt</code>的岗位，所以接下来的问题大概全部是和<code>Qt</code>相关的，当然也会有部分C++的问题在其中。</p>","more":"<p><font style=\"color:pink\">废话不多说，我们进入正题：</font></p>\r\n<h2 id=\"c部分的问题\">C++部分的问题：</h2>\r\n<ul>\r\n<li><p>第一部分是关于C++这门语言的，面向对象是什么？</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// OOP</span></span><br><span class=\"line\"><span class=\"comment\">// 封装,继承,多态</span></span><br></pre></td></tr></table></figure></li>\r\n<li><p>对于多态的理解?</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先是如何实现多态？</span></span><br><span class=\"line\"><span class=\"number\">1.</span> 多态发生在继承关系中。</span><br><span class=\"line\"><span class=\"number\">2.</span> 需要重写虚函数。</span><br><span class=\"line\"><span class=\"number\">3.</span> 父类的指针指向子类的对象。</span><br><span class=\"line\"><span class=\"number\">4.</span> 通过父类指针对重写的虚函数发起调用，最终调用你要想调用的函数。</span><br></pre></td></tr></table></figure>\r\n<p>example： <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_A&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> menber;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      B():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_B&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>:</span> <span class=\"keyword\">public</span> A</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      D():A()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">function_virtual</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;function_D&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      A * a = <span class=\"keyword\">new</span> A;</span><br><span class=\"line\">      B * b = <span class=\"keyword\">new</span> B;</span><br><span class=\"line\">      D * d = <span class=\"keyword\">new</span> D;</span><br><span class=\"line\">  </span><br><span class=\"line\">      A * ptr = b;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = a;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  </span><br><span class=\"line\">      ptr = d;</span><br><span class=\"line\">      ptr-&gt;function_virtual();</span><br><span class=\"line\">  \t</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></p>\r\n<p><font style=\"color:red\">结果如下：</font> <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/polymorphism.png\"\r\ntitle=\"polymorphism\" alt=\"polymorphism\" /></p></li>\r\n<li><p>多态的实现 -- <font style=\"color:red\">虚函数表</font></p>\r\n<ul>\r\n<li><p>验证虚函数表：</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的C 不带有虚函数 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    C()&#123;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;C&quot;</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> member;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><font style=\"color:red\">输出结果:</font> <img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/virtual_table_1.png\"\r\ntitle=\"virtual table 1\" alt=\"virtual_table\" /></p>\r\n<figure>\r\n<img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/cpp/virtual_table_2.png\"\r\ntitle=\"virtual table 2\" alt=\"virtual table 2\" />\r\n<figcaption aria-hidden=\"true\">virtual table 2</figcaption>\r\n</figure>\r\n<ul>\r\n<li>上面的结果可以看出存在一个成员(存在虚函数的情况)，大小为8个字节(64位软件)。</li>\r\n</ul></li>\r\n</ul></li>\r\n</ul>\r\n<hr />\r\n<h2 id=\"qt部分\">Qt部分</h2>\r\n<ul>\r\n<li>元对象系统</li>\r\n<li>窗口刷新机制</li>\r\n<li>内存托管(删除机制)</li>\r\n<li>Qquick</li>\r\n<li>Qt的布局</li>\r\n</ul>\r\n<h2 id=\"opengl部分\">OPENGL部分</h2>\r\n<ul>\r\n<li><p>缓冲(双缓冲)</p></li>\r\n<li><p>着色器程序(语言)</p></li>\r\n</ul>"},{"title":"设计模式-单例模式","date":"2022-08-19T13:01:58.000Z","_content":"\n考虑某种场景，我们需要一个工具类，对于所有模块提供同样的接口与数据，但是如果每个模块使用这个类的功能的时候都创建一整个类，此种行为虽说是合法的，但并不是最好的选择，我们可以通过单例设计模式，将这个类变为一个单例，我们每一次创建这个类的实例的时候，都只是获取之前创建的，从而调用相应的功能。\n<!-- more -->\n\n## 单例模式\n\n- 单线程版本\n- 多线程版本\n- 双检查锁\n- `C++11`之后的版本\n- `std::call_once`\n\n### 实现\n\n- 单线程版本\n  - 此版本只是单线程安全\n\n```C++\nclass Singleton\n{\npublic:\n    static Singleton * getInstance()\n    {\n        if(!m_singleton)\n        {\n            m_singleton = new Singleton;\n        }\n        return m_singleton;\n    }\n\nsprivate:\n    Singleton() = default;\n    Singleton* m_singleton{nullptr};\n};\n\n\n```\n\n- 多线程版本\n\n```c++\n#include <mutex>\nstd::mutex m_mutex;\nclass Singleton\n{\npublic:\n    static Singleton* getInstance()\n    {\n        std::unique_lock<std::mutex> lock(m_mutex);\n        if (!m_singleton)\n        {\n            m_singleton = new Singleton;\n        }\n        lock.unlock();\n        lock.release();\n        return m_singleton;\n    }\n\nprivate:\n    Singleton() = default;\n    Singleton* m_singleton{ nullptr };\n};\n\n```\n\n- 多线程版本优化版 - 双检查锁\n\n```C++\n#include <mutex>\nstd::mutex m_mutex;\nclass Singleton\n{\npublic:\n    static Singleton* getInstance()\n    {\n        if (!m_singleton)\n        {\n            std::unique_lock<std::mutex> lock(m_mutex);\n            if (!m_singleton)\n            {\n                m_singleton = new Singleton;\n            }\n            lock.unlock();\n            lock.release();\n        }\n        return m_singleton;\n    }\nprivate:\n    Singleton() = default;\n    Singleton* m_singleton{ nullptr };\n};\n\n```\n\n- `C++11`版本\n\n```C++\nclass Singleton\n{\npublic:\n    static Singleton& getInstance()\n    {\n        static Singleton m_instance;\n        return m_instance;\n    }\npublic:\n    Singleton() = default;\n    Singleton(const Singleton& another) = delete;\n    Singleton(const Singleton&& another) = delete;\n    Singleton& operator=(const Singleton& another) = delete;\n    Singleton& operator=(const Singleton&& another) = delete;\n};\n\n```\n\n- `std::call_once`\n\n```C++\n#include <thread>\n#include <mutex>\n#include <memory>\n\nstd::once_flag flag;\n\nclass Singleton\n{\npublic:\n    static Singleton& getInstance()\n    {\n        std::call_once(flag, []() {m_instance.reset(new Singleton()); });\n        return *m_instance;\n    }\n\npublic:\n    Singleton() = default;\n    Singleton(const Singleton& another) = delete;\n    Singleton(const Singleton&& another) = delete;\n    Singleton& operator=(const Singleton& another) = delete;\n    Singleton& operator=(const Singleton&& another) = delete;\nprivate:\n    static std::unique_ptr<Singleton> m_instance;\n};\nstd::unique_ptr<Singleton> Singleton::m_instance;\n\n```\n","source":"_posts/设计模式-单例模式.md","raw":"---\ntitle: 设计模式-单例模式\ndate: 2022-08-19 21:01:58\ncategories:\n- Design Patterns\ntags:\n- cpp\n---\n\n考虑某种场景，我们需要一个工具类，对于所有模块提供同样的接口与数据，但是如果每个模块使用这个类的功能的时候都创建一整个类，此种行为虽说是合法的，但并不是最好的选择，我们可以通过单例设计模式，将这个类变为一个单例，我们每一次创建这个类的实例的时候，都只是获取之前创建的，从而调用相应的功能。\n<!-- more -->\n\n## 单例模式\n\n- 单线程版本\n- 多线程版本\n- 双检查锁\n- `C++11`之后的版本\n- `std::call_once`\n\n### 实现\n\n- 单线程版本\n  - 此版本只是单线程安全\n\n```C++\nclass Singleton\n{\npublic:\n    static Singleton * getInstance()\n    {\n        if(!m_singleton)\n        {\n            m_singleton = new Singleton;\n        }\n        return m_singleton;\n    }\n\nsprivate:\n    Singleton() = default;\n    Singleton* m_singleton{nullptr};\n};\n\n\n```\n\n- 多线程版本\n\n```c++\n#include <mutex>\nstd::mutex m_mutex;\nclass Singleton\n{\npublic:\n    static Singleton* getInstance()\n    {\n        std::unique_lock<std::mutex> lock(m_mutex);\n        if (!m_singleton)\n        {\n            m_singleton = new Singleton;\n        }\n        lock.unlock();\n        lock.release();\n        return m_singleton;\n    }\n\nprivate:\n    Singleton() = default;\n    Singleton* m_singleton{ nullptr };\n};\n\n```\n\n- 多线程版本优化版 - 双检查锁\n\n```C++\n#include <mutex>\nstd::mutex m_mutex;\nclass Singleton\n{\npublic:\n    static Singleton* getInstance()\n    {\n        if (!m_singleton)\n        {\n            std::unique_lock<std::mutex> lock(m_mutex);\n            if (!m_singleton)\n            {\n                m_singleton = new Singleton;\n            }\n            lock.unlock();\n            lock.release();\n        }\n        return m_singleton;\n    }\nprivate:\n    Singleton() = default;\n    Singleton* m_singleton{ nullptr };\n};\n\n```\n\n- `C++11`版本\n\n```C++\nclass Singleton\n{\npublic:\n    static Singleton& getInstance()\n    {\n        static Singleton m_instance;\n        return m_instance;\n    }\npublic:\n    Singleton() = default;\n    Singleton(const Singleton& another) = delete;\n    Singleton(const Singleton&& another) = delete;\n    Singleton& operator=(const Singleton& another) = delete;\n    Singleton& operator=(const Singleton&& another) = delete;\n};\n\n```\n\n- `std::call_once`\n\n```C++\n#include <thread>\n#include <mutex>\n#include <memory>\n\nstd::once_flag flag;\n\nclass Singleton\n{\npublic:\n    static Singleton& getInstance()\n    {\n        std::call_once(flag, []() {m_instance.reset(new Singleton()); });\n        return *m_instance;\n    }\n\npublic:\n    Singleton() = default;\n    Singleton(const Singleton& another) = delete;\n    Singleton(const Singleton&& another) = delete;\n    Singleton& operator=(const Singleton& another) = delete;\n    Singleton& operator=(const Singleton&& another) = delete;\nprivate:\n    static std::unique_ptr<Singleton> m_instance;\n};\nstd::unique_ptr<Singleton> Singleton::m_instance;\n\n```\n","slug":"设计模式-单例模式","published":1,"updated":"2022-09-15T15:29:04.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraw900457cda7vri455u","content":"<p>考虑某种场景，我们需要一个工具类，对于所有模块提供同样的接口与数据，但是如果每个模块使用这个类的功能的时候都创建一整个类，此种行为虽说是合法的，但并不是最好的选择，我们可以通过单例设计模式，将这个类变为一个单例，我们每一次创建这个类的实例的时候，都只是获取之前创建的，从而调用相应的功能。\r\n<span id=\"more\"></span></p>\r\n<h2 id=\"单例模式\">单例模式</h2>\r\n<ul>\r\n<li>单线程版本</li>\r\n<li>多线程版本</li>\r\n<li>双检查锁</li>\r\n<li><code>C++11</code>之后的版本</li>\r\n<li><code>std::call_once</code></li>\r\n</ul>\r\n<h3 id=\"实现\">实现</h3>\r\n<ul>\r\n<li>单线程版本\r\n<ul>\r\n<li>此版本只是单线程安全</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton * <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!m_singleton)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_singleton = <span class=\"keyword\">new</span> Singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sprivate:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton* m_singleton&#123;<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>多线程版本</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex m_mutex;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton* <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">std</span>::unique_lock&lt;<span class=\"built_in\">std</span>::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mutex)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!m_singleton)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_singleton = <span class=\"keyword\">new</span> Singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">        lock.release();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton* m_singleton&#123; <span class=\"literal\">nullptr</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>多线程版本优化版 - 双检查锁</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex m_mutex;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton* <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!m_singleton)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">std</span>::unique_lock&lt;<span class=\"built_in\">std</span>::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mutex)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!m_singleton)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                m_singleton = <span class=\"keyword\">new</span> Singleton;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">            lock.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton* m_singleton&#123; <span class=\"literal\">nullptr</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>C++11</code>版本</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton&amp; <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> Singleton m_instance;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton(<span class=\"keyword\">const</span> Singleton&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton(<span class=\"keyword\">const</span> Singleton&amp;&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&amp;&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>std::call_once</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::once_flag flag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton&amp; <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::call_once(flag, []() &#123;m_instance.reset(<span class=\"keyword\">new</span> Singleton()); &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *m_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton(<span class=\"keyword\">const</span> Singleton&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton(<span class=\"keyword\">const</span> Singleton&amp;&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&amp;&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Singleton&gt; m_instance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Singleton&gt; Singleton::m_instance;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p>考虑某种场景，我们需要一个工具类，对于所有模块提供同样的接口与数据，但是如果每个模块使用这个类的功能的时候都创建一整个类，此种行为虽说是合法的，但并不是最好的选择，我们可以通过单例设计模式，将这个类变为一个单例，我们每一次创建这个类的实例的时候，都只是获取之前创建的，从而调用相应的功能。","more":"</p>\r\n<h2 id=\"单例模式\">单例模式</h2>\r\n<ul>\r\n<li>单线程版本</li>\r\n<li>多线程版本</li>\r\n<li>双检查锁</li>\r\n<li><code>C++11</code>之后的版本</li>\r\n<li><code>std::call_once</code></li>\r\n</ul>\r\n<h3 id=\"实现\">实现</h3>\r\n<ul>\r\n<li>单线程版本\r\n<ul>\r\n<li>此版本只是单线程安全</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton * <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!m_singleton)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_singleton = <span class=\"keyword\">new</span> Singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sprivate:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton* m_singleton&#123;<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>多线程版本</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex m_mutex;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton* <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">std</span>::unique_lock&lt;<span class=\"built_in\">std</span>::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mutex)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!m_singleton)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            m_singleton = <span class=\"keyword\">new</span> Singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">        lock.release();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton* m_singleton&#123; <span class=\"literal\">nullptr</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>多线程版本优化版 - 双检查锁</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex m_mutex;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton* <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!m_singleton)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"built_in\">std</span>::unique_lock&lt;<span class=\"built_in\">std</span>::mutex&gt; <span class=\"title\">lock</span><span class=\"params\">(m_mutex)</span></span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!m_singleton)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                m_singleton = <span class=\"keyword\">new</span> Singleton;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">            lock.release();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_singleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton* m_singleton&#123; <span class=\"literal\">nullptr</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>C++11</code>版本</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton&amp; <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> Singleton m_instance;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton(<span class=\"keyword\">const</span> Singleton&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton(<span class=\"keyword\">const</span> Singleton&amp;&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&amp;&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>std::call_once</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::once_flag flag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton&amp; <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::call_once(flag, []() &#123;m_instance.reset(<span class=\"keyword\">new</span> Singleton()); &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *m_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Singleton() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    Singleton(<span class=\"keyword\">const</span> Singleton&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton(<span class=\"keyword\">const</span> Singleton&amp;&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    Singleton&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Singleton&amp;&amp; another) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Singleton&gt; m_instance;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;Singleton&gt; Singleton::m_instance;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"迟到的毕业总结","date":"2021-03-18T15:59:55.000Z","_content":"\n<p>\n&ensp;&ensp;毕业!,一个不欢而散，再也不见的话题...\n</p>\n\n<!-- more -->\n\n### 简单的毕业\n<p>\n&ensp;&ensp;<font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</br>\n&ensp;&ensp;离开前，大家都像是急于归乡的游子，对身后的这个城市未有半点留恋。</br>\n&ensp;&ensp;对于大学，我仿佛有千言万语，却是欲语还休 。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！\n\n待续。。。\n</p>\n---\n\n\n\n### `2021-7-26`\n\n<p>\n​&ensp;&ensp;下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\n当然一切都会是新的，我也是。\n\n&ensp;&ensp;祝愿我将迎接新的美好，朋友我来了！\n</p>\n\n### `这是什么样子的四年呢？`\n#### `2022-8-14`\n<p>\n&ensp;&ensp;转眼之间，我毕业两年，放眼望去，我得到了什么呢？\n\n</p>\n\n\n","source":"_posts/迟到的毕业总结.md","raw":"---\ntitle: 迟到的毕业总结\ndate: 2021-03-18 23:59:55\ncategories:\n- bun\n- university \ntags:\n - university \n - conclusion\n---\n\n<p>\n&ensp;&ensp;毕业!,一个不欢而散，再也不见的话题...\n</p>\n\n<!-- more -->\n\n### 简单的毕业\n<p>\n&ensp;&ensp;<font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</br>\n&ensp;&ensp;离开前，大家都像是急于归乡的游子，对身后的这个城市未有半点留恋。</br>\n&ensp;&ensp;对于大学，我仿佛有千言万语，却是欲语还休 。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！\n\n待续。。。\n</p>\n---\n\n\n\n### `2021-7-26`\n\n<p>\n​&ensp;&ensp;下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\n当然一切都会是新的，我也是。\n\n&ensp;&ensp;祝愿我将迎接新的美好，朋友我来了！\n</p>\n\n### `这是什么样子的四年呢？`\n#### `2022-8-14`\n<p>\n&ensp;&ensp;转眼之间，我毕业两年，放眼望去，我得到了什么呢？\n\n</p>\n\n\n","slug":"迟到的毕业总结","published":1,"updated":"2022-08-21T15:34:57.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexraws00817cda5okc0tza","content":"<p>\r\n  毕业!,一个不欢而散，再也不见的话题...\r\n</p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"简单的毕业\">简单的毕业</h3>\r\n<p>\r\n<p>  <font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</br>\r\n  离开前，大家都像是急于归乡的游子，对身后的这个城市未有半点留恋。</br>\r\n  对于大学，我仿佛有千言万语，却是欲语还休\r\n。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！</p>\r\n待续。。。\r\n</p>\r\n<hr />\r\n<h3 id=\"section\"><code>2021-7-26</code></h3>\r\n<p>\r\n<p>​  下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\r\n当然一切都会是新的，我也是。</p>\r\n  祝愿我将迎接新的美好，朋友我来了！\r\n</p>\r\n<h3 id=\"这是什么样子的四年呢\"><code>这是什么样子的四年呢？</code></h3>\r\n<h4 id=\"section-1\"><code>2022-8-14</code></h4>\r\n<p>\r\n<p>  转眼之间，我毕业两年，放眼望去，我得到了什么呢？</p>\r\n</p>\r\n","site":{"data":{}},"excerpt":"<p>\r\n  毕业!,一个不欢而散，再也不见的话题...\r\n</p>","more":"<h3 id=\"简单的毕业\">简单的毕业</h3>\r\n<p>\r\n<p>  <font color=red>2020年</font>在三个月前结束了，这一年大家都收获了满满的经历。当然，我也是。我毕业了，从一个三流学校的渣子变成了社会末流的青年。开始了独属于我的关于这个时代的苟且！</br>\r\n  离开前，大家都像是急于归乡的游子，对身后的这个城市未有半点留恋。</br>\r\n  对于大学，我仿佛有千言万语，却是欲语还休\r\n。不谈这个这个有些无聊的学校，关于大学，关于这四年，关于我自己，我希望它是美好的，会让我主动怀恋的！</p>\r\n待续。。。\r\n</p>\r\n<hr />\r\n<h3 id=\"section\"><code>2021-7-26</code></h3>\r\n<p>\r\n<p>​  下个月就要离开这个城市了，目前心情很是平淡，谈不上悲，亦没有欢喜，我仿佛早有预料一般。却如其实，我的确早有离开的想法，我大学的四年在这个城市度过，对于这里的大部分事物，我也算是熟悉，离开这里对我来说麻烦的地方便是新的城市，新的交际。。。\r\n当然一切都会是新的，我也是。</p>\r\n  祝愿我将迎接新的美好，朋友我来了！\r\n</p>\r\n<h3 id=\"这是什么样子的四年呢\"><code>这是什么样子的四年呢？</code></h3>\r\n<h4 id=\"section-1\"><code>2022-8-14</code></h4>\r\n<p>\r\n<p>  转眼之间，我毕业两年，放眼望去，我得到了什么呢？</p>\r\n</p>"},{"title":"透视矩阵计算","date":"2022-09-08T13:03:38.000Z","mathjax":true,"_content":"\n在经过投影变换后，场景由三维变换到二维，这过程如何实现呢？\n关于两种不同的投影方式计算生成对应的投影矩阵，该如何计算？\n<!--more-->\n\n## 投影变换\n\n- 平行投影\n- 透视投影\n\n<center><img id=\"projection\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/projection.png\"/></center>\n\n- 当我们完成视图变换\n    - 相机被移动到世界坐标系的原点，同时场景做了同样的相对位移。\n    - 相机看向`-z`方向，我们指定了一个`up`,通过`cross`我们分别计算出三个轴向，相当远将世界坐标系做一个旋转操作，变换到$\\vec{right},\\vec{up},\\vec{look}$ - 相机右方向，上方向，观察方向，<font color=red>场景也要做相同的旋转操作</font>\n    - 下一步的操作便是投影\n- 此时，我们的场景变换到了相机描述的坐标系下。\n\n### 1. 平行投影\n\n- 我们最先要做的是定义一个视锥体。\n    - $[left,right]$\n    - $[bottom,top]$\n    - $[zNear,ZFar]$\n    - $ortho(left,right,bottom,top,zNear,zFar)$\n    - <font color=red> 由于相机朝向<code>-z</code>,实际上说<code>zNear</code> 大于<code>zFar</code></font>.\n\n- 如上图[平行投影与透视投影](#projection)所示：\n平行投影没有近大远小的视觉效果，我们可以简单的丢掉所有顶点的`Z`值，将他们挤压到一个平面上，就可以得到一个平面的图。这将会丢掉维度信息，且不可逆，将场景变为二维，同是，对于关于`XOY`平面对称的点相当不友好[`-z,z`]，所以并不是一个合适的方法。\n    - 变换矩阵:\n    $$\n        P_0 = \\begin{bmatrix}\n        1 & 0 & 0 & 0 \\\\\n        0 & 1 & 0 & 0 \\\\\n        0 & 0 & 0 & 0 \\\\\n        0 & 0 & 0 & 1\n    \\end{bmatrix}\n    $$ \n\n- 更好的做法是将场景移动到原点，然后做一次缩放，将场景的所有的顶点的坐标变换到$(x,y,z) \\in [-1,1]^3$\n    - 此时将会生成 `z-buffer`，三维场景的信息变为$[x,y]^2$的信息\n\n<center><img id=\"ortho_1\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/Ortho.png\n\"/></center>\n\n<center><img id=\"ortho_1\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/ortho_moveandscale.png\n\"/></center>\n\n- 对应矩阵\n    - `T matrix `\n$$\n    T = \n    \\begin{bmatrix}\n        1 & 0 & 0 & -\\frac{left+right}{2}\\quad \\\\\n        0 & 1 & 0& -\\frac{top+bottom}{2}\\quad  \\\\\n        0 & 0 & 1 & -\\frac{zNear+zFar}{2}\\quad  \\\\\n        0 & 0 & 0 & 1\n    \\end{bmatrix}\n$$\n\n\n    - `S matrix `\n$$\n    S = \n    \\begin{bmatrix}\n        \\frac{2}{right - left}\\quad & 0 & 0 & 0  \\\\\n        0 & \\frac{2}{top - bottom}\\quad & 0 & 0  \\\\\n        0 & 0 & \\frac{2}{zFar - zNear}\\quad & 0  \\\\\n        0 & 0 & 0 & 1\n    \\end{bmatrix}\n$$\n\n    - `Ortho Matrix`\n    $$\n        Ortho =  S \\times T =       \n        \\begin{bmatrix}\n            \\frac{2}{right - left}\\quad & 0 & 0 & 0  \\\\\n            0 & \\frac{2}{top - bottom}\\quad & 0 & 0  \\\\\n            0 & 0 & \\frac{2}{zFar - zNear}\\quad & 0  \\\\\n            0 & 0 & 0 & 1\n        \\end{bmatrix} \n        \\times \n        \\begin{bmatrix}\n            1 & 0 & 0 & -\\frac{left+right}{2}\\quad \\\\\n            0 & 1 & 0& -\\frac{top+bottom}{2}\\quad  \\\\\n            0 & 0 & 1 & -\\frac{zNear+zFar}{2}\\quad  \\\\\n            0 & 0 & 0 & 1\n        \\end{bmatrix} \\\\\n        = \\begin{bmatrix}\n                \\frac{2}{right - left}\\quad & 0 & 0 & -\\frac{left+right}{2}\\quad  \\\\\n                0 & \\frac{2}{top - bottom}\\quad & 0 & -\\frac{top+bottom}{2}\\quad  \\\\\n                0 & 0 & \\frac{2}{zFar - zNear}\\quad & -\\frac{zNear+zFar}{2}\\quad  \\\\\n                0 & 0 & 0 & 1\n        \\end{bmatrix} \n    $$\n\n### 2. 透视投影\n\n- 透视投影变换的过程可以认为是将透视投影定义的视椎体挤压成一个长方体,然后运用平行投影相似的变换(`S + T`)\n    <center>\n    <img id=\"projection2ortho\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection2ortho.png\"/>\n    </center>\n\n#### 2.1. 挤压矩阵计算\n\n![][projection_extrusion]\n- 如图[projection2ortho](#projection2ortho),从侧面上看:\n    - $\\vec{g}$ 指向`-Z`方向\n    - $d$ & $y_s$构成的三角形在$e$的角度为`fov`的一半 \n    - 压缩是将$y$压缩到$y_s$\n\n##### 2.1.1 $[X_{far},Y_{far}]$ to $[X_{near},Y_{near}]$\n\n$$\n        \\begin{pmatrix}\n        x \\\\\n        y \\\\\n        z \\\\\n        \\end{pmatrix} *  \\begin{bmatrix}\n        1 & 0 & 0 \\\\\n        0 & n & 0 \\\\\n        0 & 0 & 1 \\\\\n        \\end{bmatrix}    = \\begin{pmatrix}\n        x \\\\\n        y_s \\\\\n        z \\\\\n        \\end{pmatrix}\n$$\n\n- 由三角形相似可以得到: $\\frac{y_s}{y}\\quad=\\frac{n}{f}\\quad$ => $y_s = \\frac{n}{f}\\quad * y$\n- 同理: $\\frac{x_s}{x}\\quad$=$ \\frac{n}{f}\\quad $ => $x_s = \\frac{n}{f}\\quad * x$\n\n##### 2.1.2. 挤压过程 \n- 将一个点由透视投影的视椎体变换到正交下:\n$$\n\\begin{pmatrix}\n        x \\\\\n        y \\\\\n        z \\\\\n        1\n\\end{pmatrix} => \\begin{pmatrix}\n        \\frac{n}{f}\\quad*{x} \\\\\n        \\frac{n}{f}\\quad * y \\\\\n        {???} \\\\\n        1\n\\end{pmatrix} => \\begin{pmatrix}\n        n * x \\\\\n        n * y \\\\\n        {???} \\\\\n        f\n\\end{pmatrix}\n$$\n\n$$Mat4^{(4\\times4)}_{p->o} = \\begin{bmatrix}\n            n & 0 & 0 & 0 \\\\\n            0 & n & 0 & 0  \\\\\n        c_1 & c_2 & c_3 & c_4  \\\\\n            0 & 0 & 1 & 0\n        \\end{bmatrix}$$\n\n- 考虑当被变换的这个点在近平面中心上: \n$$\\begin{pmatrix}\n        n * x \\\\\n        n * y \\\\\n        {???} \\\\\n        f\n\\end{pmatrix} \n =>  \\begin{pmatrix} \\\\\n        x \\\\\n        y \\\\\n        n \\\\\n        1\n    \\end{pmatrix} = \\begin{pmatrix}\n        n*x \\\\\n        n*y \\\\\n        n^2 \\\\\n        n\n\\end{pmatrix}\n$$\n\n$$\n    Mat4^{(4\\times4)}_{p->o}  * \\begin{pmatrix} \n        x \\\\\n        y \\\\\n        n \\\\\n        1 \n    \\end{pmatrix} = \\begin{pmatrix} \n        n*x \\\\\n        n*y \\\\\n        n^2 \\\\\n        n \n    \\end{pmatrix}\n$$\n\n得到: $c_1 * x + c_2 * y + c_3 * n + c_4 * 1 = n^2$\n<br>\n得到: $c_3 * n + c_4 = n^2$\n\n- 同理考虑这个点落在远平面的中心:\n<br>\n得到: $c_3 * f + c_4 = f^2$\n\n- 解得: \n    - $c_3$\n        $$\n        c_3 = n + f \\\\ \n        $$\n\n    - $c_4$\n        $$\n        c_4 = -n * f\n        $$\n\n- $Mat4^{(4\\times4)}_{p->o}$\n\n$$Mat4^{(4\\times4)}_{p->o} = \\begin{bmatrix}\n            n & 0 & 0 & 0 \\\\\n            0 & n & 0 & 0  \\\\\n            0 & 0 & n + f & -n*f  \\\\\n            0 & 0 & 1 & 0\n        \\end{bmatrix}\n$$\n\n##### 2.1.3. 完整的透视变换矩阵\n\n- $Mat^{(4\\times4)}_{p->o} * Ortho^{4\\times4}_{ortho}$\n$$\nMat^{4\\times4}_{per} = \\begin{bmatrix}\n                \\frac{2*n}{right - left}\\quad & 0 & \\frac{right + left}{right - left}\\quad & -\\frac{left+right}{2}\\quad  \\\\\n                0 & \\frac{2*n}{top - bottom}\\quad & \\frac{top + bottom}{bottom - top}\\quad & 0 \\\\\n                0 & 0 & \\frac{zFar + zNear}{zNear - zFar}\\quad & -\\frac{2*zFar*zNear}{zFar - zNear}\\quad  \\\\\n                0 & 0 & 1 & 0\n        \\end{bmatrix} \n$$\n\n\n\n\n[projection2ortho]: https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection2ortho.png\n[projection_extrusion]: https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection_extrusion_computer.png\n\n\n\n","source":"_posts/透视矩阵计算.md","raw":"---\ntitle: 透视矩阵计算\ndate: 2022-09-08 21:03:38\nmathjax: true\ncategories:\n- Computer Graphics\ntags:\n- cpp\n- projection\n---\n\n在经过投影变换后，场景由三维变换到二维，这过程如何实现呢？\n关于两种不同的投影方式计算生成对应的投影矩阵，该如何计算？\n<!--more-->\n\n## 投影变换\n\n- 平行投影\n- 透视投影\n\n<center><img id=\"projection\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/projection.png\"/></center>\n\n- 当我们完成视图变换\n    - 相机被移动到世界坐标系的原点，同时场景做了同样的相对位移。\n    - 相机看向`-z`方向，我们指定了一个`up`,通过`cross`我们分别计算出三个轴向，相当远将世界坐标系做一个旋转操作，变换到$\\vec{right},\\vec{up},\\vec{look}$ - 相机右方向，上方向，观察方向，<font color=red>场景也要做相同的旋转操作</font>\n    - 下一步的操作便是投影\n- 此时，我们的场景变换到了相机描述的坐标系下。\n\n### 1. 平行投影\n\n- 我们最先要做的是定义一个视锥体。\n    - $[left,right]$\n    - $[bottom,top]$\n    - $[zNear,ZFar]$\n    - $ortho(left,right,bottom,top,zNear,zFar)$\n    - <font color=red> 由于相机朝向<code>-z</code>,实际上说<code>zNear</code> 大于<code>zFar</code></font>.\n\n- 如上图[平行投影与透视投影](#projection)所示：\n平行投影没有近大远小的视觉效果，我们可以简单的丢掉所有顶点的`Z`值，将他们挤压到一个平面上，就可以得到一个平面的图。这将会丢掉维度信息，且不可逆，将场景变为二维，同是，对于关于`XOY`平面对称的点相当不友好[`-z,z`]，所以并不是一个合适的方法。\n    - 变换矩阵:\n    $$\n        P_0 = \\begin{bmatrix}\n        1 & 0 & 0 & 0 \\\\\n        0 & 1 & 0 & 0 \\\\\n        0 & 0 & 0 & 0 \\\\\n        0 & 0 & 0 & 1\n    \\end{bmatrix}\n    $$ \n\n- 更好的做法是将场景移动到原点，然后做一次缩放，将场景的所有的顶点的坐标变换到$(x,y,z) \\in [-1,1]^3$\n    - 此时将会生成 `z-buffer`，三维场景的信息变为$[x,y]^2$的信息\n\n<center><img id=\"ortho_1\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/Ortho.png\n\"/></center>\n\n<center><img id=\"ortho_1\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/ortho_moveandscale.png\n\"/></center>\n\n- 对应矩阵\n    - `T matrix `\n$$\n    T = \n    \\begin{bmatrix}\n        1 & 0 & 0 & -\\frac{left+right}{2}\\quad \\\\\n        0 & 1 & 0& -\\frac{top+bottom}{2}\\quad  \\\\\n        0 & 0 & 1 & -\\frac{zNear+zFar}{2}\\quad  \\\\\n        0 & 0 & 0 & 1\n    \\end{bmatrix}\n$$\n\n\n    - `S matrix `\n$$\n    S = \n    \\begin{bmatrix}\n        \\frac{2}{right - left}\\quad & 0 & 0 & 0  \\\\\n        0 & \\frac{2}{top - bottom}\\quad & 0 & 0  \\\\\n        0 & 0 & \\frac{2}{zFar - zNear}\\quad & 0  \\\\\n        0 & 0 & 0 & 1\n    \\end{bmatrix}\n$$\n\n    - `Ortho Matrix`\n    $$\n        Ortho =  S \\times T =       \n        \\begin{bmatrix}\n            \\frac{2}{right - left}\\quad & 0 & 0 & 0  \\\\\n            0 & \\frac{2}{top - bottom}\\quad & 0 & 0  \\\\\n            0 & 0 & \\frac{2}{zFar - zNear}\\quad & 0  \\\\\n            0 & 0 & 0 & 1\n        \\end{bmatrix} \n        \\times \n        \\begin{bmatrix}\n            1 & 0 & 0 & -\\frac{left+right}{2}\\quad \\\\\n            0 & 1 & 0& -\\frac{top+bottom}{2}\\quad  \\\\\n            0 & 0 & 1 & -\\frac{zNear+zFar}{2}\\quad  \\\\\n            0 & 0 & 0 & 1\n        \\end{bmatrix} \\\\\n        = \\begin{bmatrix}\n                \\frac{2}{right - left}\\quad & 0 & 0 & -\\frac{left+right}{2}\\quad  \\\\\n                0 & \\frac{2}{top - bottom}\\quad & 0 & -\\frac{top+bottom}{2}\\quad  \\\\\n                0 & 0 & \\frac{2}{zFar - zNear}\\quad & -\\frac{zNear+zFar}{2}\\quad  \\\\\n                0 & 0 & 0 & 1\n        \\end{bmatrix} \n    $$\n\n### 2. 透视投影\n\n- 透视投影变换的过程可以认为是将透视投影定义的视椎体挤压成一个长方体,然后运用平行投影相似的变换(`S + T`)\n    <center>\n    <img id=\"projection2ortho\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection2ortho.png\"/>\n    </center>\n\n#### 2.1. 挤压矩阵计算\n\n![][projection_extrusion]\n- 如图[projection2ortho](#projection2ortho),从侧面上看:\n    - $\\vec{g}$ 指向`-Z`方向\n    - $d$ & $y_s$构成的三角形在$e$的角度为`fov`的一半 \n    - 压缩是将$y$压缩到$y_s$\n\n##### 2.1.1 $[X_{far},Y_{far}]$ to $[X_{near},Y_{near}]$\n\n$$\n        \\begin{pmatrix}\n        x \\\\\n        y \\\\\n        z \\\\\n        \\end{pmatrix} *  \\begin{bmatrix}\n        1 & 0 & 0 \\\\\n        0 & n & 0 \\\\\n        0 & 0 & 1 \\\\\n        \\end{bmatrix}    = \\begin{pmatrix}\n        x \\\\\n        y_s \\\\\n        z \\\\\n        \\end{pmatrix}\n$$\n\n- 由三角形相似可以得到: $\\frac{y_s}{y}\\quad=\\frac{n}{f}\\quad$ => $y_s = \\frac{n}{f}\\quad * y$\n- 同理: $\\frac{x_s}{x}\\quad$=$ \\frac{n}{f}\\quad $ => $x_s = \\frac{n}{f}\\quad * x$\n\n##### 2.1.2. 挤压过程 \n- 将一个点由透视投影的视椎体变换到正交下:\n$$\n\\begin{pmatrix}\n        x \\\\\n        y \\\\\n        z \\\\\n        1\n\\end{pmatrix} => \\begin{pmatrix}\n        \\frac{n}{f}\\quad*{x} \\\\\n        \\frac{n}{f}\\quad * y \\\\\n        {???} \\\\\n        1\n\\end{pmatrix} => \\begin{pmatrix}\n        n * x \\\\\n        n * y \\\\\n        {???} \\\\\n        f\n\\end{pmatrix}\n$$\n\n$$Mat4^{(4\\times4)}_{p->o} = \\begin{bmatrix}\n            n & 0 & 0 & 0 \\\\\n            0 & n & 0 & 0  \\\\\n        c_1 & c_2 & c_3 & c_4  \\\\\n            0 & 0 & 1 & 0\n        \\end{bmatrix}$$\n\n- 考虑当被变换的这个点在近平面中心上: \n$$\\begin{pmatrix}\n        n * x \\\\\n        n * y \\\\\n        {???} \\\\\n        f\n\\end{pmatrix} \n =>  \\begin{pmatrix} \\\\\n        x \\\\\n        y \\\\\n        n \\\\\n        1\n    \\end{pmatrix} = \\begin{pmatrix}\n        n*x \\\\\n        n*y \\\\\n        n^2 \\\\\n        n\n\\end{pmatrix}\n$$\n\n$$\n    Mat4^{(4\\times4)}_{p->o}  * \\begin{pmatrix} \n        x \\\\\n        y \\\\\n        n \\\\\n        1 \n    \\end{pmatrix} = \\begin{pmatrix} \n        n*x \\\\\n        n*y \\\\\n        n^2 \\\\\n        n \n    \\end{pmatrix}\n$$\n\n得到: $c_1 * x + c_2 * y + c_3 * n + c_4 * 1 = n^2$\n<br>\n得到: $c_3 * n + c_4 = n^2$\n\n- 同理考虑这个点落在远平面的中心:\n<br>\n得到: $c_3 * f + c_4 = f^2$\n\n- 解得: \n    - $c_3$\n        $$\n        c_3 = n + f \\\\ \n        $$\n\n    - $c_4$\n        $$\n        c_4 = -n * f\n        $$\n\n- $Mat4^{(4\\times4)}_{p->o}$\n\n$$Mat4^{(4\\times4)}_{p->o} = \\begin{bmatrix}\n            n & 0 & 0 & 0 \\\\\n            0 & n & 0 & 0  \\\\\n            0 & 0 & n + f & -n*f  \\\\\n            0 & 0 & 1 & 0\n        \\end{bmatrix}\n$$\n\n##### 2.1.3. 完整的透视变换矩阵\n\n- $Mat^{(4\\times4)}_{p->o} * Ortho^{4\\times4}_{ortho}$\n$$\nMat^{4\\times4}_{per} = \\begin{bmatrix}\n                \\frac{2*n}{right - left}\\quad & 0 & \\frac{right + left}{right - left}\\quad & -\\frac{left+right}{2}\\quad  \\\\\n                0 & \\frac{2*n}{top - bottom}\\quad & \\frac{top + bottom}{bottom - top}\\quad & 0 \\\\\n                0 & 0 & \\frac{zFar + zNear}{zNear - zFar}\\quad & -\\frac{2*zFar*zNear}{zFar - zNear}\\quad  \\\\\n                0 & 0 & 1 & 0\n        \\end{bmatrix} \n$$\n\n\n\n\n[projection2ortho]: https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection2ortho.png\n[projection_extrusion]: https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection_extrusion_computer.png\n\n\n\n","slug":"透视矩阵计算","published":1,"updated":"2022-09-25T14:29:09.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexrawt00827cdabvoggxtp","content":"<p>在经过投影变换后，场景由三维变换到二维，这过程如何实现呢？\r\n关于两种不同的投影方式计算生成对应的投影矩阵，该如何计算？\r\n<span id=\"more\"></span></p>\r\n<h2 id=\"投影变换\">投影变换</h2>\r\n<ul>\r\n<li>平行投影</li>\r\n<li>透视投影</li>\r\n</ul>\r\n<center>\r\n<img id=\"projection\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/projection.png\"/>\r\n</center>\r\n<ul>\r\n<li>当我们完成视图变换\r\n<ul>\r\n<li>相机被移动到世界坐标系的原点，同时场景做了同样的相对位移。</li>\r\n<li>相机看向<code>-z</code>方向，我们指定了一个<code>up</code>,通过<code>cross</code>我们分别计算出三个轴向，相当远将世界坐标系做一个旋转操作，变换到<span\r\nclass=\"math inline\">\\(\\vec{right},\\vec{up},\\vec{look}\\)</span> -\r\n相机右方向，上方向，观察方向，<font color=red>场景也要做相同的旋转操作</font></li>\r\n<li>下一步的操作便是投影</li>\r\n</ul></li>\r\n<li>此时，我们的场景变换到了相机描述的坐标系下。</li>\r\n</ul>\r\n<h3 id=\"平行投影\">1. 平行投影</h3>\r\n<ul>\r\n<li>我们最先要做的是定义一个视锥体。\r\n<ul>\r\n<li><span class=\"math inline\">\\([left,right]\\)</span></li>\r\n<li><span class=\"math inline\">\\([bottom,top]\\)</span></li>\r\n<li><span class=\"math inline\">\\([zNear,ZFar]\\)</span></li>\r\n<li><span\r\nclass=\"math inline\">\\(ortho(left,right,bottom,top,zNear,zFar)\\)</span></li>\r\n<li><font color=red>\r\n由于相机朝向<code>-z</code>,实际上说<code>zNear</code>\r\n大于<code>zFar</code></font>.</li>\r\n</ul></li>\r\n<li>如上图<a href=\"#projection\">平行投影与透视投影</a>所示：\r\n平行投影没有近大远小的视觉效果，我们可以简单的丢掉所有顶点的<code>Z</code>值，将他们挤压到一个平面上，就可以得到一个平面的图。这将会丢掉维度信息，且不可逆，将场景变为二维，同是，对于关于<code>XOY</code>平面对称的点相当不友好[<code>-z,z</code>]，所以并不是一个合适的方法。\r\n<ul>\r\n<li>变换矩阵: <span class=\"math display\">\\[\r\n  P_0 = \\begin{bmatrix}\r\n  1 &amp; 0 &amp; 0 &amp; 0 \\\\\r\n  0 &amp; 1 &amp; 0 &amp; 0 \\\\\r\n  0 &amp; 0 &amp; 0 &amp; 0 \\\\\r\n  0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n  \\]</span></li>\r\n</ul></li>\r\n<li>更好的做法是将场景移动到原点，然后做一次缩放，将场景的所有的顶点的坐标变换到<span\r\nclass=\"math inline\">\\((x,y,z) \\in [-1,1]^3\\)</span>\r\n<ul>\r\n<li>此时将会生成 <code>z-buffer</code>，三维场景的信息变为<span\r\nclass=\"math inline\">\\([x,y]^2\\)</span>的信息</li>\r\n</ul></li>\r\n</ul>\r\n<center>\r\n<img id=\"ortho_1\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/Ortho.png\r\n\"/>\r\n</center>\r\n<center>\r\n<img id=\"ortho_1\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/ortho_moveandscale.png\r\n\"/>\r\n</center>\r\n<ul>\r\n<li>对应矩阵\r\n<ul>\r\n<li><p><code>T matrix</code> <span class=\"math display\">\\[\r\n  T =\r\n  \\begin{bmatrix}\r\n  1 &amp; 0 &amp; 0 &amp; -\\frac{left+right}{2}\\quad \\\\\r\n  0 &amp; 1 &amp; 0&amp; -\\frac{top+bottom}{2}\\quad  \\\\\r\n  0 &amp; 0 &amp; 1 &amp; -\\frac{zNear+zFar}{2}\\quad  \\\\\r\n  0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n\\]</span></p></li>\r\n<li><p><code>S matrix</code> <span class=\"math display\">\\[\r\n  S =\r\n  \\begin{bmatrix}\r\n  \\frac{2}{right - left}\\quad &amp; 0 &amp; 0 &amp; 0  \\\\\r\n  0 &amp; \\frac{2}{top - bottom}\\quad &amp; 0 &amp; 0  \\\\\r\n  0 &amp; 0 &amp; \\frac{2}{zFar - zNear}\\quad &amp; 0  \\\\\r\n  0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n\\]</span></p></li>\r\n<li><p><code>Ortho Matrix</code> <span class=\"math display\">\\[\r\n  Ortho =  S \\times T =       \r\n  \\begin{bmatrix}\r\n      \\frac{2}{right - left}\\quad &amp; 0 &amp; 0 &amp; 0  \\\\\r\n      0 &amp; \\frac{2}{top - bottom}\\quad &amp; 0 &amp; 0  \\\\\r\n      0 &amp; 0 &amp; \\frac{2}{zFar - zNear}\\quad &amp; 0  \\\\\r\n      0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n  \\times\r\n  \\begin{bmatrix}\r\n      1 &amp; 0 &amp; 0 &amp; -\\frac{left+right}{2}\\quad \\\\\r\n      0 &amp; 1 &amp; 0&amp; -\\frac{top+bottom}{2}\\quad  \\\\\r\n      0 &amp; 0 &amp; 1 &amp; -\\frac{zNear+zFar}{2}\\quad  \\\\\r\n      0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix} \\\\\r\n  = \\begin{bmatrix}\r\n          \\frac{2}{right - left}\\quad &amp; 0 &amp; 0 &amp;\r\n-\\frac{left+right}{2}\\quad  \\\\\r\n          0 &amp; \\frac{2}{top - bottom}\\quad &amp; 0 &amp;\r\n-\\frac{top+bottom}{2}\\quad  \\\\\r\n          0 &amp; 0 &amp; \\frac{2}{zFar - zNear}\\quad &amp;\r\n-\\frac{zNear+zFar}{2}\\quad  \\\\\r\n          0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n  \\]</span></p></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"透视投影\">2. 透视投影</h3>\r\n<ul>\r\n<li>透视投影变换的过程可以认为是将透视投影定义的视椎体挤压成一个长方体,然后运用平行投影相似的变换(<code>S + T</code>)\r\n<center>\r\n<img id=\"projection2ortho\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection2ortho.png\"/>\r\n</center></li>\r\n</ul>\r\n<h4 id=\"挤压矩阵计算\">2.1. 挤压矩阵计算</h4>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection_extrusion_computer.png\" />\r\n- 如图<a href=\"#projection2ortho\">projection2ortho</a>,从侧面上看: -\r\n<span class=\"math inline\">\\(\\vec{g}\\)</span> 指向<code>-Z</code>方向 -\r\n<span class=\"math inline\">\\(d\\)</span> &amp; <span\r\nclass=\"math inline\">\\(y_s\\)</span>构成的三角形在<span\r\nclass=\"math inline\">\\(e\\)</span>的角度为<code>fov</code>的一半 -\r\n压缩是将<span class=\"math inline\">\\(y\\)</span>压缩到<span\r\nclass=\"math inline\">\\(y_s\\)</span></p>\r\n<h5 id=\"x_fary_far-to-x_neary_near\">2.1.1 <span\r\nclass=\"math inline\">\\([X_{far},Y_{far}]\\)</span> to <span\r\nclass=\"math inline\">\\([X_{near},Y_{near}]\\)</span></h5>\r\n<p><span class=\"math display\">\\[\r\n        \\begin{pmatrix}\r\n        x \\\\\r\n        y \\\\\r\n        z \\\\\r\n        \\end{pmatrix} *  \\begin{bmatrix}\r\n        1 &amp; 0 &amp; 0 \\\\\r\n        0 &amp; n &amp; 0 \\\\\r\n        0 &amp; 0 &amp; 1 \\\\\r\n        \\end{bmatrix}    = \\begin{pmatrix}\r\n        x \\\\\r\n        y_s \\\\\r\n        z \\\\\r\n        \\end{pmatrix}\r\n\\]</span></p>\r\n<ul>\r\n<li>由三角形相似可以得到: <span\r\nclass=\"math inline\">\\(\\frac{y_s}{y}\\quad=\\frac{n}{f}\\quad\\)</span> =&gt;\r\n<span class=\"math inline\">\\(y_s = \\frac{n}{f}\\quad * y\\)</span></li>\r\n<li>同理: <span class=\"math inline\">\\(\\frac{x_s}{x}\\quad\\)</span>=$ $\r\n=&gt; <span class=\"math inline\">\\(x_s = \\frac{n}{f}\\quad *\r\nx\\)</span></li>\r\n</ul>\r\n<h5 id=\"挤压过程\">2.1.2. 挤压过程</h5>\r\n<ul>\r\n<li>将一个点由透视投影的视椎体变换到正交下: <span\r\nclass=\"math display\">\\[\r\n\\begin{pmatrix}\r\n      x \\\\\r\n      y \\\\\r\n      z \\\\\r\n      1\r\n\\end{pmatrix} =&gt; \\begin{pmatrix}\r\n      \\frac{n}{f}\\quad*{x} \\\\\r\n      \\frac{n}{f}\\quad * y \\\\\r\n      {???} \\\\\r\n      1\r\n\\end{pmatrix} =&gt; \\begin{pmatrix}\r\n      n * x \\\\\r\n      n * y \\\\\r\n      {???} \\\\\r\n      f\r\n\\end{pmatrix}\r\n\\]</span></li>\r\n</ul>\r\n<p><span class=\"math display\">\\[Mat4^{(4\\times4)}_{p-&gt;o} =\r\n\\begin{bmatrix}\r\n            n &amp; 0 &amp; 0 &amp; 0 \\\\\r\n            0 &amp; n &amp; 0 &amp; 0  \\\\\r\n        c_1 &amp; c_2 &amp; c_3 &amp; c_4  \\\\\r\n            0 &amp; 0 &amp; 1 &amp; 0\r\n        \\end{bmatrix}\\]</span></p>\r\n<ul>\r\n<li>考虑当被变换的这个点在近平面中心上: <span\r\nclass=\"math display\">\\[\\begin{pmatrix}\r\n      n * x \\\\\r\n      n * y \\\\\r\n      {???} \\\\\r\n      f\r\n\\end{pmatrix}\r\n=&gt;  \\begin{pmatrix} \\\\\r\n      x \\\\\r\n      y \\\\\r\n      n \\\\\r\n      1\r\n  \\end{pmatrix} = \\begin{pmatrix}\r\n      n*x \\\\\r\n      n*y \\\\\r\n      n^2 \\\\\r\n      n\r\n\\end{pmatrix}\r\n\\]</span></li>\r\n</ul>\r\n<p><span class=\"math display\">\\[\r\n    Mat4^{(4\\times4)}_{p-&gt;o}  * \\begin{pmatrix}\r\n        x \\\\\r\n        y \\\\\r\n        n \\\\\r\n        1\r\n    \\end{pmatrix} = \\begin{pmatrix}\r\n        n*x \\\\\r\n        n*y \\\\\r\n        n^2 \\\\\r\n        n\r\n    \\end{pmatrix}\r\n\\]</span></p>\r\n<p>得到: <span class=\"math inline\">\\(c_1 * x + c_2 * y + c_3 * n + c_4 *\r\n1 = n^2\\)</span> <br> 得到: <span class=\"math inline\">\\(c_3 * n + c_4 =\r\nn^2\\)</span></p>\r\n<ul>\r\n<li><p>同理考虑这个点落在远平面的中心: <br> 得到: <span\r\nclass=\"math inline\">\\(c_3 * f + c_4 = f^2\\)</span></p></li>\r\n<li><p>解得:</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(c_3\\)</span> <span\r\nclass=\"math display\">\\[\r\n  c_3 = n + f \\\\\r\n  \\]</span></p></li>\r\n<li><p><span class=\"math inline\">\\(c_4\\)</span> <span\r\nclass=\"math display\">\\[\r\n  c_4 = -n * f\r\n  \\]</span></p></li>\r\n</ul></li>\r\n<li><p><span\r\nclass=\"math inline\">\\(Mat4^{(4\\times4)}_{p-&gt;o}\\)</span></p></li>\r\n</ul>\r\n<p><span class=\"math display\">\\[Mat4^{(4\\times4)}_{p-&gt;o} =\r\n\\begin{bmatrix}\r\n            n &amp; 0 &amp; 0 &amp; 0 \\\\\r\n            0 &amp; n &amp; 0 &amp; 0  \\\\\r\n            0 &amp; 0 &amp; n + f &amp; -n*f  \\\\\r\n            0 &amp; 0 &amp; 1 &amp; 0\r\n        \\end{bmatrix}\r\n\\]</span></p>\r\n<h5 id=\"完整的透视变换矩阵\">2.1.3. 完整的透视变换矩阵</h5>\r\n<ul>\r\n<li><span class=\"math inline\">\\(Mat^{(4\\times4)}_{p-&gt;o} *\r\nOrtho^{4\\times4}_{ortho}\\)</span> <span class=\"math display\">\\[\r\nMat^{4\\times4}_{per} = \\begin{bmatrix}\r\n              \\frac{2*n}{right - left}\\quad &amp; 0 &amp; \\frac{right +\r\nleft}{right - left}\\quad &amp; -\\frac{left+right}{2}\\quad  \\\\\r\n              0 &amp; \\frac{2*n}{top - bottom}\\quad &amp; \\frac{top +\r\nbottom}{bottom - top}\\quad &amp; 0 \\\\\r\n              0 &amp; 0 &amp; \\frac{zFar + zNear}{zNear - zFar}\\quad\r\n&amp; -\\frac{2*zFar*zNear}{zFar - zNear}\\quad  \\\\\r\n              0 &amp; 0 &amp; 1 &amp; 0\r\n      \\end{bmatrix}\r\n\\]</span></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>在经过投影变换后，场景由三维变换到二维，这过程如何实现呢？\r\n关于两种不同的投影方式计算生成对应的投影矩阵，该如何计算？","more":"</p>\r\n<h2 id=\"投影变换\">投影变换</h2>\r\n<ul>\r\n<li>平行投影</li>\r\n<li>透视投影</li>\r\n</ul>\r\n<center>\r\n<img id=\"projection\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/projection.png\"/>\r\n</center>\r\n<ul>\r\n<li>当我们完成视图变换\r\n<ul>\r\n<li>相机被移动到世界坐标系的原点，同时场景做了同样的相对位移。</li>\r\n<li>相机看向<code>-z</code>方向，我们指定了一个<code>up</code>,通过<code>cross</code>我们分别计算出三个轴向，相当远将世界坐标系做一个旋转操作，变换到<span\r\nclass=\"math inline\">\\(\\vec{right},\\vec{up},\\vec{look}\\)</span> -\r\n相机右方向，上方向，观察方向，<font color=red>场景也要做相同的旋转操作</font></li>\r\n<li>下一步的操作便是投影</li>\r\n</ul></li>\r\n<li>此时，我们的场景变换到了相机描述的坐标系下。</li>\r\n</ul>\r\n<h3 id=\"平行投影\">1. 平行投影</h3>\r\n<ul>\r\n<li>我们最先要做的是定义一个视锥体。\r\n<ul>\r\n<li><span class=\"math inline\">\\([left,right]\\)</span></li>\r\n<li><span class=\"math inline\">\\([bottom,top]\\)</span></li>\r\n<li><span class=\"math inline\">\\([zNear,ZFar]\\)</span></li>\r\n<li><span\r\nclass=\"math inline\">\\(ortho(left,right,bottom,top,zNear,zFar)\\)</span></li>\r\n<li><font color=red>\r\n由于相机朝向<code>-z</code>,实际上说<code>zNear</code>\r\n大于<code>zFar</code></font>.</li>\r\n</ul></li>\r\n<li>如上图<a href=\"#projection\">平行投影与透视投影</a>所示：\r\n平行投影没有近大远小的视觉效果，我们可以简单的丢掉所有顶点的<code>Z</code>值，将他们挤压到一个平面上，就可以得到一个平面的图。这将会丢掉维度信息，且不可逆，将场景变为二维，同是，对于关于<code>XOY</code>平面对称的点相当不友好[<code>-z,z</code>]，所以并不是一个合适的方法。\r\n<ul>\r\n<li>变换矩阵: <span class=\"math display\">\\[\r\n  P_0 = \\begin{bmatrix}\r\n  1 &amp; 0 &amp; 0 &amp; 0 \\\\\r\n  0 &amp; 1 &amp; 0 &amp; 0 \\\\\r\n  0 &amp; 0 &amp; 0 &amp; 0 \\\\\r\n  0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n  \\]</span></li>\r\n</ul></li>\r\n<li>更好的做法是将场景移动到原点，然后做一次缩放，将场景的所有的顶点的坐标变换到<span\r\nclass=\"math inline\">\\((x,y,z) \\in [-1,1]^3\\)</span>\r\n<ul>\r\n<li>此时将会生成 <code>z-buffer</code>，三维场景的信息变为<span\r\nclass=\"math inline\">\\([x,y]^2\\)</span>的信息</li>\r\n</ul></li>\r\n</ul>\r\n<center>\r\n<img id=\"ortho_1\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/Ortho.png\r\n\"/>\r\n</center>\r\n<center>\r\n<img id=\"ortho_1\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer graph/ortho_moveandscale.png\r\n\"/>\r\n</center>\r\n<ul>\r\n<li>对应矩阵\r\n<ul>\r\n<li><p><code>T matrix</code> <span class=\"math display\">\\[\r\n  T =\r\n  \\begin{bmatrix}\r\n  1 &amp; 0 &amp; 0 &amp; -\\frac{left+right}{2}\\quad \\\\\r\n  0 &amp; 1 &amp; 0&amp; -\\frac{top+bottom}{2}\\quad  \\\\\r\n  0 &amp; 0 &amp; 1 &amp; -\\frac{zNear+zFar}{2}\\quad  \\\\\r\n  0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n\\]</span></p></li>\r\n<li><p><code>S matrix</code> <span class=\"math display\">\\[\r\n  S =\r\n  \\begin{bmatrix}\r\n  \\frac{2}{right - left}\\quad &amp; 0 &amp; 0 &amp; 0  \\\\\r\n  0 &amp; \\frac{2}{top - bottom}\\quad &amp; 0 &amp; 0  \\\\\r\n  0 &amp; 0 &amp; \\frac{2}{zFar - zNear}\\quad &amp; 0  \\\\\r\n  0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n\\]</span></p></li>\r\n<li><p><code>Ortho Matrix</code> <span class=\"math display\">\\[\r\n  Ortho =  S \\times T =       \r\n  \\begin{bmatrix}\r\n      \\frac{2}{right - left}\\quad &amp; 0 &amp; 0 &amp; 0  \\\\\r\n      0 &amp; \\frac{2}{top - bottom}\\quad &amp; 0 &amp; 0  \\\\\r\n      0 &amp; 0 &amp; \\frac{2}{zFar - zNear}\\quad &amp; 0  \\\\\r\n      0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n  \\times\r\n  \\begin{bmatrix}\r\n      1 &amp; 0 &amp; 0 &amp; -\\frac{left+right}{2}\\quad \\\\\r\n      0 &amp; 1 &amp; 0&amp; -\\frac{top+bottom}{2}\\quad  \\\\\r\n      0 &amp; 0 &amp; 1 &amp; -\\frac{zNear+zFar}{2}\\quad  \\\\\r\n      0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix} \\\\\r\n  = \\begin{bmatrix}\r\n          \\frac{2}{right - left}\\quad &amp; 0 &amp; 0 &amp;\r\n-\\frac{left+right}{2}\\quad  \\\\\r\n          0 &amp; \\frac{2}{top - bottom}\\quad &amp; 0 &amp;\r\n-\\frac{top+bottom}{2}\\quad  \\\\\r\n          0 &amp; 0 &amp; \\frac{2}{zFar - zNear}\\quad &amp;\r\n-\\frac{zNear+zFar}{2}\\quad  \\\\\r\n          0 &amp; 0 &amp; 0 &amp; 1\r\n  \\end{bmatrix}\r\n  \\]</span></p></li>\r\n</ul></li>\r\n</ul>\r\n<h3 id=\"透视投影\">2. 透视投影</h3>\r\n<ul>\r\n<li>透视投影变换的过程可以认为是将透视投影定义的视椎体挤压成一个长方体,然后运用平行投影相似的变换(<code>S + T</code>)\r\n<center>\r\n<img id=\"projection2ortho\" src=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection2ortho.png\"/>\r\n</center></li>\r\n</ul>\r\n<h4 id=\"挤压矩阵计算\">2.1. 挤压矩阵计算</h4>\r\n<p><img\r\nsrc=\"https://raw.githubusercontent.com/Ranbun/images/main/blog/computer%20graph/projection_extrusion_computer.png\" />\r\n- 如图<a href=\"#projection2ortho\">projection2ortho</a>,从侧面上看: -\r\n<span class=\"math inline\">\\(\\vec{g}\\)</span> 指向<code>-Z</code>方向 -\r\n<span class=\"math inline\">\\(d\\)</span> &amp; <span\r\nclass=\"math inline\">\\(y_s\\)</span>构成的三角形在<span\r\nclass=\"math inline\">\\(e\\)</span>的角度为<code>fov</code>的一半 -\r\n压缩是将<span class=\"math inline\">\\(y\\)</span>压缩到<span\r\nclass=\"math inline\">\\(y_s\\)</span></p>\r\n<h5 id=\"x_fary_far-to-x_neary_near\">2.1.1 <span\r\nclass=\"math inline\">\\([X_{far},Y_{far}]\\)</span> to <span\r\nclass=\"math inline\">\\([X_{near},Y_{near}]\\)</span></h5>\r\n<p><span class=\"math display\">\\[\r\n        \\begin{pmatrix}\r\n        x \\\\\r\n        y \\\\\r\n        z \\\\\r\n        \\end{pmatrix} *  \\begin{bmatrix}\r\n        1 &amp; 0 &amp; 0 \\\\\r\n        0 &amp; n &amp; 0 \\\\\r\n        0 &amp; 0 &amp; 1 \\\\\r\n        \\end{bmatrix}    = \\begin{pmatrix}\r\n        x \\\\\r\n        y_s \\\\\r\n        z \\\\\r\n        \\end{pmatrix}\r\n\\]</span></p>\r\n<ul>\r\n<li>由三角形相似可以得到: <span\r\nclass=\"math inline\">\\(\\frac{y_s}{y}\\quad=\\frac{n}{f}\\quad\\)</span> =&gt;\r\n<span class=\"math inline\">\\(y_s = \\frac{n}{f}\\quad * y\\)</span></li>\r\n<li>同理: <span class=\"math inline\">\\(\\frac{x_s}{x}\\quad\\)</span>=$ $\r\n=&gt; <span class=\"math inline\">\\(x_s = \\frac{n}{f}\\quad *\r\nx\\)</span></li>\r\n</ul>\r\n<h5 id=\"挤压过程\">2.1.2. 挤压过程</h5>\r\n<ul>\r\n<li>将一个点由透视投影的视椎体变换到正交下: <span\r\nclass=\"math display\">\\[\r\n\\begin{pmatrix}\r\n      x \\\\\r\n      y \\\\\r\n      z \\\\\r\n      1\r\n\\end{pmatrix} =&gt; \\begin{pmatrix}\r\n      \\frac{n}{f}\\quad*{x} \\\\\r\n      \\frac{n}{f}\\quad * y \\\\\r\n      {???} \\\\\r\n      1\r\n\\end{pmatrix} =&gt; \\begin{pmatrix}\r\n      n * x \\\\\r\n      n * y \\\\\r\n      {???} \\\\\r\n      f\r\n\\end{pmatrix}\r\n\\]</span></li>\r\n</ul>\r\n<p><span class=\"math display\">\\[Mat4^{(4\\times4)}_{p-&gt;o} =\r\n\\begin{bmatrix}\r\n            n &amp; 0 &amp; 0 &amp; 0 \\\\\r\n            0 &amp; n &amp; 0 &amp; 0  \\\\\r\n        c_1 &amp; c_2 &amp; c_3 &amp; c_4  \\\\\r\n            0 &amp; 0 &amp; 1 &amp; 0\r\n        \\end{bmatrix}\\]</span></p>\r\n<ul>\r\n<li>考虑当被变换的这个点在近平面中心上: <span\r\nclass=\"math display\">\\[\\begin{pmatrix}\r\n      n * x \\\\\r\n      n * y \\\\\r\n      {???} \\\\\r\n      f\r\n\\end{pmatrix}\r\n=&gt;  \\begin{pmatrix} \\\\\r\n      x \\\\\r\n      y \\\\\r\n      n \\\\\r\n      1\r\n  \\end{pmatrix} = \\begin{pmatrix}\r\n      n*x \\\\\r\n      n*y \\\\\r\n      n^2 \\\\\r\n      n\r\n\\end{pmatrix}\r\n\\]</span></li>\r\n</ul>\r\n<p><span class=\"math display\">\\[\r\n    Mat4^{(4\\times4)}_{p-&gt;o}  * \\begin{pmatrix}\r\n        x \\\\\r\n        y \\\\\r\n        n \\\\\r\n        1\r\n    \\end{pmatrix} = \\begin{pmatrix}\r\n        n*x \\\\\r\n        n*y \\\\\r\n        n^2 \\\\\r\n        n\r\n    \\end{pmatrix}\r\n\\]</span></p>\r\n<p>得到: <span class=\"math inline\">\\(c_1 * x + c_2 * y + c_3 * n + c_4 *\r\n1 = n^2\\)</span> <br> 得到: <span class=\"math inline\">\\(c_3 * n + c_4 =\r\nn^2\\)</span></p>\r\n<ul>\r\n<li><p>同理考虑这个点落在远平面的中心: <br> 得到: <span\r\nclass=\"math inline\">\\(c_3 * f + c_4 = f^2\\)</span></p></li>\r\n<li><p>解得:</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(c_3\\)</span> <span\r\nclass=\"math display\">\\[\r\n  c_3 = n + f \\\\\r\n  \\]</span></p></li>\r\n<li><p><span class=\"math inline\">\\(c_4\\)</span> <span\r\nclass=\"math display\">\\[\r\n  c_4 = -n * f\r\n  \\]</span></p></li>\r\n</ul></li>\r\n<li><p><span\r\nclass=\"math inline\">\\(Mat4^{(4\\times4)}_{p-&gt;o}\\)</span></p></li>\r\n</ul>\r\n<p><span class=\"math display\">\\[Mat4^{(4\\times4)}_{p-&gt;o} =\r\n\\begin{bmatrix}\r\n            n &amp; 0 &amp; 0 &amp; 0 \\\\\r\n            0 &amp; n &amp; 0 &amp; 0  \\\\\r\n            0 &amp; 0 &amp; n + f &amp; -n*f  \\\\\r\n            0 &amp; 0 &amp; 1 &amp; 0\r\n        \\end{bmatrix}\r\n\\]</span></p>\r\n<h5 id=\"完整的透视变换矩阵\">2.1.3. 完整的透视变换矩阵</h5>\r\n<ul>\r\n<li><span class=\"math inline\">\\(Mat^{(4\\times4)}_{p-&gt;o} *\r\nOrtho^{4\\times4}_{ortho}\\)</span> <span class=\"math display\">\\[\r\nMat^{4\\times4}_{per} = \\begin{bmatrix}\r\n              \\frac{2*n}{right - left}\\quad &amp; 0 &amp; \\frac{right +\r\nleft}{right - left}\\quad &amp; -\\frac{left+right}{2}\\quad  \\\\\r\n              0 &amp; \\frac{2*n}{top - bottom}\\quad &amp; \\frac{top +\r\nbottom}{bottom - top}\\quad &amp; 0 \\\\\r\n              0 &amp; 0 &amp; \\frac{zFar + zNear}{zNear - zFar}\\quad\r\n&amp; -\\frac{2*zFar*zNear}{zFar - zNear}\\quad  \\\\\r\n              0 &amp; 0 &amp; 1 &amp; 0\r\n      \\end{bmatrix}\r\n\\]</span></li>\r\n</ul>"},{"title":"设计模式-工厂模式","date":"2022-08-19T13:01:44.000Z","_content":"\n什么是工厂模式？\n工厂顾名思义，就是创建产品。该模式封装和管理对象的创建，通俗地讲就是，你`new`一个对象的时候，直接调用工厂方法就行了。\n\n<!-- more -->\n\n## 工厂模式\n\n- 当我们需要不停的创建不同的对象的时候，我们可以通过封装接口，然后调用函数返回不同的类型的对象，这个时候我们就需要工厂模式帮我们处理此问题\n\n### 1. 简单工厂模式\n\n- 将类的初始化和创建全部交给一个工厂来完成，我们只需要告诉工厂我们需要什么即可。\n- 专门定义一个类来负责创建其他类的实例，被创建的实例通常具有共同的父类。\n- 是一种实例化对象的方式，只要输入需要实例化对象的名字，就可以通过工厂对象的相应工厂函数来制造你需要的对象。\n\n#### 1. 工厂(`Factory`)\n\n- 负责创建所有实例的内部逻辑，工厂类可以被外界直接调用，创建所需要的产品对象。\n- 创建出产品(`Product`) -> 具体的产品(`ConcreteProduct`)\n\n#### 2. 产品\n\n##### 抽象产品\n\n- 象产品角色是简单工厂模式所创建的所有对象的父类，负责描述所有实例所共有的公告接口。所创建的具体产品对象都是其派生对象。\n\n##### 具体产品\n\n- 具体产品是简单工厂模式的创建目标。每个具体产品都继承了抽象产品，需要实现定义在抽象产品中的方法。\n\n#### 3. 使用\n\n- 当我们需要创建的对象数量较多且杂的时候，我们需要使用简单工厂模式来创建对象。\n- 对象的创建过程是我们不需要去关心，我们注重的是对象的实际操作，所以，我们需要分离对象的创建和操作两部分，方便后期的程序扩展和维护。\n\n#### 4. `Code`\n\n- Product\n\n```C++\n#include <string>\nenum class product_type\n{\n    none,\n    one,\n    two\n    // ...... \n};\n\nclass Product\n{\npublic:\n    Product() = default;\n    ~Product() = default;\n    virtual const std::string & name()\n    {\n        return m_name;\n    }\nprivate:\n    std::string m_name;\n};\n\nclass ProductA final :public Product\n{\npublic:\n    ProductA() = default;\n    ~ProductA() = default;\n    virtual const std::string& name()\n    {\n        return m_name;\n    }\nprivate:\n    std::string m_name;\n};\n\nclass ProductB final :public Product\n{\npublic:\n    ProductB() = default;\n    ~ProductB() = default;\n    virtual const std::string& name()\n    {\n        return m_name;\n    }\nprivate:\n    std::string m_name;\n};\n\n\n```\n\n- Factoy.h\n\n```C++\n---\nFactoy.h\n---\nclass Factory\n{\npublic:\n    Factory() = default;\n    ~Factory() = default;\n    virtual  Product* crteateProduct(product_type & type)\n    {\n        if(type == product_type::one)\n        {\n            return new  ProductA;\n        }\n        if(type == product_type::two)\n        {\n            return new ProductB;\n        }\n        else\n        {\n            return nullptr;\n        }\n    }\n    virtual Product* crteateProduct(){};\n};\n\n```\n\n- `main`\n\n```C++\nint main()\n{\n    const auto factory = new Factory;\n    auto product_a = factory->crteateProduct(product_type::none);\n    return 0;\n}\n```\n\n### 2. 工厂方法模式\n\n#### 2.1 简介\n\n- 简单工厂模式中最大的缺点就是当我们需要创建新的产品的时候，我们需要修改工厂的`create`方法，加入必要的处理逻辑，违背了设计原则-`开闭原则`\n- 工厂方法模式中，工厂父类只是定义创建产品的接口，子类负责创建具体的产品，将具体产品的创建都延迟到子类中实现，通过子类创建具体的实例化对象。\n\n#### 实现\n\n- `concreteFactory.h`\n\n```C++\n#include \"Factory.h\"\nclass FactoryA final : public Factory\n{\npublic:\n    FactoryA() = default;\n    ~FactoryA() = default;\n    Product* crteateProduct() override\n    {\n        return new ProductA;\n    }\n};\n```\n\n- `main.cpp`\n\n```C++\n#include <iostream>\n#include \"Factory.h\"\n#include \"concreteFactory.h\"\n\nint main()\n{\n    const auto factory = new FactoryA;\n    auto product_a = factory->crteateProduct();\n    return 0;\n}\n```\n\n### 3. 抽象工厂模式\n\n- 一个特殊的工厂模式\n- 创建一个产品族\n- 待续\n","source":"_posts/设计模式-工厂模式.md","raw":"---\ntitle: 设计模式-工厂模式\ndate: 2022-08-19 21:01:44\ncategories:\n- Design Patterns\ntags:\n- cpp\n---\n\n什么是工厂模式？\n工厂顾名思义，就是创建产品。该模式封装和管理对象的创建，通俗地讲就是，你`new`一个对象的时候，直接调用工厂方法就行了。\n\n<!-- more -->\n\n## 工厂模式\n\n- 当我们需要不停的创建不同的对象的时候，我们可以通过封装接口，然后调用函数返回不同的类型的对象，这个时候我们就需要工厂模式帮我们处理此问题\n\n### 1. 简单工厂模式\n\n- 将类的初始化和创建全部交给一个工厂来完成，我们只需要告诉工厂我们需要什么即可。\n- 专门定义一个类来负责创建其他类的实例，被创建的实例通常具有共同的父类。\n- 是一种实例化对象的方式，只要输入需要实例化对象的名字，就可以通过工厂对象的相应工厂函数来制造你需要的对象。\n\n#### 1. 工厂(`Factory`)\n\n- 负责创建所有实例的内部逻辑，工厂类可以被外界直接调用，创建所需要的产品对象。\n- 创建出产品(`Product`) -> 具体的产品(`ConcreteProduct`)\n\n#### 2. 产品\n\n##### 抽象产品\n\n- 象产品角色是简单工厂模式所创建的所有对象的父类，负责描述所有实例所共有的公告接口。所创建的具体产品对象都是其派生对象。\n\n##### 具体产品\n\n- 具体产品是简单工厂模式的创建目标。每个具体产品都继承了抽象产品，需要实现定义在抽象产品中的方法。\n\n#### 3. 使用\n\n- 当我们需要创建的对象数量较多且杂的时候，我们需要使用简单工厂模式来创建对象。\n- 对象的创建过程是我们不需要去关心，我们注重的是对象的实际操作，所以，我们需要分离对象的创建和操作两部分，方便后期的程序扩展和维护。\n\n#### 4. `Code`\n\n- Product\n\n```C++\n#include <string>\nenum class product_type\n{\n    none,\n    one,\n    two\n    // ...... \n};\n\nclass Product\n{\npublic:\n    Product() = default;\n    ~Product() = default;\n    virtual const std::string & name()\n    {\n        return m_name;\n    }\nprivate:\n    std::string m_name;\n};\n\nclass ProductA final :public Product\n{\npublic:\n    ProductA() = default;\n    ~ProductA() = default;\n    virtual const std::string& name()\n    {\n        return m_name;\n    }\nprivate:\n    std::string m_name;\n};\n\nclass ProductB final :public Product\n{\npublic:\n    ProductB() = default;\n    ~ProductB() = default;\n    virtual const std::string& name()\n    {\n        return m_name;\n    }\nprivate:\n    std::string m_name;\n};\n\n\n```\n\n- Factoy.h\n\n```C++\n---\nFactoy.h\n---\nclass Factory\n{\npublic:\n    Factory() = default;\n    ~Factory() = default;\n    virtual  Product* crteateProduct(product_type & type)\n    {\n        if(type == product_type::one)\n        {\n            return new  ProductA;\n        }\n        if(type == product_type::two)\n        {\n            return new ProductB;\n        }\n        else\n        {\n            return nullptr;\n        }\n    }\n    virtual Product* crteateProduct(){};\n};\n\n```\n\n- `main`\n\n```C++\nint main()\n{\n    const auto factory = new Factory;\n    auto product_a = factory->crteateProduct(product_type::none);\n    return 0;\n}\n```\n\n### 2. 工厂方法模式\n\n#### 2.1 简介\n\n- 简单工厂模式中最大的缺点就是当我们需要创建新的产品的时候，我们需要修改工厂的`create`方法，加入必要的处理逻辑，违背了设计原则-`开闭原则`\n- 工厂方法模式中，工厂父类只是定义创建产品的接口，子类负责创建具体的产品，将具体产品的创建都延迟到子类中实现，通过子类创建具体的实例化对象。\n\n#### 实现\n\n- `concreteFactory.h`\n\n```C++\n#include \"Factory.h\"\nclass FactoryA final : public Factory\n{\npublic:\n    FactoryA() = default;\n    ~FactoryA() = default;\n    Product* crteateProduct() override\n    {\n        return new ProductA;\n    }\n};\n```\n\n- `main.cpp`\n\n```C++\n#include <iostream>\n#include \"Factory.h\"\n#include \"concreteFactory.h\"\n\nint main()\n{\n    const auto factory = new FactoryA;\n    auto product_a = factory->crteateProduct();\n    return 0;\n}\n```\n\n### 3. 抽象工厂模式\n\n- 一个特殊的工厂模式\n- 创建一个产品族\n- 待续\n","slug":"设计模式-工厂模式","published":1,"updated":"2022-09-18T15:31:36.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcexrawu00847cda423jhunt","content":"<p>什么是工厂模式？\r\n工厂顾名思义，就是创建产品。该模式封装和管理对象的创建，通俗地讲就是，你<code>new</code>一个对象的时候，直接调用工厂方法就行了。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"工厂模式\">工厂模式</h2>\r\n<ul>\r\n<li>当我们需要不停的创建不同的对象的时候，我们可以通过封装接口，然后调用函数返回不同的类型的对象，这个时候我们就需要工厂模式帮我们处理此问题</li>\r\n</ul>\r\n<h3 id=\"简单工厂模式\">1. 简单工厂模式</h3>\r\n<ul>\r\n<li>将类的初始化和创建全部交给一个工厂来完成，我们只需要告诉工厂我们需要什么即可。</li>\r\n<li>专门定义一个类来负责创建其他类的实例，被创建的实例通常具有共同的父类。</li>\r\n<li>是一种实例化对象的方式，只要输入需要实例化对象的名字，就可以通过工厂对象的相应工厂函数来制造你需要的对象。</li>\r\n</ul>\r\n<h4 id=\"工厂factory\">1. 工厂(<code>Factory</code>)</h4>\r\n<ul>\r\n<li>负责创建所有实例的内部逻辑，工厂类可以被外界直接调用，创建所需要的产品对象。</li>\r\n<li>创建出产品(<code>Product</code>) -&gt;\r\n具体的产品(<code>ConcreteProduct</code>)</li>\r\n</ul>\r\n<h4 id=\"产品\">2. 产品</h4>\r\n<h5 id=\"抽象产品\">抽象产品</h5>\r\n<ul>\r\n<li>象产品角色是简单工厂模式所创建的所有对象的父类，负责描述所有实例所共有的公告接口。所创建的具体产品对象都是其派生对象。</li>\r\n</ul>\r\n<h5 id=\"具体产品\">具体产品</h5>\r\n<ul>\r\n<li>具体产品是简单工厂模式的创建目标。每个具体产品都继承了抽象产品，需要实现定义在抽象产品中的方法。</li>\r\n</ul>\r\n<h4 id=\"使用\">3. 使用</h4>\r\n<ul>\r\n<li>当我们需要创建的对象数量较多且杂的时候，我们需要使用简单工厂模式来创建对象。</li>\r\n<li>对象的创建过程是我们不需要去关心，我们注重的是对象的实际操作，所以，我们需要分离对象的创建和操作两部分，方便后期的程序扩展和维护。</li>\r\n</ul>\r\n<h4 id=\"code\">4. <code>Code</code></h4>\r\n<ul>\r\n<li>Product</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">product_type</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    none,</span><br><span class=\"line\">    one,</span><br><span class=\"line\">    two</span><br><span class=\"line\">    <span class=\"comment\">// ...... </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Product() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~Product() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp; <span class=\"title\">name</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA</span> <span class=\"keyword\">final</span> :</span><span class=\"keyword\">public</span> Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ProductA() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~ProductA() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; <span class=\"title\">name</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB</span> <span class=\"keyword\">final</span> :</span><span class=\"keyword\">public</span> Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ProductB() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~ProductB() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; <span class=\"title\">name</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Factoy.h</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">Factoy.h</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Factory() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~Factory() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span>  Product* <span class=\"title\">crteateProduct</span><span class=\"params\">(product_type &amp; type)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == product_type::one)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span>  ProductA;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == product_type::two)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Product* <span class=\"title\">crteateProduct</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>main</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> factory = <span class=\"keyword\">new</span> Factory;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> product_a = factory-&gt;crteateProduct(product_type::none);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"工厂方法模式\">2. 工厂方法模式</h3>\r\n<h4 id=\"简介\">2.1 简介</h4>\r\n<ul>\r\n<li>简单工厂模式中最大的缺点就是当我们需要创建新的产品的时候，我们需要修改工厂的<code>create</code>方法，加入必要的处理逻辑，违背了设计原则-<code>开闭原则</code></li>\r\n<li>工厂方法模式中，工厂父类只是定义创建产品的接口，子类负责创建具体的产品，将具体产品的创建都延迟到子类中实现，通过子类创建具体的实例化对象。</li>\r\n</ul>\r\n<h4 id=\"实现\">实现</h4>\r\n<ul>\r\n<li><code>concreteFactory.h</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;Factory.h&quot;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryA</span> <span class=\"keyword\">final</span> :</span> <span class=\"keyword\">public</span> Factory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    FactoryA() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~FactoryA() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\">Product* <span class=\"title\">crteateProduct</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>main.cpp</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;Factory.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;concreteFactory.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> factory = <span class=\"keyword\">new</span> FactoryA;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> product_a = factory-&gt;crteateProduct();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"抽象工厂模式\">3. 抽象工厂模式</h3>\r\n<ul>\r\n<li>一个特殊的工厂模式</li>\r\n<li>创建一个产品族</li>\r\n<li>待续</li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>什么是工厂模式？\r\n工厂顾名思义，就是创建产品。该模式封装和管理对象的创建，通俗地讲就是，你<code>new</code>一个对象的时候，直接调用工厂方法就行了。</p>","more":"<h2 id=\"工厂模式\">工厂模式</h2>\r\n<ul>\r\n<li>当我们需要不停的创建不同的对象的时候，我们可以通过封装接口，然后调用函数返回不同的类型的对象，这个时候我们就需要工厂模式帮我们处理此问题</li>\r\n</ul>\r\n<h3 id=\"简单工厂模式\">1. 简单工厂模式</h3>\r\n<ul>\r\n<li>将类的初始化和创建全部交给一个工厂来完成，我们只需要告诉工厂我们需要什么即可。</li>\r\n<li>专门定义一个类来负责创建其他类的实例，被创建的实例通常具有共同的父类。</li>\r\n<li>是一种实例化对象的方式，只要输入需要实例化对象的名字，就可以通过工厂对象的相应工厂函数来制造你需要的对象。</li>\r\n</ul>\r\n<h4 id=\"工厂factory\">1. 工厂(<code>Factory</code>)</h4>\r\n<ul>\r\n<li>负责创建所有实例的内部逻辑，工厂类可以被外界直接调用，创建所需要的产品对象。</li>\r\n<li>创建出产品(<code>Product</code>) -&gt;\r\n具体的产品(<code>ConcreteProduct</code>)</li>\r\n</ul>\r\n<h4 id=\"产品\">2. 产品</h4>\r\n<h5 id=\"抽象产品\">抽象产品</h5>\r\n<ul>\r\n<li>象产品角色是简单工厂模式所创建的所有对象的父类，负责描述所有实例所共有的公告接口。所创建的具体产品对象都是其派生对象。</li>\r\n</ul>\r\n<h5 id=\"具体产品\">具体产品</h5>\r\n<ul>\r\n<li>具体产品是简单工厂模式的创建目标。每个具体产品都继承了抽象产品，需要实现定义在抽象产品中的方法。</li>\r\n</ul>\r\n<h4 id=\"使用\">3. 使用</h4>\r\n<ul>\r\n<li>当我们需要创建的对象数量较多且杂的时候，我们需要使用简单工厂模式来创建对象。</li>\r\n<li>对象的创建过程是我们不需要去关心，我们注重的是对象的实际操作，所以，我们需要分离对象的创建和操作两部分，方便后期的程序扩展和维护。</li>\r\n</ul>\r\n<h4 id=\"code\">4. <code>Code</code></h4>\r\n<ul>\r\n<li>Product</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">product_type</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    none,</span><br><span class=\"line\">    one,</span><br><span class=\"line\">    two</span><br><span class=\"line\">    <span class=\"comment\">// ...... </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Product() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~Product() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp; <span class=\"title\">name</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA</span> <span class=\"keyword\">final</span> :</span><span class=\"keyword\">public</span> Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ProductA() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~ProductA() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; <span class=\"title\">name</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB</span> <span class=\"keyword\">final</span> :</span><span class=\"keyword\">public</span> Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ProductB() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~ProductB() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; <span class=\"title\">name</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> m_name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>Factoy.h</li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">Factoy.h</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Factory() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~Factory() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span>  Product* <span class=\"title\">crteateProduct</span><span class=\"params\">(product_type &amp; type)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == product_type::one)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span>  ProductA;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type == product_type::two)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> Product* <span class=\"title\">crteateProduct</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>main</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> factory = <span class=\"keyword\">new</span> Factory;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> product_a = factory-&gt;crteateProduct(product_type::none);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"工厂方法模式\">2. 工厂方法模式</h3>\r\n<h4 id=\"简介\">2.1 简介</h4>\r\n<ul>\r\n<li>简单工厂模式中最大的缺点就是当我们需要创建新的产品的时候，我们需要修改工厂的<code>create</code>方法，加入必要的处理逻辑，违背了设计原则-<code>开闭原则</code></li>\r\n<li>工厂方法模式中，工厂父类只是定义创建产品的接口，子类负责创建具体的产品，将具体产品的创建都延迟到子类中实现，通过子类创建具体的实例化对象。</li>\r\n</ul>\r\n<h4 id=\"实现\">实现</h4>\r\n<ul>\r\n<li><code>concreteFactory.h</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;Factory.h&quot;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FactoryA</span> <span class=\"keyword\">final</span> :</span> <span class=\"keyword\">public</span> Factory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    FactoryA() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    ~FactoryA() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">    <span class=\"function\">Product* <span class=\"title\">crteateProduct</span><span class=\"params\">()</span> <span class=\"keyword\">override</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><code>main.cpp</code></li>\r\n</ul>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;Factory.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;concreteFactory.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> factory = <span class=\"keyword\">new</span> FactoryA;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> product_a = factory-&gt;crteateProduct();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"抽象工厂模式\">3. 抽象工厂模式</h3>\r\n<ul>\r\n<li>一个特殊的工厂模式</li>\r\n<li>创建一个产品族</li>\r\n<li>待续</li>\r\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"clcexrav300017cdaali70euc","category_id":"clcexrav600047cdaash4ekrt","_id":"clcexravj00107cdaffkeep60"},{"post_id":"clcexrav300017cdaali70euc","category_id":"clcexravg000p7cda4wgr6gwj","_id":"clcexravk00147cdah2jqdddu"},{"post_id":"clcexravh000t7cdahcyj20pq","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexravl00177cdaa09gh6c3"},{"post_id":"clcexrav9000a7cda7tswdszp","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexravm001b7cdaerf1b3ow"},{"post_id":"clcexrav500037cdab8qnhwkt","category_id":"clcexrav600047cdaash4ekrt","_id":"clcexravo001i7cda0u5b3okx"},{"post_id":"clcexrav500037cdab8qnhwkt","category_id":"clcexravg000p7cda4wgr6gwj","_id":"clcexravr001n7cda8lo2889o"},{"post_id":"clcexravm001e7cdabctt8a2k","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexravr001q7cdae90l9u17"},{"post_id":"clcexravc000f7cdadjsd4vph","category_id":"clcexravm001d7cdadb7g43a8","_id":"clcexravs001v7cda8sg34g9u"},{"post_id":"clcexravr001s7cda9fvp5j4h","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexravu00237cda1bqjc64j"},{"post_id":"clcexrav800077cdahpu866qa","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexravv00277cda3rob5n13"},{"post_id":"clcexrav800077cdahpu866qa","category_id":"clcexravs001t7cdae4en27og","_id":"clcexravw002c7cdabcog1b98"},{"post_id":"clcexravt001y7cdaeqvb46cy","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexravw002f7cda47dd86rb"},{"post_id":"clcexrave000k7cdabrrt6l4l","category_id":"clcexravt00207cda8d507v3j","_id":"clcexravx002k7cdadowz29zh"},{"post_id":"clcexravu00257cdadd0b0i77","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexravy002n7cdafkd65stl"},{"post_id":"clcexravv002a7cda1vb7bjef","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexravz002s7cdahz2ggjli"},{"post_id":"clcexravf000n7cda3j266i5a","category_id":"clcexravv00287cda787916vv","_id":"clcexraw0002v7cda4vci6ted"},{"post_id":"clcexravx002i7cda5wop0dia","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexraw100307cdaem539e6c"},{"post_id":"clcexrav900097cdaf18jaj0v","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexraw100337cda72m1h0rj"},{"post_id":"clcexrav900097cdaf18jaj0v","category_id":"clcexravs001t7cdae4en27og","_id":"clcexraw200387cda2u334y9h"},{"post_id":"clcexravy002l7cdabkvf0xy2","category_id":"clcexravv00287cda787916vv","_id":"clcexraw3003b7cdafjue4fmq"},{"post_id":"clcexravz002q7cda5qmah9ly","category_id":"clcexrav600047cdaash4ekrt","_id":"clcexraw4003f7cdack8549ad"},{"post_id":"clcexravz002q7cda5qmah9ly","category_id":"clcexravg000p7cda4wgr6gwj","_id":"clcexraw5003j7cda6fua6txx"},{"post_id":"clcexraw0002y7cda12r1bsfz","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexraw5003n7cda99am0zv5"},{"post_id":"clcexravh000r7cda4byk7f6h","category_id":"clcexraw0002w7cda7sok1yt6","_id":"clcexraw6003r7cdabbd6bwgx"},{"post_id":"clcexraw100347cda4gv149qn","category_id":"clcexravm001d7cdadb7g43a8","_id":"clcexraw7003v7cda2as7fkes"},{"post_id":"clcexravi000x7cdaemcd7b6n","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexraw8003z7cdac9w2hczn"},{"post_id":"clcexravi000x7cdaemcd7b6n","category_id":"clcexravs001t7cdae4en27og","_id":"clcexraw800437cdahpi8al1v"},{"post_id":"clcexraw300397cdadqk5csnr","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexraw900477cdagwyj5r04"},{"post_id":"clcexraw300397cdadqk5csnr","category_id":"clcexravs001t7cdae4en27og","_id":"clcexraw9004a7cdadml54h6a"},{"post_id":"clcexraw3003c7cda41y8f6mi","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexrawa004d7cda4633hsht"},{"post_id":"clcexravk00127cdaacj3cw4x","category_id":"clcexravd000g7cdae4wa022x","_id":"clcexrawa004g7cda21t9hief"},{"post_id":"clcexravk00127cdaacj3cw4x","category_id":"clcexravs001t7cdae4en27og","_id":"clcexrawa004j7cda956d44md"},{"post_id":"clcexravu00227cda0szu9760","category_id":"clcexrawd00517cdaeuo2hit3","_id":"clcexrawe005a7cda1h21d42j"},{"post_id":"clcexravz002t7cdacrz2gtd0","category_id":"clcexrawe005c7cda3tdid2yw","_id":"clcexrawe005j7cda29bn9q5x"},{"post_id":"clcexraw4003h7cda5m014x5y","category_id":"clcexrawf005o7cda61r1byr6","_id":"clcexrawg005w7cda1bhn2ecv"},{"post_id":"clcexravj000y7cdagqa21otl","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawh005z7cdabl2c9m4y"},{"post_id":"clcexravj000y7cdagqa21otl","category_id":"clcexraw7003t7cdaavnl83cf","_id":"clcexrawh00627cda5zru92rh"},{"post_id":"clcexraw6003p7cda8jj57hwk","category_id":"clcexrawg005v7cda316k7dqo","_id":"clcexrawh00657cdacs3z6e2x"},{"post_id":"clcexraw6003s7cdafuc41pfq","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawi00677cdahvu9emmo"},{"post_id":"clcexraw6003s7cdafuc41pfq","category_id":"clcexrawc004t7cdadiz82r1o","_id":"clcexrawi006b7cdag8ldci7f"},{"post_id":"clcexraw7003x7cdactd5dre0","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawi006c7cda94k56afc"},{"post_id":"clcexraw7003x7cdactd5dre0","category_id":"clcexrawh00647cdaepow8bcl","_id":"clcexrawj006g7cdaf6wy96wc"},{"post_id":"clcexraw900457cda7vri455u","category_id":"clcexrawi006e7cda3rh7765s","_id":"clcexrawk006l7cdagc3j7yvj"},{"post_id":"clcexravk00157cda8c6a30hy","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawl006q7cda59d2cyoc"},{"post_id":"clcexravk00157cda8c6a30hy","category_id":"clcexraw7003t7cdaavnl83cf","_id":"clcexrawl006s7cda3d4r77sx"},{"post_id":"clcexravk00157cda8c6a30hy","category_id":"clcexrawk006i7cda641q2mv1","_id":"clcexrawl006t7cda7vaq5l36"},{"post_id":"clcexravl001a7cdage93bdrr","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawl006v7cda6m1991oq"},{"post_id":"clcexravl001a7cdage93bdrr","category_id":"clcexraw7003t7cdaavnl83cf","_id":"clcexrawl006x7cdah5ka2mkm"},{"post_id":"clcexravl001a7cdage93bdrr","category_id":"clcexrawk006i7cda641q2mv1","_id":"clcexrawm00707cda2givbzef"},{"post_id":"clcexravd000j7cdace96gdq7","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawm00747cdahc0x9u3p"},{"post_id":"clcexravd000j7cdace96gdq7","category_id":"clcexrawc004t7cdadiz82r1o","_id":"clcexrawm00767cdagv98bv3p"},{"post_id":"clcexravd000j7cdace96gdq7","category_id":"clcexrawm00727cda0zf210te","_id":"clcexrawm00777cdaf4u81kct"},{"post_id":"clcexravs001w7cdae1bw9pa3","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawn00797cdae72ag8nl"},{"post_id":"clcexravs001w7cdae1bw9pa3","category_id":"clcexrawc004x7cdag2ce32y4","_id":"clcexrawn007a7cdah3nj6nj5"},{"post_id":"clcexravs001w7cdae1bw9pa3","category_id":"clcexrawm00737cda5nzmhfcu","_id":"clcexrawn007c7cda9ydp2div"},{"post_id":"clcexravw002d7cda37fh5dnv","category_id":"clcexrawd00567cda3oys6pqn","_id":"clcexrawn007d7cdacq8ygh3s"},{"post_id":"clcexravw002d7cda37fh5dnv","category_id":"clcexrawm00757cda84sf2d6i","_id":"clcexrawo007f7cda0ekm3x8j"},{"post_id":"clcexravg000o7cdafr9e3iv2","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawo007g7cda0tth1umq"},{"post_id":"clcexravg000o7cdafr9e3iv2","category_id":"clcexrawe005f7cdadh64dytj","_id":"clcexrawo007h7cda9lga7iyl"},{"post_id":"clcexravg000o7cdafr9e3iv2","category_id":"clcexrawm00787cda4bnf287f","_id":"clcexrawo007j7cdaayuw7f4o"},{"post_id":"clcexraw100317cda3rs7d8v3","category_id":"clcexrawf005k7cdacegmanf4","_id":"clcexrawp007k7cda2vrq9b3k"},{"post_id":"clcexraw100317cda3rs7d8v3","category_id":"clcexrawn007b7cdaa8eg1njz","_id":"clcexrawq007m7cda5c246vhi"},{"post_id":"clcexravb000e7cda0nfk6io3","category_id":"clcexravj000z7cdaebhv0ayz","_id":"clcexrawq007n7cda2v6xdh3v"},{"post_id":"clcexravb000e7cda0nfk6io3","category_id":"clcexraw7003t7cdaavnl83cf","_id":"clcexrawq007p7cda4wcm7f00"},{"post_id":"clcexravb000e7cda0nfk6io3","category_id":"clcexrawi00697cda9rtq0erg","_id":"clcexrawq007q7cda35dvbd0p"},{"post_id":"clcexravb000e7cda0nfk6io3","category_id":"clcexrawo007e7cda53jn9yq5","_id":"clcexrawq007r7cda6yl9aj33"},{"post_id":"clcexravm001c7cda6t9kdrxo","category_id":"clcexravv00287cda787916vv","_id":"clcexrawq007s7cda4kuadm0q"},{"post_id":"clcexravm001c7cda6t9kdrxo","category_id":"clcexrawl006p7cda4wi4harg","_id":"clcexrawq007t7cda01nn2dxr"},{"post_id":"clcexravm001c7cda6t9kdrxo","category_id":"clcexrawo007i7cda31gthpdl","_id":"clcexrawq007u7cda6pjhdyiu"},{"post_id":"clcexravn001h7cda35r7ghim","category_id":"clcexravv00287cda787916vv","_id":"clcexrawr007v7cda42ym5o1h"},{"post_id":"clcexravn001h7cda35r7ghim","category_id":"clcexrawl006p7cda4wi4harg","_id":"clcexrawr007w7cda2bdwhs7c"},{"post_id":"clcexravn001h7cda35r7ghim","category_id":"clcexrawo007i7cda31gthpdl","_id":"clcexrawr007x7cda5nuyexw5"},{"post_id":"clcexravo001k7cdae4h9fodt","category_id":"clcexravv00287cda787916vv","_id":"clcexrawr007y7cdab56pgql2"},{"post_id":"clcexravo001k7cdae4h9fodt","category_id":"clcexrawl006p7cda4wi4harg","_id":"clcexrawr007z7cda9k4ucb3w"},{"post_id":"clcexravo001k7cdae4h9fodt","category_id":"clcexrawo007i7cda31gthpdl","_id":"clcexrawr00807cda0sf8erua"},{"post_id":"clcexrawt00827cdabvoggxtp","category_id":"clcexrawg005v7cda316k7dqo","_id":"clcexrawu00877cda6hykedns"},{"post_id":"clcexrawu00847cda423jhunt","category_id":"clcexrawi006e7cda3rh7765s","_id":"clcexrawv008a7cda2x3n1fur"},{"post_id":"clcexraws00817cda5okc0tza","category_id":"clcexrav600047cdaash4ekrt","_id":"clcexrawv008c7cda2gq6gtn5"},{"post_id":"clcexraws00817cda5okc0tza","category_id":"clcexrawu00857cda1ubtaeli","_id":"clcexrawv008e7cda0fb6esmg"}],"PostTag":[{"post_id":"clcexrav300017cdaali70euc","tag_id":"clcexrav700057cda5kjn2i1e","_id":"clcexravb000d7cdafg299fd7"},{"post_id":"clcexrav500037cdab8qnhwkt","tag_id":"clcexrav700057cda5kjn2i1e","_id":"clcexravd000i7cda49huddab"},{"post_id":"clcexrav800077cdahpu866qa","tag_id":"clcexravd000h7cdad2jr756q","_id":"clcexravh000s7cdabidlcej9"},{"post_id":"clcexrav800077cdahpu866qa","tag_id":"clcexravf000m7cdafcmq7bj2","_id":"clcexravi000u7cda2jtv5weo"},{"post_id":"clcexrav900097cdaf18jaj0v","tag_id":"clcexravd000h7cdad2jr756q","_id":"clcexravk00137cda178b2m5y"},{"post_id":"clcexrav900097cdaf18jaj0v","tag_id":"clcexravf000m7cdafcmq7bj2","_id":"clcexravl00167cdahffo2ou1"},{"post_id":"clcexrav9000a7cda7tswdszp","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexravn001g7cdabk1y6fe7"},{"post_id":"clcexrav9000a7cda7tswdszp","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexravo001j7cdae5ai2394"},{"post_id":"clcexravm001e7cdabctt8a2k","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexravr001o7cdaej8ld68a"},{"post_id":"clcexravm001e7cdabctt8a2k","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexravr001r7cdaapwq20ea"},{"post_id":"clcexravb000e7cda0nfk6io3","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexravt001x7cdahnus1n05"},{"post_id":"clcexravb000e7cda0nfk6io3","tag_id":"clcexravp001m7cda1d83f5c0","_id":"clcexravt001z7cdacmpi6dih"},{"post_id":"clcexravr001s7cda9fvp5j4h","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexravu00247cdae1w84mk0"},{"post_id":"clcexravr001s7cda9fvp5j4h","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexravv00267cda2xovbled"},{"post_id":"clcexravc000f7cdadjsd4vph","tag_id":"clcexravs001u7cda45o146qp","_id":"clcexravw002b7cda4xxv5gr5"},{"post_id":"clcexravt001y7cdaeqvb46cy","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexravw002e7cda6qm51isy"},{"post_id":"clcexravt001y7cdaeqvb46cy","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexravx002j7cda322cdnqi"},{"post_id":"clcexravu00257cdadd0b0i77","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexravy002m7cda62j90wzl"},{"post_id":"clcexravu00257cdadd0b0i77","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexravz002r7cda767m0tix"},{"post_id":"clcexravv002a7cda1vb7bjef","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexraw0002u7cdadq6p0ona"},{"post_id":"clcexravv002a7cda1vb7bjef","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexraw0002z7cdada3fgibx"},{"post_id":"clcexravd000j7cdace96gdq7","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexraw100327cdagpsk6oow"},{"post_id":"clcexravd000j7cdace96gdq7","tag_id":"clcexravp001m7cda1d83f5c0","_id":"clcexraw200377cdaelhh5x3w"},{"post_id":"clcexravx002i7cda5wop0dia","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexraw3003a7cda76yk9n52"},{"post_id":"clcexravx002i7cda5wop0dia","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexraw4003e7cdac79k5sme"},{"post_id":"clcexrave000k7cdabrrt6l4l","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexraw4003i7cdaeihafqn9"},{"post_id":"clcexraw0002y7cda12r1bsfz","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexraw5003m7cda0w8q4p1r"},{"post_id":"clcexraw0002y7cda12r1bsfz","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexraw6003q7cda1aq3ad04"},{"post_id":"clcexravf000n7cda3j266i5a","tag_id":"clcexravy002o7cda87rs0l3q","_id":"clcexraw7003u7cdabenyfx7m"},{"post_id":"clcexravf000n7cda3j266i5a","tag_id":"clcexraw0002x7cdaat62cyj8","_id":"clcexraw8003y7cda6trpdf2n"},{"post_id":"clcexraw300397cdadqk5csnr","tag_id":"clcexravf000m7cdafcmq7bj2","_id":"clcexraw800417cda9gi44rh6"},{"post_id":"clcexravg000o7cdafr9e3iv2","tag_id":"clcexraw200367cda06ab52j5","_id":"clcexraw900467cda2bomh2or"},{"post_id":"clcexraw3003c7cda41y8f6mi","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexraw900487cdadqqedr6t"},{"post_id":"clcexraw3003c7cda41y8f6mi","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexrawa004c7cda64f04dzy"},{"post_id":"clcexraw5003k7cdab9ia8oox","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawa004e7cda3ujw7hav"},{"post_id":"clcexravh000t7cdahcyj20pq","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawa004i7cda1g5wgka7"},{"post_id":"clcexravh000t7cdahcyj20pq","tag_id":"clcexravl00197cdahxmi37jh","_id":"clcexrawb004k7cda8wbbhv15"},{"post_id":"clcexravi000x7cdaemcd7b6n","tag_id":"clcexraw7003w7cdaawzfbn5p","_id":"clcexrawb004n7cda74vt4hfj"},{"post_id":"clcexravi000x7cdaemcd7b6n","tag_id":"clcexravf000m7cdafcmq7bj2","_id":"clcexrawb004o7cda98usakie"},{"post_id":"clcexraw900457cda7vri455u","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawc004r7cdac3v8b719"},{"post_id":"clcexravj000y7cdagqa21otl","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawc004s7cdaaydbbhbl"},{"post_id":"clcexravj000y7cdagqa21otl","tag_id":"clcexravp001m7cda1d83f5c0","_id":"clcexrawc004v7cda6xyrg2h3"},{"post_id":"clcexravk00127cdaacj3cw4x","tag_id":"clcexraw7003w7cdaawzfbn5p","_id":"clcexrawc004w7cda2s2e15qz"},{"post_id":"clcexravk00127cdaacj3cw4x","tag_id":"clcexravf000m7cdafcmq7bj2","_id":"clcexrawc004z7cda5z6s48sn"},{"post_id":"clcexravk00157cda8c6a30hy","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawd00507cda7tz6f4q6"},{"post_id":"clcexravk00157cda8c6a30hy","tag_id":"clcexravp001m7cda1d83f5c0","_id":"clcexrawd00537cda4fa8cm9c"},{"post_id":"clcexravl001a7cdage93bdrr","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawd00547cdaa9yc7cry"},{"post_id":"clcexravl001a7cdage93bdrr","tag_id":"clcexravp001m7cda1d83f5c0","_id":"clcexrawd00577cdah3wmhnqa"},{"post_id":"clcexravm001c7cda6t9kdrxo","tag_id":"clcexrawc004u7cdae3bj7rje","_id":"clcexrawd00587cda5amcfqpi"},{"post_id":"clcexravn001h7cda35r7ghim","tag_id":"clcexrawc004u7cdae3bj7rje","_id":"clcexrawe005b7cda16naau54"},{"post_id":"clcexravo001k7cdae4h9fodt","tag_id":"clcexrawc004u7cdae3bj7rje","_id":"clcexrawe005d7cdac31lfv92"},{"post_id":"clcexravs001w7cdae1bw9pa3","tag_id":"clcexrawc004u7cdae3bj7rje","_id":"clcexrawe005g7cda4qwk4bnn"},{"post_id":"clcexravs001w7cdae1bw9pa3","tag_id":"clcexrawe00597cda8p4jf766","_id":"clcexrawe005h7cda4coq3ha3"},{"post_id":"clcexravu00227cda0szu9760","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawf005l7cdac3ik2cye"},{"post_id":"clcexravu00227cda0szu9760","tag_id":"clcexrawe00597cda8p4jf766","_id":"clcexrawf005m7cda3eeydqt9"},{"post_id":"clcexravw002d7cda37fh5dnv","tag_id":"clcexrawe005i7cda6vs45lgt","_id":"clcexrawf005p7cda6wh81qvz"},{"post_id":"clcexravw002d7cda37fh5dnv","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawf005q7cdaa22k49oh"},{"post_id":"clcexravy002l7cdabkvf0xy2","tag_id":"clcexrawf005n7cda7mp0djao","_id":"clcexrawg005t7cdaady558ek"},{"post_id":"clcexravz002q7cda5qmah9ly","tag_id":"clcexrawf005r7cdaa5qtga5r","_id":"clcexrawg005x7cda2zf3769w"},{"post_id":"clcexravz002t7cdacrz2gtd0","tag_id":"clcexrawg005u7cdaaub740ll","_id":"clcexrawh00617cda3b2vgh83"},{"post_id":"clcexraw100317cda3rs7d8v3","tag_id":"clcexrawg005y7cda1s7y4zb9","_id":"clcexrawi00667cda6n6k8mhs"},{"post_id":"clcexraw100347cda4gv149qn","tag_id":"clcexrawh00637cdaetywefmw","_id":"clcexrawi006a7cda7vb4gqo4"},{"post_id":"clcexraw4003h7cda5m014x5y","tag_id":"clcexrawi00687cda4f9f28ko","_id":"clcexrawj006f7cda172c1bb6"},{"post_id":"clcexraw6003p7cda8jj57hwk","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawk006j7cdahtpma51n"},{"post_id":"clcexraw6003p7cda8jj57hwk","tag_id":"clcexrawi006d7cdack1sa71o","_id":"clcexrawk006k7cda739khi03"},{"post_id":"clcexraw6003s7cdafuc41pfq","tag_id":"clcexrawk006h7cdaezytgia4","_id":"clcexrawk006o7cdado3ph5fq"},{"post_id":"clcexraw7003x7cdactd5dre0","tag_id":"clcexrawk006m7cda2f7te87y","_id":"clcexrawl006w7cdaagd98n7l"},{"post_id":"clcexraw7003x7cdactd5dre0","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawl006y7cdafixdc0c0"},{"post_id":"clcexraw7003x7cdactd5dre0","tag_id":"clcexrawl006r7cdacism2kqt","_id":"clcexrawm00717cda7ep4didq"},{"post_id":"clcexrawu00847cda423jhunt","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawu00867cdaduaq0xw3"},{"post_id":"clcexraws00817cda5okc0tza","tag_id":"clcexrawt00837cdaewyzcbug","_id":"clcexrawv00897cdaa8xw4jvx"},{"post_id":"clcexraws00817cda5okc0tza","tag_id":"clcexrawk006h7cdaezytgia4","_id":"clcexrawv008b7cda97lrdmgv"},{"post_id":"clcexrawt00827cdabvoggxtp","tag_id":"clcexravj00117cda7xqrf5hr","_id":"clcexrawv008d7cda7jel8chx"},{"post_id":"clcexrawt00827cdabvoggxtp","tag_id":"clcexrawu00887cda7mizb3hn","_id":"clcexrawv008f7cda17z9h3l9"}],"Tag":[{"name":"mylife","_id":"clcexrav700057cda5kjn2i1e"},{"name":"AABB","_id":"clcexravd000h7cdad2jr756q"},{"name":"Intersect","_id":"clcexravf000m7cdafcmq7bj2"},{"name":"cpp","_id":"clcexravj00117cda7xqrf5hr"},{"name":"sort","_id":"clcexravl00197cdahxmi37jh"},{"name":"osg","_id":"clcexravp001m7cda1d83f5c0"},{"name":"key words","_id":"clcexravs001u7cda45o146qp"},{"name":"Games202","_id":"clcexravy002o7cda87rs0l3q"},{"name":"Shadow","_id":"clcexraw0002x7cdaat62cyj8"},{"name":"Git","_id":"clcexraw200367cda06ab52j5"},{"name":"OBB","_id":"clcexraw7003w7cdaawzfbn5p"},{"name":"OpenGL","_id":"clcexrawc004u7cdae3bj7rje"},{"name":"Qt","_id":"clcexrawe00597cda8p4jf766"},{"name":"pointer","_id":"clcexrawe005i7cda6vs45lgt"},{"name":"Base","_id":"clcexrawf005n7cda7mp0djao"},{"name":"intraduce","_id":"clcexrawf005r7cdaa5qtga5r"},{"name":"fileSystem","_id":"clcexrawg005u7cdaaub740ll"},{"name":"vector","_id":"clcexrawg005y7cda1s7y4zb9"},{"name":"inherit","_id":"clcexrawh00637cdaetywefmw"},{"name":"windows","_id":"clcexrawi00687cda4f9f28ko"},{"name":"translate","_id":"clcexrawi006d7cdack1sa71o"},{"name":"conclusion","_id":"clcexrawk006h7cdaezytgia4"},{"name":"openGL","_id":"clcexrawk006m7cda2f7te87y"},{"name":"computer graphics","_id":"clcexrawl006r7cdacism2kqt"},{"name":"university","_id":"clcexrawt00837cdaewyzcbug"},{"name":"projection","_id":"clcexrawu00887cda7mizb3hn"}]}}